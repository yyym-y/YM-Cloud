{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using constructor without parentheses\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce or disallow parentheses when invoking a constructor with no arguments\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/new-parens\"\n    },\n    fixable: \"code\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"always\", \"never\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }]\n    },\n    messages: {\n      missing: \"Missing '()' invoking a constructor.\",\n      unnecessary: \"Unnecessary '()' invoking a constructor with no arguments.\"\n    }\n  },\n  create(context) {\n    const options = context.options;\n    const always = options[0] !== \"never\"; // Default is always\n\n    const sourceCode = context.getSourceCode();\n    return {\n      NewExpression(node) {\n        if (node.arguments.length !== 0) {\n          return; // if there are arguments, there have to be parens\n        }\n\n        const lastToken = sourceCode.getLastToken(node);\n        const hasLastParen = lastToken && astUtils.isClosingParenToken(lastToken);\n\n        // `hasParens` is true only if the new expression ends with its own parens, e.g., new new foo() does not end with its own parens\n        const hasParens = hasLastParen && astUtils.isOpeningParenToken(sourceCode.getTokenBefore(lastToken)) && node.callee.range[1] < node.range[1];\n        if (always) {\n          if (!hasParens) {\n            context.report({\n              node,\n              messageId: \"missing\",\n              fix: fixer => fixer.insertTextAfter(node, \"()\")\n            });\n          }\n        } else {\n          if (hasParens) {\n            context.report({\n              node,\n              messageId: \"unnecessary\",\n              fix: fixer => [fixer.remove(sourceCode.getTokenBefore(lastToken)), fixer.remove(lastToken), fixer.insertTextBefore(node, \"(\"), fixer.insertTextAfter(node, \")\")]\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","minItems","maxItems","messages","missing","unnecessary","create","context","options","always","sourceCode","getSourceCode","NewExpression","node","arguments","length","lastToken","getLastToken","hasLastParen","isClosingParenToken","hasParens","isOpeningParenToken","getTokenBefore","callee","range","report","messageId","fix","fixer","insertTextAfter","remove","insertTextBefore"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/new-parens.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using constructor without parentheses\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce or disallow parentheses when invoking a constructor with no arguments\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/new-parens\"\n        },\n\n        fixable: \"code\",\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\", \"never\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                }\n            ]\n        },\n        messages: {\n            missing: \"Missing '()' invoking a constructor.\",\n            unnecessary: \"Unnecessary '()' invoking a constructor with no arguments.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options;\n        const always = options[0] !== \"never\"; // Default is always\n\n        const sourceCode = context.getSourceCode();\n\n        return {\n            NewExpression(node) {\n                if (node.arguments.length !== 0) {\n                    return; // if there are arguments, there have to be parens\n                }\n\n                const lastToken = sourceCode.getLastToken(node);\n                const hasLastParen = lastToken && astUtils.isClosingParenToken(lastToken);\n\n                // `hasParens` is true only if the new expression ends with its own parens, e.g., new new foo() does not end with its own parens\n                const hasParens = hasLastParen &&\n                    astUtils.isOpeningParenToken(sourceCode.getTokenBefore(lastToken)) &&\n                    node.callee.range[1] < node.range[1];\n\n                if (always) {\n                    if (!hasParens) {\n                        context.report({\n                            node,\n                            messageId: \"missing\",\n                            fix: fixer => fixer.insertTextAfter(node, \"()\")\n                        });\n                    }\n                } else {\n                    if (hasParens) {\n                        context.report({\n                            node,\n                            messageId: \"unnecessary\",\n                            fix: fixer => [\n                                fixer.remove(sourceCode.getTokenBefore(lastToken)),\n                                fixer.remove(lastToken),\n                                fixer.insertTextBefore(node, \"(\"),\n                                fixer.insertTextAfter(node, \")\")\n                            ]\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,+EAA+E;MAC5FC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,MAAM;IACfC,MAAM,EAAE;MACJC,KAAK,EAAE,CACH;QACIR,IAAI,EAAE,OAAO;QACbS,KAAK,EAAE,CACH;UACIC,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO;QAC5B,CAAC,CACJ;QACDC,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE;MACd,CAAC;IAET,CAAC;IACDC,QAAQ,EAAE;MACNC,OAAO,EAAE,sCAAsC;MAC/CC,WAAW,EAAE;IACjB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO;IAC/B,MAAMC,MAAM,GAAGD,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC;;IAEvC,MAAME,UAAU,GAAGH,OAAO,CAACI,aAAa,CAAC,CAAC;IAE1C,OAAO;MACHC,aAAaA,CAACC,IAAI,EAAE;QAChB,IAAIA,IAAI,CAACC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;UAC7B,OAAO,CAAC;QACZ;;QAEA,MAAMC,SAAS,GAAGN,UAAU,CAACO,YAAY,CAACJ,IAAI,CAAC;QAC/C,MAAMK,YAAY,GAAGF,SAAS,IAAI/B,QAAQ,CAACkC,mBAAmB,CAACH,SAAS,CAAC;;QAEzE;QACA,MAAMI,SAAS,GAAGF,YAAY,IAC1BjC,QAAQ,CAACoC,mBAAmB,CAACX,UAAU,CAACY,cAAc,CAACN,SAAS,CAAC,CAAC,IAClEH,IAAI,CAACU,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,GAAGX,IAAI,CAACW,KAAK,CAAC,CAAC,CAAC;QAExC,IAAIf,MAAM,EAAE;UACR,IAAI,CAACW,SAAS,EAAE;YACZb,OAAO,CAACkB,MAAM,CAAC;cACXZ,IAAI;cACJa,SAAS,EAAE,SAAS;cACpBC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,eAAe,CAAChB,IAAI,EAAE,IAAI;YAClD,CAAC,CAAC;UACN;QACJ,CAAC,MAAM;UACH,IAAIO,SAAS,EAAE;YACXb,OAAO,CAACkB,MAAM,CAAC;cACXZ,IAAI;cACJa,SAAS,EAAE,aAAa;cACxBC,GAAG,EAAEC,KAAK,IAAI,CACVA,KAAK,CAACE,MAAM,CAACpB,UAAU,CAACY,cAAc,CAACN,SAAS,CAAC,CAAC,EAClDY,KAAK,CAACE,MAAM,CAACd,SAAS,CAAC,EACvBY,KAAK,CAACG,gBAAgB,CAAClB,IAAI,EAAE,GAAG,CAAC,EACjCe,KAAK,CAACC,eAAe,CAAChB,IAAI,EAAE,GAAG,CAAC;YAExC,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}