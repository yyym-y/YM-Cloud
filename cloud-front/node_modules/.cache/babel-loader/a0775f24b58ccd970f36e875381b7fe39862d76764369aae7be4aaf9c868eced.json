{"ast":null,"code":"/**\n * @fileoverview Rule to flag references to the undefined variable.\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `undefined` as an identifier\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-undefined\"\n    },\n    schema: [],\n    messages: {\n      unexpectedUndefined: \"Unexpected use of undefined.\"\n    }\n  },\n  create(context) {\n    /**\n     * Report an invalid \"undefined\" identifier node.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"unexpectedUndefined\"\n      });\n    }\n\n    /**\n     * Checks the given scope for references to `undefined` and reports\n     * all references found.\n     * @param {eslint-scope.Scope} scope The scope to check.\n     * @returns {void}\n     */\n    function checkScope(scope) {\n      const undefinedVar = scope.set.get(\"undefined\");\n      if (!undefinedVar) {\n        return;\n      }\n      const references = undefinedVar.references;\n      const defs = undefinedVar.defs;\n\n      // Report non-initializing references (those are covered in defs below)\n      references.filter(ref => !ref.init).forEach(ref => report(ref.identifier));\n      defs.forEach(def => report(def.name));\n    }\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        const stack = [globalScope];\n        while (stack.length) {\n          const scope = stack.pop();\n          stack.push(...scope.childScopes);\n          checkScope(scope);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpectedUndefined","create","context","report","node","messageId","checkScope","scope","undefinedVar","set","get","references","defs","filter","ref","init","forEach","identifier","def","name","Program:exit","globalScope","getScope","stack","length","pop","push","childScopes"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-undefined.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag references to the undefined variable.\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow the use of `undefined` as an identifier\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-undefined\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedUndefined: \"Unexpected use of undefined.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Report an invalid \"undefined\" identifier node.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({\n                node,\n                messageId: \"unexpectedUndefined\"\n            });\n        }\n\n        /**\n         * Checks the given scope for references to `undefined` and reports\n         * all references found.\n         * @param {eslint-scope.Scope} scope The scope to check.\n         * @returns {void}\n         */\n        function checkScope(scope) {\n            const undefinedVar = scope.set.get(\"undefined\");\n\n            if (!undefinedVar) {\n                return;\n            }\n\n            const references = undefinedVar.references;\n\n            const defs = undefinedVar.defs;\n\n            // Report non-initializing references (those are covered in defs below)\n            references\n                .filter(ref => !ref.init)\n                .forEach(ref => report(ref.identifier));\n\n            defs.forEach(def => report(def.name));\n        }\n\n        return {\n            \"Program:exit\"() {\n                const globalScope = context.getScope();\n\n                const stack = [globalScope];\n\n                while (stack.length) {\n                    const scope = stack.pop();\n\n                    stack.push(...scope.childScopes);\n                    checkScope(scope);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAAAA,OAAA;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,kDAAkD;MAC/DC,QAAQ,EAAE,WAAW;MACrBC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,mBAAmB,EAAE;IACzB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,MAAMA,CAACC,IAAI,EAAE;MAClBF,OAAO,CAACC,MAAM,CAAC;QACXC,IAAI;QACJC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,UAAUA,CAACC,KAAK,EAAE;MACvB,MAAMC,YAAY,GAAGD,KAAK,CAACE,GAAG,CAACC,GAAG,CAAC,WAAW,CAAC;MAE/C,IAAI,CAACF,YAAY,EAAE;QACf;MACJ;MAEA,MAAMG,UAAU,GAAGH,YAAY,CAACG,UAAU;MAE1C,MAAMC,IAAI,GAAGJ,YAAY,CAACI,IAAI;;MAE9B;MACAD,UAAU,CACLE,MAAM,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,IAAI,CAAC,CACxBC,OAAO,CAACF,GAAG,IAAIX,MAAM,CAACW,GAAG,CAACG,UAAU,CAAC,CAAC;MAE3CL,IAAI,CAACI,OAAO,CAACE,GAAG,IAAIf,MAAM,CAACe,GAAG,CAACC,IAAI,CAAC,CAAC;IACzC;IAEA,OAAO;MACH,cAAcC,CAAA,EAAG;QACb,MAAMC,WAAW,GAAGnB,OAAO,CAACoB,QAAQ,CAAC,CAAC;QAEtC,MAAMC,KAAK,GAAG,CAACF,WAAW,CAAC;QAE3B,OAAOE,KAAK,CAACC,MAAM,EAAE;UACjB,MAAMjB,KAAK,GAAGgB,KAAK,CAACE,GAAG,CAAC,CAAC;UAEzBF,KAAK,CAACG,IAAI,CAAC,GAAGnB,KAAK,CAACoB,WAAW,CAAC;UAChCrB,UAAU,CAACC,KAAK,CAAC;QACrB;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}