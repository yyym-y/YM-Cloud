{"ast":null,"code":"/**\n * @fileoverview A rule to set the maximum depth block can be nested in a function.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum depth that blocks can be nested\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-depth\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      tooDeeply: \"Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}.\"\n    }\n  },\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    const functionStack = [],\n      option = context.options[0];\n    let maxDepth = 4;\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      maxDepth = option.maximum || option.max;\n    }\n    if (typeof option === \"number\") {\n      maxDepth = option;\n    }\n\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n    function startFunction() {\n      functionStack.push(0);\n    }\n\n    /**\n     * When parsing is done then pop out the reference\n     * @returns {void}\n     * @private\n     */\n    function endFunction() {\n      functionStack.pop();\n    }\n\n    /**\n     * Save the block and Evaluate the node\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function pushBlock(node) {\n      const len = ++functionStack[functionStack.length - 1];\n      if (len > maxDepth) {\n        context.report({\n          node,\n          messageId: \"tooDeeply\",\n          data: {\n            depth: len,\n            maxDepth\n          }\n        });\n      }\n    }\n\n    /**\n     * Pop the saved block\n     * @returns {void}\n     * @private\n     */\n    function popBlock() {\n      functionStack[functionStack.length - 1]--;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      Program: startFunction,\n      FunctionDeclaration: startFunction,\n      FunctionExpression: startFunction,\n      ArrowFunctionExpression: startFunction,\n      IfStatement(node) {\n        if (node.parent.type !== \"IfStatement\") {\n          pushBlock(node);\n        }\n      },\n      SwitchStatement: pushBlock,\n      TryStatement: pushBlock,\n      DoWhileStatement: pushBlock,\n      WhileStatement: pushBlock,\n      WithStatement: pushBlock,\n      ForStatement: pushBlock,\n      ForInStatement: pushBlock,\n      ForOfStatement: pushBlock,\n      \"IfStatement:exit\": popBlock,\n      \"SwitchStatement:exit\": popBlock,\n      \"TryStatement:exit\": popBlock,\n      \"DoWhileStatement:exit\": popBlock,\n      \"WhileStatement:exit\": popBlock,\n      \"WithStatement:exit\": popBlock,\n      \"ForStatement:exit\": popBlock,\n      \"ForInStatement:exit\": popBlock,\n      \"ForOfStatement:exit\": popBlock,\n      \"FunctionDeclaration:exit\": endFunction,\n      \"FunctionExpression:exit\": endFunction,\n      \"ArrowFunctionExpression:exit\": endFunction,\n      \"Program:exit\": endFunction\n    };\n  }\n};","map":{"version":3,"names":["require","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","tooDeeply","create","context","functionStack","option","options","maxDepth","Object","prototype","hasOwnProperty","call","startFunction","push","endFunction","pop","pushBlock","node","len","length","report","messageId","data","depth","popBlock","Program","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","IfStatement","parent","SwitchStatement","TryStatement","DoWhileStatement","WhileStatement","WithStatement","ForStatement","ForInStatement","ForOfStatement"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/max-depth.js"],"sourcesContent":["/**\n * @fileoverview A rule to set the maximum depth block can be nested in a function.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum depth that blocks can be nested\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-depth\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            tooDeeply: \"Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        const functionStack = [],\n            option = context.options[0];\n        let maxDepth = 4;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            maxDepth = option.maximum || option.max;\n        }\n        if (typeof option === \"number\") {\n            maxDepth = option;\n        }\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            functionStack.push(0);\n        }\n\n        /**\n         * When parsing is done then pop out the reference\n         * @returns {void}\n         * @private\n         */\n        function endFunction() {\n            functionStack.pop();\n        }\n\n        /**\n         * Save the block and Evaluate the node\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function pushBlock(node) {\n            const len = ++functionStack[functionStack.length - 1];\n\n            if (len > maxDepth) {\n                context.report({ node, messageId: \"tooDeeply\", data: { depth: len, maxDepth } });\n            }\n        }\n\n        /**\n         * Pop the saved block\n         * @returns {void}\n         * @private\n         */\n        function popBlock() {\n            functionStack[functionStack.length - 1]--;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            Program: startFunction,\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n\n            IfStatement(node) {\n                if (node.parent.type !== \"IfStatement\") {\n                    pushBlock(node);\n                }\n            },\n            SwitchStatement: pushBlock,\n            TryStatement: pushBlock,\n            DoWhileStatement: pushBlock,\n            WhileStatement: pushBlock,\n            WithStatement: pushBlock,\n            ForStatement: pushBlock,\n            ForInStatement: pushBlock,\n            ForOfStatement: pushBlock,\n\n            \"IfStatement:exit\": popBlock,\n            \"SwitchStatement:exit\": popBlock,\n            \"TryStatement:exit\": popBlock,\n            \"DoWhileStatement:exit\": popBlock,\n            \"WhileStatement:exit\": popBlock,\n            \"WithStatement:exit\": popBlock,\n            \"ForStatement:exit\": popBlock,\n            \"ForInStatement:exit\": popBlock,\n            \"ForOfStatement:exit\": popBlock,\n\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n            \"Program:exit\": endFunction\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}