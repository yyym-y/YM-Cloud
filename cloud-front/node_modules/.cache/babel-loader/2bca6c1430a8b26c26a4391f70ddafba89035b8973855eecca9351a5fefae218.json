{"ast":null,"code":"/**\n * @fileoverview Rule to flag for-in loops without if statements inside\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `for-in` loops to include an `if` statement\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/guard-for-in\"\n    },\n    schema: [],\n    messages: {\n      wrap: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\"\n    }\n  },\n  create(context) {\n    return {\n      ForInStatement(node) {\n        const body = node.body;\n\n        // empty statement\n        if (body.type === \"EmptyStatement\") {\n          return;\n        }\n\n        // if statement\n        if (body.type === \"IfStatement\") {\n          return;\n        }\n\n        // empty block\n        if (body.type === \"BlockStatement\" && body.body.length === 0) {\n          return;\n        }\n\n        // block with just if statement\n        if (body.type === \"BlockStatement\" && body.body.length === 1 && body.body[0].type === \"IfStatement\") {\n          return;\n        }\n\n        // block that starts with if statement\n        if (body.type === \"BlockStatement\" && body.body.length >= 1 && body.body[0].type === \"IfStatement\") {\n          const i = body.body[0];\n\n          // ... whose consequent is a continue\n          if (i.consequent.type === \"ContinueStatement\") {\n            return;\n          }\n\n          // ... whose consequent is a block that contains only a continue\n          if (i.consequent.type === \"BlockStatement\" && i.consequent.body.length === 1 && i.consequent.body[0].type === \"ContinueStatement\") {\n            return;\n          }\n        }\n        context.report({\n          node,\n          messageId: \"wrap\"\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","wrap","create","context","ForInStatement","node","body","length","i","consequent","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/guard-for-in.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag for-in loops without if statements inside\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `for-in` loops to include an `if` statement\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/guard-for-in\"\n        },\n\n        schema: [],\n        messages: {\n            wrap: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            ForInStatement(node) {\n                const body = node.body;\n\n                // empty statement\n                if (body.type === \"EmptyStatement\") {\n                    return;\n                }\n\n                // if statement\n                if (body.type === \"IfStatement\") {\n                    return;\n                }\n\n                // empty block\n                if (body.type === \"BlockStatement\" && body.body.length === 0) {\n                    return;\n                }\n\n                // block with just if statement\n                if (body.type === \"BlockStatement\" && body.body.length === 1 && body.body[0].type === \"IfStatement\") {\n                    return;\n                }\n\n                // block that starts with if statement\n                if (body.type === \"BlockStatement\" && body.body.length >= 1 && body.body[0].type === \"IfStatement\") {\n                    const i = body.body[0];\n\n                    // ... whose consequent is a continue\n                    if (i.consequent.type === \"ContinueStatement\") {\n                        return;\n                    }\n\n                    // ... whose consequent is a block that contains only a continue\n                    if (i.consequent.type === \"BlockStatement\" && i.consequent.body.length === 1 && i.consequent.body[0].type === \"ContinueStatement\") {\n                        return;\n                    }\n                }\n\n                context.report({ node, messageId: \"wrap\" });\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,qDAAqD;MAClEC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE;MACNC,IAAI,EAAE;IACV;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,OAAO;MAEHC,cAAcA,CAACC,IAAI,EAAE;QACjB,MAAMC,IAAI,GAAGD,IAAI,CAACC,IAAI;;QAEtB;QACA,IAAIA,IAAI,CAACb,IAAI,KAAK,gBAAgB,EAAE;UAChC;QACJ;;QAEA;QACA,IAAIa,IAAI,CAACb,IAAI,KAAK,aAAa,EAAE;UAC7B;QACJ;;QAEA;QACA,IAAIa,IAAI,CAACb,IAAI,KAAK,gBAAgB,IAAIa,IAAI,CAACA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;UAC1D;QACJ;;QAEA;QACA,IAAID,IAAI,CAACb,IAAI,KAAK,gBAAgB,IAAIa,IAAI,CAACA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAID,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACb,IAAI,KAAK,aAAa,EAAE;UACjG;QACJ;;QAEA;QACA,IAAIa,IAAI,CAACb,IAAI,KAAK,gBAAgB,IAAIa,IAAI,CAACA,IAAI,CAACC,MAAM,IAAI,CAAC,IAAID,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACb,IAAI,KAAK,aAAa,EAAE;UAChG,MAAMe,CAAC,GAAGF,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;;UAEtB;UACA,IAAIE,CAAC,CAACC,UAAU,CAAChB,IAAI,KAAK,mBAAmB,EAAE;YAC3C;UACJ;;UAEA;UACA,IAAIe,CAAC,CAACC,UAAU,CAAChB,IAAI,KAAK,gBAAgB,IAAIe,CAAC,CAACC,UAAU,CAACH,IAAI,CAACC,MAAM,KAAK,CAAC,IAAIC,CAAC,CAACC,UAAU,CAACH,IAAI,CAAC,CAAC,CAAC,CAACb,IAAI,KAAK,mBAAmB,EAAE;YAC/H;UACJ;QACJ;QAEAU,OAAO,CAACO,MAAM,CAAC;UAAEL,IAAI;UAAEM,SAAS,EAAE;QAAO,CAAC,CAAC;MAC/C;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}