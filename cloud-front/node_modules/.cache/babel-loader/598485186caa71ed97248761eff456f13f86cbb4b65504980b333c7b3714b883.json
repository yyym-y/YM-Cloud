{"ast":null,"code":"/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n */\n\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing before and after commas\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/comma-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: false\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missing: \"A space is required {{loc}} ','.\",\n      unexpected: \"There should be no space {{loc}} ','.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const tokensAndComments = sourceCode.tokensAndComments;\n    const options = {\n      before: context.options[0] ? context.options[0].before : false,\n      after: context.options[0] ? context.options[0].after : true\n    };\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // list of comma tokens to ignore for the check of leading whitespace\n    const commaTokensToIgnore = [];\n\n    /**\n     * Reports a spacing error with an appropriate message.\n     * @param {ASTNode} node The binary expression node to report.\n     * @param {string} loc Is the error \"before\" or \"after\" the comma?\n     * @param {ASTNode} otherNode The node at the left or right of `node`\n     * @returns {void}\n     * @private\n     */\n    function report(node, loc, otherNode) {\n      context.report({\n        node,\n        fix(fixer) {\n          if (options[loc]) {\n            if (loc === \"before\") {\n              return fixer.insertTextBefore(node, \" \");\n            }\n            return fixer.insertTextAfter(node, \" \");\n          }\n          let start, end;\n          const newText = \"\";\n          if (loc === \"before\") {\n            start = otherNode.range[1];\n            end = node.range[0];\n          } else {\n            start = node.range[1];\n            end = otherNode.range[0];\n          }\n          return fixer.replaceTextRange([start, end], newText);\n        },\n        messageId: options[loc] ? \"missing\" : \"unexpected\",\n        data: {\n          loc\n        }\n      });\n    }\n\n    /**\n     * Validates the spacing around a comma token.\n     * @param {Object} tokens The tokens to be validated.\n     * @param {Token} tokens.comma The token representing the comma.\n     * @param {Token} [tokens.left] The last token before the comma.\n     * @param {Token} [tokens.right] The first token after the comma.\n     * @param {Token|ASTNode} reportItem The item to use when reporting an error.\n     * @returns {void}\n     * @private\n     */\n    function validateCommaItemSpacing(tokens, reportItem) {\n      if (tokens.left && astUtils.isTokenOnSameLine(tokens.left, tokens.comma) && options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma)) {\n        report(reportItem, \"before\", tokens.left);\n      }\n      if (tokens.right && astUtils.isClosingParenToken(tokens.right)) {\n        return;\n      }\n      if (tokens.right && !options.after && tokens.right.type === \"Line\") {\n        return;\n      }\n      if (tokens.right && astUtils.isTokenOnSameLine(tokens.comma, tokens.right) && options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right)) {\n        report(reportItem, \"after\", tokens.right);\n      }\n    }\n\n    /**\n     * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n     * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n     * @returns {void}\n     */\n    function addNullElementsToIgnoreList(node) {\n      let previousToken = sourceCode.getFirstToken(node);\n      node.elements.forEach(element => {\n        let token;\n        if (element === null) {\n          token = sourceCode.getTokenAfter(previousToken);\n          if (astUtils.isCommaToken(token)) {\n            commaTokensToIgnore.push(token);\n          }\n        } else {\n          token = sourceCode.getTokenAfter(element);\n        }\n        previousToken = token;\n      });\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      \"Program:exit\"() {\n        tokensAndComments.forEach((token, i) => {\n          if (!astUtils.isCommaToken(token)) {\n            return;\n          }\n          if (token && token.type === \"JSXText\") {\n            return;\n          }\n          const previousToken = tokensAndComments[i - 1];\n          const nextToken = tokensAndComments[i + 1];\n          validateCommaItemSpacing({\n            comma: token,\n            left: astUtils.isCommaToken(previousToken) || commaTokensToIgnore.includes(token) ? null : previousToken,\n            right: astUtils.isCommaToken(nextToken) ? null : nextToken\n          }, token);\n        });\n      },\n      ArrayExpression: addNullElementsToIgnoreList,\n      ArrayPattern: addNullElementsToIgnoreList\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","before","default","after","additionalProperties","messages","missing","unexpected","create","context","sourceCode","getSourceCode","tokensAndComments","options","commaTokensToIgnore","report","node","loc","otherNode","fix","fixer","insertTextBefore","insertTextAfter","start","end","newText","range","replaceTextRange","messageId","data","validateCommaItemSpacing","tokens","reportItem","left","isTokenOnSameLine","comma","isSpaceBetweenTokens","right","isClosingParenToken","addNullElementsToIgnoreList","previousToken","getFirstToken","elements","forEach","element","token","getTokenAfter","isCommaToken","push","Program:exit","i","nextToken","includes","ArrayExpression","ArrayPattern"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/comma-spacing.js"],"sourcesContent":["/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing before and after commas\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/comma-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    after: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            missing: \"A space is required {{loc}} ','.\",\n            unexpected: \"There should be no space {{loc}} ','.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.getSourceCode();\n        const tokensAndComments = sourceCode.tokensAndComments;\n\n        const options = {\n            before: context.options[0] ? context.options[0].before : false,\n            after: context.options[0] ? context.options[0].after : true\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // list of comma tokens to ignore for the check of leading whitespace\n        const commaTokensToIgnore = [];\n\n        /**\n         * Reports a spacing error with an appropriate message.\n         * @param {ASTNode} node The binary expression node to report.\n         * @param {string} loc Is the error \"before\" or \"after\" the comma?\n         * @param {ASTNode} otherNode The node at the left or right of `node`\n         * @returns {void}\n         * @private\n         */\n        function report(node, loc, otherNode) {\n            context.report({\n                node,\n                fix(fixer) {\n                    if (options[loc]) {\n                        if (loc === \"before\") {\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.insertTextAfter(node, \" \");\n\n                    }\n                    let start, end;\n                    const newText = \"\";\n\n                    if (loc === \"before\") {\n                        start = otherNode.range[1];\n                        end = node.range[0];\n                    } else {\n                        start = node.range[1];\n                        end = otherNode.range[0];\n                    }\n\n                    return fixer.replaceTextRange([start, end], newText);\n\n                },\n                messageId: options[loc] ? \"missing\" : \"unexpected\",\n                data: {\n                    loc\n                }\n            });\n        }\n\n        /**\n         * Validates the spacing around a comma token.\n         * @param {Object} tokens The tokens to be validated.\n         * @param {Token} tokens.comma The token representing the comma.\n         * @param {Token} [tokens.left] The last token before the comma.\n         * @param {Token} [tokens.right] The first token after the comma.\n         * @param {Token|ASTNode} reportItem The item to use when reporting an error.\n         * @returns {void}\n         * @private\n         */\n        function validateCommaItemSpacing(tokens, reportItem) {\n            if (tokens.left && astUtils.isTokenOnSameLine(tokens.left, tokens.comma) &&\n                    (options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma))\n            ) {\n                report(reportItem, \"before\", tokens.left);\n            }\n\n            if (tokens.right && astUtils.isClosingParenToken(tokens.right)) {\n                return;\n            }\n\n            if (tokens.right && !options.after && tokens.right.type === \"Line\") {\n                return;\n            }\n\n            if (tokens.right && astUtils.isTokenOnSameLine(tokens.comma, tokens.right) &&\n                    (options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right))\n            ) {\n                report(reportItem, \"after\", tokens.right);\n            }\n        }\n\n        /**\n         * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n         * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n         * @returns {void}\n         */\n        function addNullElementsToIgnoreList(node) {\n            let previousToken = sourceCode.getFirstToken(node);\n\n            node.elements.forEach(element => {\n                let token;\n\n                if (element === null) {\n                    token = sourceCode.getTokenAfter(previousToken);\n\n                    if (astUtils.isCommaToken(token)) {\n                        commaTokensToIgnore.push(token);\n                    }\n                } else {\n                    token = sourceCode.getTokenAfter(element);\n                }\n\n                previousToken = token;\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            \"Program:exit\"() {\n                tokensAndComments.forEach((token, i) => {\n\n                    if (!astUtils.isCommaToken(token)) {\n                        return;\n                    }\n\n                    if (token && token.type === \"JSXText\") {\n                        return;\n                    }\n\n                    const previousToken = tokensAndComments[i - 1];\n                    const nextToken = tokensAndComments[i + 1];\n\n                    validateCommaItemSpacing({\n                        comma: token,\n                        left: astUtils.isCommaToken(previousToken) || commaTokensToIgnore.includes(token) ? null : previousToken,\n                        right: astUtils.isCommaToken(nextToken) ? null : nextToken\n                    }, token);\n                });\n            },\n            ArrayExpression: addNullElementsToIgnoreList,\n            ArrayPattern: addNullElementsToIgnoreList\n\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}