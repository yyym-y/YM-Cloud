{"ast":null,"code":"/**\n * @fileoverview Rule to flag variable leak in CatchClauses in IE 8 and earlier\n * @author Ian Christian Myers\n * @deprecated in ESLint v5.1.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `catch` clause parameters from shadowing variables in the outer scope\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-catch-shadow\"\n    },\n    replacedBy: [\"no-shadow\"],\n    deprecated: true,\n    schema: [],\n    messages: {\n      mutable: \"Value of '{{name}}' may be overwritten in IE 8 and earlier.\"\n    }\n  },\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Check if the parameters are been shadowed\n     * @param {Object} scope current scope\n     * @param {string} name parameter name\n     * @returns {boolean} True is its been shadowed\n     */\n    function paramIsShadowing(scope, name) {\n      return astUtils.getVariableByName(scope, name) !== null;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      \"CatchClause[param!=null]\"(node) {\n        let scope = context.getScope();\n\n        /*\n         * When ecmaVersion >= 6, CatchClause creates its own scope\n         * so start from one upper scope to exclude the current node\n         */\n        if (scope.block === node) {\n          scope = scope.upper;\n        }\n        if (paramIsShadowing(scope, node.param.name)) {\n          context.report({\n            node,\n            messageId: \"mutable\",\n            data: {\n              name: node.param.name\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","replacedBy","deprecated","schema","messages","mutable","create","context","paramIsShadowing","scope","name","getVariableByName","CatchClause[param!=null]","node","getScope","block","upper","param","report","messageId","data"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-catch-shadow.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag variable leak in CatchClauses in IE 8 and earlier\n * @author Ian Christian Myers\n * @deprecated in ESLint v5.1.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `catch` clause parameters from shadowing variables in the outer scope\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-catch-shadow\"\n        },\n\n        replacedBy: [\"no-shadow\"],\n\n        deprecated: true,\n        schema: [],\n\n        messages: {\n            mutable: \"Value of '{{name}}' may be overwritten in IE 8 and earlier.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Check if the parameters are been shadowed\n         * @param {Object} scope current scope\n         * @param {string} name parameter name\n         * @returns {boolean} True is its been shadowed\n         */\n        function paramIsShadowing(scope, name) {\n            return astUtils.getVariableByName(scope, name) !== null;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            \"CatchClause[param!=null]\"(node) {\n                let scope = context.getScope();\n\n                /*\n                 * When ecmaVersion >= 6, CatchClause creates its own scope\n                 * so start from one upper scope to exclude the current node\n                 */\n                if (scope.block === node) {\n                    scope = scope.upper;\n                }\n\n                if (paramIsShadowing(scope, node.param.name)) {\n                    context.report({ node, messageId: \"mutable\", data: { name: node.param.name } });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,gFAAgF;MAC7FC,QAAQ,EAAE,WAAW;MACrBC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,UAAU,EAAE,CAAC,WAAW,CAAC;IAEzBC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,OAAO,EAAE;IACb;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,IAAI,EAAE;MACnC,OAAOpB,QAAQ,CAACqB,iBAAiB,CAACF,KAAK,EAAEC,IAAI,CAAC,KAAK,IAAI;IAC3D;;IAEA;IACA;IACA;;IAEA,OAAO;MAEH,0BAA0BE,CAACC,IAAI,EAAE;QAC7B,IAAIJ,KAAK,GAAGF,OAAO,CAACO,QAAQ,CAAC,CAAC;;QAE9B;AAChB;AACA;AACA;QACgB,IAAIL,KAAK,CAACM,KAAK,KAAKF,IAAI,EAAE;UACtBJ,KAAK,GAAGA,KAAK,CAACO,KAAK;QACvB;QAEA,IAAIR,gBAAgB,CAACC,KAAK,EAAEI,IAAI,CAACI,KAAK,CAACP,IAAI,CAAC,EAAE;UAC1CH,OAAO,CAACW,MAAM,CAAC;YAAEL,IAAI;YAAEM,SAAS,EAAE,SAAS;YAAEC,IAAI,EAAE;cAAEV,IAAI,EAAEG,IAAI,CAACI,KAAK,CAACP;YAAK;UAAE,CAAC,CAAC;QACnF;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}