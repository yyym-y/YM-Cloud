{"ast":null,"code":"/**\n * @fileoverview Rule to disallow unused labels.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unused labels\",\n      category: \"Best Practices\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-unused-labels\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unused: \"'{{name}}:' is defined but never used.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n\n    /**\n     * Adds a scope info to the stack.\n     * @param {ASTNode} node A node to add. This is a LabeledStatement.\n     * @returns {void}\n     */\n    function enterLabeledScope(node) {\n      scopeInfo = {\n        label: node.label.name,\n        used: false,\n        upper: scopeInfo\n      };\n    }\n\n    /**\n     * Removes the top of the stack.\n     * At the same time, this reports the label if it's never used.\n     * @param {ASTNode} node A node to report. This is a LabeledStatement.\n     * @returns {void}\n     */\n    function exitLabeledScope(node) {\n      if (!scopeInfo.used) {\n        context.report({\n          node: node.label,\n          messageId: \"unused\",\n          data: node.label,\n          fix(fixer) {\n            /*\n             * Only perform a fix if there are no comments between the label and the body. This will be the case\n             * when there is exactly one token/comment (the \":\") between the label and the body.\n             */\n            if (sourceCode.getTokenAfter(node.label, {\n              includeComments: true\n            }) === sourceCode.getTokenBefore(node.body, {\n              includeComments: true\n            })) {\n              return fixer.removeRange([node.range[0], node.body.range[0]]);\n            }\n            return null;\n          }\n        });\n      }\n      scopeInfo = scopeInfo.upper;\n    }\n\n    /**\n     * Marks the label of a given node as used.\n     * @param {ASTNode} node A node to mark. This is a BreakStatement or\n     *      ContinueStatement.\n     * @returns {void}\n     */\n    function markAsUsed(node) {\n      if (!node.label) {\n        return;\n      }\n      const label = node.label.name;\n      let info = scopeInfo;\n      while (info) {\n        if (info.label === label) {\n          info.used = true;\n          break;\n        }\n        info = info.upper;\n      }\n    }\n    return {\n      LabeledStatement: enterLabeledScope,\n      \"LabeledStatement:exit\": exitLabeledScope,\n      BreakStatement: markAsUsed,\n      ContinueStatement: markAsUsed\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","unused","create","context","sourceCode","getSourceCode","scopeInfo","enterLabeledScope","node","label","name","used","upper","exitLabeledScope","report","messageId","data","fix","fixer","getTokenAfter","includeComments","getTokenBefore","body","removeRange","range","markAsUsed","info","LabeledStatement","BreakStatement","ContinueStatement"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-unused-labels.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow unused labels.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unused labels\",\n            category: \"Best Practices\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-unused-labels\"\n        },\n\n        schema: [],\n\n        fixable: \"code\",\n\n        messages: {\n            unused: \"'{{name}}:' is defined but never used.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let scopeInfo = null;\n\n        /**\n         * Adds a scope info to the stack.\n         * @param {ASTNode} node A node to add. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function enterLabeledScope(node) {\n            scopeInfo = {\n                label: node.label.name,\n                used: false,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the top of the stack.\n         * At the same time, this reports the label if it's never used.\n         * @param {ASTNode} node A node to report. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function exitLabeledScope(node) {\n            if (!scopeInfo.used) {\n                context.report({\n                    node: node.label,\n                    messageId: \"unused\",\n                    data: node.label,\n                    fix(fixer) {\n\n                        /*\n                         * Only perform a fix if there are no comments between the label and the body. This will be the case\n                         * when there is exactly one token/comment (the \":\") between the label and the body.\n                         */\n                        if (sourceCode.getTokenAfter(node.label, { includeComments: true }) ===\n                                sourceCode.getTokenBefore(node.body, { includeComments: true })) {\n                            return fixer.removeRange([node.range[0], node.body.range[0]]);\n                        }\n\n                        return null;\n                    }\n                });\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Marks the label of a given node as used.\n         * @param {ASTNode} node A node to mark. This is a BreakStatement or\n         *      ContinueStatement.\n         * @returns {void}\n         */\n        function markAsUsed(node) {\n            if (!node.label) {\n                return;\n            }\n\n            const label = node.label.name;\n            let info = scopeInfo;\n\n            while (info) {\n                if (info.label === label) {\n                    info.used = true;\n                    break;\n                }\n                info = info.upper;\n            }\n        }\n\n        return {\n            LabeledStatement: enterLabeledScope,\n            \"LabeledStatement:exit\": exitLabeledScope,\n            BreakStatement: markAsUsed,\n            ContinueStatement: markAsUsed\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,wBAAwB;MACrCC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,OAAO,EAAE,MAAM;IAEfC,QAAQ,EAAE;MACNC,MAAM,EAAE;IACZ;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAC1C,IAAIC,SAAS,GAAG,IAAI;;IAEpB;AACR;AACA;AACA;AACA;IACQ,SAASC,iBAAiBA,CAACC,IAAI,EAAE;MAC7BF,SAAS,GAAG;QACRG,KAAK,EAAED,IAAI,CAACC,KAAK,CAACC,IAAI;QACtBC,IAAI,EAAE,KAAK;QACXC,KAAK,EAAEN;MACX,CAAC;IACL;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASO,gBAAgBA,CAACL,IAAI,EAAE;MAC5B,IAAI,CAACF,SAAS,CAACK,IAAI,EAAE;QACjBR,OAAO,CAACW,MAAM,CAAC;UACXN,IAAI,EAAEA,IAAI,CAACC,KAAK;UAChBM,SAAS,EAAE,QAAQ;UACnBC,IAAI,EAAER,IAAI,CAACC,KAAK;UAChBQ,GAAGA,CAACC,KAAK,EAAE;YAEP;AACxB;AACA;AACA;YACwB,IAAId,UAAU,CAACe,aAAa,CAACX,IAAI,CAACC,KAAK,EAAE;cAAEW,eAAe,EAAE;YAAK,CAAC,CAAC,KAC3DhB,UAAU,CAACiB,cAAc,CAACb,IAAI,CAACc,IAAI,EAAE;cAAEF,eAAe,EAAE;YAAK,CAAC,CAAC,EAAE;cACrE,OAAOF,KAAK,CAACK,WAAW,CAAC,CAACf,IAAI,CAACgB,KAAK,CAAC,CAAC,CAAC,EAAEhB,IAAI,CAACc,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjE;YAEA,OAAO,IAAI;UACf;QACJ,CAAC,CAAC;MACN;MAEAlB,SAAS,GAAGA,SAAS,CAACM,KAAK;IAC/B;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASa,UAAUA,CAACjB,IAAI,EAAE;MACtB,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;QACb;MACJ;MAEA,MAAMA,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACC,IAAI;MAC7B,IAAIgB,IAAI,GAAGpB,SAAS;MAEpB,OAAOoB,IAAI,EAAE;QACT,IAAIA,IAAI,CAACjB,KAAK,KAAKA,KAAK,EAAE;UACtBiB,IAAI,CAACf,IAAI,GAAG,IAAI;UAChB;QACJ;QACAe,IAAI,GAAGA,IAAI,CAACd,KAAK;MACrB;IACJ;IAEA,OAAO;MACHe,gBAAgB,EAAEpB,iBAAiB;MACnC,uBAAuB,EAAEM,gBAAgB;MACzCe,cAAc,EAAEH,UAAU;MAC1BI,iBAAiB,EAAEJ;IACvB,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}