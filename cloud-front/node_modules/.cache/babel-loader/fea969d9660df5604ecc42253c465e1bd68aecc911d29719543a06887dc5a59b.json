{"ast":null,"code":"'use strict';\n\nvar Type = require('../type');\nvar YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +\n// [1] year\n'-([0-9][0-9])' +\n// [2] month\n'-([0-9][0-9])$'); // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +\n// [1] year\n'-([0-9][0-9]?)' +\n// [2] month\n'-([0-9][0-9]?)' +\n// [3] day\n'(?:[Tt]|[ \\\\t]+)' +\n// ...\n'([0-9][0-9]?)' +\n// [4] hour\n':([0-9][0-9])' +\n// [5] minute\n':([0-9][0-9])' +\n// [6] second\n'(?:\\\\.([0-9]*))?' +\n// [7] fraction\n'(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' +\n// [8] tz [9] tz_sign [10] tz_hour\n'(?::([0-9][0-9]))?))?$'); // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\nfunction constructYamlTimestamp(data) {\n  var match,\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    fraction = 0,\n    delta = null,\n    tz_hour,\n    tz_minute,\n    date;\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +match[1];\n  month = +match[2] - 1; // JS month starts with 0\n  day = +match[3];\n  if (!match[4]) {\n    // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +match[4];\n  minute = +match[5];\n  second = +match[6];\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) {\n      // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +match[10];\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n  if (delta) date.setTime(date.getTime() - delta);\n  return date;\n}\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});","map":{"version":3,"names":["Type","require","YAML_DATE_REGEXP","RegExp","YAML_TIMESTAMP_REGEXP","resolveYamlTimestamp","data","exec","constructYamlTimestamp","match","year","month","day","hour","minute","second","fraction","delta","tz_hour","tz_minute","date","Error","Date","UTC","slice","length","setTime","getTime","representYamlTimestamp","object","toISOString","module","exports","kind","resolve","construct","instanceOf","represent"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/js-yaml/lib/js-yaml/type/timestamp.js"],"sourcesContent":["'use strict';\n\nvar Type = require('../type');\n\nvar YAML_DATE_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9])'                    + // [2] month\n  '-([0-9][0-9])$');                   // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9]?)'                   + // [2] month\n  '-([0-9][0-9]?)'                   + // [3] day\n  '(?:[Tt]|[ \\\\t]+)'                 + // ...\n  '([0-9][0-9]?)'                    + // [4] hour\n  ':([0-9][0-9])'                    + // [5] minute\n  ':([0-9][0-9])'                    + // [6] second\n  '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n  '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match, year, month, day, hour, minute, second, fraction = 0,\n      delta = null, tz_hour, tz_minute, date;\n\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +(match[1]);\n  month = +(match[2]) - 1; // JS month starts with 0\n  day = +(match[3]);\n\n  if (!match[4]) { // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +(match[4]);\n  minute = +(match[5]);\n  second = +(match[6]);\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) { // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +(match[10]);\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n\n  if (delta) date.setTime(date.getTime() - delta);\n\n  return date;\n}\n\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}