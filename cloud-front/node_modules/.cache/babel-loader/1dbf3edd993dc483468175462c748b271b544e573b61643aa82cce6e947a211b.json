{"ast":null,"code":"/**\n * @fileoverview Specify the maximum number of statements allowed per line.\n * @author Kenneth Williams\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce a maximum number of statements allowed per line\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-statements-per-line\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        max: {\n          type: \"integer\",\n          minimum: 1,\n          default: 1\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      exceed: \"This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode(),\n      options = context.options[0] || {},\n      maxStatementsPerLine = typeof options.max !== \"undefined\" ? options.max : 1;\n    let lastStatementLine = 0,\n      numberOfStatementsOnThisLine = 0,\n      firstExtraStatement;\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u;\n\n    /**\n     * Reports with the first extra statement, and clears it.\n     * @returns {void}\n     */\n    function reportFirstExtraStatementAndClear() {\n      if (firstExtraStatement) {\n        context.report({\n          node: firstExtraStatement,\n          messageId: \"exceed\",\n          data: {\n            numberOfStatementsOnThisLine,\n            maxStatementsPerLine,\n            statements: numberOfStatementsOnThisLine === 1 ? \"statement\" : \"statements\"\n          }\n        });\n      }\n      firstExtraStatement = null;\n    }\n\n    /**\n     * Gets the actual last token of a given node.\n     * @param {ASTNode} node A node to get. This is a node except EmptyStatement.\n     * @returns {Token} The actual last token.\n     */\n    function getActualLastToken(node) {\n      return sourceCode.getLastToken(node, astUtils.isNotSemicolonToken);\n    }\n\n    /**\n     * Addresses a given node.\n     * It updates the state of this rule, then reports the node if the node violated this rule.\n     * @param {ASTNode} node A node to check.\n     * @returns {void}\n     */\n    function enterStatement(node) {\n      const line = node.loc.start.line;\n\n      /*\n       * Skip to allow non-block statements if this is direct child of control statements.\n       * `if (a) foo();` is counted as 1.\n       * But `if (a) foo(); else foo();` should be counted as 2.\n       */\n      if (SINGLE_CHILD_ALLOWED.test(node.parent.type) && node.parent.alternate !== node) {\n        return;\n      }\n\n      // Update state.\n      if (line === lastStatementLine) {\n        numberOfStatementsOnThisLine += 1;\n      } else {\n        reportFirstExtraStatementAndClear();\n        numberOfStatementsOnThisLine = 1;\n        lastStatementLine = line;\n      }\n\n      // Reports if the node violated this rule.\n      if (numberOfStatementsOnThisLine === maxStatementsPerLine + 1) {\n        firstExtraStatement = firstExtraStatement || node;\n      }\n    }\n\n    /**\n     * Updates the state of this rule with the end line of leaving node to check with the next statement.\n     * @param {ASTNode} node A node to check.\n     * @returns {void}\n     */\n    function leaveStatement(node) {\n      const line = getActualLastToken(node).loc.end.line;\n\n      // Update state.\n      if (line !== lastStatementLine) {\n        reportFirstExtraStatementAndClear();\n        numberOfStatementsOnThisLine = 1;\n        lastStatementLine = line;\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      BreakStatement: enterStatement,\n      ClassDeclaration: enterStatement,\n      ContinueStatement: enterStatement,\n      DebuggerStatement: enterStatement,\n      DoWhileStatement: enterStatement,\n      ExpressionStatement: enterStatement,\n      ForInStatement: enterStatement,\n      ForOfStatement: enterStatement,\n      ForStatement: enterStatement,\n      FunctionDeclaration: enterStatement,\n      IfStatement: enterStatement,\n      ImportDeclaration: enterStatement,\n      LabeledStatement: enterStatement,\n      ReturnStatement: enterStatement,\n      SwitchStatement: enterStatement,\n      ThrowStatement: enterStatement,\n      TryStatement: enterStatement,\n      VariableDeclaration: enterStatement,\n      WhileStatement: enterStatement,\n      WithStatement: enterStatement,\n      ExportNamedDeclaration: enterStatement,\n      ExportDefaultDeclaration: enterStatement,\n      ExportAllDeclaration: enterStatement,\n      \"BreakStatement:exit\": leaveStatement,\n      \"ClassDeclaration:exit\": leaveStatement,\n      \"ContinueStatement:exit\": leaveStatement,\n      \"DebuggerStatement:exit\": leaveStatement,\n      \"DoWhileStatement:exit\": leaveStatement,\n      \"ExpressionStatement:exit\": leaveStatement,\n      \"ForInStatement:exit\": leaveStatement,\n      \"ForOfStatement:exit\": leaveStatement,\n      \"ForStatement:exit\": leaveStatement,\n      \"FunctionDeclaration:exit\": leaveStatement,\n      \"IfStatement:exit\": leaveStatement,\n      \"ImportDeclaration:exit\": leaveStatement,\n      \"LabeledStatement:exit\": leaveStatement,\n      \"ReturnStatement:exit\": leaveStatement,\n      \"SwitchStatement:exit\": leaveStatement,\n      \"ThrowStatement:exit\": leaveStatement,\n      \"TryStatement:exit\": leaveStatement,\n      \"VariableDeclaration:exit\": leaveStatement,\n      \"WhileStatement:exit\": leaveStatement,\n      \"WithStatement:exit\": leaveStatement,\n      \"ExportNamedDeclaration:exit\": leaveStatement,\n      \"ExportDefaultDeclaration:exit\": leaveStatement,\n      \"ExportAllDeclaration:exit\": leaveStatement,\n      \"Program:exit\": reportFirstExtraStatementAndClear\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","max","minimum","default","additionalProperties","messages","exceed","create","context","sourceCode","getSourceCode","options","maxStatementsPerLine","lastStatementLine","numberOfStatementsOnThisLine","firstExtraStatement","SINGLE_CHILD_ALLOWED","reportFirstExtraStatementAndClear","report","node","messageId","data","statements","getActualLastToken","getLastToken","isNotSemicolonToken","enterStatement","line","loc","start","test","parent","alternate","leaveStatement","end","BreakStatement","ClassDeclaration","ContinueStatement","DebuggerStatement","DoWhileStatement","ExpressionStatement","ForInStatement","ForOfStatement","ForStatement","FunctionDeclaration","IfStatement","ImportDeclaration","LabeledStatement","ReturnStatement","SwitchStatement","ThrowStatement","TryStatement","VariableDeclaration","WhileStatement","WithStatement","ExportNamedDeclaration","ExportDefaultDeclaration","ExportAllDeclaration"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/max-statements-per-line.js"],"sourcesContent":["/**\n * @fileoverview Specify the maximum number of statements allowed per line.\n * @author Kenneth Williams\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce a maximum number of statements allowed per line\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-statements-per-line\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    max: {\n                        type: \"integer\",\n                        minimum: 1,\n                        default: 1\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            exceed: \"This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.getSourceCode(),\n            options = context.options[0] || {},\n            maxStatementsPerLine = typeof options.max !== \"undefined\" ? options.max : 1;\n\n        let lastStatementLine = 0,\n            numberOfStatementsOnThisLine = 0,\n            firstExtraStatement;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u;\n\n        /**\n         * Reports with the first extra statement, and clears it.\n         * @returns {void}\n         */\n        function reportFirstExtraStatementAndClear() {\n            if (firstExtraStatement) {\n                context.report({\n                    node: firstExtraStatement,\n                    messageId: \"exceed\",\n                    data: {\n                        numberOfStatementsOnThisLine,\n                        maxStatementsPerLine,\n                        statements: numberOfStatementsOnThisLine === 1 ? \"statement\" : \"statements\"\n                    }\n                });\n            }\n            firstExtraStatement = null;\n        }\n\n        /**\n         * Gets the actual last token of a given node.\n         * @param {ASTNode} node A node to get. This is a node except EmptyStatement.\n         * @returns {Token} The actual last token.\n         */\n        function getActualLastToken(node) {\n            return sourceCode.getLastToken(node, astUtils.isNotSemicolonToken);\n        }\n\n        /**\n         * Addresses a given node.\n         * It updates the state of this rule, then reports the node if the node violated this rule.\n         * @param {ASTNode} node A node to check.\n         * @returns {void}\n         */\n        function enterStatement(node) {\n            const line = node.loc.start.line;\n\n            /*\n             * Skip to allow non-block statements if this is direct child of control statements.\n             * `if (a) foo();` is counted as 1.\n             * But `if (a) foo(); else foo();` should be counted as 2.\n             */\n            if (SINGLE_CHILD_ALLOWED.test(node.parent.type) &&\n                node.parent.alternate !== node\n            ) {\n                return;\n            }\n\n            // Update state.\n            if (line === lastStatementLine) {\n                numberOfStatementsOnThisLine += 1;\n            } else {\n                reportFirstExtraStatementAndClear();\n                numberOfStatementsOnThisLine = 1;\n                lastStatementLine = line;\n            }\n\n            // Reports if the node violated this rule.\n            if (numberOfStatementsOnThisLine === maxStatementsPerLine + 1) {\n                firstExtraStatement = firstExtraStatement || node;\n            }\n        }\n\n        /**\n         * Updates the state of this rule with the end line of leaving node to check with the next statement.\n         * @param {ASTNode} node A node to check.\n         * @returns {void}\n         */\n        function leaveStatement(node) {\n            const line = getActualLastToken(node).loc.end.line;\n\n            // Update state.\n            if (line !== lastStatementLine) {\n                reportFirstExtraStatementAndClear();\n                numberOfStatementsOnThisLine = 1;\n                lastStatementLine = line;\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            BreakStatement: enterStatement,\n            ClassDeclaration: enterStatement,\n            ContinueStatement: enterStatement,\n            DebuggerStatement: enterStatement,\n            DoWhileStatement: enterStatement,\n            ExpressionStatement: enterStatement,\n            ForInStatement: enterStatement,\n            ForOfStatement: enterStatement,\n            ForStatement: enterStatement,\n            FunctionDeclaration: enterStatement,\n            IfStatement: enterStatement,\n            ImportDeclaration: enterStatement,\n            LabeledStatement: enterStatement,\n            ReturnStatement: enterStatement,\n            SwitchStatement: enterStatement,\n            ThrowStatement: enterStatement,\n            TryStatement: enterStatement,\n            VariableDeclaration: enterStatement,\n            WhileStatement: enterStatement,\n            WithStatement: enterStatement,\n            ExportNamedDeclaration: enterStatement,\n            ExportDefaultDeclaration: enterStatement,\n            ExportAllDeclaration: enterStatement,\n\n            \"BreakStatement:exit\": leaveStatement,\n            \"ClassDeclaration:exit\": leaveStatement,\n            \"ContinueStatement:exit\": leaveStatement,\n            \"DebuggerStatement:exit\": leaveStatement,\n            \"DoWhileStatement:exit\": leaveStatement,\n            \"ExpressionStatement:exit\": leaveStatement,\n            \"ForInStatement:exit\": leaveStatement,\n            \"ForOfStatement:exit\": leaveStatement,\n            \"ForStatement:exit\": leaveStatement,\n            \"FunctionDeclaration:exit\": leaveStatement,\n            \"IfStatement:exit\": leaveStatement,\n            \"ImportDeclaration:exit\": leaveStatement,\n            \"LabeledStatement:exit\": leaveStatement,\n            \"ReturnStatement:exit\": leaveStatement,\n            \"SwitchStatement:exit\": leaveStatement,\n            \"ThrowStatement:exit\": leaveStatement,\n            \"TryStatement:exit\": leaveStatement,\n            \"VariableDeclaration:exit\": leaveStatement,\n            \"WhileStatement:exit\": leaveStatement,\n            \"WithStatement:exit\": leaveStatement,\n            \"ExportNamedDeclaration:exit\": leaveStatement,\n            \"ExportDefaultDeclaration:exit\": leaveStatement,\n            \"ExportAllDeclaration:exit\": leaveStatement,\n            \"Program:exit\": reportFirstExtraStatementAndClear\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,yDAAyD;MACtEC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIN,IAAI,EAAE,QAAQ;MACdO,UAAU,EAAE;QACRC,GAAG,EAAE;UACDR,IAAI,EAAE,SAAS;UACfS,OAAO,EAAE,CAAC;UACVC,OAAO,EAAE;QACb;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IACDC,QAAQ,EAAE;MACNC,MAAM,EAAE;IACZ;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;MACtCC,OAAO,GAAGH,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MAClCC,oBAAoB,GAAG,OAAOD,OAAO,CAACV,GAAG,KAAK,WAAW,GAAGU,OAAO,CAACV,GAAG,GAAG,CAAC;IAE/E,IAAIY,iBAAiB,GAAG,CAAC;MACrBC,4BAA4B,GAAG,CAAC;MAChCC,mBAAmB;;IAEvB;IACA;IACA;;IAEA,MAAMC,oBAAoB,GAAG,iGAAiG;;IAE9H;AACR;AACA;AACA;IACQ,SAASC,iCAAiCA,CAAA,EAAG;MACzC,IAAIF,mBAAmB,EAAE;QACrBP,OAAO,CAACU,MAAM,CAAC;UACXC,IAAI,EAAEJ,mBAAmB;UACzBK,SAAS,EAAE,QAAQ;UACnBC,IAAI,EAAE;YACFP,4BAA4B;YAC5BF,oBAAoB;YACpBU,UAAU,EAAER,4BAA4B,KAAK,CAAC,GAAG,WAAW,GAAG;UACnE;QACJ,CAAC,CAAC;MACN;MACAC,mBAAmB,GAAG,IAAI;IAC9B;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASQ,kBAAkBA,CAACJ,IAAI,EAAE;MAC9B,OAAOV,UAAU,CAACe,YAAY,CAACL,IAAI,EAAE/B,QAAQ,CAACqC,mBAAmB,CAAC;IACtE;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,cAAcA,CAACP,IAAI,EAAE;MAC1B,MAAMQ,IAAI,GAAGR,IAAI,CAACS,GAAG,CAACC,KAAK,CAACF,IAAI;;MAEhC;AACZ;AACA;AACA;AACA;MACY,IAAIX,oBAAoB,CAACc,IAAI,CAACX,IAAI,CAACY,MAAM,CAACtC,IAAI,CAAC,IAC3C0B,IAAI,CAACY,MAAM,CAACC,SAAS,KAAKb,IAAI,EAChC;QACE;MACJ;;MAEA;MACA,IAAIQ,IAAI,KAAKd,iBAAiB,EAAE;QAC5BC,4BAA4B,IAAI,CAAC;MACrC,CAAC,MAAM;QACHG,iCAAiC,CAAC,CAAC;QACnCH,4BAA4B,GAAG,CAAC;QAChCD,iBAAiB,GAAGc,IAAI;MAC5B;;MAEA;MACA,IAAIb,4BAA4B,KAAKF,oBAAoB,GAAG,CAAC,EAAE;QAC3DG,mBAAmB,GAAGA,mBAAmB,IAAII,IAAI;MACrD;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASc,cAAcA,CAACd,IAAI,EAAE;MAC1B,MAAMQ,IAAI,GAAGJ,kBAAkB,CAACJ,IAAI,CAAC,CAACS,GAAG,CAACM,GAAG,CAACP,IAAI;;MAElD;MACA,IAAIA,IAAI,KAAKd,iBAAiB,EAAE;QAC5BI,iCAAiC,CAAC,CAAC;QACnCH,4BAA4B,GAAG,CAAC;QAChCD,iBAAiB,GAAGc,IAAI;MAC5B;IACJ;;IAEA;IACA;IACA;;IAEA,OAAO;MACHQ,cAAc,EAAET,cAAc;MAC9BU,gBAAgB,EAAEV,cAAc;MAChCW,iBAAiB,EAAEX,cAAc;MACjCY,iBAAiB,EAAEZ,cAAc;MACjCa,gBAAgB,EAAEb,cAAc;MAChCc,mBAAmB,EAAEd,cAAc;MACnCe,cAAc,EAAEf,cAAc;MAC9BgB,cAAc,EAAEhB,cAAc;MAC9BiB,YAAY,EAAEjB,cAAc;MAC5BkB,mBAAmB,EAAElB,cAAc;MACnCmB,WAAW,EAAEnB,cAAc;MAC3BoB,iBAAiB,EAAEpB,cAAc;MACjCqB,gBAAgB,EAAErB,cAAc;MAChCsB,eAAe,EAAEtB,cAAc;MAC/BuB,eAAe,EAAEvB,cAAc;MAC/BwB,cAAc,EAAExB,cAAc;MAC9ByB,YAAY,EAAEzB,cAAc;MAC5B0B,mBAAmB,EAAE1B,cAAc;MACnC2B,cAAc,EAAE3B,cAAc;MAC9B4B,aAAa,EAAE5B,cAAc;MAC7B6B,sBAAsB,EAAE7B,cAAc;MACtC8B,wBAAwB,EAAE9B,cAAc;MACxC+B,oBAAoB,EAAE/B,cAAc;MAEpC,qBAAqB,EAAEO,cAAc;MACrC,uBAAuB,EAAEA,cAAc;MACvC,wBAAwB,EAAEA,cAAc;MACxC,wBAAwB,EAAEA,cAAc;MACxC,uBAAuB,EAAEA,cAAc;MACvC,0BAA0B,EAAEA,cAAc;MAC1C,qBAAqB,EAAEA,cAAc;MACrC,qBAAqB,EAAEA,cAAc;MACrC,mBAAmB,EAAEA,cAAc;MACnC,0BAA0B,EAAEA,cAAc;MAC1C,kBAAkB,EAAEA,cAAc;MAClC,wBAAwB,EAAEA,cAAc;MACxC,uBAAuB,EAAEA,cAAc;MACvC,sBAAsB,EAAEA,cAAc;MACtC,sBAAsB,EAAEA,cAAc;MACtC,qBAAqB,EAAEA,cAAc;MACrC,mBAAmB,EAAEA,cAAc;MACnC,0BAA0B,EAAEA,cAAc;MAC1C,qBAAqB,EAAEA,cAAc;MACrC,oBAAoB,EAAEA,cAAc;MACpC,6BAA6B,EAAEA,cAAc;MAC7C,+BAA+B,EAAEA,cAAc;MAC/C,2BAA2B,EAAEA,cAAc;MAC3C,cAAc,EAAEhB;IACpB,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}