{"ast":null,"code":"/**\n * @fileoverview Rule to require object keys to be sorted\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\"),\n  naturalCompare = require(\"natural-compare\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the property name of the given `Property` node.\n *\n * - If the property's key is an `Identifier` node, this returns the key's name\n *   whether it's a computed property or not.\n * - If the property has a static name, this returns the static name.\n * - Otherwise, this returns null.\n * @param {ASTNode} node The `Property` node to get.\n * @returns {string|null} The property name or null.\n * @private\n */\nfunction getPropertyName(node) {\n  const staticName = astUtils.getStaticPropertyName(node);\n  if (staticName !== null) {\n    return staticName;\n  }\n  return node.key.name || null;\n}\n\n/**\n * Functions which check that the given 2 names are in specific order.\n *\n * Postfix `I` is meant insensitive.\n * Postfix `N` is meant natural.\n * @private\n */\nconst isValidOrders = {\n  asc(a, b) {\n    return a <= b;\n  },\n  ascI(a, b) {\n    return a.toLowerCase() <= b.toLowerCase();\n  },\n  ascN(a, b) {\n    return naturalCompare(a, b) <= 0;\n  },\n  ascIN(a, b) {\n    return naturalCompare(a.toLowerCase(), b.toLowerCase()) <= 0;\n  },\n  desc(a, b) {\n    return isValidOrders.asc(b, a);\n  },\n  descI(a, b) {\n    return isValidOrders.ascI(b, a);\n  },\n  descN(a, b) {\n    return isValidOrders.ascN(b, a);\n  },\n  descIN(a, b) {\n    return isValidOrders.ascIN(b, a);\n  }\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require object keys to be sorted\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/sort-keys\"\n    },\n    schema: [{\n      enum: [\"asc\", \"desc\"]\n    }, {\n      type: \"object\",\n      properties: {\n        caseSensitive: {\n          type: \"boolean\",\n          default: true\n        },\n        natural: {\n          type: \"boolean\",\n          default: false\n        },\n        minKeys: {\n          type: \"integer\",\n          minimum: 2,\n          default: 2\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      sortKeys: \"Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.\"\n    }\n  },\n  create(context) {\n    // Parse options.\n    const order = context.options[0] || \"asc\";\n    const options = context.options[1];\n    const insensitive = options && options.caseSensitive === false;\n    const natural = options && options.natural;\n    const minKeys = options && options.minKeys;\n    const isValidOrder = isValidOrders[order + (insensitive ? \"I\" : \"\") + (natural ? \"N\" : \"\")];\n\n    // The stack to save the previous property's name for each object literals.\n    let stack = null;\n    return {\n      ObjectExpression(node) {\n        stack = {\n          upper: stack,\n          prevName: null,\n          numKeys: node.properties.length\n        };\n      },\n      \"ObjectExpression:exit\"() {\n        stack = stack.upper;\n      },\n      SpreadElement(node) {\n        if (node.parent.type === \"ObjectExpression\") {\n          stack.prevName = null;\n        }\n      },\n      Property(node) {\n        if (node.parent.type === \"ObjectPattern\") {\n          return;\n        }\n        const prevName = stack.prevName;\n        const numKeys = stack.numKeys;\n        const thisName = getPropertyName(node);\n        if (thisName !== null) {\n          stack.prevName = thisName;\n        }\n        if (prevName === null || thisName === null || numKeys < minKeys) {\n          return;\n        }\n        if (!isValidOrder(prevName, thisName)) {\n          context.report({\n            node,\n            loc: node.key.loc,\n            messageId: \"sortKeys\",\n            data: {\n              thisName,\n              prevName,\n              order,\n              insensitive: insensitive ? \"insensitive \" : \"\",\n              natural: natural ? \"natural \" : \"\"\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","naturalCompare","getPropertyName","node","staticName","getStaticPropertyName","key","name","isValidOrders","asc","a","b","ascI","toLowerCase","ascN","ascIN","desc","descI","descN","descIN","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","properties","caseSensitive","default","natural","minKeys","minimum","additionalProperties","messages","sortKeys","create","context","order","options","insensitive","isValidOrder","stack","ObjectExpression","upper","prevName","numKeys","length","ObjectExpression:exit","SpreadElement","parent","Property","thisName","report","loc","messageId","data"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/sort-keys.js"],"sourcesContent":["/**\n * @fileoverview Rule to require object keys to be sorted\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"),\n    naturalCompare = require(\"natural-compare\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the property name of the given `Property` node.\n *\n * - If the property's key is an `Identifier` node, this returns the key's name\n *   whether it's a computed property or not.\n * - If the property has a static name, this returns the static name.\n * - Otherwise, this returns null.\n * @param {ASTNode} node The `Property` node to get.\n * @returns {string|null} The property name or null.\n * @private\n */\nfunction getPropertyName(node) {\n    const staticName = astUtils.getStaticPropertyName(node);\n\n    if (staticName !== null) {\n        return staticName;\n    }\n\n    return node.key.name || null;\n}\n\n/**\n * Functions which check that the given 2 names are in specific order.\n *\n * Postfix `I` is meant insensitive.\n * Postfix `N` is meant natural.\n * @private\n */\nconst isValidOrders = {\n    asc(a, b) {\n        return a <= b;\n    },\n    ascI(a, b) {\n        return a.toLowerCase() <= b.toLowerCase();\n    },\n    ascN(a, b) {\n        return naturalCompare(a, b) <= 0;\n    },\n    ascIN(a, b) {\n        return naturalCompare(a.toLowerCase(), b.toLowerCase()) <= 0;\n    },\n    desc(a, b) {\n        return isValidOrders.asc(b, a);\n    },\n    descI(a, b) {\n        return isValidOrders.ascI(b, a);\n    },\n    descN(a, b) {\n        return isValidOrders.ascN(b, a);\n    },\n    descIN(a, b) {\n        return isValidOrders.ascIN(b, a);\n    }\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require object keys to be sorted\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/sort-keys\"\n        },\n\n        schema: [\n            {\n                enum: [\"asc\", \"desc\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    caseSensitive: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    natural: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    minKeys: {\n                        type: \"integer\",\n                        minimum: 2,\n                        default: 2\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            sortKeys: \"Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'.\"\n        }\n    },\n\n    create(context) {\n\n        // Parse options.\n        const order = context.options[0] || \"asc\";\n        const options = context.options[1];\n        const insensitive = options && options.caseSensitive === false;\n        const natural = options && options.natural;\n        const minKeys = options && options.minKeys;\n        const isValidOrder = isValidOrders[\n            order + (insensitive ? \"I\" : \"\") + (natural ? \"N\" : \"\")\n        ];\n\n        // The stack to save the previous property's name for each object literals.\n        let stack = null;\n\n        return {\n            ObjectExpression(node) {\n                stack = {\n                    upper: stack,\n                    prevName: null,\n                    numKeys: node.properties.length\n                };\n            },\n\n            \"ObjectExpression:exit\"() {\n                stack = stack.upper;\n            },\n\n            SpreadElement(node) {\n                if (node.parent.type === \"ObjectExpression\") {\n                    stack.prevName = null;\n                }\n            },\n\n            Property(node) {\n                if (node.parent.type === \"ObjectPattern\") {\n                    return;\n                }\n\n                const prevName = stack.prevName;\n                const numKeys = stack.numKeys;\n                const thisName = getPropertyName(node);\n\n                if (thisName !== null) {\n                    stack.prevName = thisName;\n                }\n\n                if (prevName === null || thisName === null || numKeys < minKeys) {\n                    return;\n                }\n\n                if (!isValidOrder(prevName, thisName)) {\n                    context.report({\n                        node,\n                        loc: node.key.loc,\n                        messageId: \"sortKeys\",\n                        data: {\n                            thisName,\n                            prevName,\n                            order,\n                            insensitive: insensitive ? \"insensitive \" : \"\",\n                            natural: natural ? \"natural \" : \"\"\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}