{"ast":null,"code":"/**\n * @fileoverview Rule to enforce requiring named capture groups in regular expression.\n * @author Pig Fang <https://github.com/g-plane>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.regexp.flags.js\");\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker,\n  getStringIfConstant\n} = require(\"eslint-utils\");\nconst regexpp = require(\"regexpp\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst parser = new regexpp.RegExpParser();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce using named capture group in regular expression\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-named-capture-group\"\n    },\n    schema: [],\n    messages: {\n      required: \"Capture group '{{group}}' should be converted to a named or non-capturing group.\"\n    }\n  },\n  create(context) {\n    /**\n     * Function to check regular expression.\n     * @param {string} pattern The regular expression pattern to be check.\n     * @param {ASTNode} node AST node which contains regular expression.\n     * @param {boolean} uFlag Flag indicates whether unicode mode is enabled or not.\n     * @returns {void}\n     */\n    function checkRegex(pattern, node, uFlag) {\n      let ast;\n      try {\n        ast = parser.parsePattern(pattern, 0, pattern.length, uFlag);\n      } catch {\n        // ignore regex syntax errors\n        return;\n      }\n      regexpp.visitRegExpAST(ast, {\n        onCapturingGroupEnter(group) {\n          if (!group.name) {\n            context.report({\n              node,\n              messageId: \"required\",\n              data: {\n                group: group.raw\n              }\n            });\n          }\n        }\n      });\n    }\n    return {\n      Literal(node) {\n        if (node.regex) {\n          checkRegex(node.regex.pattern, node, node.regex.flags.includes(\"u\"));\n        }\n      },\n      Program() {\n        const scope = context.getScope();\n        const tracker = new ReferenceTracker(scope);\n        const traceMap = {\n          RegExp: {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          }\n        };\n        for (const {\n          node\n        } of tracker.iterateGlobalReferences(traceMap)) {\n          const regex = getStringIfConstant(node.arguments[0]);\n          const flags = getStringIfConstant(node.arguments[1]);\n          if (regex) {\n            checkRegex(regex, node, flags && flags.includes(\"u\"));\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","CALL","CONSTRUCT","ReferenceTracker","getStringIfConstant","regexpp","parser","RegExpParser","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","required","create","context","checkRegex","pattern","node","uFlag","ast","parsePattern","length","visitRegExpAST","onCapturingGroupEnter","group","name","report","messageId","data","raw","Literal","regex","flags","includes","Program","scope","getScope","tracker","traceMap","RegExp","iterateGlobalReferences","arguments"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/prefer-named-capture-group.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce requiring named capture groups in regular expression.\n * @author Pig Fang <https://github.com/g-plane>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    CALL,\n    CONSTRUCT,\n    ReferenceTracker,\n    getStringIfConstant\n} = require(\"eslint-utils\");\nconst regexpp = require(\"regexpp\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst parser = new regexpp.RegExpParser();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce using named capture group in regular expression\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-named-capture-group\"\n        },\n\n        schema: [],\n\n        messages: {\n            required: \"Capture group '{{group}}' should be converted to a named or non-capturing group.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Function to check regular expression.\n         * @param {string} pattern The regular expression pattern to be check.\n         * @param {ASTNode} node AST node which contains regular expression.\n         * @param {boolean} uFlag Flag indicates whether unicode mode is enabled or not.\n         * @returns {void}\n         */\n        function checkRegex(pattern, node, uFlag) {\n            let ast;\n\n            try {\n                ast = parser.parsePattern(pattern, 0, pattern.length, uFlag);\n            } catch {\n\n                // ignore regex syntax errors\n                return;\n            }\n\n            regexpp.visitRegExpAST(ast, {\n                onCapturingGroupEnter(group) {\n                    if (!group.name) {\n                        context.report({\n                            node,\n                            messageId: \"required\",\n                            data: {\n                                group: group.raw\n                            }\n                        });\n                    }\n                }\n            });\n        }\n\n        return {\n            Literal(node) {\n                if (node.regex) {\n                    checkRegex(node.regex.pattern, node, node.regex.flags.includes(\"u\"));\n                }\n            },\n            Program() {\n                const scope = context.getScope();\n                const tracker = new ReferenceTracker(scope);\n                const traceMap = {\n                    RegExp: {\n                        [CALL]: true,\n                        [CONSTRUCT]: true\n                    }\n                };\n\n                for (const { node } of tracker.iterateGlobalReferences(traceMap)) {\n                    const regex = getStringIfConstant(node.arguments[0]);\n                    const flags = getStringIfConstant(node.arguments[1]);\n\n                    if (regex) {\n                        checkRegex(regex, node, flags && flags.includes(\"u\"));\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAAAA,OAAA;AAEA,MAAM;EACFC,IAAI;EACJC,SAAS;EACTC,gBAAgB;EAChBC;AACJ,CAAC,GAAGJ,OAAO,CAAC,cAAc,CAAC;AAC3B,MAAMK,OAAO,GAAGL,OAAO,CAAC,SAAS,CAAC;;AAElC;AACA;AACA;;AAEA,MAAMM,MAAM,GAAG,IAAID,OAAO,CAACE,YAAY,CAAC,CAAC;;AAEzC;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,yDAAyD;MACtEC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,QAAQ,EAAE;IACd;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,UAAUA,CAACC,OAAO,EAAEC,IAAI,EAAEC,KAAK,EAAE;MACtC,IAAIC,GAAG;MAEP,IAAI;QACAA,GAAG,GAAGpB,MAAM,CAACqB,YAAY,CAACJ,OAAO,EAAE,CAAC,EAAEA,OAAO,CAACK,MAAM,EAAEH,KAAK,CAAC;MAChE,CAAC,CAAC,MAAM;QAEJ;QACA;MACJ;MAEApB,OAAO,CAACwB,cAAc,CAACH,GAAG,EAAE;QACxBI,qBAAqBA,CAACC,KAAK,EAAE;UACzB,IAAI,CAACA,KAAK,CAACC,IAAI,EAAE;YACbX,OAAO,CAACY,MAAM,CAAC;cACXT,IAAI;cACJU,SAAS,EAAE,UAAU;cACrBC,IAAI,EAAE;gBACFJ,KAAK,EAAEA,KAAK,CAACK;cACjB;YACJ,CAAC,CAAC;UACN;QACJ;MACJ,CAAC,CAAC;IACN;IAEA,OAAO;MACHC,OAAOA,CAACb,IAAI,EAAE;QACV,IAAIA,IAAI,CAACc,KAAK,EAAE;UACZhB,UAAU,CAACE,IAAI,CAACc,KAAK,CAACf,OAAO,EAAEC,IAAI,EAAEA,IAAI,CAACc,KAAK,CAACC,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACxE;MACJ,CAAC;MACDC,OAAOA,CAAA,EAAG;QACN,MAAMC,KAAK,GAAGrB,OAAO,CAACsB,QAAQ,CAAC,CAAC;QAChC,MAAMC,OAAO,GAAG,IAAIzC,gBAAgB,CAACuC,KAAK,CAAC;QAC3C,MAAMG,QAAQ,GAAG;UACbC,MAAM,EAAE;YACJ,CAAC7C,IAAI,GAAG,IAAI;YACZ,CAACC,SAAS,GAAG;UACjB;QACJ,CAAC;QAED,KAAK,MAAM;UAAEsB;QAAK,CAAC,IAAIoB,OAAO,CAACG,uBAAuB,CAACF,QAAQ,CAAC,EAAE;UAC9D,MAAMP,KAAK,GAAGlC,mBAAmB,CAACoB,IAAI,CAACwB,SAAS,CAAC,CAAC,CAAC,CAAC;UACpD,MAAMT,KAAK,GAAGnC,mBAAmB,CAACoB,IAAI,CAACwB,SAAS,CAAC,CAAC,CAAC,CAAC;UAEpD,IAAIV,KAAK,EAAE;YACPhB,UAAU,CAACgB,KAAK,EAAEd,IAAI,EAAEe,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC;UACzD;QACJ;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}