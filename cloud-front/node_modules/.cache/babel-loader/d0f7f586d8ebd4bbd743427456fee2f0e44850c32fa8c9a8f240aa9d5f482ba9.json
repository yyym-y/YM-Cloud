{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of alert, confirm, prompt\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst {\n  getStaticPropertyName: getPropertyName,\n  getVariableByName,\n  skipChainExpression\n} = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given name is a prohibited identifier.\n * @param {string} name The name to check\n * @returns {boolean} Whether or not the name is prohibited.\n */\nfunction isProhibitedIdentifier(name) {\n  return /^(alert|confirm|prompt)$/u.test(name);\n}\n\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n  const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] && reference.identifier.range[1] === node.range[1]);\n  if (references.length === 1) {\n    return references[0];\n  }\n  return null;\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n  const reference = findReference(scope, node);\n  return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\n/**\n * Checks if the given identifier node is a ThisExpression in the global scope or the global window property.\n * @param {Object} scope The current scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the node is a reference to the global object.\n */\nfunction isGlobalThisReferenceOrGlobalWindow(scope, node) {\n  if (scope.type === \"global\" && node.type === \"ThisExpression\") {\n    return true;\n  }\n  if (node.type === \"Identifier\" && (node.name === \"window\" || node.name === \"globalThis\" && getVariableByName(scope, \"globalThis\"))) {\n    return !isShadowed(scope, node);\n  }\n  return false;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `alert`, `confirm`, and `prompt`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-alert\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected {{name}}.\"\n    }\n  },\n  create(context) {\n    return {\n      CallExpression(node) {\n        const callee = skipChainExpression(node.callee),\n          currentScope = context.getScope();\n\n        // without window.\n        if (callee.type === \"Identifier\") {\n          const name = callee.name;\n          if (!isShadowed(currentScope, callee) && isProhibitedIdentifier(callee.name)) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                name\n              }\n            });\n          }\n        } else if (callee.type === \"MemberExpression\" && isGlobalThisReferenceOrGlobalWindow(currentScope, callee.object)) {\n          const name = getPropertyName(callee);\n          if (isProhibitedIdentifier(name)) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                name\n              }\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["getStaticPropertyName","getPropertyName","getVariableByName","skipChainExpression","require","isProhibitedIdentifier","name","test","findReference","scope","node","references","filter","reference","identifier","range","length","isShadowed","resolved","defs","isGlobalThisReferenceOrGlobalWindow","type","module","exports","meta","docs","description","category","recommended","url","schema","messages","unexpected","create","context","CallExpression","callee","currentScope","getScope","report","messageId","data","object"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-alert.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of alert, confirm, prompt\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    getStaticPropertyName: getPropertyName,\n    getVariableByName,\n    skipChainExpression\n} = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given name is a prohibited identifier.\n * @param {string} name The name to check\n * @returns {boolean} Whether or not the name is prohibited.\n */\nfunction isProhibitedIdentifier(name) {\n    return /^(alert|confirm|prompt)$/u.test(name);\n}\n\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1]);\n\n    if (references.length === 1) {\n        return references[0];\n    }\n    return null;\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n    const reference = findReference(scope, node);\n\n    return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\n/**\n * Checks if the given identifier node is a ThisExpression in the global scope or the global window property.\n * @param {Object} scope The current scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the node is a reference to the global object.\n */\nfunction isGlobalThisReferenceOrGlobalWindow(scope, node) {\n    if (scope.type === \"global\" && node.type === \"ThisExpression\") {\n        return true;\n    }\n    if (\n        node.type === \"Identifier\" &&\n        (\n            node.name === \"window\" ||\n            (node.name === \"globalThis\" && getVariableByName(scope, \"globalThis\"))\n        )\n    ) {\n        return !isShadowed(scope, node);\n    }\n\n    return false;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow the use of `alert`, `confirm`, and `prompt`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-alert\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Unexpected {{name}}.\"\n        }\n    },\n\n    create(context) {\n        return {\n            CallExpression(node) {\n                const callee = skipChainExpression(node.callee),\n                    currentScope = context.getScope();\n\n                // without window.\n                if (callee.type === \"Identifier\") {\n                    const name = callee.name;\n\n                    if (!isShadowed(currentScope, callee) && isProhibitedIdentifier(callee.name)) {\n                        context.report({\n                            node,\n                            messageId: \"unexpected\",\n                            data: { name }\n                        });\n                    }\n\n                } else if (callee.type === \"MemberExpression\" && isGlobalThisReferenceOrGlobalWindow(currentScope, callee.object)) {\n                    const name = getPropertyName(callee);\n\n                    if (isProhibitedIdentifier(name)) {\n                        context.report({\n                            node,\n                            messageId: \"unexpected\",\n                            data: { name }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}