{"ast":null,"code":"/**\n * @fileoverview A rule to disallow or enforce spaces inside of single line blocks.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst util = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow or enforce spaces inside of blocks after opening block and before closing block\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/block-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      missing: \"Requires a space {{location}} '{{token}}'.\",\n      extra: \"Unexpected space(s) {{location}} '{{token}}'.\"\n    }\n  },\n  create(context) {\n    const always = context.options[0] !== \"never\",\n      messageId = always ? \"missing\" : \"extra\",\n      sourceCode = context.getSourceCode();\n\n    /**\n     * Gets the open brace token from a given node.\n     * @param {ASTNode} node A BlockStatement/SwitchStatement node to get.\n     * @returns {Token} The token of the open brace.\n     */\n    function getOpenBrace(node) {\n      if (node.type === \"SwitchStatement\") {\n        if (node.cases.length > 0) {\n          return sourceCode.getTokenBefore(node.cases[0]);\n        }\n        return sourceCode.getLastToken(node, 1);\n      }\n      return sourceCode.getFirstToken(node);\n    }\n\n    /**\n     * Checks whether or not:\n     *   - given tokens are on same line.\n     *   - there is/isn't a space between given tokens.\n     * @param {Token} left A token to check.\n     * @param {Token} right The token which is next to `left`.\n     * @returns {boolean}\n     *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.\n     *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.\n     *    If given tokens are not on same line, it's always `true`.\n     */\n    function isValid(left, right) {\n      return !util.isTokenOnSameLine(left, right) || sourceCode.isSpaceBetweenTokens(left, right) === always;\n    }\n\n    /**\n     * Reports invalid spacing style inside braces.\n     * @param {ASTNode} node A BlockStatement/SwitchStatement node to get.\n     * @returns {void}\n     */\n    function checkSpacingInsideBraces(node) {\n      // Gets braces and the first/last token of content.\n      const openBrace = getOpenBrace(node);\n      const closeBrace = sourceCode.getLastToken(node);\n      const firstToken = sourceCode.getTokenAfter(openBrace, {\n        includeComments: true\n      });\n      const lastToken = sourceCode.getTokenBefore(closeBrace, {\n        includeComments: true\n      });\n\n      // Skip if the node is invalid or empty.\n      if (openBrace.type !== \"Punctuator\" || openBrace.value !== \"{\" || closeBrace.type !== \"Punctuator\" || closeBrace.value !== \"}\" || firstToken === closeBrace) {\n        return;\n      }\n\n      // Skip line comments for option never\n      if (!always && firstToken.type === \"Line\") {\n        return;\n      }\n\n      // Check.\n      if (!isValid(openBrace, firstToken)) {\n        let loc = openBrace.loc;\n        if (messageId === \"extra\") {\n          loc = {\n            start: openBrace.loc.end,\n            end: firstToken.loc.start\n          };\n        }\n        context.report({\n          node,\n          loc,\n          messageId,\n          data: {\n            location: \"after\",\n            token: openBrace.value\n          },\n          fix(fixer) {\n            if (always) {\n              return fixer.insertTextBefore(firstToken, \" \");\n            }\n            return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);\n          }\n        });\n      }\n      if (!isValid(lastToken, closeBrace)) {\n        let loc = closeBrace.loc;\n        if (messageId === \"extra\") {\n          loc = {\n            start: lastToken.loc.end,\n            end: closeBrace.loc.start\n          };\n        }\n        context.report({\n          node,\n          loc,\n          messageId,\n          data: {\n            location: \"before\",\n            token: closeBrace.value\n          },\n          fix(fixer) {\n            if (always) {\n              return fixer.insertTextAfter(lastToken, \" \");\n            }\n            return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);\n          }\n        });\n      }\n    }\n    return {\n      BlockStatement: checkSpacingInsideBraces,\n      SwitchStatement: checkSpacingInsideBraces\n    };\n  }\n};","map":{"version":3,"names":["util","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","missing","extra","create","context","always","options","messageId","sourceCode","getSourceCode","getOpenBrace","node","cases","length","getTokenBefore","getLastToken","getFirstToken","isValid","left","right","isTokenOnSameLine","isSpaceBetweenTokens","checkSpacingInsideBraces","openBrace","closeBrace","firstToken","getTokenAfter","includeComments","lastToken","value","loc","start","end","report","data","location","token","fix","fixer","insertTextBefore","removeRange","range","insertTextAfter","BlockStatement","SwitchStatement"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/block-spacing.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow or enforce spaces inside of single line blocks.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst util = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow or enforce spaces inside of blocks after opening block and before closing block\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/block-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            { enum: [\"always\", \"never\"] }\n        ],\n\n        messages: {\n            missing: \"Requires a space {{location}} '{{token}}'.\",\n            extra: \"Unexpected space(s) {{location}} '{{token}}'.\"\n        }\n    },\n\n    create(context) {\n        const always = (context.options[0] !== \"never\"),\n            messageId = always ? \"missing\" : \"extra\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Gets the open brace token from a given node.\n         * @param {ASTNode} node A BlockStatement/SwitchStatement node to get.\n         * @returns {Token} The token of the open brace.\n         */\n        function getOpenBrace(node) {\n            if (node.type === \"SwitchStatement\") {\n                if (node.cases.length > 0) {\n                    return sourceCode.getTokenBefore(node.cases[0]);\n                }\n                return sourceCode.getLastToken(node, 1);\n            }\n            return sourceCode.getFirstToken(node);\n        }\n\n        /**\n         * Checks whether or not:\n         *   - given tokens are on same line.\n         *   - there is/isn't a space between given tokens.\n         * @param {Token} left A token to check.\n         * @param {Token} right The token which is next to `left`.\n         * @returns {boolean}\n         *    When the option is `\"always\"`, `true` if there are one or more spaces between given tokens.\n         *    When the option is `\"never\"`, `true` if there are not any spaces between given tokens.\n         *    If given tokens are not on same line, it's always `true`.\n         */\n        function isValid(left, right) {\n            return (\n                !util.isTokenOnSameLine(left, right) ||\n                sourceCode.isSpaceBetweenTokens(left, right) === always\n            );\n        }\n\n        /**\n         * Reports invalid spacing style inside braces.\n         * @param {ASTNode} node A BlockStatement/SwitchStatement node to get.\n         * @returns {void}\n         */\n        function checkSpacingInsideBraces(node) {\n\n            // Gets braces and the first/last token of content.\n            const openBrace = getOpenBrace(node);\n            const closeBrace = sourceCode.getLastToken(node);\n            const firstToken = sourceCode.getTokenAfter(openBrace, { includeComments: true });\n            const lastToken = sourceCode.getTokenBefore(closeBrace, { includeComments: true });\n\n            // Skip if the node is invalid or empty.\n            if (openBrace.type !== \"Punctuator\" ||\n                openBrace.value !== \"{\" ||\n                closeBrace.type !== \"Punctuator\" ||\n                closeBrace.value !== \"}\" ||\n                firstToken === closeBrace\n            ) {\n                return;\n            }\n\n            // Skip line comments for option never\n            if (!always && firstToken.type === \"Line\") {\n                return;\n            }\n\n            // Check.\n            if (!isValid(openBrace, firstToken)) {\n                let loc = openBrace.loc;\n\n                if (messageId === \"extra\") {\n                    loc = {\n                        start: openBrace.loc.end,\n                        end: firstToken.loc.start\n                    };\n                }\n\n                context.report({\n                    node,\n                    loc,\n                    messageId,\n                    data: {\n                        location: \"after\",\n                        token: openBrace.value\n                    },\n                    fix(fixer) {\n                        if (always) {\n                            return fixer.insertTextBefore(firstToken, \" \");\n                        }\n\n                        return fixer.removeRange([openBrace.range[1], firstToken.range[0]]);\n                    }\n                });\n            }\n            if (!isValid(lastToken, closeBrace)) {\n                let loc = closeBrace.loc;\n\n                if (messageId === \"extra\") {\n                    loc = {\n                        start: lastToken.loc.end,\n                        end: closeBrace.loc.start\n                    };\n                }\n                context.report({\n                    node,\n                    loc,\n                    messageId,\n                    data: {\n                        location: \"before\",\n                        token: closeBrace.value\n                    },\n                    fix(fixer) {\n                        if (always) {\n                            return fixer.insertTextAfter(lastToken, \" \");\n                        }\n\n                        return fixer.removeRange([lastToken.range[1], closeBrace.range[0]]);\n                    }\n                });\n            }\n        }\n\n        return {\n            BlockStatement: checkSpacingInsideBraces,\n            SwitchStatement: checkSpacingInsideBraces\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}