{"ast":null,"code":"/**\n * @fileoverview Rule for disallowing require() outside of the top-level module context\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\nconst ACCEPTABLE_PARENTS = [\"AssignmentExpression\", \"VariableDeclarator\", \"MemberExpression\", \"ExpressionStatement\", \"CallExpression\", \"ConditionalExpression\", \"Program\", \"VariableDeclaration\", \"ChainExpression\"];\n\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n  const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] && reference.identifier.range[1] === node.range[1]);\n\n  /* istanbul ignore else: correctly returns null */\n  if (references.length === 1) {\n    return references[0];\n  }\n  return null;\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {ASTNode} node The identifier node to check.\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n  const reference = findReference(scope, node);\n  return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"require `require()` calls to be placed at top-level module scope\",\n      category: \"Node.js and CommonJS\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/global-require\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected require().\"\n    }\n  },\n  create(context) {\n    return {\n      CallExpression(node) {\n        const currentScope = context.getScope();\n        if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {\n          const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.indexOf(parent.type) > -1);\n          if (!isGoodRequire) {\n            context.report({\n              node,\n              messageId: \"unexpected\"\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["ACCEPTABLE_PARENTS","findReference","scope","node","references","filter","reference","identifier","range","length","isShadowed","resolved","defs","module","exports","meta","deprecated","replacedBy","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","CallExpression","currentScope","getScope","callee","name","isGoodRequire","getAncestors","every","parent","indexOf","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/global-require.js"],"sourcesContent":["/**\n * @fileoverview Rule for disallowing require() outside of the top-level module context\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\nconst ACCEPTABLE_PARENTS = [\n    \"AssignmentExpression\",\n    \"VariableDeclarator\",\n    \"MemberExpression\",\n    \"ExpressionStatement\",\n    \"CallExpression\",\n    \"ConditionalExpression\",\n    \"Program\",\n    \"VariableDeclaration\",\n    \"ChainExpression\"\n];\n\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1]);\n\n    /* istanbul ignore else: correctly returns null */\n    if (references.length === 1) {\n        return references[0];\n    }\n    return null;\n\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {ASTNode} node The identifier node to check.\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n    const reference = findReference(scope, node);\n\n    return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\nmodule.exports = {\n    meta: {\n        deprecated: true,\n\n        replacedBy: [],\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `require()` calls to be placed at top-level module scope\",\n            category: \"Node.js and CommonJS\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/global-require\"\n        },\n\n        schema: [],\n        messages: {\n            unexpected: \"Unexpected require().\"\n        }\n    },\n\n    create(context) {\n        return {\n            CallExpression(node) {\n                const currentScope = context.getScope();\n\n                if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {\n                    const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.indexOf(parent.type) > -1);\n\n                    if (!isGoodRequire) {\n                        context.report({ node, messageId: \"unexpected\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,kBAAkB,GAAG,CACvB,sBAAsB,EACtB,oBAAoB,EACpB,kBAAkB,EAClB,qBAAqB,EACrB,gBAAgB,EAChB,uBAAuB,EACvB,SAAS,EACT,qBAAqB,EACrB,iBAAiB,CACpB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAChC,MAAMC,UAAU,GAAGF,KAAK,CAACE,UAAU,CAACC,MAAM,CAACC,SAAS,IAAIA,SAAS,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,KAAKL,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,IAC/FF,SAAS,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,KAAKL,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC;;EAExD;EACA,IAAIJ,UAAU,CAACK,MAAM,KAAK,CAAC,EAAE;IACzB,OAAOL,UAAU,CAAC,CAAC,CAAC;EACxB;EACA,OAAO,IAAI;AAEf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,UAAUA,CAACR,KAAK,EAAEC,IAAI,EAAE;EAC7B,MAAMG,SAAS,GAAGL,aAAa,CAACC,KAAK,EAAEC,IAAI,CAAC;EAE5C,OAAOG,SAAS,IAAIA,SAAS,CAACK,QAAQ,IAAIL,SAAS,CAACK,QAAQ,CAACC,IAAI,CAACH,MAAM,GAAG,CAAC;AAChF;AAEAI,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,UAAU,EAAE,IAAI;IAEhBC,UAAU,EAAE,EAAE;IAEdC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,kEAAkE;MAC/EC,QAAQ,EAAE,sBAAsB;MAChCC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,OAAO;MACHC,cAAcA,CAAC1B,IAAI,EAAE;QACjB,MAAM2B,YAAY,GAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC;QAEvC,IAAI5B,IAAI,CAAC6B,MAAM,CAACC,IAAI,KAAK,SAAS,IAAI,CAACvB,UAAU,CAACoB,YAAY,EAAE3B,IAAI,CAAC6B,MAAM,CAAC,EAAE;UAC1E,MAAME,aAAa,GAAGN,OAAO,CAACO,YAAY,CAAC,CAAC,CAACC,KAAK,CAACC,MAAM,IAAIrC,kBAAkB,CAACsC,OAAO,CAACD,MAAM,CAACnB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;UAE1G,IAAI,CAACgB,aAAa,EAAE;YAChBN,OAAO,CAACW,MAAM,CAAC;cAAEpC,IAAI;cAAEqC,SAAS,EAAE;YAAa,CAAC,CAAC;UACrD;QACJ;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}