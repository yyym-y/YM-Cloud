{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of unnecessary semicolons\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst FixTracker = require(\"./utils/fix-tracker\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary semicolons\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-extra-semi\"\n    },\n    fixable: \"code\",\n    schema: [],\n    messages: {\n      unexpected: \"Unnecessary semicolon.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    /**\n     * Reports an unnecessary semicolon error.\n     * @param {Node|Token} nodeOrToken A node or a token to be reported.\n     * @returns {void}\n     */\n    function report(nodeOrToken) {\n      context.report({\n        node: nodeOrToken,\n        messageId: \"unexpected\",\n        fix(fixer) {\n          /*\n           * Expand the replacement range to include the surrounding\n           * tokens to avoid conflicting with semi.\n           * https://github.com/eslint/eslint/issues/7928\n           */\n          return new FixTracker(fixer, context.getSourceCode()).retainSurroundingTokens(nodeOrToken).remove(nodeOrToken);\n        }\n      });\n    }\n\n    /**\n     * Checks for a part of a class body.\n     * This checks tokens from a specified token to a next MethodDefinition or the end of class body.\n     * @param {Token} firstToken The first token to check.\n     * @returns {void}\n     */\n    function checkForPartOfClassBody(firstToken) {\n      for (let token = firstToken; token.type === \"Punctuator\" && !astUtils.isClosingBraceToken(token); token = sourceCode.getTokenAfter(token)) {\n        if (astUtils.isSemicolonToken(token)) {\n          report(token);\n        }\n      }\n    }\n    return {\n      /**\n       * Reports this empty statement, except if the parent node is a loop.\n       * @param {Node} node A EmptyStatement node to be reported.\n       * @returns {void}\n       */\n      EmptyStatement(node) {\n        const parent = node.parent,\n          allowedParentTypes = [\"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"WhileStatement\", \"DoWhileStatement\", \"IfStatement\", \"LabeledStatement\", \"WithStatement\"];\n        if (allowedParentTypes.indexOf(parent.type) === -1) {\n          report(node);\n        }\n      },\n      /**\n       * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.\n       * @param {Node} node A ClassBody node to check.\n       * @returns {void}\n       */\n      ClassBody(node) {\n        checkForPartOfClassBody(sourceCode.getFirstToken(node, 1)); // 0 is `{`.\n      },\n\n      /**\n       * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.\n       * @param {Node} node A MethodDefinition node of the start point.\n       * @returns {void}\n       */\n      MethodDefinition(node) {\n        checkForPartOfClassBody(sourceCode.getTokenAfter(node));\n      }\n    };\n  }\n};","map":{"version":3,"names":["FixTracker","require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","unexpected","create","context","sourceCode","getSourceCode","report","nodeOrToken","node","messageId","fix","fixer","retainSurroundingTokens","remove","checkForPartOfClassBody","firstToken","token","isClosingBraceToken","getTokenAfter","isSemicolonToken","EmptyStatement","parent","allowedParentTypes","indexOf","ClassBody","getFirstToken","MethodDefinition"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-extra-semi.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of unnecessary semicolons\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary semicolons\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-extra-semi\"\n        },\n\n        fixable: \"code\",\n        schema: [],\n\n        messages: {\n            unexpected: \"Unnecessary semicolon.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Reports an unnecessary semicolon error.\n         * @param {Node|Token} nodeOrToken A node or a token to be reported.\n         * @returns {void}\n         */\n        function report(nodeOrToken) {\n            context.report({\n                node: nodeOrToken,\n                messageId: \"unexpected\",\n                fix(fixer) {\n\n                    /*\n                     * Expand the replacement range to include the surrounding\n                     * tokens to avoid conflicting with semi.\n                     * https://github.com/eslint/eslint/issues/7928\n                     */\n                    return new FixTracker(fixer, context.getSourceCode())\n                        .retainSurroundingTokens(nodeOrToken)\n                        .remove(nodeOrToken);\n                }\n            });\n        }\n\n        /**\n         * Checks for a part of a class body.\n         * This checks tokens from a specified token to a next MethodDefinition or the end of class body.\n         * @param {Token} firstToken The first token to check.\n         * @returns {void}\n         */\n        function checkForPartOfClassBody(firstToken) {\n            for (let token = firstToken;\n                token.type === \"Punctuator\" && !astUtils.isClosingBraceToken(token);\n                token = sourceCode.getTokenAfter(token)\n            ) {\n                if (astUtils.isSemicolonToken(token)) {\n                    report(token);\n                }\n            }\n        }\n\n        return {\n\n            /**\n             * Reports this empty statement, except if the parent node is a loop.\n             * @param {Node} node A EmptyStatement node to be reported.\n             * @returns {void}\n             */\n            EmptyStatement(node) {\n                const parent = node.parent,\n                    allowedParentTypes = [\n                        \"ForStatement\",\n                        \"ForInStatement\",\n                        \"ForOfStatement\",\n                        \"WhileStatement\",\n                        \"DoWhileStatement\",\n                        \"IfStatement\",\n                        \"LabeledStatement\",\n                        \"WithStatement\"\n                    ];\n\n                if (allowedParentTypes.indexOf(parent.type) === -1) {\n                    report(node);\n                }\n            },\n\n            /**\n             * Checks tokens from the head of this class body to the first MethodDefinition or the end of this class body.\n             * @param {Node} node A ClassBody node to check.\n             * @returns {void}\n             */\n            ClassBody(node) {\n                checkForPartOfClassBody(sourceCode.getFirstToken(node, 1)); // 0 is `{`.\n            },\n\n            /**\n             * Checks tokens from this MethodDefinition to the next MethodDefinition or the end of this class body.\n             * @param {Node} node A MethodDefinition node of the start point.\n             * @returns {void}\n             */\n            MethodDefinition(node) {\n                checkForPartOfClassBody(sourceCode.getTokenAfter(node));\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACjD,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,iCAAiC;MAC9CC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,MAAM;IACfC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;;IAE1C;AACR;AACA;AACA;AACA;IACQ,SAASC,MAAMA,CAACC,WAAW,EAAE;MACzBJ,OAAO,CAACG,MAAM,CAAC;QACXE,IAAI,EAAED,WAAW;QACjBE,SAAS,EAAE,YAAY;QACvBC,GAAGA,CAACC,KAAK,EAAE;UAEP;AACpB;AACA;AACA;AACA;UACoB,OAAO,IAAIzB,UAAU,CAACyB,KAAK,EAAER,OAAO,CAACE,aAAa,CAAC,CAAC,CAAC,CAChDO,uBAAuB,CAACL,WAAW,CAAC,CACpCM,MAAM,CAACN,WAAW,CAAC;QAC5B;MACJ,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASO,uBAAuBA,CAACC,UAAU,EAAE;MACzC,KAAK,IAAIC,KAAK,GAAGD,UAAU,EACvBC,KAAK,CAACxB,IAAI,KAAK,YAAY,IAAI,CAACJ,QAAQ,CAAC6B,mBAAmB,CAACD,KAAK,CAAC,EACnEA,KAAK,GAAGZ,UAAU,CAACc,aAAa,CAACF,KAAK,CAAC,EACzC;QACE,IAAI5B,QAAQ,CAAC+B,gBAAgB,CAACH,KAAK,CAAC,EAAE;UAClCV,MAAM,CAACU,KAAK,CAAC;QACjB;MACJ;IACJ;IAEA,OAAO;MAEH;AACZ;AACA;AACA;AACA;MACYI,cAAcA,CAACZ,IAAI,EAAE;QACjB,MAAMa,MAAM,GAAGb,IAAI,CAACa,MAAM;UACtBC,kBAAkB,GAAG,CACjB,cAAc,EACd,gBAAgB,EAChB,gBAAgB,EAChB,gBAAgB,EAChB,kBAAkB,EAClB,aAAa,EACb,kBAAkB,EAClB,eAAe,CAClB;QAEL,IAAIA,kBAAkB,CAACC,OAAO,CAACF,MAAM,CAAC7B,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UAChDc,MAAM,CAACE,IAAI,CAAC;QAChB;MACJ,CAAC;MAED;AACZ;AACA;AACA;AACA;MACYgB,SAASA,CAAChB,IAAI,EAAE;QACZM,uBAAuB,CAACV,UAAU,CAACqB,aAAa,CAACjB,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAChE,CAAC;;MAED;AACZ;AACA;AACA;AACA;MACYkB,gBAAgBA,CAAClB,IAAI,EAAE;QACnBM,uBAAuB,CAACV,UAAU,CAACc,aAAa,CAACV,IAAI,CAAC,CAAC;MAC3D;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}