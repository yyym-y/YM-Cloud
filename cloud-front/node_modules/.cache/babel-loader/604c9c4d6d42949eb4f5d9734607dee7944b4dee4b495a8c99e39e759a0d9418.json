{"ast":null,"code":"/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint no-undefined:0, no-use-before-define: 0 */\n\n\"use strict\";\n\nconst acorn = require(\"acorn\");\nconst jsx = require(\"acorn-jsx\");\nconst astNodeTypes = require(\"./lib/ast-node-types\");\nconst espree = require(\"./lib/espree\");\nconst {\n  getLatestEcmaVersion,\n  getSupportedEcmaVersions\n} = require(\"./lib/options\");\n\n// To initialize lazily.\nconst parsers = {\n  _regular: null,\n  _jsx: null,\n  get regular() {\n    if (this._regular === null) {\n      this._regular = acorn.Parser.extend(espree());\n    }\n    return this._regular;\n  },\n  get jsx() {\n    if (this._jsx === null) {\n      this._jsx = acorn.Parser.extend(jsx(), espree());\n    }\n    return this._jsx;\n  },\n  get(options) {\n    const useJsx = Boolean(options && options.ecmaFeatures && options.ecmaFeatures.jsx);\n    return useJsx ? this.jsx : this.regular;\n  }\n};\n\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nfunction tokenize(code, options) {\n  const Parser = parsers.get(options);\n\n  // Ensure to collect tokens.\n  if (!options || options.tokens !== true) {\n    options = Object.assign({}, options, {\n      tokens: true\n    }); // eslint-disable-line no-param-reassign\n  }\n\n  return new Parser(options, code).tokenize();\n}\n\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */\nfunction parse(code, options) {\n  const Parser = parsers.get(options);\n  return new Parser(options, code).parse();\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexports.version = require(\"./package.json\").version;\nexports.tokenize = tokenize;\nexports.parse = parse;\n\n// Deep copy.\n/* istanbul ignore next */\nexports.Syntax = function () {\n  let name,\n    types = {};\n  if (typeof Object.create === \"function\") {\n    types = Object.create(null);\n  }\n  for (name in astNodeTypes) {\n    if (Object.hasOwnProperty.call(astNodeTypes, name)) {\n      types[name] = astNodeTypes[name];\n    }\n  }\n  if (typeof Object.freeze === \"function\") {\n    Object.freeze(types);\n  }\n  return types;\n}();\n\n/* istanbul ignore next */\nexports.VisitorKeys = function () {\n  return require(\"eslint-visitor-keys\").KEYS;\n}();\nexports.latestEcmaVersion = getLatestEcmaVersion();\nexports.supportedEcmaVersions = getSupportedEcmaVersions();","map":{"version":3,"names":["acorn","require","jsx","astNodeTypes","espree","getLatestEcmaVersion","getSupportedEcmaVersions","parsers","_regular","_jsx","regular","Parser","extend","get","options","useJsx","Boolean","ecmaFeatures","tokenize","code","tokens","Object","assign","parse","exports","version","Syntax","name","types","create","hasOwnProperty","call","freeze","VisitorKeys","KEYS","latestEcmaVersion","supportedEcmaVersions"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/espree/espree.js"],"sourcesContent":["/**\n * @fileoverview Main Espree file that converts Acorn into Esprima output.\n *\n * This file contains code from the following MIT-licensed projects:\n * 1. Acorn\n * 2. Babylon\n * 3. Babel-ESLint\n *\n * This file also contains code from Esprima, which is BSD licensed.\n *\n * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright\n *     notice, this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n/* eslint no-undefined:0, no-use-before-define: 0 */\n\n\"use strict\";\n\nconst acorn = require(\"acorn\");\nconst jsx = require(\"acorn-jsx\");\nconst astNodeTypes = require(\"./lib/ast-node-types\");\nconst espree = require(\"./lib/espree\");\nconst { getLatestEcmaVersion, getSupportedEcmaVersions } = require(\"./lib/options\");\n\n// To initialize lazily.\nconst parsers = {\n    _regular: null,\n    _jsx: null,\n\n    get regular() {\n        if (this._regular === null) {\n            this._regular = acorn.Parser.extend(espree());\n        }\n        return this._regular;\n    },\n\n    get jsx() {\n        if (this._jsx === null) {\n            this._jsx = acorn.Parser.extend(jsx(), espree());\n        }\n        return this._jsx;\n    },\n\n    get(options) {\n        const useJsx = Boolean(\n            options &&\n            options.ecmaFeatures &&\n            options.ecmaFeatures.jsx\n        );\n\n        return useJsx ? this.jsx : this.regular;\n    }\n};\n\n//------------------------------------------------------------------------------\n// Tokenizer\n//------------------------------------------------------------------------------\n\n/**\n * Tokenizes the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {Token[]} An array of tokens.\n * @throws {SyntaxError} If the input code is invalid.\n * @private\n */\nfunction tokenize(code, options) {\n    const Parser = parsers.get(options);\n\n    // Ensure to collect tokens.\n    if (!options || options.tokens !== true) {\n        options = Object.assign({}, options, { tokens: true }); // eslint-disable-line no-param-reassign\n    }\n\n    return new Parser(options, code).tokenize();\n}\n\n//------------------------------------------------------------------------------\n// Parser\n//------------------------------------------------------------------------------\n\n/**\n * Parses the given code.\n * @param {string} code The code to tokenize.\n * @param {Object} options Options defining how to tokenize.\n * @returns {ASTNode} The \"Program\" AST node.\n * @throws {SyntaxError} If the input code is invalid.\n */\nfunction parse(code, options) {\n    const Parser = parsers.get(options);\n\n    return new Parser(options, code).parse();\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nexports.version = require(\"./package.json\").version;\n\nexports.tokenize = tokenize;\n\nexports.parse = parse;\n\n// Deep copy.\n/* istanbul ignore next */\nexports.Syntax = (function() {\n    let name,\n        types = {};\n\n    if (typeof Object.create === \"function\") {\n        types = Object.create(null);\n    }\n\n    for (name in astNodeTypes) {\n        if (Object.hasOwnProperty.call(astNodeTypes, name)) {\n            types[name] = astNodeTypes[name];\n        }\n    }\n\n    if (typeof Object.freeze === \"function\") {\n        Object.freeze(types);\n    }\n\n    return types;\n}());\n\n/* istanbul ignore next */\nexports.VisitorKeys = (function() {\n    return require(\"eslint-visitor-keys\").KEYS;\n}());\n\nexports.latestEcmaVersion = getLatestEcmaVersion();\n\nexports.supportedEcmaVersions = getSupportedEcmaVersions();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}