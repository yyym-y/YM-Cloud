{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of console object\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `console`\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-console\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          minItems: 1,\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected console statement.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {};\n    const allowed = options.allow || [];\n\n    /**\n     * Checks whether the given reference is 'console' or not.\n     * @param {eslint-scope.Reference} reference The reference to check.\n     * @returns {boolean} `true` if the reference is 'console'.\n     */\n    function isConsole(reference) {\n      const id = reference.identifier;\n      return id && id.name === \"console\";\n    }\n\n    /**\n     * Checks whether the property name of the given MemberExpression node\n     * is allowed by options or not.\n     * @param {ASTNode} node The MemberExpression node to check.\n     * @returns {boolean} `true` if the property name of the node is allowed.\n     */\n    function isAllowed(node) {\n      const propertyName = astUtils.getStaticPropertyName(node);\n      return propertyName && allowed.indexOf(propertyName) !== -1;\n    }\n\n    /**\n     * Checks whether the given reference is a member access which is not\n     * allowed by options or not.\n     * @param {eslint-scope.Reference} reference The reference to check.\n     * @returns {boolean} `true` if the reference is a member access which\n     *      is not allowed by options.\n     */\n    function isMemberAccessExceptAllowed(reference) {\n      const node = reference.identifier;\n      const parent = node.parent;\n      return parent.type === \"MemberExpression\" && parent.object === node && !isAllowed(parent);\n    }\n\n    /**\n     * Reports the given reference as a violation.\n     * @param {eslint-scope.Reference} reference The reference to report.\n     * @returns {void}\n     */\n    function report(reference) {\n      const node = reference.identifier.parent;\n      context.report({\n        node,\n        loc: node.loc,\n        messageId: \"unexpected\"\n      });\n    }\n    return {\n      \"Program:exit\"() {\n        const scope = context.getScope();\n        const consoleVar = astUtils.getVariableByName(scope, \"console\");\n        const shadowed = consoleVar && consoleVar.defs.length > 0;\n\n        /*\n         * 'scope.through' includes all references to undefined\n         * variables. If the variable 'console' is not defined, it uses\n         * 'scope.through'.\n         */\n        const references = consoleVar ? consoleVar.references : scope.through.filter(isConsole);\n        if (!shadowed) {\n          references.filter(isMemberAccessExceptAllowed).forEach(report);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allow","items","minItems","uniqueItems","additionalProperties","messages","unexpected","create","context","options","allowed","isConsole","reference","id","identifier","name","isAllowed","node","propertyName","getStaticPropertyName","indexOf","isMemberAccessExceptAllowed","parent","object","report","loc","messageId","Program:exit","scope","getScope","consoleVar","getVariableByName","shadowed","defs","length","references","through","filter","forEach"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-console.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of console object\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow the use of `console`\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-console\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        },\n                        minItems: 1,\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Unexpected console statement.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const allowed = options.allow || [];\n\n        /**\n         * Checks whether the given reference is 'console' or not.\n         * @param {eslint-scope.Reference} reference The reference to check.\n         * @returns {boolean} `true` if the reference is 'console'.\n         */\n        function isConsole(reference) {\n            const id = reference.identifier;\n\n            return id && id.name === \"console\";\n        }\n\n        /**\n         * Checks whether the property name of the given MemberExpression node\n         * is allowed by options or not.\n         * @param {ASTNode} node The MemberExpression node to check.\n         * @returns {boolean} `true` if the property name of the node is allowed.\n         */\n        function isAllowed(node) {\n            const propertyName = astUtils.getStaticPropertyName(node);\n\n            return propertyName && allowed.indexOf(propertyName) !== -1;\n        }\n\n        /**\n         * Checks whether the given reference is a member access which is not\n         * allowed by options or not.\n         * @param {eslint-scope.Reference} reference The reference to check.\n         * @returns {boolean} `true` if the reference is a member access which\n         *      is not allowed by options.\n         */\n        function isMemberAccessExceptAllowed(reference) {\n            const node = reference.identifier;\n            const parent = node.parent;\n\n            return (\n                parent.type === \"MemberExpression\" &&\n                parent.object === node &&\n                !isAllowed(parent)\n            );\n        }\n\n        /**\n         * Reports the given reference as a violation.\n         * @param {eslint-scope.Reference} reference The reference to report.\n         * @returns {void}\n         */\n        function report(reference) {\n            const node = reference.identifier.parent;\n\n            context.report({\n                node,\n                loc: node.loc,\n                messageId: \"unexpected\"\n            });\n        }\n\n        return {\n            \"Program:exit\"() {\n                const scope = context.getScope();\n                const consoleVar = astUtils.getVariableByName(scope, \"console\");\n                const shadowed = consoleVar && consoleVar.defs.length > 0;\n\n                /*\n                 * 'scope.through' includes all references to undefined\n                 * variables. If the variable 'console' is not defined, it uses\n                 * 'scope.through'.\n                 */\n                const references = consoleVar\n                    ? consoleVar.references\n                    : scope.through.filter(isConsole);\n\n                if (!shadowed) {\n                    references\n                        .filter(isMemberAccessExceptAllowed)\n                        .forEach(report);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}