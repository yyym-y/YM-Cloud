{"ast":null,"code":"/**\n * @fileoverview Rule to flag comparisons to null without a type-checking\n * operator.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `null` comparisons without type-checking operators\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-eq-null\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Use '===' to compare with null.\"\n    }\n  },\n  create(context) {\n    return {\n      BinaryExpression(node) {\n        const badOperator = node.operator === \"==\" || node.operator === \"!=\";\n        if (node.right.type === \"Literal\" && node.right.raw === \"null\" && badOperator || node.left.type === \"Literal\" && node.left.raw === \"null\" && badOperator) {\n          context.report({\n            node,\n            messageId: \"unexpected\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","BinaryExpression","node","badOperator","operator","right","raw","left","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-eq-null.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag comparisons to null without a type-checking\n * operator.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `null` comparisons without type-checking operators\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-eq-null\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Use '===' to compare with null.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            BinaryExpression(node) {\n                const badOperator = node.operator === \"==\" || node.operator === \"!=\";\n\n                if (node.right.type === \"Literal\" && node.right.raw === \"null\" && badOperator ||\n                        node.left.type === \"Literal\" && node.left.raw === \"null\" && badOperator) {\n                    context.report({ node, messageId: \"unexpected\" });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,6DAA6D;MAC1EC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,OAAO;MAEHC,gBAAgBA,CAACC,IAAI,EAAE;QACnB,MAAMC,WAAW,GAAGD,IAAI,CAACE,QAAQ,KAAK,IAAI,IAAIF,IAAI,CAACE,QAAQ,KAAK,IAAI;QAEpE,IAAIF,IAAI,CAACG,KAAK,CAACf,IAAI,KAAK,SAAS,IAAIY,IAAI,CAACG,KAAK,CAACC,GAAG,KAAK,MAAM,IAAIH,WAAW,IACrED,IAAI,CAACK,IAAI,CAACjB,IAAI,KAAK,SAAS,IAAIY,IAAI,CAACK,IAAI,CAACD,GAAG,KAAK,MAAM,IAAIH,WAAW,EAAE;UAC7EH,OAAO,CAACQ,MAAM,CAAC;YAAEN,IAAI;YAAEO,SAAS,EAAE;UAAa,CAAC,CAAC;QACrD;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}