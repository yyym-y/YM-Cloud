{"ast":null,"code":"/**\n * @fileoverview Rule to disallow returning values from setters\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\nconst {\n  findVariable\n} = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\nfunction isGlobalReference(node, scope) {\n  const variable = findVariable(scope, node);\n  return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n\n/**\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @param {string} objectName Name of the global object.\n * @param {string} methodName Name of the method.\n * @param {number} index The given position.\n * @returns {boolean} `true` if the node is argument at the given position.\n */\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\n  const callNode = node.parent;\n  return callNode.type === \"CallExpression\" && callNode.arguments[index] === node && astUtils.isSpecificMemberAccess(callNode.callee, objectName, methodName) && isGlobalReference(astUtils.skipChainExpression(callNode.callee).object, scope);\n}\n\n/**\n * Determines whether the given node is used as a property descriptor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\nfunction isPropertyDescriptor(node, scope) {\n  if (isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) || isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)) {\n    return true;\n  }\n  const parent = node.parent;\n  if (parent.type === \"Property\" && parent.value === node) {\n    const grandparent = parent.parent;\n    if (grandparent.type === \"ObjectExpression\" && (isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) || isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1))) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Determines whether the given function node is used as a setter function.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a setter.\n */\nfunction isSetter(node, scope) {\n  const parent = node.parent;\n  if (parent.kind === \"set\" && parent.value === node) {\n    // Setter in an object literal or in a class\n    return true;\n  }\n  if (parent.type === \"Property\" && parent.value === node && astUtils.getStaticPropertyName(parent) === \"set\" && parent.parent.type === \"ObjectExpression\" && isPropertyDescriptor(parent.parent, scope)) {\n    // Setter in a property descriptor\n    return true;\n  }\n  return false;\n}\n\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\nfunction getOuterScope(scope) {\n  const upper = scope.upper;\n  if (upper.type === \"function-expression-name\") {\n    return upper.upper;\n  }\n  return upper;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow returning values from setters\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-setter-return\"\n    },\n    schema: [],\n    messages: {\n      returnsValue: \"Setter cannot return a value.\"\n    }\n  },\n  create(context) {\n    let funcInfo = null;\n\n    /**\n     * Creates and pushes to the stack a function info object for the given function node.\n     * @param {ASTNode} node The function node.\n     * @returns {void}\n     */\n    function enterFunction(node) {\n      const outerScope = getOuterScope(context.getScope());\n      funcInfo = {\n        upper: funcInfo,\n        isSetter: isSetter(node, outerScope)\n      };\n    }\n\n    /**\n     * Pops the current function info object from the stack.\n     * @returns {void}\n     */\n    function exitFunction() {\n      funcInfo = funcInfo.upper;\n    }\n\n    /**\n     * Reports the given node.\n     * @param {ASTNode} node Node to report.\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"returnsValue\"\n      });\n    }\n    return {\n      /*\n       * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\n       * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\n       *\n       * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\n       * but that's out of scope for this rule.\n       */\n      FunctionDeclaration: enterFunction,\n      FunctionExpression: enterFunction,\n      ArrowFunctionExpression(node) {\n        enterFunction(node);\n        if (funcInfo.isSetter && node.expression) {\n          // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\n          report(node.body);\n        }\n      },\n      \"FunctionDeclaration:exit\": exitFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      \"ArrowFunctionExpression:exit\": exitFunction,\n      ReturnStatement(node) {\n        // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\n        if (funcInfo && funcInfo.isSetter && node.argument) {\n          report(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","findVariable","isGlobalReference","node","scope","variable","type","defs","length","isArgumentOfGlobalMethodCall","objectName","methodName","index","callNode","parent","arguments","isSpecificMemberAccess","callee","skipChainExpression","object","isPropertyDescriptor","value","grandparent","isSetter","kind","getStaticPropertyName","getOuterScope","upper","module","exports","meta","docs","description","category","recommended","url","schema","messages","returnsValue","create","context","funcInfo","enterFunction","outerScope","getScope","exitFunction","report","messageId","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","expression","body","ReturnStatement","argument"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-setter-return.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow returning values from setters\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { findVariable } = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\nfunction isGlobalReference(node, scope) {\n    const variable = findVariable(scope, node);\n\n    return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n\n/**\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @param {string} objectName Name of the global object.\n * @param {string} methodName Name of the method.\n * @param {number} index The given position.\n * @returns {boolean} `true` if the node is argument at the given position.\n */\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\n    const callNode = node.parent;\n\n    return callNode.type === \"CallExpression\" &&\n        callNode.arguments[index] === node &&\n        astUtils.isSpecificMemberAccess(callNode.callee, objectName, methodName) &&\n        isGlobalReference(astUtils.skipChainExpression(callNode.callee).object, scope);\n}\n\n/**\n * Determines whether the given node is used as a property descriptor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\nfunction isPropertyDescriptor(node, scope) {\n    if (\n        isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) ||\n        isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)\n    ) {\n        return true;\n    }\n\n    const parent = node.parent;\n\n    if (\n        parent.type === \"Property\" &&\n        parent.value === node\n    ) {\n        const grandparent = parent.parent;\n\n        if (\n            grandparent.type === \"ObjectExpression\" &&\n            (\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) ||\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1)\n            )\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Determines whether the given function node is used as a setter function.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a setter.\n */\nfunction isSetter(node, scope) {\n    const parent = node.parent;\n\n    if (\n        parent.kind === \"set\" &&\n        parent.value === node\n    ) {\n\n        // Setter in an object literal or in a class\n        return true;\n    }\n\n    if (\n        parent.type === \"Property\" &&\n        parent.value === node &&\n        astUtils.getStaticPropertyName(parent) === \"set\" &&\n        parent.parent.type === \"ObjectExpression\" &&\n        isPropertyDescriptor(parent.parent, scope)\n    ) {\n\n        // Setter in a property descriptor\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\nfunction getOuterScope(scope) {\n    const upper = scope.upper;\n\n    if (upper.type === \"function-expression-name\") {\n        return upper.upper;\n    }\n\n    return upper;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow returning values from setters\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-setter-return\"\n        },\n\n        schema: [],\n\n        messages: {\n            returnsValue: \"Setter cannot return a value.\"\n        }\n    },\n\n    create(context) {\n        let funcInfo = null;\n\n        /**\n         * Creates and pushes to the stack a function info object for the given function node.\n         * @param {ASTNode} node The function node.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            const outerScope = getOuterScope(context.getScope());\n\n            funcInfo = {\n                upper: funcInfo,\n                isSetter: isSetter(node, outerScope)\n            };\n        }\n\n        /**\n         * Pops the current function info object from the stack.\n         * @returns {void}\n         */\n        function exitFunction() {\n            funcInfo = funcInfo.upper;\n        }\n\n        /**\n         * Reports the given node.\n         * @param {ASTNode} node Node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"returnsValue\" });\n        }\n\n        return {\n\n            /*\n             * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\n             * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\n             *\n             * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\n             * but that's out of scope for this rule.\n             */\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression(node) {\n                enterFunction(node);\n\n                if (funcInfo.isSetter && node.expression) {\n\n                    // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\n                    report(node.body);\n                }\n            },\n\n            \"FunctionDeclaration:exit\": exitFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            \"ArrowFunctionExpression:exit\": exitFunction,\n\n            ReturnStatement(node) {\n\n                // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\n                if (funcInfo && funcInfo.isSetter && node.argument) {\n                    report(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}