{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar esprima;\n\n// Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\ntry {\n  // workaround to exclude package from browserify list.\n  var _require = require;\n  esprima = _require('esprima');\n} catch (_) {\n  /* eslint-disable no-redeclare */\n  /* global window */\n  if (typeof window !== 'undefined') esprima = window.esprima;\n}\nvar Type = require('../../type');\nfunction resolveJavascriptFunction(data) {\n  if (data === null) return false;\n  try {\n    var source = '(' + data + ')',\n      ast = esprima.parse(source, {\n        range: true\n      });\n    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n      return false;\n    }\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n\n  var source = '(' + data + ')',\n    ast = esprima.parse(source, {\n      range: true\n    }),\n    params = [],\n    body;\n  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n    throw new Error('Failed to resolve function');\n  }\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n  body = ast.body[0].expression.body.range;\n\n  // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n  if (ast.body[0].expression.body.type === 'BlockStatement') {\n    /*eslint-disable no-new-func*/\n    return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n  }\n  // ES6 arrow functions can omit the BlockStatement. In that case, just return\n  // the body.\n  /*eslint-disable no-new-func*/\n  return new Function(params, 'return ' + source.slice(body[0], body[1]));\n}\nfunction representJavascriptFunction(object /*, style*/) {\n  return object.toString();\n}\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});","map":{"version":3,"names":["require","esprima","_require","_","window","Type","resolveJavascriptFunction","data","source","ast","parse","range","type","body","length","expression","err","constructJavascriptFunction","params","Error","forEach","param","push","name","Function","slice","representJavascriptFunction","object","toString","isFunction","Object","prototype","call","module","exports","kind","resolve","construct","predicate","represent"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/js-yaml/lib/js-yaml/type/js/function.js"],"sourcesContent":["'use strict';\n\nvar esprima;\n\n// Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\ntry {\n  // workaround to exclude package from browserify list.\n  var _require = require;\n  esprima = _require('esprima');\n} catch (_) {\n  /* eslint-disable no-redeclare */\n  /* global window */\n  if (typeof window !== 'undefined') esprima = window.esprima;\n}\n\nvar Type = require('../../type');\n\nfunction resolveJavascriptFunction(data) {\n  if (data === null) return false;\n\n  try {\n    var source = '(' + data + ')',\n        ast    = esprima.parse(source, { range: true });\n\n    if (ast.type                    !== 'Program'             ||\n        ast.body.length             !== 1                     ||\n        ast.body[0].type            !== 'ExpressionStatement' ||\n        (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&\n          ast.body[0].expression.type !== 'FunctionExpression')) {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n\n  var source = '(' + data + ')',\n      ast    = esprima.parse(source, { range: true }),\n      params = [],\n      body;\n\n  if (ast.type                    !== 'Program'             ||\n      ast.body.length             !== 1                     ||\n      ast.body[0].type            !== 'ExpressionStatement' ||\n      (ast.body[0].expression.type !== 'ArrowFunctionExpression' &&\n        ast.body[0].expression.type !== 'FunctionExpression')) {\n    throw new Error('Failed to resolve function');\n  }\n\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n\n  body = ast.body[0].expression.body.range;\n\n  // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n  if (ast.body[0].expression.body.type === 'BlockStatement') {\n    /*eslint-disable no-new-func*/\n    return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n  }\n  // ES6 arrow functions can omit the BlockStatement. In that case, just return\n  // the body.\n  /*eslint-disable no-new-func*/\n  return new Function(params, 'return ' + source.slice(body[0], body[1]));\n}\n\nfunction representJavascriptFunction(object /*, style*/) {\n  return object.toString();\n}\n\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}