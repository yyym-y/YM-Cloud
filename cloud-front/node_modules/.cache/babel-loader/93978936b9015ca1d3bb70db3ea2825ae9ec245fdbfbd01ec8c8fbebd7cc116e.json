{"ast":null,"code":"/**\n * @fileoverview Rule to suggest using \"Reflect\" api over Function/Object methods\n * @author Keith Cirkel <http://keithcirkel.co.uk>\n * @deprecated in ESLint v3.9.0\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `Reflect` methods where applicable\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-reflect\"\n    },\n    deprecated: true,\n    replacedBy: [],\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptions: {\n          type: \"array\",\n          items: {\n            enum: [\"apply\", \"call\", \"delete\", \"defineProperty\", \"getOwnPropertyDescriptor\", \"getPrototypeOf\", \"setPrototypeOf\", \"isExtensible\", \"getOwnPropertyNames\", \"preventExtensions\"]\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      preferReflect: \"Avoid using {{existing}}, instead use {{substitute}}.\"\n    }\n  },\n  create(context) {\n    const existingNames = {\n      apply: \"Function.prototype.apply\",\n      call: \"Function.prototype.call\",\n      defineProperty: \"Object.defineProperty\",\n      getOwnPropertyDescriptor: \"Object.getOwnPropertyDescriptor\",\n      getPrototypeOf: \"Object.getPrototypeOf\",\n      setPrototypeOf: \"Object.setPrototypeOf\",\n      isExtensible: \"Object.isExtensible\",\n      getOwnPropertyNames: \"Object.getOwnPropertyNames\",\n      preventExtensions: \"Object.preventExtensions\"\n    };\n    const reflectSubstitutes = {\n      apply: \"Reflect.apply\",\n      call: \"Reflect.apply\",\n      defineProperty: \"Reflect.defineProperty\",\n      getOwnPropertyDescriptor: \"Reflect.getOwnPropertyDescriptor\",\n      getPrototypeOf: \"Reflect.getPrototypeOf\",\n      setPrototypeOf: \"Reflect.setPrototypeOf\",\n      isExtensible: \"Reflect.isExtensible\",\n      getOwnPropertyNames: \"Reflect.getOwnPropertyNames\",\n      preventExtensions: \"Reflect.preventExtensions\"\n    };\n    const exceptions = (context.options[0] || {}).exceptions || [];\n\n    /**\n     * Reports the Reflect violation based on the `existing` and `substitute`\n     * @param {Object} node The node that violates the rule.\n     * @param {string} existing The existing method name that has been used.\n     * @param {string} substitute The Reflect substitute that should be used.\n     * @returns {void}\n     */\n    function report(node, existing, substitute) {\n      context.report({\n        node,\n        messageId: \"preferReflect\",\n        data: {\n          existing,\n          substitute\n        }\n      });\n    }\n    return {\n      CallExpression(node) {\n        const methodName = (node.callee.property || {}).name;\n        const isReflectCall = (node.callee.object || {}).name === \"Reflect\";\n        const hasReflectSubstitute = Object.prototype.hasOwnProperty.call(reflectSubstitutes, methodName);\n        const userConfiguredException = exceptions.indexOf(methodName) !== -1;\n        if (hasReflectSubstitute && !isReflectCall && !userConfiguredException) {\n          report(node, existingNames[methodName], reflectSubstitutes[methodName]);\n        }\n      },\n      UnaryExpression(node) {\n        const isDeleteOperator = node.operator === \"delete\";\n        const targetsIdentifier = node.argument.type === \"Identifier\";\n        const userConfiguredException = exceptions.indexOf(\"delete\") !== -1;\n        if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {\n          report(node, \"the delete keyword\", \"Reflect.deleteProperty\");\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","deprecated","replacedBy","schema","properties","exceptions","items","enum","uniqueItems","additionalProperties","messages","preferReflect","create","context","existingNames","apply","call","defineProperty","getOwnPropertyDescriptor","getPrototypeOf","setPrototypeOf","isExtensible","getOwnPropertyNames","preventExtensions","reflectSubstitutes","options","report","node","existing","substitute","messageId","data","CallExpression","methodName","callee","property","name","isReflectCall","object","hasReflectSubstitute","Object","prototype","hasOwnProperty","userConfiguredException","indexOf","UnaryExpression","isDeleteOperator","operator","targetsIdentifier","argument"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/prefer-reflect.js"],"sourcesContent":["/**\n * @fileoverview Rule to suggest using \"Reflect\" api over Function/Object methods\n * @author Keith Cirkel <http://keithcirkel.co.uk>\n * @deprecated in ESLint v3.9.0\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `Reflect` methods where applicable\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-reflect\"\n        },\n\n        deprecated: true,\n\n        replacedBy: [],\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: {\n                            enum: [\n                                \"apply\",\n                                \"call\",\n                                \"delete\",\n                                \"defineProperty\",\n                                \"getOwnPropertyDescriptor\",\n                                \"getPrototypeOf\",\n                                \"setPrototypeOf\",\n                                \"isExtensible\",\n                                \"getOwnPropertyNames\",\n                                \"preventExtensions\"\n                            ]\n                        },\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            preferReflect: \"Avoid using {{existing}}, instead use {{substitute}}.\"\n        }\n    },\n\n    create(context) {\n        const existingNames = {\n            apply: \"Function.prototype.apply\",\n            call: \"Function.prototype.call\",\n            defineProperty: \"Object.defineProperty\",\n            getOwnPropertyDescriptor: \"Object.getOwnPropertyDescriptor\",\n            getPrototypeOf: \"Object.getPrototypeOf\",\n            setPrototypeOf: \"Object.setPrototypeOf\",\n            isExtensible: \"Object.isExtensible\",\n            getOwnPropertyNames: \"Object.getOwnPropertyNames\",\n            preventExtensions: \"Object.preventExtensions\"\n        };\n\n        const reflectSubstitutes = {\n            apply: \"Reflect.apply\",\n            call: \"Reflect.apply\",\n            defineProperty: \"Reflect.defineProperty\",\n            getOwnPropertyDescriptor: \"Reflect.getOwnPropertyDescriptor\",\n            getPrototypeOf: \"Reflect.getPrototypeOf\",\n            setPrototypeOf: \"Reflect.setPrototypeOf\",\n            isExtensible: \"Reflect.isExtensible\",\n            getOwnPropertyNames: \"Reflect.getOwnPropertyNames\",\n            preventExtensions: \"Reflect.preventExtensions\"\n        };\n\n        const exceptions = (context.options[0] || {}).exceptions || [];\n\n        /**\n         * Reports the Reflect violation based on the `existing` and `substitute`\n         * @param {Object} node The node that violates the rule.\n         * @param {string} existing The existing method name that has been used.\n         * @param {string} substitute The Reflect substitute that should be used.\n         * @returns {void}\n         */\n        function report(node, existing, substitute) {\n            context.report({\n                node,\n                messageId: \"preferReflect\",\n                data: {\n                    existing,\n                    substitute\n                }\n            });\n        }\n\n        return {\n            CallExpression(node) {\n                const methodName = (node.callee.property || {}).name;\n                const isReflectCall = (node.callee.object || {}).name === \"Reflect\";\n                const hasReflectSubstitute = Object.prototype.hasOwnProperty.call(reflectSubstitutes, methodName);\n                const userConfiguredException = exceptions.indexOf(methodName) !== -1;\n\n                if (hasReflectSubstitute && !isReflectCall && !userConfiguredException) {\n                    report(node, existingNames[methodName], reflectSubstitutes[methodName]);\n                }\n            },\n            UnaryExpression(node) {\n                const isDeleteOperator = node.operator === \"delete\";\n                const targetsIdentifier = node.argument.type === \"Identifier\";\n                const userConfiguredException = exceptions.indexOf(\"delete\") !== -1;\n\n                if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {\n                    report(node, \"the delete keyword\", \"Reflect.deleteProperty\");\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}