{"ast":null,"code":"/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce that class methods utilize `this`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptMethods: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingThis: \"Expected 'this' to be used by class {{name}}.\"\n    }\n  },\n  create(context) {\n    const config = Object.assign({}, context.options[0]);\n    const exceptMethods = new Set(config.exceptMethods || []);\n    const stack = [];\n\n    /**\n     * Initializes the current context to false and pushes it onto the stack.\n     * These booleans represent whether 'this' has been used in the context.\n     * @returns {void}\n     * @private\n     */\n    function enterFunction() {\n      stack.push(false);\n    }\n\n    /**\n     * Check if the node is an instance method\n     * @param {ASTNode} node node to check\n     * @returns {boolean} True if its an instance method\n     * @private\n     */\n    function isInstanceMethod(node) {\n      return !node.static && node.kind !== \"constructor\" && node.type === \"MethodDefinition\";\n    }\n\n    /**\n     * Check if the node is an instance method not excluded by config\n     * @param {ASTNode} node node to check\n     * @returns {boolean} True if it is an instance method, and not excluded by config\n     * @private\n     */\n    function isIncludedInstanceMethod(node) {\n      return isInstanceMethod(node) && (node.computed || !exceptMethods.has(node.key.name));\n    }\n\n    /**\n     * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n     * Static methods and the constructor are exempt.\n     * Then pops the context off the stack.\n     * @param {ASTNode} node A function node that was entered.\n     * @returns {void}\n     * @private\n     */\n    function exitFunction(node) {\n      const methodUsesThis = stack.pop();\n      if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n        context.report({\n          node,\n          messageId: \"missingThis\",\n          data: {\n            name: astUtils.getFunctionNameWithKind(node)\n          }\n        });\n      }\n    }\n\n    /**\n     * Mark the current context as having used 'this'.\n     * @returns {void}\n     * @private\n     */\n    function markThisUsed() {\n      if (stack.length) {\n        stack[stack.length - 1] = true;\n      }\n    }\n    return {\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      ThisExpression: markThisUsed,\n      Super: markThisUsed\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","exceptMethods","items","additionalProperties","messages","missingThis","create","context","config","Object","assign","options","Set","stack","enterFunction","push","isInstanceMethod","node","static","kind","isIncludedInstanceMethod","computed","has","key","name","exitFunction","methodUsesThis","pop","parent","report","messageId","data","getFunctionNameWithKind","markThisUsed","length","FunctionDeclaration","FunctionExpression","ThisExpression","Super"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/class-methods-use-this.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce that class methods utilize `this`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                exceptMethods: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    }\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingThis: \"Expected 'this' to be used by class {{name}}.\"\n        }\n    },\n    create(context) {\n        const config = Object.assign({}, context.options[0]);\n        const exceptMethods = new Set(config.exceptMethods || []);\n\n        const stack = [];\n\n        /**\n         * Initializes the current context to false and pushes it onto the stack.\n         * These booleans represent whether 'this' has been used in the context.\n         * @returns {void}\n         * @private\n         */\n        function enterFunction() {\n            stack.push(false);\n        }\n\n        /**\n         * Check if the node is an instance method\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if its an instance method\n         * @private\n         */\n        function isInstanceMethod(node) {\n            return !node.static && node.kind !== \"constructor\" && node.type === \"MethodDefinition\";\n        }\n\n        /**\n         * Check if the node is an instance method not excluded by config\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if it is an instance method, and not excluded by config\n         * @private\n         */\n        function isIncludedInstanceMethod(node) {\n            return isInstanceMethod(node) &&\n                (node.computed || !exceptMethods.has(node.key.name));\n        }\n\n        /**\n         * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n         * Static methods and the constructor are exempt.\n         * Then pops the context off the stack.\n         * @param {ASTNode} node A function node that was entered.\n         * @returns {void}\n         * @private\n         */\n        function exitFunction(node) {\n            const methodUsesThis = stack.pop();\n\n            if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n                context.report({\n                    node,\n                    messageId: \"missingThis\",\n                    data: {\n                        name: astUtils.getFunctionNameWithKind(node)\n                    }\n                });\n            }\n        }\n\n        /**\n         * Mark the current context as having used 'this'.\n         * @returns {void}\n         * @private\n         */\n        function markThisUsed() {\n            if (stack.length) {\n                stack[stack.length - 1] = true;\n            }\n        }\n\n        return {\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            ThisExpression: markThisUsed,\n            Super: markThisUsed\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAAAA,OAAA;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,2CAA2C;MACxDC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CAAC;MACLN,IAAI,EAAE,QAAQ;MACdO,UAAU,EAAE;QACRC,aAAa,EAAE;UACXR,IAAI,EAAE,OAAO;UACbS,KAAK,EAAE;YACHT,IAAI,EAAE;UACV;QACJ;MACJ,CAAC;MACDU,oBAAoB,EAAE;IAC1B,CAAC,CAAC;IAEFC,QAAQ,EAAE;MACNC,WAAW,EAAE;IACjB;EACJ,CAAC;EACDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,OAAO,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;IACpD,MAAMV,aAAa,GAAG,IAAIW,GAAG,CAACJ,MAAM,CAACP,aAAa,IAAI,EAAE,CAAC;IAEzD,MAAMY,KAAK,GAAG,EAAE;;IAEhB;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,aAAaA,CAAA,EAAG;MACrBD,KAAK,CAACE,IAAI,CAAC,KAAK,CAAC;IACrB;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,gBAAgBA,CAACC,IAAI,EAAE;MAC5B,OAAO,CAACA,IAAI,CAACC,MAAM,IAAID,IAAI,CAACE,IAAI,KAAK,aAAa,IAAIF,IAAI,CAACxB,IAAI,KAAK,kBAAkB;IAC1F;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAAS2B,wBAAwBA,CAACH,IAAI,EAAE;MACpC,OAAOD,gBAAgB,CAACC,IAAI,CAAC,KACxBA,IAAI,CAACI,QAAQ,IAAI,CAACpB,aAAa,CAACqB,GAAG,CAACL,IAAI,CAACM,GAAG,CAACC,IAAI,CAAC,CAAC;IAC5D;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,YAAYA,CAACR,IAAI,EAAE;MACxB,MAAMS,cAAc,GAAGb,KAAK,CAACc,GAAG,CAAC,CAAC;MAElC,IAAIP,wBAAwB,CAACH,IAAI,CAACW,MAAM,CAAC,IAAI,CAACF,cAAc,EAAE;QAC1DnB,OAAO,CAACsB,MAAM,CAAC;UACXZ,IAAI;UACJa,SAAS,EAAE,aAAa;UACxBC,IAAI,EAAE;YACFP,IAAI,EAAEnC,QAAQ,CAAC2C,uBAAuB,CAACf,IAAI;UAC/C;QACJ,CAAC,CAAC;MACN;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASgB,YAAYA,CAAA,EAAG;MACpB,IAAIpB,KAAK,CAACqB,MAAM,EAAE;QACdrB,KAAK,CAACA,KAAK,CAACqB,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;MAClC;IACJ;IAEA,OAAO;MACHC,mBAAmB,EAAErB,aAAa;MAClC,0BAA0B,EAAEW,YAAY;MACxCW,kBAAkB,EAAEtB,aAAa;MACjC,yBAAyB,EAAEW,YAAY;MACvCY,cAAc,EAAEJ,YAAY;MAC5BK,KAAK,EAAEL;IACX,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}