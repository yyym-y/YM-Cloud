{"ast":null,"code":"/**\n * @fileoverview `CascadingConfigArrayFactory` class.\n *\n * `CascadingConfigArrayFactory` class has a responsibility:\n *\n * 1. Handles cascading of config files.\n *\n * It provides two methods:\n *\n * - `getConfigArrayForFile(filePath)`\n *     Get the corresponded configuration of a given file. This method doesn't\n *     throw even if the given file didn't exist.\n * - `clearCache()`\n *     Clear the internal cache. You have to call this method when\n *     `additionalPluginPool` was updated if `baseConfig` or `cliConfig` depends\n *     on the additional plugins. (`CLIEngine#addPlugin()` method calls this.)\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst ConfigValidator = require(\"./shared/config-validator\");\nconst {\n  emitDeprecationWarning\n} = require(\"./shared/deprecation-warnings\");\nconst {\n  ConfigArrayFactory\n} = require(\"./config-array-factory\");\nconst {\n  ConfigArray,\n  ConfigDependency,\n  IgnorePattern\n} = require(\"./config-array\");\nconst debug = require(\"debug\")(\"eslintrc:cascading-config-array-factory\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n// Define types for VSCode IntelliSense.\n/** @typedef {import(\"./shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"./shared/types\").Parser} Parser */\n/** @typedef {import(\"./shared/types\").Plugin} Plugin */\n/** @typedef {import(\"./shared/types\").Rule} Rule */\n/** @typedef {ReturnType<ConfigArrayFactory[\"create\"]>} ConfigArray */\n\n/**\n * @typedef {Object} CascadingConfigArrayFactoryOptions\n * @property {Map<string,Plugin>} [additionalPluginPool] The map for additional plugins.\n * @property {ConfigData} [baseConfig] The config by `baseConfig` option.\n * @property {ConfigData} [cliConfig] The config by CLI options (`--env`, `--global`, `--ignore-pattern`, `--parser`, `--parser-options`, `--plugin`, and `--rule`). CLI options overwrite the setting in config files.\n * @property {string} [cwd] The base directory to start lookup.\n * @property {string} [ignorePath] The path to the alternative file of `.eslintignore`.\n * @property {string[]} [rulePaths] The value of `--rulesdir` option.\n * @property {string} [specificConfigPath] The value of `--config` option.\n * @property {boolean} [useEslintrc] if `false` then it doesn't load config files.\n * @property {Function} loadRules The function to use to load rules.\n * @property {Map<string,Rule>} builtInRules The rules that are built in to ESLint.\n * @property {Object} [resolver=ModuleResolver] The module resolver object.\n * @property {string} eslintAllPath The path to the definitions for eslint:all.\n * @property {string} eslintRecommendedPath The path to the definitions for eslint:recommended.\n */\n\n/**\n * @typedef {Object} CascadingConfigArrayFactoryInternalSlots\n * @property {ConfigArray} baseConfigArray The config array of `baseConfig` option.\n * @property {ConfigData} baseConfigData The config data of `baseConfig` option. This is used to reset `baseConfigArray`.\n * @property {ConfigArray} cliConfigArray The config array of CLI options.\n * @property {ConfigData} cliConfigData The config data of CLI options. This is used to reset `cliConfigArray`.\n * @property {ConfigArrayFactory} configArrayFactory The factory for config arrays.\n * @property {Map<string, ConfigArray>} configCache The cache from directory paths to config arrays.\n * @property {string} cwd The base directory to start lookup.\n * @property {WeakMap<ConfigArray, ConfigArray>} finalizeCache The cache from config arrays to finalized config arrays.\n * @property {string} [ignorePath] The path to the alternative file of `.eslintignore`.\n * @property {string[]|null} rulePaths The value of `--rulesdir` option. This is used to reset `baseConfigArray`.\n * @property {string|null} specificConfigPath The value of `--config` option. This is used to reset `cliConfigArray`.\n * @property {boolean} useEslintrc if `false` then it doesn't load config files.\n * @property {Function} loadRules The function to use to load rules.\n * @property {Map<string,Rule>} builtInRules The rules that are built in to ESLint.\n * @property {Object} [resolver=ModuleResolver] The module resolver object.\n * @property {string} eslintAllPath The path to the definitions for eslint:all.\n * @property {string} eslintRecommendedPath The path to the definitions for eslint:recommended.\n */\n\n/** @type {WeakMap<CascadingConfigArrayFactory, CascadingConfigArrayFactoryInternalSlots>} */\nconst internalSlotsMap = new WeakMap();\n\n/**\n * Create the config array from `baseConfig` and `rulePaths`.\n * @param {CascadingConfigArrayFactoryInternalSlots} slots The slots.\n * @returns {ConfigArray} The config array of the base configs.\n */\nfunction createBaseConfigArray({\n  configArrayFactory,\n  baseConfigData,\n  rulePaths,\n  cwd,\n  loadRules\n}) {\n  const baseConfigArray = configArrayFactory.create(baseConfigData, {\n    name: \"BaseConfig\"\n  });\n\n  /*\n   * Create the config array element for the default ignore patterns.\n   * This element has `ignorePattern` property that ignores the default\n   * patterns in the current working directory.\n   */\n  baseConfigArray.unshift(configArrayFactory.create({\n    ignorePatterns: IgnorePattern.DefaultPatterns\n  }, {\n    name: \"DefaultIgnorePattern\"\n  })[0]);\n\n  /*\n   * Load rules `--rulesdir` option as a pseudo plugin.\n   * Use a pseudo plugin to define rules of `--rulesdir`, so we can validate\n   * the rule's options with only information in the config array.\n   */\n  if (rulePaths && rulePaths.length > 0) {\n    baseConfigArray.push({\n      type: \"config\",\n      name: \"--rulesdir\",\n      filePath: \"\",\n      plugins: {\n        \"\": new ConfigDependency({\n          definition: {\n            rules: rulePaths.reduce((map, rulesPath) => Object.assign(map, loadRules(rulesPath, cwd)), {})\n          },\n          filePath: \"\",\n          id: \"\",\n          importerName: \"--rulesdir\",\n          importerPath: \"\"\n        })\n      }\n    });\n  }\n  return baseConfigArray;\n}\n\n/**\n * Create the config array from CLI options.\n * @param {CascadingConfigArrayFactoryInternalSlots} slots The slots.\n * @returns {ConfigArray} The config array of the base configs.\n */\nfunction createCLIConfigArray({\n  cliConfigData,\n  configArrayFactory,\n  cwd,\n  ignorePath,\n  specificConfigPath\n}) {\n  const cliConfigArray = configArrayFactory.create(cliConfigData, {\n    name: \"CLIOptions\"\n  });\n  cliConfigArray.unshift(...(ignorePath ? configArrayFactory.loadESLintIgnore(ignorePath) : configArrayFactory.loadDefaultESLintIgnore()));\n  if (specificConfigPath) {\n    cliConfigArray.unshift(...configArrayFactory.loadFile(specificConfigPath, {\n      name: \"--config\",\n      basePath: cwd\n    }));\n  }\n  return cliConfigArray;\n}\n\n/**\n * The error type when there are files matched by a glob, but all of them have been ignored.\n */\nclass ConfigurationNotFoundError extends Error {\n  // eslint-disable-next-line jsdoc/require-description\n  /**\n   * @param {string} directoryPath The directory path.\n   */\n  constructor(directoryPath) {\n    super(`No ESLint configuration found in ${directoryPath}.`);\n    this.messageTemplate = \"no-config-found\";\n    this.messageData = {\n      directoryPath\n    };\n  }\n}\n\n/**\n * This class provides the functionality that enumerates every file which is\n * matched by given glob patterns and that configuration.\n */\nclass CascadingConfigArrayFactory {\n  /**\n   * Initialize this enumerator.\n   * @param {CascadingConfigArrayFactoryOptions} options The options.\n   */\n  constructor({\n    additionalPluginPool = new Map(),\n    baseConfig: baseConfigData = null,\n    cliConfig: cliConfigData = null,\n    cwd = process.cwd(),\n    ignorePath,\n    resolvePluginsRelativeTo,\n    rulePaths = [],\n    specificConfigPath = null,\n    useEslintrc = true,\n    builtInRules = new Map(),\n    loadRules,\n    resolver,\n    eslintRecommendedPath,\n    eslintAllPath\n  } = {}) {\n    const configArrayFactory = new ConfigArrayFactory({\n      additionalPluginPool,\n      cwd,\n      resolvePluginsRelativeTo,\n      builtInRules,\n      resolver,\n      eslintRecommendedPath,\n      eslintAllPath\n    });\n    internalSlotsMap.set(this, {\n      baseConfigArray: createBaseConfigArray({\n        baseConfigData,\n        configArrayFactory,\n        cwd,\n        rulePaths,\n        loadRules,\n        resolver\n      }),\n      baseConfigData,\n      cliConfigArray: createCLIConfigArray({\n        cliConfigData,\n        configArrayFactory,\n        cwd,\n        ignorePath,\n        specificConfigPath\n      }),\n      cliConfigData,\n      configArrayFactory,\n      configCache: new Map(),\n      cwd,\n      finalizeCache: new WeakMap(),\n      ignorePath,\n      rulePaths,\n      specificConfigPath,\n      useEslintrc,\n      builtInRules,\n      loadRules\n    });\n  }\n\n  /**\n   * The path to the current working directory.\n   * This is used by tests.\n   * @type {string}\n   */\n  get cwd() {\n    const {\n      cwd\n    } = internalSlotsMap.get(this);\n    return cwd;\n  }\n\n  /**\n   * Get the config array of a given file.\n   * If `filePath` was not given, it returns the config which contains only\n   * `baseConfigData` and `cliConfigData`.\n   * @param {string} [filePath] The file path to a file.\n   * @param {Object} [options] The options.\n   * @param {boolean} [options.ignoreNotFoundError] If `true` then it doesn't throw `ConfigurationNotFoundError`.\n   * @returns {ConfigArray} The config array of the file.\n   */\n  getConfigArrayForFile(filePath, {\n    ignoreNotFoundError = false\n  } = {}) {\n    const {\n      baseConfigArray,\n      cliConfigArray,\n      cwd\n    } = internalSlotsMap.get(this);\n    if (!filePath) {\n      return new ConfigArray(...baseConfigArray, ...cliConfigArray);\n    }\n    const directoryPath = path.dirname(path.resolve(cwd, filePath));\n    debug(`Load config files for ${directoryPath}.`);\n    return this._finalizeConfigArray(this._loadConfigInAncestors(directoryPath), directoryPath, ignoreNotFoundError);\n  }\n\n  /**\n   * Set the config data to override all configs.\n   * Require to call `clearCache()` method after this method is called.\n   * @param {ConfigData} configData The config data to override all configs.\n   * @returns {void}\n   */\n  setOverrideConfig(configData) {\n    const slots = internalSlotsMap.get(this);\n    slots.cliConfigData = configData;\n  }\n\n  /**\n   * Clear config cache.\n   * @returns {void}\n   */\n  clearCache() {\n    const slots = internalSlotsMap.get(this);\n    slots.baseConfigArray = createBaseConfigArray(slots);\n    slots.cliConfigArray = createCLIConfigArray(slots);\n    slots.configCache.clear();\n  }\n\n  /**\n   * Load and normalize config files from the ancestor directories.\n   * @param {string} directoryPath The path to a leaf directory.\n   * @param {boolean} configsExistInSubdirs `true` if configurations exist in subdirectories.\n   * @returns {ConfigArray} The loaded config.\n   * @private\n   */\n  _loadConfigInAncestors(directoryPath, configsExistInSubdirs = false) {\n    const {\n      baseConfigArray,\n      configArrayFactory,\n      configCache,\n      cwd,\n      useEslintrc\n    } = internalSlotsMap.get(this);\n    if (!useEslintrc) {\n      return baseConfigArray;\n    }\n    let configArray = configCache.get(directoryPath);\n\n    // Hit cache.\n    if (configArray) {\n      debug(`Cache hit: ${directoryPath}.`);\n      return configArray;\n    }\n    debug(`No cache found: ${directoryPath}.`);\n    const homePath = os.homedir();\n\n    // Consider this is root.\n    if (directoryPath === homePath && cwd !== homePath) {\n      debug(\"Stop traversing because of considered root.\");\n      if (configsExistInSubdirs) {\n        const filePath = ConfigArrayFactory.getPathToConfigFileInDirectory(directoryPath);\n        if (filePath) {\n          emitDeprecationWarning(filePath, \"ESLINT_PERSONAL_CONFIG_SUPPRESS\");\n        }\n      }\n      return this._cacheConfig(directoryPath, baseConfigArray);\n    }\n\n    // Load the config on this directory.\n    try {\n      configArray = configArrayFactory.loadInDirectory(directoryPath);\n    } catch (error) {\n      /* istanbul ignore next */\n      if (error.code === \"EACCES\") {\n        debug(\"Stop traversing because of 'EACCES' error.\");\n        return this._cacheConfig(directoryPath, baseConfigArray);\n      }\n      throw error;\n    }\n    if (configArray.length > 0 && configArray.isRoot()) {\n      debug(\"Stop traversing because of 'root:true'.\");\n      configArray.unshift(...baseConfigArray);\n      return this._cacheConfig(directoryPath, configArray);\n    }\n\n    // Load from the ancestors and merge it.\n    const parentPath = path.dirname(directoryPath);\n    const parentConfigArray = parentPath && parentPath !== directoryPath ? this._loadConfigInAncestors(parentPath, configsExistInSubdirs || configArray.length > 0) : baseConfigArray;\n    if (configArray.length > 0) {\n      configArray.unshift(...parentConfigArray);\n    } else {\n      configArray = parentConfigArray;\n    }\n\n    // Cache and return.\n    return this._cacheConfig(directoryPath, configArray);\n  }\n\n  /**\n   * Freeze and cache a given config.\n   * @param {string} directoryPath The path to a directory as a cache key.\n   * @param {ConfigArray} configArray The config array as a cache value.\n   * @returns {ConfigArray} The `configArray` (frozen).\n   */\n  _cacheConfig(directoryPath, configArray) {\n    const {\n      configCache\n    } = internalSlotsMap.get(this);\n    Object.freeze(configArray);\n    configCache.set(directoryPath, configArray);\n    return configArray;\n  }\n\n  /**\n   * Finalize a given config array.\n   * Concatenate `--config` and other CLI options.\n   * @param {ConfigArray} configArray The parent config array.\n   * @param {string} directoryPath The path to the leaf directory to find config files.\n   * @param {boolean} ignoreNotFoundError If `true` then it doesn't throw `ConfigurationNotFoundError`.\n   * @returns {ConfigArray} The loaded config.\n   * @private\n   */\n  _finalizeConfigArray(configArray, directoryPath, ignoreNotFoundError) {\n    const {\n      cliConfigArray,\n      configArrayFactory,\n      finalizeCache,\n      useEslintrc,\n      builtInRules\n    } = internalSlotsMap.get(this);\n    let finalConfigArray = finalizeCache.get(configArray);\n    if (!finalConfigArray) {\n      finalConfigArray = configArray;\n\n      // Load the personal config if there are no regular config files.\n      if (useEslintrc && configArray.every(c => !c.filePath) && cliConfigArray.every(c => !c.filePath) // `--config` option can be a file.\n      ) {\n        const homePath = os.homedir();\n        debug(\"Loading the config file of the home directory:\", homePath);\n        const personalConfigArray = configArrayFactory.loadInDirectory(homePath, {\n          name: \"PersonalConfig\"\n        });\n        if (personalConfigArray.length > 0 && !directoryPath.startsWith(homePath)) {\n          const lastElement = personalConfigArray[personalConfigArray.length - 1];\n          emitDeprecationWarning(lastElement.filePath, \"ESLINT_PERSONAL_CONFIG_LOAD\");\n        }\n        finalConfigArray = finalConfigArray.concat(personalConfigArray);\n      }\n\n      // Apply CLI options.\n      if (cliConfigArray.length > 0) {\n        finalConfigArray = finalConfigArray.concat(cliConfigArray);\n      }\n\n      // Validate rule settings and environments.\n      const validator = new ConfigValidator({\n        builtInRules\n      });\n      validator.validateConfigArray(finalConfigArray);\n\n      // Cache it.\n      Object.freeze(finalConfigArray);\n      finalizeCache.set(configArray, finalConfigArray);\n      debug(\"Configuration was determined: %o on %s\", finalConfigArray, directoryPath);\n    }\n\n    // At least one element (the default ignore patterns) exists.\n    if (!ignoreNotFoundError && useEslintrc && finalConfigArray.length <= 1) {\n      throw new ConfigurationNotFoundError(directoryPath);\n    }\n    return finalConfigArray;\n  }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  CascadingConfigArrayFactory\n};","map":{"version":3,"names":["require","os","path","ConfigValidator","emitDeprecationWarning","ConfigArrayFactory","ConfigArray","ConfigDependency","IgnorePattern","debug","internalSlotsMap","WeakMap","createBaseConfigArray","configArrayFactory","baseConfigData","rulePaths","cwd","loadRules","baseConfigArray","create","name","unshift","ignorePatterns","DefaultPatterns","length","push","type","filePath","plugins","definition","rules","reduce","map","rulesPath","Object","assign","id","importerName","importerPath","createCLIConfigArray","cliConfigData","ignorePath","specificConfigPath","cliConfigArray","loadESLintIgnore","loadDefaultESLintIgnore","loadFile","basePath","ConfigurationNotFoundError","Error","constructor","directoryPath","messageTemplate","messageData","CascadingConfigArrayFactory","additionalPluginPool","Map","baseConfig","cliConfig","process","resolvePluginsRelativeTo","useEslintrc","builtInRules","resolver","eslintRecommendedPath","eslintAllPath","set","configCache","finalizeCache","get","getConfigArrayForFile","ignoreNotFoundError","dirname","resolve","_finalizeConfigArray","_loadConfigInAncestors","setOverrideConfig","configData","slots","clearCache","clear","configsExistInSubdirs","configArray","homePath","homedir","getPathToConfigFileInDirectory","_cacheConfig","loadInDirectory","error","code","isRoot","parentPath","parentConfigArray","freeze","finalConfigArray","every","c","personalConfigArray","startsWith","lastElement","concat","validator","validateConfigArray","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/@eslint/eslintrc/lib/cascading-config-array-factory.js"],"sourcesContent":["/**\n * @fileoverview `CascadingConfigArrayFactory` class.\n *\n * `CascadingConfigArrayFactory` class has a responsibility:\n *\n * 1. Handles cascading of config files.\n *\n * It provides two methods:\n *\n * - `getConfigArrayForFile(filePath)`\n *     Get the corresponded configuration of a given file. This method doesn't\n *     throw even if the given file didn't exist.\n * - `clearCache()`\n *     Clear the internal cache. You have to call this method when\n *     `additionalPluginPool` was updated if `baseConfig` or `cliConfig` depends\n *     on the additional plugins. (`CLIEngine#addPlugin()` method calls this.)\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst ConfigValidator = require(\"./shared/config-validator\");\nconst { emitDeprecationWarning } = require(\"./shared/deprecation-warnings\");\nconst { ConfigArrayFactory } = require(\"./config-array-factory\");\nconst { ConfigArray, ConfigDependency, IgnorePattern } = require(\"./config-array\");\nconst debug = require(\"debug\")(\"eslintrc:cascading-config-array-factory\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n// Define types for VSCode IntelliSense.\n/** @typedef {import(\"./shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"./shared/types\").Parser} Parser */\n/** @typedef {import(\"./shared/types\").Plugin} Plugin */\n/** @typedef {import(\"./shared/types\").Rule} Rule */\n/** @typedef {ReturnType<ConfigArrayFactory[\"create\"]>} ConfigArray */\n\n/**\n * @typedef {Object} CascadingConfigArrayFactoryOptions\n * @property {Map<string,Plugin>} [additionalPluginPool] The map for additional plugins.\n * @property {ConfigData} [baseConfig] The config by `baseConfig` option.\n * @property {ConfigData} [cliConfig] The config by CLI options (`--env`, `--global`, `--ignore-pattern`, `--parser`, `--parser-options`, `--plugin`, and `--rule`). CLI options overwrite the setting in config files.\n * @property {string} [cwd] The base directory to start lookup.\n * @property {string} [ignorePath] The path to the alternative file of `.eslintignore`.\n * @property {string[]} [rulePaths] The value of `--rulesdir` option.\n * @property {string} [specificConfigPath] The value of `--config` option.\n * @property {boolean} [useEslintrc] if `false` then it doesn't load config files.\n * @property {Function} loadRules The function to use to load rules.\n * @property {Map<string,Rule>} builtInRules The rules that are built in to ESLint.\n * @property {Object} [resolver=ModuleResolver] The module resolver object.\n * @property {string} eslintAllPath The path to the definitions for eslint:all.\n * @property {string} eslintRecommendedPath The path to the definitions for eslint:recommended.\n */\n\n/**\n * @typedef {Object} CascadingConfigArrayFactoryInternalSlots\n * @property {ConfigArray} baseConfigArray The config array of `baseConfig` option.\n * @property {ConfigData} baseConfigData The config data of `baseConfig` option. This is used to reset `baseConfigArray`.\n * @property {ConfigArray} cliConfigArray The config array of CLI options.\n * @property {ConfigData} cliConfigData The config data of CLI options. This is used to reset `cliConfigArray`.\n * @property {ConfigArrayFactory} configArrayFactory The factory for config arrays.\n * @property {Map<string, ConfigArray>} configCache The cache from directory paths to config arrays.\n * @property {string} cwd The base directory to start lookup.\n * @property {WeakMap<ConfigArray, ConfigArray>} finalizeCache The cache from config arrays to finalized config arrays.\n * @property {string} [ignorePath] The path to the alternative file of `.eslintignore`.\n * @property {string[]|null} rulePaths The value of `--rulesdir` option. This is used to reset `baseConfigArray`.\n * @property {string|null} specificConfigPath The value of `--config` option. This is used to reset `cliConfigArray`.\n * @property {boolean} useEslintrc if `false` then it doesn't load config files.\n * @property {Function} loadRules The function to use to load rules.\n * @property {Map<string,Rule>} builtInRules The rules that are built in to ESLint.\n * @property {Object} [resolver=ModuleResolver] The module resolver object.\n * @property {string} eslintAllPath The path to the definitions for eslint:all.\n * @property {string} eslintRecommendedPath The path to the definitions for eslint:recommended.\n */\n\n/** @type {WeakMap<CascadingConfigArrayFactory, CascadingConfigArrayFactoryInternalSlots>} */\nconst internalSlotsMap = new WeakMap();\n\n/**\n * Create the config array from `baseConfig` and `rulePaths`.\n * @param {CascadingConfigArrayFactoryInternalSlots} slots The slots.\n * @returns {ConfigArray} The config array of the base configs.\n */\nfunction createBaseConfigArray({\n    configArrayFactory,\n    baseConfigData,\n    rulePaths,\n    cwd,\n    loadRules\n}) {\n    const baseConfigArray = configArrayFactory.create(\n        baseConfigData,\n        { name: \"BaseConfig\" }\n    );\n\n    /*\n     * Create the config array element for the default ignore patterns.\n     * This element has `ignorePattern` property that ignores the default\n     * patterns in the current working directory.\n     */\n    baseConfigArray.unshift(configArrayFactory.create(\n        { ignorePatterns: IgnorePattern.DefaultPatterns },\n        { name: \"DefaultIgnorePattern\" }\n    )[0]);\n\n    /*\n     * Load rules `--rulesdir` option as a pseudo plugin.\n     * Use a pseudo plugin to define rules of `--rulesdir`, so we can validate\n     * the rule's options with only information in the config array.\n     */\n    if (rulePaths && rulePaths.length > 0) {\n        baseConfigArray.push({\n            type: \"config\",\n            name: \"--rulesdir\",\n            filePath: \"\",\n            plugins: {\n                \"\": new ConfigDependency({\n                    definition: {\n                        rules: rulePaths.reduce(\n                            (map, rulesPath) => Object.assign(\n                                map,\n                                loadRules(rulesPath, cwd)\n                            ),\n                            {}\n                        )\n                    },\n                    filePath: \"\",\n                    id: \"\",\n                    importerName: \"--rulesdir\",\n                    importerPath: \"\"\n                })\n            }\n        });\n    }\n\n    return baseConfigArray;\n}\n\n/**\n * Create the config array from CLI options.\n * @param {CascadingConfigArrayFactoryInternalSlots} slots The slots.\n * @returns {ConfigArray} The config array of the base configs.\n */\nfunction createCLIConfigArray({\n    cliConfigData,\n    configArrayFactory,\n    cwd,\n    ignorePath,\n    specificConfigPath\n}) {\n    const cliConfigArray = configArrayFactory.create(\n        cliConfigData,\n        { name: \"CLIOptions\" }\n    );\n\n    cliConfigArray.unshift(\n        ...(ignorePath\n            ? configArrayFactory.loadESLintIgnore(ignorePath)\n            : configArrayFactory.loadDefaultESLintIgnore())\n    );\n\n    if (specificConfigPath) {\n        cliConfigArray.unshift(\n            ...configArrayFactory.loadFile(\n                specificConfigPath,\n                { name: \"--config\", basePath: cwd }\n            )\n        );\n    }\n\n    return cliConfigArray;\n}\n\n/**\n * The error type when there are files matched by a glob, but all of them have been ignored.\n */\nclass ConfigurationNotFoundError extends Error {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {string} directoryPath The directory path.\n     */\n    constructor(directoryPath) {\n        super(`No ESLint configuration found in ${directoryPath}.`);\n        this.messageTemplate = \"no-config-found\";\n        this.messageData = { directoryPath };\n    }\n}\n\n/**\n * This class provides the functionality that enumerates every file which is\n * matched by given glob patterns and that configuration.\n */\nclass CascadingConfigArrayFactory {\n\n    /**\n     * Initialize this enumerator.\n     * @param {CascadingConfigArrayFactoryOptions} options The options.\n     */\n    constructor({\n        additionalPluginPool = new Map(),\n        baseConfig: baseConfigData = null,\n        cliConfig: cliConfigData = null,\n        cwd = process.cwd(),\n        ignorePath,\n        resolvePluginsRelativeTo,\n        rulePaths = [],\n        specificConfigPath = null,\n        useEslintrc = true,\n        builtInRules = new Map(),\n        loadRules,\n        resolver,\n        eslintRecommendedPath,\n        eslintAllPath\n    } = {}) {\n        const configArrayFactory = new ConfigArrayFactory({\n            additionalPluginPool,\n            cwd,\n            resolvePluginsRelativeTo,\n            builtInRules,\n            resolver,\n            eslintRecommendedPath,\n            eslintAllPath\n        });\n\n        internalSlotsMap.set(this, {\n            baseConfigArray: createBaseConfigArray({\n                baseConfigData,\n                configArrayFactory,\n                cwd,\n                rulePaths,\n                loadRules,\n                resolver\n            }),\n            baseConfigData,\n            cliConfigArray: createCLIConfigArray({\n                cliConfigData,\n                configArrayFactory,\n                cwd,\n                ignorePath,\n                specificConfigPath\n            }),\n            cliConfigData,\n            configArrayFactory,\n            configCache: new Map(),\n            cwd,\n            finalizeCache: new WeakMap(),\n            ignorePath,\n            rulePaths,\n            specificConfigPath,\n            useEslintrc,\n            builtInRules,\n            loadRules\n        });\n    }\n\n    /**\n     * The path to the current working directory.\n     * This is used by tests.\n     * @type {string}\n     */\n    get cwd() {\n        const { cwd } = internalSlotsMap.get(this);\n\n        return cwd;\n    }\n\n    /**\n     * Get the config array of a given file.\n     * If `filePath` was not given, it returns the config which contains only\n     * `baseConfigData` and `cliConfigData`.\n     * @param {string} [filePath] The file path to a file.\n     * @param {Object} [options] The options.\n     * @param {boolean} [options.ignoreNotFoundError] If `true` then it doesn't throw `ConfigurationNotFoundError`.\n     * @returns {ConfigArray} The config array of the file.\n     */\n    getConfigArrayForFile(filePath, { ignoreNotFoundError = false } = {}) {\n        const {\n            baseConfigArray,\n            cliConfigArray,\n            cwd\n        } = internalSlotsMap.get(this);\n\n        if (!filePath) {\n            return new ConfigArray(...baseConfigArray, ...cliConfigArray);\n        }\n\n        const directoryPath = path.dirname(path.resolve(cwd, filePath));\n\n        debug(`Load config files for ${directoryPath}.`);\n\n        return this._finalizeConfigArray(\n            this._loadConfigInAncestors(directoryPath),\n            directoryPath,\n            ignoreNotFoundError\n        );\n    }\n\n    /**\n     * Set the config data to override all configs.\n     * Require to call `clearCache()` method after this method is called.\n     * @param {ConfigData} configData The config data to override all configs.\n     * @returns {void}\n     */\n    setOverrideConfig(configData) {\n        const slots = internalSlotsMap.get(this);\n\n        slots.cliConfigData = configData;\n    }\n\n    /**\n     * Clear config cache.\n     * @returns {void}\n     */\n    clearCache() {\n        const slots = internalSlotsMap.get(this);\n\n        slots.baseConfigArray = createBaseConfigArray(slots);\n        slots.cliConfigArray = createCLIConfigArray(slots);\n        slots.configCache.clear();\n    }\n\n    /**\n     * Load and normalize config files from the ancestor directories.\n     * @param {string} directoryPath The path to a leaf directory.\n     * @param {boolean} configsExistInSubdirs `true` if configurations exist in subdirectories.\n     * @returns {ConfigArray} The loaded config.\n     * @private\n     */\n    _loadConfigInAncestors(directoryPath, configsExistInSubdirs = false) {\n        const {\n            baseConfigArray,\n            configArrayFactory,\n            configCache,\n            cwd,\n            useEslintrc\n        } = internalSlotsMap.get(this);\n\n        if (!useEslintrc) {\n            return baseConfigArray;\n        }\n\n        let configArray = configCache.get(directoryPath);\n\n        // Hit cache.\n        if (configArray) {\n            debug(`Cache hit: ${directoryPath}.`);\n            return configArray;\n        }\n        debug(`No cache found: ${directoryPath}.`);\n\n        const homePath = os.homedir();\n\n        // Consider this is root.\n        if (directoryPath === homePath && cwd !== homePath) {\n            debug(\"Stop traversing because of considered root.\");\n            if (configsExistInSubdirs) {\n                const filePath = ConfigArrayFactory.getPathToConfigFileInDirectory(directoryPath);\n\n                if (filePath) {\n                    emitDeprecationWarning(\n                        filePath,\n                        \"ESLINT_PERSONAL_CONFIG_SUPPRESS\"\n                    );\n                }\n            }\n            return this._cacheConfig(directoryPath, baseConfigArray);\n        }\n\n        // Load the config on this directory.\n        try {\n            configArray = configArrayFactory.loadInDirectory(directoryPath);\n        } catch (error) {\n            /* istanbul ignore next */\n            if (error.code === \"EACCES\") {\n                debug(\"Stop traversing because of 'EACCES' error.\");\n                return this._cacheConfig(directoryPath, baseConfigArray);\n            }\n            throw error;\n        }\n\n        if (configArray.length > 0 && configArray.isRoot()) {\n            debug(\"Stop traversing because of 'root:true'.\");\n            configArray.unshift(...baseConfigArray);\n            return this._cacheConfig(directoryPath, configArray);\n        }\n\n        // Load from the ancestors and merge it.\n        const parentPath = path.dirname(directoryPath);\n        const parentConfigArray = parentPath && parentPath !== directoryPath\n            ? this._loadConfigInAncestors(\n                parentPath,\n                configsExistInSubdirs || configArray.length > 0\n            )\n            : baseConfigArray;\n\n        if (configArray.length > 0) {\n            configArray.unshift(...parentConfigArray);\n        } else {\n            configArray = parentConfigArray;\n        }\n\n        // Cache and return.\n        return this._cacheConfig(directoryPath, configArray);\n    }\n\n    /**\n     * Freeze and cache a given config.\n     * @param {string} directoryPath The path to a directory as a cache key.\n     * @param {ConfigArray} configArray The config array as a cache value.\n     * @returns {ConfigArray} The `configArray` (frozen).\n     */\n    _cacheConfig(directoryPath, configArray) {\n        const { configCache } = internalSlotsMap.get(this);\n\n        Object.freeze(configArray);\n        configCache.set(directoryPath, configArray);\n\n        return configArray;\n    }\n\n    /**\n     * Finalize a given config array.\n     * Concatenate `--config` and other CLI options.\n     * @param {ConfigArray} configArray The parent config array.\n     * @param {string} directoryPath The path to the leaf directory to find config files.\n     * @param {boolean} ignoreNotFoundError If `true` then it doesn't throw `ConfigurationNotFoundError`.\n     * @returns {ConfigArray} The loaded config.\n     * @private\n     */\n    _finalizeConfigArray(configArray, directoryPath, ignoreNotFoundError) {\n        const {\n            cliConfigArray,\n            configArrayFactory,\n            finalizeCache,\n            useEslintrc,\n            builtInRules\n        } = internalSlotsMap.get(this);\n\n        let finalConfigArray = finalizeCache.get(configArray);\n\n        if (!finalConfigArray) {\n            finalConfigArray = configArray;\n\n            // Load the personal config if there are no regular config files.\n            if (\n                useEslintrc &&\n                configArray.every(c => !c.filePath) &&\n                cliConfigArray.every(c => !c.filePath) // `--config` option can be a file.\n            ) {\n                const homePath = os.homedir();\n\n                debug(\"Loading the config file of the home directory:\", homePath);\n\n                const personalConfigArray = configArrayFactory.loadInDirectory(\n                    homePath,\n                    { name: \"PersonalConfig\" }\n                );\n\n                if (\n                    personalConfigArray.length > 0 &&\n                    !directoryPath.startsWith(homePath)\n                ) {\n                    const lastElement =\n                        personalConfigArray[personalConfigArray.length - 1];\n\n                    emitDeprecationWarning(\n                        lastElement.filePath,\n                        \"ESLINT_PERSONAL_CONFIG_LOAD\"\n                    );\n                }\n\n                finalConfigArray = finalConfigArray.concat(personalConfigArray);\n            }\n\n            // Apply CLI options.\n            if (cliConfigArray.length > 0) {\n                finalConfigArray = finalConfigArray.concat(cliConfigArray);\n            }\n\n            // Validate rule settings and environments.\n            const validator = new ConfigValidator({\n                builtInRules\n            });\n\n            validator.validateConfigArray(finalConfigArray);\n\n            // Cache it.\n            Object.freeze(finalConfigArray);\n            finalizeCache.set(configArray, finalConfigArray);\n\n            debug(\n                \"Configuration was determined: %o on %s\",\n                finalConfigArray,\n                directoryPath\n            );\n        }\n\n        // At least one element (the default ignore patterns) exists.\n        if (!ignoreNotFoundError && useEslintrc && finalConfigArray.length <= 1) {\n            throw new ConfigurationNotFoundError(directoryPath);\n        }\n\n        return finalConfigArray;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = { CascadingConfigArrayFactory };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}