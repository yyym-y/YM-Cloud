{"ast":null,"code":"/**\n * @fileoverview Rule to disallow returning values from Promise executor functions\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst {\n  findVariable\n} = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst functionTypesToCheck = new Set([\"ArrowFunctionExpression\", \"FunctionExpression\"]);\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\nfunction isGlobalReference(node, scope) {\n  const variable = findVariable(scope, node);\n  return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\nfunction getOuterScope(scope) {\n  const upper = scope.upper;\n  if (upper.type === \"function-expression-name\") {\n    return upper.upper;\n  }\n  return upper;\n}\n\n/**\n * Determines whether the given function node is used as a Promise executor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Function's own scope.\n * @returns {boolean} `true` if the node is a Promise executor.\n */\nfunction isPromiseExecutor(node, scope) {\n  const parent = node.parent;\n  return parent.type === \"NewExpression\" && parent.arguments[0] === node && parent.callee.type === \"Identifier\" && parent.callee.name === \"Promise\" && isGlobalReference(parent.callee, getOuterScope(scope));\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow returning values from Promise executor functions\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-promise-executor-return\"\n    },\n    schema: [],\n    messages: {\n      returnsValue: \"Return values from promise executor functions cannot be read.\"\n    }\n  },\n  create(context) {\n    let funcInfo = null;\n\n    /**\n     * Reports the given node.\n     * @param {ASTNode} node Node to report.\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"returnsValue\"\n      });\n    }\n    return {\n      onCodePathStart(_, node) {\n        funcInfo = {\n          upper: funcInfo,\n          shouldCheck: functionTypesToCheck.has(node.type) && isPromiseExecutor(node, context.getScope())\n        };\n        if (funcInfo.shouldCheck && node.type === \"ArrowFunctionExpression\" && node.expression) {\n          report(node.body);\n        }\n      },\n      onCodePathEnd() {\n        funcInfo = funcInfo.upper;\n      },\n      ReturnStatement(node) {\n        if (funcInfo.shouldCheck && node.argument) {\n          report(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["findVariable","require","functionTypesToCheck","Set","isGlobalReference","node","scope","variable","type","defs","length","getOuterScope","upper","isPromiseExecutor","parent","arguments","callee","name","module","exports","meta","docs","description","category","recommended","url","schema","messages","returnsValue","create","context","funcInfo","report","messageId","onCodePathStart","_","shouldCheck","has","getScope","expression","body","onCodePathEnd","ReturnStatement","argument"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-promise-executor-return.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow returning values from Promise executor functions\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst { findVariable } = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst functionTypesToCheck = new Set([\"ArrowFunctionExpression\", \"FunctionExpression\"]);\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\nfunction isGlobalReference(node, scope) {\n    const variable = findVariable(scope, node);\n\n    return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\nfunction getOuterScope(scope) {\n    const upper = scope.upper;\n\n    if (upper.type === \"function-expression-name\") {\n        return upper.upper;\n    }\n    return upper;\n}\n\n/**\n * Determines whether the given function node is used as a Promise executor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Function's own scope.\n * @returns {boolean} `true` if the node is a Promise executor.\n */\nfunction isPromiseExecutor(node, scope) {\n    const parent = node.parent;\n\n    return parent.type === \"NewExpression\" &&\n        parent.arguments[0] === node &&\n        parent.callee.type === \"Identifier\" &&\n        parent.callee.name === \"Promise\" &&\n        isGlobalReference(parent.callee, getOuterScope(scope));\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow returning values from Promise executor functions\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-promise-executor-return\"\n        },\n\n        schema: [],\n\n        messages: {\n            returnsValue: \"Return values from promise executor functions cannot be read.\"\n        }\n    },\n\n    create(context) {\n\n        let funcInfo = null;\n\n        /**\n         * Reports the given node.\n         * @param {ASTNode} node Node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"returnsValue\" });\n        }\n\n        return {\n\n            onCodePathStart(_, node) {\n                funcInfo = {\n                    upper: funcInfo,\n                    shouldCheck: functionTypesToCheck.has(node.type) && isPromiseExecutor(node, context.getScope())\n                };\n\n                if (funcInfo.shouldCheck && node.type === \"ArrowFunctionExpression\" && node.expression) {\n                    report(node.body);\n                }\n            },\n\n            onCodePathEnd() {\n                funcInfo = funcInfo.upper;\n            },\n\n            ReturnStatement(node) {\n                if (funcInfo.shouldCheck && node.argument) {\n                    report(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}