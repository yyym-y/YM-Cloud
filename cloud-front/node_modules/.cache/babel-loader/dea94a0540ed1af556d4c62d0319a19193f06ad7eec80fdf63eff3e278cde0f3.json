{"ast":null,"code":"/**\n * @fileoverview Disallow parenthesising higher precedence subexpressions.\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst {\n  isParenthesized: isParenthesizedRaw\n} = require(\"eslint-utils\");\nconst astUtils = require(\"./utils/ast-utils.js\");\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow unnecessary parentheses\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-extra-parens\"\n    },\n    fixable: \"code\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"functions\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"all\"]\n        }, {\n          type: \"object\",\n          properties: {\n            conditionalAssign: {\n              type: \"boolean\"\n            },\n            nestedBinaryExpressions: {\n              type: \"boolean\"\n            },\n            returnAssign: {\n              type: \"boolean\"\n            },\n            ignoreJSX: {\n              enum: [\"none\", \"all\", \"single-line\", \"multi-line\"]\n            },\n            enforceForArrowConditionals: {\n              type: \"boolean\"\n            },\n            enforceForSequenceExpressions: {\n              type: \"boolean\"\n            },\n            enforceForNewInMemberExpressions: {\n              type: \"boolean\"\n            },\n            enforceForFunctionPrototypeMethods: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      unexpected: \"Unnecessary parentheses around expression.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const tokensToIgnore = new WeakSet();\n    const precedence = astUtils.getPrecedence;\n    const ALL_NODES = context.options[0] !== \"functions\";\n    const EXCEPT_COND_ASSIGN = ALL_NODES && context.options[1] && context.options[1].conditionalAssign === false;\n    const NESTED_BINARY = ALL_NODES && context.options[1] && context.options[1].nestedBinaryExpressions === false;\n    const EXCEPT_RETURN_ASSIGN = ALL_NODES && context.options[1] && context.options[1].returnAssign === false;\n    const IGNORE_JSX = ALL_NODES && context.options[1] && context.options[1].ignoreJSX;\n    const IGNORE_ARROW_CONDITIONALS = ALL_NODES && context.options[1] && context.options[1].enforceForArrowConditionals === false;\n    const IGNORE_SEQUENCE_EXPRESSIONS = ALL_NODES && context.options[1] && context.options[1].enforceForSequenceExpressions === false;\n    const IGNORE_NEW_IN_MEMBER_EXPR = ALL_NODES && context.options[1] && context.options[1].enforceForNewInMemberExpressions === false;\n    const IGNORE_FUNCTION_PROTOTYPE_METHODS = ALL_NODES && context.options[1] && context.options[1].enforceForFunctionPrototypeMethods === false;\n    const PRECEDENCE_OF_ASSIGNMENT_EXPR = precedence({\n      type: \"AssignmentExpression\"\n    });\n    const PRECEDENCE_OF_UPDATE_EXPR = precedence({\n      type: \"UpdateExpression\"\n    });\n    let reportsBuffer;\n\n    /**\n     * Determines whether the given node is a `call` or `apply` method call, invoked directly on a `FunctionExpression` node.\n     * Example: function(){}.call()\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is an immediate `call` or `apply` method call.\n     * @private\n     */\n    function isImmediateFunctionPrototypeMethodCall(node) {\n      const callNode = astUtils.skipChainExpression(node);\n      if (callNode.type !== \"CallExpression\") {\n        return false;\n      }\n      const callee = astUtils.skipChainExpression(callNode.callee);\n      return callee.type === \"MemberExpression\" && callee.object.type === \"FunctionExpression\" && [\"call\", \"apply\"].includes(astUtils.getStaticPropertyName(callee));\n    }\n\n    /**\n     * Determines if this rule should be enforced for a node given the current configuration.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the rule should be enforced for this node.\n     * @private\n     */\n    function ruleApplies(node) {\n      if (node.type === \"JSXElement\" || node.type === \"JSXFragment\") {\n        const isSingleLine = node.loc.start.line === node.loc.end.line;\n        switch (IGNORE_JSX) {\n          // Exclude this JSX element from linting\n          case \"all\":\n            return false;\n\n          // Exclude this JSX element if it is multi-line element\n          case \"multi-line\":\n            return isSingleLine;\n\n          // Exclude this JSX element if it is single-line element\n          case \"single-line\":\n            return !isSingleLine;\n\n          // Nothing special to be done for JSX elements\n          case \"none\":\n            break;\n\n          // no default\n        }\n      }\n\n      if (node.type === \"SequenceExpression\" && IGNORE_SEQUENCE_EXPRESSIONS) {\n        return false;\n      }\n      if (isImmediateFunctionPrototypeMethodCall(node) && IGNORE_FUNCTION_PROTOTYPE_METHODS) {\n        return false;\n      }\n      return ALL_NODES || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\";\n    }\n\n    /**\n     * Determines if a node is surrounded by parentheses.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is parenthesised.\n     * @private\n     */\n    function isParenthesised(node) {\n      return isParenthesizedRaw(1, node, sourceCode);\n    }\n\n    /**\n     * Determines if a node is surrounded by parentheses twice.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is doubly parenthesised.\n     * @private\n     */\n    function isParenthesisedTwice(node) {\n      return isParenthesizedRaw(2, node, sourceCode);\n    }\n\n    /**\n     * Determines if a node is surrounded by (potentially) invalid parentheses.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is incorrectly parenthesised.\n     * @private\n     */\n    function hasExcessParens(node) {\n      return ruleApplies(node) && isParenthesised(node);\n    }\n\n    /**\n     * Determines if a node that is expected to be parenthesised is surrounded by\n     * (potentially) invalid extra parentheses.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n     * @private\n     */\n    function hasDoubleExcessParens(node) {\n      return ruleApplies(node) && isParenthesisedTwice(node);\n    }\n\n    /**\n     * Determines if a node that is expected to be parenthesised is surrounded by\n     * (potentially) invalid extra parentheses with considering precedence level of the node.\n     * If the preference level of the node is not higher or equal to precedence lower limit, it also checks\n     * whether the node is surrounded by parentheses twice or not.\n     * @param {ASTNode} node The node to be checked.\n     * @param {number} precedenceLowerLimit The lower limit of precedence.\n     * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n     * @private\n     */\n    function hasExcessParensWithPrecedence(node, precedenceLowerLimit) {\n      if (ruleApplies(node) && isParenthesised(node)) {\n        if (precedence(node) >= precedenceLowerLimit || isParenthesisedTwice(node)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Determines if a node test expression is allowed to have a parenthesised assignment\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the assignment can be parenthesised.\n     * @private\n     */\n    function isCondAssignException(node) {\n      return EXCEPT_COND_ASSIGN && node.test.type === \"AssignmentExpression\";\n    }\n\n    /**\n     * Determines if a node is in a return statement\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is in a return statement.\n     * @private\n     */\n    function isInReturnStatement(node) {\n      for (let currentNode = node; currentNode; currentNode = currentNode.parent) {\n        if (currentNode.type === \"ReturnStatement\" || currentNode.type === \"ArrowFunctionExpression\" && currentNode.body.type !== \"BlockStatement\") {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Determines if a constructor function is newed-up with parens\n     * @param {ASTNode} newExpression The NewExpression node to be checked.\n     * @returns {boolean} True if the constructor is called with parens.\n     * @private\n     */\n    function isNewExpressionWithParens(newExpression) {\n      const lastToken = sourceCode.getLastToken(newExpression);\n      const penultimateToken = sourceCode.getTokenBefore(lastToken);\n      return newExpression.arguments.length > 0 ||\n      // The expression should end with its own parens, e.g., new new foo() is not a new expression with parens\n      astUtils.isOpeningParenToken(penultimateToken) && astUtils.isClosingParenToken(lastToken) && newExpression.callee.range[1] < newExpression.range[1];\n    }\n\n    /**\n     * Determines if a node is or contains an assignment expression\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is or contains an assignment expression.\n     * @private\n     */\n    function containsAssignment(node) {\n      if (node.type === \"AssignmentExpression\") {\n        return true;\n      }\n      if (node.type === \"ConditionalExpression\" && (node.consequent.type === \"AssignmentExpression\" || node.alternate.type === \"AssignmentExpression\")) {\n        return true;\n      }\n      if (node.left && node.left.type === \"AssignmentExpression\" || node.right && node.right.type === \"AssignmentExpression\") {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Determines if a node is contained by or is itself a return statement and is allowed to have a parenthesised assignment\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the assignment can be parenthesised.\n     * @private\n     */\n    function isReturnAssignException(node) {\n      if (!EXCEPT_RETURN_ASSIGN || !isInReturnStatement(node)) {\n        return false;\n      }\n      if (node.type === \"ReturnStatement\") {\n        return node.argument && containsAssignment(node.argument);\n      }\n      if (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\") {\n        return containsAssignment(node.body);\n      }\n      return containsAssignment(node);\n    }\n\n    /**\n     * Determines if a node following a [no LineTerminator here] restriction is\n     * surrounded by (potentially) invalid extra parentheses.\n     * @param {Token} token The token preceding the [no LineTerminator here] restriction.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is incorrectly parenthesised.\n     * @private\n     */\n    function hasExcessParensNoLineTerminator(token, node) {\n      if (token.loc.end.line === node.loc.start.line) {\n        return hasExcessParens(node);\n      }\n      return hasDoubleExcessParens(node);\n    }\n\n    /**\n     * Determines whether a node should be preceded by an additional space when removing parens\n     * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n     * @returns {boolean} `true` if a space should be inserted before the node\n     * @private\n     */\n    function requiresLeadingSpace(node) {\n      const leftParenToken = sourceCode.getTokenBefore(node);\n      const tokenBeforeLeftParen = sourceCode.getTokenBefore(leftParenToken, {\n        includeComments: true\n      });\n      const tokenAfterLeftParen = sourceCode.getTokenAfter(leftParenToken, {\n        includeComments: true\n      });\n      return tokenBeforeLeftParen && tokenBeforeLeftParen.range[1] === leftParenToken.range[0] && leftParenToken.range[1] === tokenAfterLeftParen.range[0] && !astUtils.canTokensBeAdjacent(tokenBeforeLeftParen, tokenAfterLeftParen);\n    }\n\n    /**\n     * Determines whether a node should be followed by an additional space when removing parens\n     * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n     * @returns {boolean} `true` if a space should be inserted after the node\n     * @private\n     */\n    function requiresTrailingSpace(node) {\n      const nextTwoTokens = sourceCode.getTokensAfter(node, {\n        count: 2\n      });\n      const rightParenToken = nextTwoTokens[0];\n      const tokenAfterRightParen = nextTwoTokens[1];\n      const tokenBeforeRightParen = sourceCode.getLastToken(node);\n      return rightParenToken && tokenAfterRightParen && !sourceCode.isSpaceBetweenTokens(rightParenToken, tokenAfterRightParen) && !astUtils.canTokensBeAdjacent(tokenBeforeRightParen, tokenAfterRightParen);\n    }\n\n    /**\n     * Determines if a given expression node is an IIFE\n     * @param {ASTNode} node The node to check\n     * @returns {boolean} `true` if the given node is an IIFE\n     */\n    function isIIFE(node) {\n      const maybeCallNode = astUtils.skipChainExpression(node);\n      return maybeCallNode.type === \"CallExpression\" && maybeCallNode.callee.type === \"FunctionExpression\";\n    }\n\n    /**\n     * Determines if the given node can be the assignment target in destructuring or the LHS of an assignment.\n     * This is to avoid an autofix that could change behavior because parsers mistakenly allow invalid syntax,\n     * such as `(a = b) = c` and `[(a = b) = c] = []`. Ideally, this function shouldn't be necessary.\n     * @param {ASTNode} [node] The node to check\n     * @returns {boolean} `true` if the given node can be a valid assignment target\n     */\n    function canBeAssignmentTarget(node) {\n      return node && (node.type === \"Identifier\" || node.type === \"MemberExpression\");\n    }\n\n    /**\n     * Report the node\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function report(node) {\n      const leftParenToken = sourceCode.getTokenBefore(node);\n      const rightParenToken = sourceCode.getTokenAfter(node);\n      if (!isParenthesisedTwice(node)) {\n        if (tokensToIgnore.has(sourceCode.getFirstToken(node))) {\n          return;\n        }\n        if (isIIFE(node) && !isParenthesised(node.callee)) {\n          return;\n        }\n      }\n\n      /**\n       * Finishes reporting\n       * @returns {void}\n       * @private\n       */\n      function finishReport() {\n        context.report({\n          node,\n          loc: leftParenToken.loc,\n          messageId: \"unexpected\",\n          fix(fixer) {\n            const parenthesizedSource = sourceCode.text.slice(leftParenToken.range[1], rightParenToken.range[0]);\n            return fixer.replaceTextRange([leftParenToken.range[0], rightParenToken.range[1]], (requiresLeadingSpace(node) ? \" \" : \"\") + parenthesizedSource + (requiresTrailingSpace(node) ? \" \" : \"\"));\n          }\n        });\n      }\n      if (reportsBuffer) {\n        reportsBuffer.reports.push({\n          node,\n          finishReport\n        });\n        return;\n      }\n      finishReport();\n    }\n\n    /**\n     * Evaluate a argument of the node.\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkArgumentWithPrecedence(node) {\n      if (hasExcessParensWithPrecedence(node.argument, precedence(node))) {\n        report(node.argument);\n      }\n    }\n\n    /**\n     * Check if a member expression contains a call expression\n     * @param {ASTNode} node MemberExpression node to evaluate\n     * @returns {boolean} true if found, false if not\n     */\n    function doesMemberExpressionContainCallExpression(node) {\n      let currentNode = node.object;\n      let currentNodeType = node.object.type;\n      while (currentNodeType === \"MemberExpression\") {\n        currentNode = currentNode.object;\n        currentNodeType = currentNode.type;\n      }\n      return currentNodeType === \"CallExpression\";\n    }\n\n    /**\n     * Evaluate a new call\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkCallNew(node) {\n      const callee = node.callee;\n      if (hasExcessParensWithPrecedence(callee, precedence(node))) {\n        if (hasDoubleExcessParens(callee) || !(isIIFE(node) ||\n        // (new A)(); new (new A)();\n\n        callee.type === \"NewExpression\" && !isNewExpressionWithParens(callee) && !(node.type === \"NewExpression\" && !isNewExpressionWithParens(node)) ||\n        // new (a().b)(); new (a.b().c);\n\n        node.type === \"NewExpression\" && callee.type === \"MemberExpression\" && doesMemberExpressionContainCallExpression(callee) ||\n        // (a?.b)(); (a?.())();\n\n        !node.optional && callee.type === \"ChainExpression\")) {\n          report(node.callee);\n        }\n      }\n      node.arguments.filter(arg => hasExcessParensWithPrecedence(arg, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(report);\n    }\n\n    /**\n     * Evaluate binary logicals\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkBinaryLogical(node) {\n      const prec = precedence(node);\n      const leftPrecedence = precedence(node.left);\n      const rightPrecedence = precedence(node.right);\n      const isExponentiation = node.operator === \"**\";\n      const shouldSkipLeft = NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\");\n      const shouldSkipRight = NESTED_BINARY && (node.right.type === \"BinaryExpression\" || node.right.type === \"LogicalExpression\");\n      if (!shouldSkipLeft && hasExcessParens(node.left)) {\n        if (!([\"AwaitExpression\", \"UnaryExpression\"].includes(node.left.type) && isExponentiation) && !astUtils.isMixedLogicalAndCoalesceExpressions(node.left, node) && (leftPrecedence > prec || leftPrecedence === prec && !isExponentiation) || isParenthesisedTwice(node.left)) {\n          report(node.left);\n        }\n      }\n      if (!shouldSkipRight && hasExcessParens(node.right)) {\n        if (!astUtils.isMixedLogicalAndCoalesceExpressions(node.right, node) && (rightPrecedence > prec || rightPrecedence === prec && isExponentiation) || isParenthesisedTwice(node.right)) {\n          report(node.right);\n        }\n      }\n    }\n\n    /**\n     * Check the parentheses around the super class of the given class definition.\n     * @param {ASTNode} node The node of class declarations to check.\n     * @returns {void}\n     */\n    function checkClass(node) {\n      if (!node.superClass) {\n        return;\n      }\n\n      /*\n       * If `node.superClass` is a LeftHandSideExpression, parentheses are extra.\n       * Otherwise, parentheses are needed.\n       */\n      const hasExtraParens = precedence(node.superClass) > PRECEDENCE_OF_UPDATE_EXPR ? hasExcessParens(node.superClass) : hasDoubleExcessParens(node.superClass);\n      if (hasExtraParens) {\n        report(node.superClass);\n      }\n    }\n\n    /**\n     * Check the parentheses around the argument of the given spread operator.\n     * @param {ASTNode} node The node of spread elements/properties to check.\n     * @returns {void}\n     */\n    function checkSpreadOperator(node) {\n      if (hasExcessParensWithPrecedence(node.argument, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n        report(node.argument);\n      }\n    }\n\n    /**\n     * Checks the parentheses for an ExpressionStatement or ExportDefaultDeclaration\n     * @param {ASTNode} node The ExpressionStatement.expression or ExportDefaultDeclaration.declaration node\n     * @returns {void}\n     */\n    function checkExpressionOrExportStatement(node) {\n      const firstToken = isParenthesised(node) ? sourceCode.getTokenBefore(node) : sourceCode.getFirstToken(node);\n      const secondToken = sourceCode.getTokenAfter(firstToken, astUtils.isNotOpeningParenToken);\n      const thirdToken = secondToken ? sourceCode.getTokenAfter(secondToken) : null;\n      const tokenAfterClosingParens = secondToken ? sourceCode.getTokenAfter(secondToken, astUtils.isNotClosingParenToken) : null;\n      if (astUtils.isOpeningParenToken(firstToken) && (astUtils.isOpeningBraceToken(secondToken) || secondToken.type === \"Keyword\" && (secondToken.value === \"function\" || secondToken.value === \"class\" || secondToken.value === \"let\" && tokenAfterClosingParens && (astUtils.isOpeningBracketToken(tokenAfterClosingParens) || tokenAfterClosingParens.type === \"Identifier\")) || secondToken && secondToken.type === \"Identifier\" && secondToken.value === \"async\" && thirdToken && thirdToken.type === \"Keyword\" && thirdToken.value === \"function\")) {\n        tokensToIgnore.add(secondToken);\n      }\n      const hasExtraParens = node.parent.type === \"ExportDefaultDeclaration\" ? hasExcessParensWithPrecedence(node, PRECEDENCE_OF_ASSIGNMENT_EXPR) : hasExcessParens(node);\n      if (hasExtraParens) {\n        report(node);\n      }\n    }\n\n    /**\n     * Finds the path from the given node to the specified ancestor.\n     * @param {ASTNode} node First node in the path.\n     * @param {ASTNode} ancestor Last node in the path.\n     * @returns {ASTNode[]} Path, including both nodes.\n     * @throws {Error} If the given node does not have the specified ancestor.\n     */\n    function pathToAncestor(node, ancestor) {\n      const path = [node];\n      let currentNode = node;\n      while (currentNode !== ancestor) {\n        currentNode = currentNode.parent;\n\n        /* istanbul ignore if */\n        if (currentNode === null) {\n          throw new Error(\"Nodes are not in the ancestor-descendant relationship.\");\n        }\n        path.push(currentNode);\n      }\n      return path;\n    }\n\n    /**\n     * Finds the path from the given node to the specified descendant.\n     * @param {ASTNode} node First node in the path.\n     * @param {ASTNode} descendant Last node in the path.\n     * @returns {ASTNode[]} Path, including both nodes.\n     * @throws {Error} If the given node does not have the specified descendant.\n     */\n    function pathToDescendant(node, descendant) {\n      return pathToAncestor(descendant, node).reverse();\n    }\n\n    /**\n     * Checks whether the syntax of the given ancestor of an 'in' expression inside a for-loop initializer\n     * is preventing the 'in' keyword from being interpreted as a part of an ill-formed for-in loop.\n     * @param {ASTNode} node Ancestor of an 'in' expression.\n     * @param {ASTNode} child Child of the node, ancestor of the same 'in' expression or the 'in' expression itself.\n     * @returns {boolean} True if the keyword 'in' would be interpreted as the 'in' operator, without any parenthesis.\n     */\n    function isSafelyEnclosingInExpression(node, child) {\n      switch (node.type) {\n        case \"ArrayExpression\":\n        case \"ArrayPattern\":\n        case \"BlockStatement\":\n        case \"ObjectExpression\":\n        case \"ObjectPattern\":\n        case \"TemplateLiteral\":\n          return true;\n        case \"ArrowFunctionExpression\":\n        case \"FunctionExpression\":\n          return node.params.includes(child);\n        case \"CallExpression\":\n        case \"NewExpression\":\n          return node.arguments.includes(child);\n        case \"MemberExpression\":\n          return node.computed && node.property === child;\n        case \"ConditionalExpression\":\n          return node.consequent === child;\n        default:\n          return false;\n      }\n    }\n\n    /**\n     * Starts a new reports buffering. Warnings will be stored in a buffer instead of being reported immediately.\n     * An additional logic that requires multiple nodes (e.g. a whole subtree) may dismiss some of the stored warnings.\n     * @returns {void}\n     */\n    function startNewReportsBuffering() {\n      reportsBuffer = {\n        upper: reportsBuffer,\n        inExpressionNodes: [],\n        reports: []\n      };\n    }\n\n    /**\n     * Ends the current reports buffering.\n     * @returns {void}\n     */\n    function endCurrentReportsBuffering() {\n      const {\n        upper,\n        inExpressionNodes,\n        reports\n      } = reportsBuffer;\n      if (upper) {\n        upper.inExpressionNodes.push(...inExpressionNodes);\n        upper.reports.push(...reports);\n      } else {\n        // flush remaining reports\n        reports.forEach(({\n          finishReport\n        }) => finishReport());\n      }\n      reportsBuffer = upper;\n    }\n\n    /**\n     * Checks whether the given node is in the current reports buffer.\n     * @param {ASTNode} node Node to check.\n     * @returns {boolean} True if the node is in the current buffer, false otherwise.\n     */\n    function isInCurrentReportsBuffer(node) {\n      return reportsBuffer.reports.some(r => r.node === node);\n    }\n\n    /**\n     * Removes the given node from the current reports buffer.\n     * @param {ASTNode} node Node to remove.\n     * @returns {void}\n     */\n    function removeFromCurrentReportsBuffer(node) {\n      reportsBuffer.reports = reportsBuffer.reports.filter(r => r.node !== node);\n    }\n\n    /**\n     * Checks whether a node is a MemberExpression at NewExpression's callee.\n     * @param {ASTNode} node node to check.\n     * @returns {boolean} True if the node is a MemberExpression at NewExpression's callee. false otherwise.\n     */\n    function isMemberExpInNewCallee(node) {\n      if (node.type === \"MemberExpression\") {\n        return node.parent.type === \"NewExpression\" && node.parent.callee === node ? true : node.parent.object === node && isMemberExpInNewCallee(node.parent);\n      }\n      return false;\n    }\n    return {\n      ArrayExpression(node) {\n        node.elements.filter(e => e && hasExcessParensWithPrecedence(e, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(report);\n      },\n      ArrayPattern(node) {\n        node.elements.filter(e => canBeAssignmentTarget(e) && hasExcessParens(e)).forEach(report);\n      },\n      ArrowFunctionExpression(node) {\n        if (isReturnAssignException(node)) {\n          return;\n        }\n        if (node.body.type === \"ConditionalExpression\" && IGNORE_ARROW_CONDITIONALS) {\n          return;\n        }\n        if (node.body.type !== \"BlockStatement\") {\n          const firstBodyToken = sourceCode.getFirstToken(node.body, astUtils.isNotOpeningParenToken);\n          const tokenBeforeFirst = sourceCode.getTokenBefore(firstBodyToken);\n          if (astUtils.isOpeningParenToken(tokenBeforeFirst) && astUtils.isOpeningBraceToken(firstBodyToken)) {\n            tokensToIgnore.add(firstBodyToken);\n          }\n          if (hasExcessParensWithPrecedence(node.body, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n            report(node.body);\n          }\n        }\n      },\n      AssignmentExpression(node) {\n        if (canBeAssignmentTarget(node.left) && hasExcessParens(node.left)) {\n          report(node.left);\n        }\n        if (!isReturnAssignException(node) && hasExcessParensWithPrecedence(node.right, precedence(node))) {\n          report(node.right);\n        }\n      },\n      BinaryExpression(node) {\n        if (reportsBuffer && node.operator === \"in\") {\n          reportsBuffer.inExpressionNodes.push(node);\n        }\n        checkBinaryLogical(node);\n      },\n      CallExpression: checkCallNew,\n      ClassBody(node) {\n        node.body.filter(member => member.type === \"MethodDefinition\" && member.computed && member.key).filter(member => hasExcessParensWithPrecedence(member.key, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(member => report(member.key));\n      },\n      ConditionalExpression(node) {\n        if (isReturnAssignException(node)) {\n          return;\n        }\n        if (!isCondAssignException(node) && hasExcessParensWithPrecedence(node.test, precedence({\n          type: \"LogicalExpression\",\n          operator: \"||\"\n        }))) {\n          report(node.test);\n        }\n        if (hasExcessParensWithPrecedence(node.consequent, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n          report(node.consequent);\n        }\n        if (hasExcessParensWithPrecedence(node.alternate, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n          report(node.alternate);\n        }\n      },\n      DoWhileStatement(node) {\n        if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n          report(node.test);\n        }\n      },\n      ExportDefaultDeclaration: node => checkExpressionOrExportStatement(node.declaration),\n      ExpressionStatement: node => checkExpressionOrExportStatement(node.expression),\n      ForInStatement(node) {\n        if (node.left.type !== \"VariableDeclaration\") {\n          const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n          if (firstLeftToken.value === \"let\" && astUtils.isOpeningBracketToken(sourceCode.getTokenAfter(firstLeftToken, astUtils.isNotClosingParenToken))) {\n            // ForInStatement#left expression cannot start with `let[`.\n            tokensToIgnore.add(firstLeftToken);\n          }\n        }\n        if (hasExcessParens(node.left)) {\n          report(node.left);\n        }\n        if (hasExcessParens(node.right)) {\n          report(node.right);\n        }\n      },\n      ForOfStatement(node) {\n        if (node.left.type !== \"VariableDeclaration\") {\n          const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n          if (firstLeftToken.value === \"let\") {\n            // ForOfStatement#left expression cannot start with `let`.\n            tokensToIgnore.add(firstLeftToken);\n          }\n        }\n        if (hasExcessParens(node.left)) {\n          report(node.left);\n        }\n        if (hasExcessParensWithPrecedence(node.right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n          report(node.right);\n        }\n      },\n      ForStatement(node) {\n        if (node.test && hasExcessParens(node.test) && !isCondAssignException(node)) {\n          report(node.test);\n        }\n        if (node.update && hasExcessParens(node.update)) {\n          report(node.update);\n        }\n        if (node.init) {\n          if (node.init.type !== \"VariableDeclaration\") {\n            const firstToken = sourceCode.getFirstToken(node.init, astUtils.isNotOpeningParenToken);\n            if (firstToken.value === \"let\" && astUtils.isOpeningBracketToken(sourceCode.getTokenAfter(firstToken, astUtils.isNotClosingParenToken))) {\n              // ForStatement#init expression cannot start with `let[`.\n              tokensToIgnore.add(firstToken);\n            }\n          }\n          startNewReportsBuffering();\n          if (hasExcessParens(node.init)) {\n            report(node.init);\n          }\n        }\n      },\n      \"ForStatement > *.init:exit\"(node) {\n        /*\n         * Removing parentheses around `in` expressions might change semantics and cause errors.\n         *\n         * For example, this valid for loop:\n         *      for (let a = (b in c); ;);\n         * after removing parentheses would be treated as an invalid for-in loop:\n         *      for (let a = b in c; ;);\n         */\n\n        if (reportsBuffer.reports.length) {\n          reportsBuffer.inExpressionNodes.forEach(inExpressionNode => {\n            const path = pathToDescendant(node, inExpressionNode);\n            let nodeToExclude;\n            for (let i = 0; i < path.length; i++) {\n              const pathNode = path[i];\n              if (i < path.length - 1) {\n                const nextPathNode = path[i + 1];\n                if (isSafelyEnclosingInExpression(pathNode, nextPathNode)) {\n                  // The 'in' expression in safely enclosed by the syntax of its ancestor nodes (e.g. by '{}' or '[]').\n                  return;\n                }\n              }\n              if (isParenthesised(pathNode)) {\n                if (isInCurrentReportsBuffer(pathNode)) {\n                  // This node was supposed to be reported, but parentheses might be necessary.\n\n                  if (isParenthesisedTwice(pathNode)) {\n                    /*\n                     * This node is parenthesised twice, it certainly has at least one pair of `extra` parentheses.\n                     * If the --fix option is on, the current fixing iteration will remove only one pair of parentheses.\n                     * The remaining pair is safely enclosing the 'in' expression.\n                     */\n                    return;\n                  }\n\n                  // Exclude the outermost node only.\n                  if (!nodeToExclude) {\n                    nodeToExclude = pathNode;\n                  }\n\n                  // Don't break the loop here, there might be some safe nodes or parentheses that will stay inside.\n                } else {\n                  // This node will stay parenthesised, the 'in' expression in safely enclosed by '()'.\n                  return;\n                }\n              }\n            }\n\n            // Exclude the node from the list (i.e. treat parentheses as necessary)\n            removeFromCurrentReportsBuffer(nodeToExclude);\n          });\n        }\n        endCurrentReportsBuffering();\n      },\n      IfStatement(node) {\n        if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n          report(node.test);\n        }\n      },\n      ImportExpression(node) {\n        const {\n          source\n        } = node;\n        if (source.type === \"SequenceExpression\") {\n          if (hasDoubleExcessParens(source)) {\n            report(source);\n          }\n        } else if (hasExcessParens(source)) {\n          report(source);\n        }\n      },\n      LogicalExpression: checkBinaryLogical,\n      MemberExpression(node) {\n        const shouldAllowWrapOnce = isMemberExpInNewCallee(node) && doesMemberExpressionContainCallExpression(node);\n        const nodeObjHasExcessParens = shouldAllowWrapOnce ? hasDoubleExcessParens(node.object) : hasExcessParens(node.object) && !(isImmediateFunctionPrototypeMethodCall(node.parent) && node.parent.callee === node && IGNORE_FUNCTION_PROTOTYPE_METHODS);\n        if (nodeObjHasExcessParens && precedence(node.object) >= precedence(node) && (node.computed || !(astUtils.isDecimalInteger(node.object) ||\n        // RegExp literal is allowed to have parens (#1589)\n        node.object.type === \"Literal\" && node.object.regex))) {\n          report(node.object);\n        }\n        if (nodeObjHasExcessParens && node.object.type === \"CallExpression\") {\n          report(node.object);\n        }\n        if (nodeObjHasExcessParens && !IGNORE_NEW_IN_MEMBER_EXPR && node.object.type === \"NewExpression\" && isNewExpressionWithParens(node.object)) {\n          report(node.object);\n        }\n        if (nodeObjHasExcessParens && node.optional && node.object.type === \"ChainExpression\") {\n          report(node.object);\n        }\n        if (node.computed && hasExcessParens(node.property)) {\n          report(node.property);\n        }\n      },\n      NewExpression: checkCallNew,\n      ObjectExpression(node) {\n        node.properties.filter(property => property.value && hasExcessParensWithPrecedence(property.value, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(property => report(property.value));\n      },\n      ObjectPattern(node) {\n        node.properties.filter(property => {\n          const value = property.value;\n          return canBeAssignmentTarget(value) && hasExcessParens(value);\n        }).forEach(property => report(property.value));\n      },\n      Property(node) {\n        if (node.computed) {\n          const {\n            key\n          } = node;\n          if (key && hasExcessParensWithPrecedence(key, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n            report(key);\n          }\n        }\n      },\n      RestElement(node) {\n        const argument = node.argument;\n        if (canBeAssignmentTarget(argument) && hasExcessParens(argument)) {\n          report(argument);\n        }\n      },\n      ReturnStatement(node) {\n        const returnToken = sourceCode.getFirstToken(node);\n        if (isReturnAssignException(node)) {\n          return;\n        }\n        if (node.argument && hasExcessParensNoLineTerminator(returnToken, node.argument) &&\n        // RegExp literal is allowed to have parens (#1589)\n        !(node.argument.type === \"Literal\" && node.argument.regex)) {\n          report(node.argument);\n        }\n      },\n      SequenceExpression(node) {\n        const precedenceOfNode = precedence(node);\n        node.expressions.filter(e => hasExcessParensWithPrecedence(e, precedenceOfNode)).forEach(report);\n      },\n      SwitchCase(node) {\n        if (node.test && hasExcessParens(node.test)) {\n          report(node.test);\n        }\n      },\n      SwitchStatement(node) {\n        if (hasExcessParens(node.discriminant)) {\n          report(node.discriminant);\n        }\n      },\n      ThrowStatement(node) {\n        const throwToken = sourceCode.getFirstToken(node);\n        if (hasExcessParensNoLineTerminator(throwToken, node.argument)) {\n          report(node.argument);\n        }\n      },\n      UnaryExpression: checkArgumentWithPrecedence,\n      UpdateExpression(node) {\n        if (node.prefix) {\n          checkArgumentWithPrecedence(node);\n        } else {\n          const {\n            argument\n          } = node;\n          const operatorToken = sourceCode.getLastToken(node);\n          if (argument.loc.end.line === operatorToken.loc.start.line) {\n            checkArgumentWithPrecedence(node);\n          } else {\n            if (hasDoubleExcessParens(argument)) {\n              report(argument);\n            }\n          }\n        }\n      },\n      AwaitExpression: checkArgumentWithPrecedence,\n      VariableDeclarator(node) {\n        if (node.init && hasExcessParensWithPrecedence(node.init, PRECEDENCE_OF_ASSIGNMENT_EXPR) &&\n        // RegExp literal is allowed to have parens (#1589)\n        !(node.init.type === \"Literal\" && node.init.regex)) {\n          report(node.init);\n        }\n      },\n      WhileStatement(node) {\n        if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n          report(node.test);\n        }\n      },\n      WithStatement(node) {\n        if (hasExcessParens(node.object)) {\n          report(node.object);\n        }\n      },\n      YieldExpression(node) {\n        if (node.argument) {\n          const yieldToken = sourceCode.getFirstToken(node);\n          if (precedence(node.argument) >= precedence(node) && hasExcessParensNoLineTerminator(yieldToken, node.argument) || hasDoubleExcessParens(node.argument)) {\n            report(node.argument);\n          }\n        }\n      },\n      ClassDeclaration: checkClass,\n      ClassExpression: checkClass,\n      SpreadElement: checkSpreadOperator,\n      SpreadProperty: checkSpreadOperator,\n      ExperimentalSpreadProperty: checkSpreadOperator,\n      TemplateLiteral(node) {\n        node.expressions.filter(e => e && hasExcessParens(e)).forEach(report);\n      },\n      AssignmentPattern(node) {\n        const {\n          left,\n          right\n        } = node;\n        if (canBeAssignmentTarget(left) && hasExcessParens(left)) {\n          report(left);\n        }\n        if (right && hasExcessParensWithPrecedence(right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n          report(right);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","isParenthesized","isParenthesizedRaw","astUtils","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","minItems","maxItems","properties","conditionalAssign","nestedBinaryExpressions","returnAssign","ignoreJSX","enforceForArrowConditionals","enforceForSequenceExpressions","enforceForNewInMemberExpressions","enforceForFunctionPrototypeMethods","additionalProperties","messages","unexpected","create","context","sourceCode","getSourceCode","tokensToIgnore","WeakSet","precedence","getPrecedence","ALL_NODES","options","EXCEPT_COND_ASSIGN","NESTED_BINARY","EXCEPT_RETURN_ASSIGN","IGNORE_JSX","IGNORE_ARROW_CONDITIONALS","IGNORE_SEQUENCE_EXPRESSIONS","IGNORE_NEW_IN_MEMBER_EXPR","IGNORE_FUNCTION_PROTOTYPE_METHODS","PRECEDENCE_OF_ASSIGNMENT_EXPR","PRECEDENCE_OF_UPDATE_EXPR","reportsBuffer","isImmediateFunctionPrototypeMethodCall","node","callNode","skipChainExpression","callee","object","includes","getStaticPropertyName","ruleApplies","isSingleLine","loc","start","line","end","isParenthesised","isParenthesisedTwice","hasExcessParens","hasDoubleExcessParens","hasExcessParensWithPrecedence","precedenceLowerLimit","isCondAssignException","test","isInReturnStatement","currentNode","parent","body","isNewExpressionWithParens","newExpression","lastToken","getLastToken","penultimateToken","getTokenBefore","arguments","length","isOpeningParenToken","isClosingParenToken","range","containsAssignment","consequent","alternate","left","right","isReturnAssignException","argument","hasExcessParensNoLineTerminator","token","requiresLeadingSpace","leftParenToken","tokenBeforeLeftParen","includeComments","tokenAfterLeftParen","getTokenAfter","canTokensBeAdjacent","requiresTrailingSpace","nextTwoTokens","getTokensAfter","count","rightParenToken","tokenAfterRightParen","tokenBeforeRightParen","isSpaceBetweenTokens","isIIFE","maybeCallNode","canBeAssignmentTarget","report","has","getFirstToken","finishReport","messageId","fix","fixer","parenthesizedSource","text","slice","replaceTextRange","reports","push","checkArgumentWithPrecedence","doesMemberExpressionContainCallExpression","currentNodeType","checkCallNew","optional","filter","arg","forEach","checkBinaryLogical","prec","leftPrecedence","rightPrecedence","isExponentiation","operator","shouldSkipLeft","shouldSkipRight","isMixedLogicalAndCoalesceExpressions","checkClass","superClass","hasExtraParens","checkSpreadOperator","checkExpressionOrExportStatement","firstToken","secondToken","isNotOpeningParenToken","thirdToken","tokenAfterClosingParens","isNotClosingParenToken","isOpeningBraceToken","value","isOpeningBracketToken","add","pathToAncestor","ancestor","path","Error","pathToDescendant","descendant","reverse","isSafelyEnclosingInExpression","child","params","computed","property","startNewReportsBuffering","upper","inExpressionNodes","endCurrentReportsBuffering","isInCurrentReportsBuffer","some","r","removeFromCurrentReportsBuffer","isMemberExpInNewCallee","ArrayExpression","elements","e","ArrayPattern","ArrowFunctionExpression","firstBodyToken","tokenBeforeFirst","AssignmentExpression","BinaryExpression","CallExpression","ClassBody","member","key","ConditionalExpression","DoWhileStatement","ExportDefaultDeclaration","declaration","ExpressionStatement","expression","ForInStatement","firstLeftToken","ForOfStatement","ForStatement","update","init","ForStatement > *.init:exit","inExpressionNode","nodeToExclude","i","pathNode","nextPathNode","IfStatement","ImportExpression","source","LogicalExpression","MemberExpression","shouldAllowWrapOnce","nodeObjHasExcessParens","isDecimalInteger","regex","NewExpression","ObjectExpression","ObjectPattern","Property","RestElement","ReturnStatement","returnToken","SequenceExpression","precedenceOfNode","expressions","SwitchCase","SwitchStatement","discriminant","ThrowStatement","throwToken","UnaryExpression","UpdateExpression","prefix","operatorToken","AwaitExpression","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","yieldToken","ClassDeclaration","ClassExpression","SpreadElement","SpreadProperty","ExperimentalSpreadProperty","TemplateLiteral","AssignmentPattern"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-extra-parens.js"],"sourcesContent":["/**\n * @fileoverview Disallow parenthesising higher precedence subexpressions.\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst { isParenthesized: isParenthesizedRaw } = require(\"eslint-utils\");\nconst astUtils = require(\"./utils/ast-utils.js\");\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow unnecessary parentheses\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-extra-parens\"\n        },\n\n        fixable: \"code\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"functions\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"all\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                conditionalAssign: { type: \"boolean\" },\n                                nestedBinaryExpressions: { type: \"boolean\" },\n                                returnAssign: { type: \"boolean\" },\n                                ignoreJSX: { enum: [\"none\", \"all\", \"single-line\", \"multi-line\"] },\n                                enforceForArrowConditionals: { type: \"boolean\" },\n                                enforceForSequenceExpressions: { type: \"boolean\" },\n                                enforceForNewInMemberExpressions: { type: \"boolean\" },\n                                enforceForFunctionPrototypeMethods: { type: \"boolean\" }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            unexpected: \"Unnecessary parentheses around expression.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        const tokensToIgnore = new WeakSet();\n        const precedence = astUtils.getPrecedence;\n        const ALL_NODES = context.options[0] !== \"functions\";\n        const EXCEPT_COND_ASSIGN = ALL_NODES && context.options[1] && context.options[1].conditionalAssign === false;\n        const NESTED_BINARY = ALL_NODES && context.options[1] && context.options[1].nestedBinaryExpressions === false;\n        const EXCEPT_RETURN_ASSIGN = ALL_NODES && context.options[1] && context.options[1].returnAssign === false;\n        const IGNORE_JSX = ALL_NODES && context.options[1] && context.options[1].ignoreJSX;\n        const IGNORE_ARROW_CONDITIONALS = ALL_NODES && context.options[1] &&\n            context.options[1].enforceForArrowConditionals === false;\n        const IGNORE_SEQUENCE_EXPRESSIONS = ALL_NODES && context.options[1] &&\n            context.options[1].enforceForSequenceExpressions === false;\n        const IGNORE_NEW_IN_MEMBER_EXPR = ALL_NODES && context.options[1] &&\n            context.options[1].enforceForNewInMemberExpressions === false;\n        const IGNORE_FUNCTION_PROTOTYPE_METHODS = ALL_NODES && context.options[1] &&\n            context.options[1].enforceForFunctionPrototypeMethods === false;\n\n        const PRECEDENCE_OF_ASSIGNMENT_EXPR = precedence({ type: \"AssignmentExpression\" });\n        const PRECEDENCE_OF_UPDATE_EXPR = precedence({ type: \"UpdateExpression\" });\n\n        let reportsBuffer;\n\n        /**\n         * Determines whether the given node is a `call` or `apply` method call, invoked directly on a `FunctionExpression` node.\n         * Example: function(){}.call()\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is an immediate `call` or `apply` method call.\n         * @private\n         */\n        function isImmediateFunctionPrototypeMethodCall(node) {\n            const callNode = astUtils.skipChainExpression(node);\n\n            if (callNode.type !== \"CallExpression\") {\n                return false;\n            }\n            const callee = astUtils.skipChainExpression(callNode.callee);\n\n            return (\n                callee.type === \"MemberExpression\" &&\n                callee.object.type === \"FunctionExpression\" &&\n                [\"call\", \"apply\"].includes(astUtils.getStaticPropertyName(callee))\n            );\n        }\n\n        /**\n         * Determines if this rule should be enforced for a node given the current configuration.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the rule should be enforced for this node.\n         * @private\n         */\n        function ruleApplies(node) {\n            if (node.type === \"JSXElement\" || node.type === \"JSXFragment\") {\n                const isSingleLine = node.loc.start.line === node.loc.end.line;\n\n                switch (IGNORE_JSX) {\n\n                    // Exclude this JSX element from linting\n                    case \"all\":\n                        return false;\n\n                    // Exclude this JSX element if it is multi-line element\n                    case \"multi-line\":\n                        return isSingleLine;\n\n                    // Exclude this JSX element if it is single-line element\n                    case \"single-line\":\n                        return !isSingleLine;\n\n                    // Nothing special to be done for JSX elements\n                    case \"none\":\n                        break;\n\n                    // no default\n                }\n            }\n\n            if (node.type === \"SequenceExpression\" && IGNORE_SEQUENCE_EXPRESSIONS) {\n                return false;\n            }\n\n            if (isImmediateFunctionPrototypeMethodCall(node) && IGNORE_FUNCTION_PROTOTYPE_METHODS) {\n                return false;\n            }\n\n            return ALL_NODES || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\";\n        }\n\n        /**\n         * Determines if a node is surrounded by parentheses.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is parenthesised.\n         * @private\n         */\n        function isParenthesised(node) {\n            return isParenthesizedRaw(1, node, sourceCode);\n        }\n\n        /**\n         * Determines if a node is surrounded by parentheses twice.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is doubly parenthesised.\n         * @private\n         */\n        function isParenthesisedTwice(node) {\n            return isParenthesizedRaw(2, node, sourceCode);\n        }\n\n        /**\n         * Determines if a node is surrounded by (potentially) invalid parentheses.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is incorrectly parenthesised.\n         * @private\n         */\n        function hasExcessParens(node) {\n            return ruleApplies(node) && isParenthesised(node);\n        }\n\n        /**\n         * Determines if a node that is expected to be parenthesised is surrounded by\n         * (potentially) invalid extra parentheses.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n         * @private\n         */\n        function hasDoubleExcessParens(node) {\n            return ruleApplies(node) && isParenthesisedTwice(node);\n        }\n\n        /**\n         * Determines if a node that is expected to be parenthesised is surrounded by\n         * (potentially) invalid extra parentheses with considering precedence level of the node.\n         * If the preference level of the node is not higher or equal to precedence lower limit, it also checks\n         * whether the node is surrounded by parentheses twice or not.\n         * @param {ASTNode} node The node to be checked.\n         * @param {number} precedenceLowerLimit The lower limit of precedence.\n         * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n         * @private\n         */\n        function hasExcessParensWithPrecedence(node, precedenceLowerLimit) {\n            if (ruleApplies(node) && isParenthesised(node)) {\n                if (\n                    precedence(node) >= precedenceLowerLimit ||\n                    isParenthesisedTwice(node)\n                ) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\n         * Determines if a node test expression is allowed to have a parenthesised assignment\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the assignment can be parenthesised.\n         * @private\n         */\n        function isCondAssignException(node) {\n            return EXCEPT_COND_ASSIGN && node.test.type === \"AssignmentExpression\";\n        }\n\n        /**\n         * Determines if a node is in a return statement\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is in a return statement.\n         * @private\n         */\n        function isInReturnStatement(node) {\n            for (let currentNode = node; currentNode; currentNode = currentNode.parent) {\n                if (\n                    currentNode.type === \"ReturnStatement\" ||\n                    (currentNode.type === \"ArrowFunctionExpression\" && currentNode.body.type !== \"BlockStatement\")\n                ) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Determines if a constructor function is newed-up with parens\n         * @param {ASTNode} newExpression The NewExpression node to be checked.\n         * @returns {boolean} True if the constructor is called with parens.\n         * @private\n         */\n        function isNewExpressionWithParens(newExpression) {\n            const lastToken = sourceCode.getLastToken(newExpression);\n            const penultimateToken = sourceCode.getTokenBefore(lastToken);\n\n            return newExpression.arguments.length > 0 ||\n                (\n\n                    // The expression should end with its own parens, e.g., new new foo() is not a new expression with parens\n                    astUtils.isOpeningParenToken(penultimateToken) &&\n                    astUtils.isClosingParenToken(lastToken) &&\n                    newExpression.callee.range[1] < newExpression.range[1]\n                );\n        }\n\n        /**\n         * Determines if a node is or contains an assignment expression\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is or contains an assignment expression.\n         * @private\n         */\n        function containsAssignment(node) {\n            if (node.type === \"AssignmentExpression\") {\n                return true;\n            }\n            if (node.type === \"ConditionalExpression\" &&\n                    (node.consequent.type === \"AssignmentExpression\" || node.alternate.type === \"AssignmentExpression\")) {\n                return true;\n            }\n            if ((node.left && node.left.type === \"AssignmentExpression\") ||\n                    (node.right && node.right.type === \"AssignmentExpression\")) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Determines if a node is contained by or is itself a return statement and is allowed to have a parenthesised assignment\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the assignment can be parenthesised.\n         * @private\n         */\n        function isReturnAssignException(node) {\n            if (!EXCEPT_RETURN_ASSIGN || !isInReturnStatement(node)) {\n                return false;\n            }\n\n            if (node.type === \"ReturnStatement\") {\n                return node.argument && containsAssignment(node.argument);\n            }\n            if (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\") {\n                return containsAssignment(node.body);\n            }\n            return containsAssignment(node);\n\n        }\n\n        /**\n         * Determines if a node following a [no LineTerminator here] restriction is\n         * surrounded by (potentially) invalid extra parentheses.\n         * @param {Token} token The token preceding the [no LineTerminator here] restriction.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is incorrectly parenthesised.\n         * @private\n         */\n        function hasExcessParensNoLineTerminator(token, node) {\n            if (token.loc.end.line === node.loc.start.line) {\n                return hasExcessParens(node);\n            }\n\n            return hasDoubleExcessParens(node);\n        }\n\n        /**\n         * Determines whether a node should be preceded by an additional space when removing parens\n         * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n         * @returns {boolean} `true` if a space should be inserted before the node\n         * @private\n         */\n        function requiresLeadingSpace(node) {\n            const leftParenToken = sourceCode.getTokenBefore(node);\n            const tokenBeforeLeftParen = sourceCode.getTokenBefore(leftParenToken, { includeComments: true });\n            const tokenAfterLeftParen = sourceCode.getTokenAfter(leftParenToken, { includeComments: true });\n\n            return tokenBeforeLeftParen &&\n                tokenBeforeLeftParen.range[1] === leftParenToken.range[0] &&\n                leftParenToken.range[1] === tokenAfterLeftParen.range[0] &&\n                !astUtils.canTokensBeAdjacent(tokenBeforeLeftParen, tokenAfterLeftParen);\n        }\n\n        /**\n         * Determines whether a node should be followed by an additional space when removing parens\n         * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n         * @returns {boolean} `true` if a space should be inserted after the node\n         * @private\n         */\n        function requiresTrailingSpace(node) {\n            const nextTwoTokens = sourceCode.getTokensAfter(node, { count: 2 });\n            const rightParenToken = nextTwoTokens[0];\n            const tokenAfterRightParen = nextTwoTokens[1];\n            const tokenBeforeRightParen = sourceCode.getLastToken(node);\n\n            return rightParenToken && tokenAfterRightParen &&\n                !sourceCode.isSpaceBetweenTokens(rightParenToken, tokenAfterRightParen) &&\n                !astUtils.canTokensBeAdjacent(tokenBeforeRightParen, tokenAfterRightParen);\n        }\n\n        /**\n         * Determines if a given expression node is an IIFE\n         * @param {ASTNode} node The node to check\n         * @returns {boolean} `true` if the given node is an IIFE\n         */\n        function isIIFE(node) {\n            const maybeCallNode = astUtils.skipChainExpression(node);\n\n            return maybeCallNode.type === \"CallExpression\" && maybeCallNode.callee.type === \"FunctionExpression\";\n        }\n\n        /**\n         * Determines if the given node can be the assignment target in destructuring or the LHS of an assignment.\n         * This is to avoid an autofix that could change behavior because parsers mistakenly allow invalid syntax,\n         * such as `(a = b) = c` and `[(a = b) = c] = []`. Ideally, this function shouldn't be necessary.\n         * @param {ASTNode} [node] The node to check\n         * @returns {boolean} `true` if the given node can be a valid assignment target\n         */\n        function canBeAssignmentTarget(node) {\n            return node && (node.type === \"Identifier\" || node.type === \"MemberExpression\");\n        }\n\n        /**\n         * Report the node\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function report(node) {\n            const leftParenToken = sourceCode.getTokenBefore(node);\n            const rightParenToken = sourceCode.getTokenAfter(node);\n\n            if (!isParenthesisedTwice(node)) {\n                if (tokensToIgnore.has(sourceCode.getFirstToken(node))) {\n                    return;\n                }\n\n                if (isIIFE(node) && !isParenthesised(node.callee)) {\n                    return;\n                }\n            }\n\n            /**\n             * Finishes reporting\n             * @returns {void}\n             * @private\n             */\n            function finishReport() {\n                context.report({\n                    node,\n                    loc: leftParenToken.loc,\n                    messageId: \"unexpected\",\n                    fix(fixer) {\n                        const parenthesizedSource = sourceCode.text.slice(leftParenToken.range[1], rightParenToken.range[0]);\n\n                        return fixer.replaceTextRange([\n                            leftParenToken.range[0],\n                            rightParenToken.range[1]\n                        ], (requiresLeadingSpace(node) ? \" \" : \"\") + parenthesizedSource + (requiresTrailingSpace(node) ? \" \" : \"\"));\n                    }\n                });\n            }\n\n            if (reportsBuffer) {\n                reportsBuffer.reports.push({ node, finishReport });\n                return;\n            }\n\n            finishReport();\n        }\n\n        /**\n         * Evaluate a argument of the node.\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkArgumentWithPrecedence(node) {\n            if (hasExcessParensWithPrecedence(node.argument, precedence(node))) {\n                report(node.argument);\n            }\n        }\n\n        /**\n         * Check if a member expression contains a call expression\n         * @param {ASTNode} node MemberExpression node to evaluate\n         * @returns {boolean} true if found, false if not\n         */\n        function doesMemberExpressionContainCallExpression(node) {\n            let currentNode = node.object;\n            let currentNodeType = node.object.type;\n\n            while (currentNodeType === \"MemberExpression\") {\n                currentNode = currentNode.object;\n                currentNodeType = currentNode.type;\n            }\n\n            return currentNodeType === \"CallExpression\";\n        }\n\n        /**\n         * Evaluate a new call\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkCallNew(node) {\n            const callee = node.callee;\n\n            if (hasExcessParensWithPrecedence(callee, precedence(node))) {\n                if (\n                    hasDoubleExcessParens(callee) ||\n                    !(\n                        isIIFE(node) ||\n\n                        // (new A)(); new (new A)();\n                        (\n                            callee.type === \"NewExpression\" &&\n                            !isNewExpressionWithParens(callee) &&\n                            !(\n                                node.type === \"NewExpression\" &&\n                                !isNewExpressionWithParens(node)\n                            )\n                        ) ||\n\n                        // new (a().b)(); new (a.b().c);\n                        (\n                            node.type === \"NewExpression\" &&\n                            callee.type === \"MemberExpression\" &&\n                            doesMemberExpressionContainCallExpression(callee)\n                        ) ||\n\n                        // (a?.b)(); (a?.())();\n                        (\n                            !node.optional &&\n                            callee.type === \"ChainExpression\"\n                        )\n                    )\n                ) {\n                    report(node.callee);\n                }\n            }\n            node.arguments\n                .filter(arg => hasExcessParensWithPrecedence(arg, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                .forEach(report);\n        }\n\n        /**\n         * Evaluate binary logicals\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkBinaryLogical(node) {\n            const prec = precedence(node);\n            const leftPrecedence = precedence(node.left);\n            const rightPrecedence = precedence(node.right);\n            const isExponentiation = node.operator === \"**\";\n            const shouldSkipLeft = NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\");\n            const shouldSkipRight = NESTED_BINARY && (node.right.type === \"BinaryExpression\" || node.right.type === \"LogicalExpression\");\n\n            if (!shouldSkipLeft && hasExcessParens(node.left)) {\n                if (\n                    !([\"AwaitExpression\", \"UnaryExpression\"].includes(node.left.type) && isExponentiation) &&\n                    !astUtils.isMixedLogicalAndCoalesceExpressions(node.left, node) &&\n                    (leftPrecedence > prec || (leftPrecedence === prec && !isExponentiation)) ||\n                    isParenthesisedTwice(node.left)\n                ) {\n                    report(node.left);\n                }\n            }\n\n            if (!shouldSkipRight && hasExcessParens(node.right)) {\n                if (\n                    !astUtils.isMixedLogicalAndCoalesceExpressions(node.right, node) &&\n                    (rightPrecedence > prec || (rightPrecedence === prec && isExponentiation)) ||\n                    isParenthesisedTwice(node.right)\n                ) {\n                    report(node.right);\n                }\n            }\n        }\n\n        /**\n         * Check the parentheses around the super class of the given class definition.\n         * @param {ASTNode} node The node of class declarations to check.\n         * @returns {void}\n         */\n        function checkClass(node) {\n            if (!node.superClass) {\n                return;\n            }\n\n            /*\n             * If `node.superClass` is a LeftHandSideExpression, parentheses are extra.\n             * Otherwise, parentheses are needed.\n             */\n            const hasExtraParens = precedence(node.superClass) > PRECEDENCE_OF_UPDATE_EXPR\n                ? hasExcessParens(node.superClass)\n                : hasDoubleExcessParens(node.superClass);\n\n            if (hasExtraParens) {\n                report(node.superClass);\n            }\n        }\n\n        /**\n         * Check the parentheses around the argument of the given spread operator.\n         * @param {ASTNode} node The node of spread elements/properties to check.\n         * @returns {void}\n         */\n        function checkSpreadOperator(node) {\n            if (hasExcessParensWithPrecedence(node.argument, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                report(node.argument);\n            }\n        }\n\n        /**\n         * Checks the parentheses for an ExpressionStatement or ExportDefaultDeclaration\n         * @param {ASTNode} node The ExpressionStatement.expression or ExportDefaultDeclaration.declaration node\n         * @returns {void}\n         */\n        function checkExpressionOrExportStatement(node) {\n            const firstToken = isParenthesised(node) ? sourceCode.getTokenBefore(node) : sourceCode.getFirstToken(node);\n            const secondToken = sourceCode.getTokenAfter(firstToken, astUtils.isNotOpeningParenToken);\n            const thirdToken = secondToken ? sourceCode.getTokenAfter(secondToken) : null;\n            const tokenAfterClosingParens = secondToken ? sourceCode.getTokenAfter(secondToken, astUtils.isNotClosingParenToken) : null;\n\n            if (\n                astUtils.isOpeningParenToken(firstToken) &&\n                (\n                    astUtils.isOpeningBraceToken(secondToken) ||\n                    secondToken.type === \"Keyword\" && (\n                        secondToken.value === \"function\" ||\n                        secondToken.value === \"class\" ||\n                        secondToken.value === \"let\" &&\n                            tokenAfterClosingParens &&\n                            (\n                                astUtils.isOpeningBracketToken(tokenAfterClosingParens) ||\n                                tokenAfterClosingParens.type === \"Identifier\"\n                            )\n                    ) ||\n                    secondToken && secondToken.type === \"Identifier\" && secondToken.value === \"async\" && thirdToken && thirdToken.type === \"Keyword\" && thirdToken.value === \"function\"\n                )\n            ) {\n                tokensToIgnore.add(secondToken);\n            }\n\n            const hasExtraParens = node.parent.type === \"ExportDefaultDeclaration\"\n                ? hasExcessParensWithPrecedence(node, PRECEDENCE_OF_ASSIGNMENT_EXPR)\n                : hasExcessParens(node);\n\n            if (hasExtraParens) {\n                report(node);\n            }\n        }\n\n        /**\n         * Finds the path from the given node to the specified ancestor.\n         * @param {ASTNode} node First node in the path.\n         * @param {ASTNode} ancestor Last node in the path.\n         * @returns {ASTNode[]} Path, including both nodes.\n         * @throws {Error} If the given node does not have the specified ancestor.\n         */\n        function pathToAncestor(node, ancestor) {\n            const path = [node];\n            let currentNode = node;\n\n            while (currentNode !== ancestor) {\n\n                currentNode = currentNode.parent;\n\n                /* istanbul ignore if */\n                if (currentNode === null) {\n                    throw new Error(\"Nodes are not in the ancestor-descendant relationship.\");\n                }\n\n                path.push(currentNode);\n            }\n\n            return path;\n        }\n\n        /**\n         * Finds the path from the given node to the specified descendant.\n         * @param {ASTNode} node First node in the path.\n         * @param {ASTNode} descendant Last node in the path.\n         * @returns {ASTNode[]} Path, including both nodes.\n         * @throws {Error} If the given node does not have the specified descendant.\n         */\n        function pathToDescendant(node, descendant) {\n            return pathToAncestor(descendant, node).reverse();\n        }\n\n        /**\n         * Checks whether the syntax of the given ancestor of an 'in' expression inside a for-loop initializer\n         * is preventing the 'in' keyword from being interpreted as a part of an ill-formed for-in loop.\n         * @param {ASTNode} node Ancestor of an 'in' expression.\n         * @param {ASTNode} child Child of the node, ancestor of the same 'in' expression or the 'in' expression itself.\n         * @returns {boolean} True if the keyword 'in' would be interpreted as the 'in' operator, without any parenthesis.\n         */\n        function isSafelyEnclosingInExpression(node, child) {\n            switch (node.type) {\n                case \"ArrayExpression\":\n                case \"ArrayPattern\":\n                case \"BlockStatement\":\n                case \"ObjectExpression\":\n                case \"ObjectPattern\":\n                case \"TemplateLiteral\":\n                    return true;\n                case \"ArrowFunctionExpression\":\n                case \"FunctionExpression\":\n                    return node.params.includes(child);\n                case \"CallExpression\":\n                case \"NewExpression\":\n                    return node.arguments.includes(child);\n                case \"MemberExpression\":\n                    return node.computed && node.property === child;\n                case \"ConditionalExpression\":\n                    return node.consequent === child;\n                default:\n                    return false;\n            }\n        }\n\n        /**\n         * Starts a new reports buffering. Warnings will be stored in a buffer instead of being reported immediately.\n         * An additional logic that requires multiple nodes (e.g. a whole subtree) may dismiss some of the stored warnings.\n         * @returns {void}\n         */\n        function startNewReportsBuffering() {\n            reportsBuffer = {\n                upper: reportsBuffer,\n                inExpressionNodes: [],\n                reports: []\n            };\n        }\n\n        /**\n         * Ends the current reports buffering.\n         * @returns {void}\n         */\n        function endCurrentReportsBuffering() {\n            const { upper, inExpressionNodes, reports } = reportsBuffer;\n\n            if (upper) {\n                upper.inExpressionNodes.push(...inExpressionNodes);\n                upper.reports.push(...reports);\n            } else {\n\n                // flush remaining reports\n                reports.forEach(({ finishReport }) => finishReport());\n            }\n\n            reportsBuffer = upper;\n        }\n\n        /**\n         * Checks whether the given node is in the current reports buffer.\n         * @param {ASTNode} node Node to check.\n         * @returns {boolean} True if the node is in the current buffer, false otherwise.\n         */\n        function isInCurrentReportsBuffer(node) {\n            return reportsBuffer.reports.some(r => r.node === node);\n        }\n\n        /**\n         * Removes the given node from the current reports buffer.\n         * @param {ASTNode} node Node to remove.\n         * @returns {void}\n         */\n        function removeFromCurrentReportsBuffer(node) {\n            reportsBuffer.reports = reportsBuffer.reports.filter(r => r.node !== node);\n        }\n\n        /**\n         * Checks whether a node is a MemberExpression at NewExpression's callee.\n         * @param {ASTNode} node node to check.\n         * @returns {boolean} True if the node is a MemberExpression at NewExpression's callee. false otherwise.\n         */\n        function isMemberExpInNewCallee(node) {\n            if (node.type === \"MemberExpression\") {\n                return node.parent.type === \"NewExpression\" && node.parent.callee === node\n                    ? true\n                    : node.parent.object === node && isMemberExpInNewCallee(node.parent);\n            }\n            return false;\n        }\n\n        return {\n            ArrayExpression(node) {\n                node.elements\n                    .filter(e => e && hasExcessParensWithPrecedence(e, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                    .forEach(report);\n            },\n\n            ArrayPattern(node) {\n                node.elements\n                    .filter(e => canBeAssignmentTarget(e) && hasExcessParens(e))\n                    .forEach(report);\n            },\n\n            ArrowFunctionExpression(node) {\n                if (isReturnAssignException(node)) {\n                    return;\n                }\n\n                if (node.body.type === \"ConditionalExpression\" &&\n                    IGNORE_ARROW_CONDITIONALS\n                ) {\n                    return;\n                }\n\n                if (node.body.type !== \"BlockStatement\") {\n                    const firstBodyToken = sourceCode.getFirstToken(node.body, astUtils.isNotOpeningParenToken);\n                    const tokenBeforeFirst = sourceCode.getTokenBefore(firstBodyToken);\n\n                    if (astUtils.isOpeningParenToken(tokenBeforeFirst) && astUtils.isOpeningBraceToken(firstBodyToken)) {\n                        tokensToIgnore.add(firstBodyToken);\n                    }\n                    if (hasExcessParensWithPrecedence(node.body, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                        report(node.body);\n                    }\n                }\n            },\n\n            AssignmentExpression(node) {\n                if (canBeAssignmentTarget(node.left) && hasExcessParens(node.left)) {\n                    report(node.left);\n                }\n\n                if (!isReturnAssignException(node) && hasExcessParensWithPrecedence(node.right, precedence(node))) {\n                    report(node.right);\n                }\n            },\n\n            BinaryExpression(node) {\n                if (reportsBuffer && node.operator === \"in\") {\n                    reportsBuffer.inExpressionNodes.push(node);\n                }\n\n                checkBinaryLogical(node);\n            },\n\n            CallExpression: checkCallNew,\n\n            ClassBody(node) {\n                node.body\n                    .filter(member => member.type === \"MethodDefinition\" && member.computed && member.key)\n                    .filter(member => hasExcessParensWithPrecedence(member.key, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                    .forEach(member => report(member.key));\n            },\n\n            ConditionalExpression(node) {\n                if (isReturnAssignException(node)) {\n                    return;\n                }\n                if (\n                    !isCondAssignException(node) &&\n                    hasExcessParensWithPrecedence(node.test, precedence({ type: \"LogicalExpression\", operator: \"||\" }))\n                ) {\n                    report(node.test);\n                }\n\n                if (hasExcessParensWithPrecedence(node.consequent, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                    report(node.consequent);\n                }\n\n                if (hasExcessParensWithPrecedence(node.alternate, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                    report(node.alternate);\n                }\n            },\n\n            DoWhileStatement(node) {\n                if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n                    report(node.test);\n                }\n            },\n\n            ExportDefaultDeclaration: node => checkExpressionOrExportStatement(node.declaration),\n            ExpressionStatement: node => checkExpressionOrExportStatement(node.expression),\n\n            ForInStatement(node) {\n                if (node.left.type !== \"VariableDeclaration\") {\n                    const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n\n                    if (\n                        firstLeftToken.value === \"let\" &&\n                        astUtils.isOpeningBracketToken(\n                            sourceCode.getTokenAfter(firstLeftToken, astUtils.isNotClosingParenToken)\n                        )\n                    ) {\n\n                        // ForInStatement#left expression cannot start with `let[`.\n                        tokensToIgnore.add(firstLeftToken);\n                    }\n                }\n\n                if (hasExcessParens(node.left)) {\n                    report(node.left);\n                }\n\n                if (hasExcessParens(node.right)) {\n                    report(node.right);\n                }\n            },\n\n            ForOfStatement(node) {\n                if (node.left.type !== \"VariableDeclaration\") {\n                    const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n\n                    if (firstLeftToken.value === \"let\") {\n\n                        // ForOfStatement#left expression cannot start with `let`.\n                        tokensToIgnore.add(firstLeftToken);\n                    }\n                }\n\n                if (hasExcessParens(node.left)) {\n                    report(node.left);\n                }\n\n                if (hasExcessParensWithPrecedence(node.right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                    report(node.right);\n                }\n            },\n\n            ForStatement(node) {\n                if (node.test && hasExcessParens(node.test) && !isCondAssignException(node)) {\n                    report(node.test);\n                }\n\n                if (node.update && hasExcessParens(node.update)) {\n                    report(node.update);\n                }\n\n                if (node.init) {\n\n                    if (node.init.type !== \"VariableDeclaration\") {\n                        const firstToken = sourceCode.getFirstToken(node.init, astUtils.isNotOpeningParenToken);\n\n                        if (\n                            firstToken.value === \"let\" &&\n                            astUtils.isOpeningBracketToken(\n                                sourceCode.getTokenAfter(firstToken, astUtils.isNotClosingParenToken)\n                            )\n                        ) {\n\n                            // ForStatement#init expression cannot start with `let[`.\n                            tokensToIgnore.add(firstToken);\n                        }\n                    }\n\n                    startNewReportsBuffering();\n\n                    if (hasExcessParens(node.init)) {\n                        report(node.init);\n                    }\n                }\n            },\n\n            \"ForStatement > *.init:exit\"(node) {\n\n                /*\n                 * Removing parentheses around `in` expressions might change semantics and cause errors.\n                 *\n                 * For example, this valid for loop:\n                 *      for (let a = (b in c); ;);\n                 * after removing parentheses would be treated as an invalid for-in loop:\n                 *      for (let a = b in c; ;);\n                 */\n\n                if (reportsBuffer.reports.length) {\n                    reportsBuffer.inExpressionNodes.forEach(inExpressionNode => {\n                        const path = pathToDescendant(node, inExpressionNode);\n                        let nodeToExclude;\n\n                        for (let i = 0; i < path.length; i++) {\n                            const pathNode = path[i];\n\n                            if (i < path.length - 1) {\n                                const nextPathNode = path[i + 1];\n\n                                if (isSafelyEnclosingInExpression(pathNode, nextPathNode)) {\n\n                                    // The 'in' expression in safely enclosed by the syntax of its ancestor nodes (e.g. by '{}' or '[]').\n                                    return;\n                                }\n                            }\n\n                            if (isParenthesised(pathNode)) {\n                                if (isInCurrentReportsBuffer(pathNode)) {\n\n                                    // This node was supposed to be reported, but parentheses might be necessary.\n\n                                    if (isParenthesisedTwice(pathNode)) {\n\n                                        /*\n                                         * This node is parenthesised twice, it certainly has at least one pair of `extra` parentheses.\n                                         * If the --fix option is on, the current fixing iteration will remove only one pair of parentheses.\n                                         * The remaining pair is safely enclosing the 'in' expression.\n                                         */\n                                        return;\n                                    }\n\n                                    // Exclude the outermost node only.\n                                    if (!nodeToExclude) {\n                                        nodeToExclude = pathNode;\n                                    }\n\n                                    // Don't break the loop here, there might be some safe nodes or parentheses that will stay inside.\n\n                                } else {\n\n                                    // This node will stay parenthesised, the 'in' expression in safely enclosed by '()'.\n                                    return;\n                                }\n                            }\n                        }\n\n                        // Exclude the node from the list (i.e. treat parentheses as necessary)\n                        removeFromCurrentReportsBuffer(nodeToExclude);\n                    });\n                }\n\n                endCurrentReportsBuffering();\n            },\n\n            IfStatement(node) {\n                if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n                    report(node.test);\n                }\n            },\n\n            ImportExpression(node) {\n                const { source } = node;\n\n                if (source.type === \"SequenceExpression\") {\n                    if (hasDoubleExcessParens(source)) {\n                        report(source);\n                    }\n                } else if (hasExcessParens(source)) {\n                    report(source);\n                }\n            },\n\n            LogicalExpression: checkBinaryLogical,\n\n            MemberExpression(node) {\n                const shouldAllowWrapOnce = isMemberExpInNewCallee(node) &&\n                  doesMemberExpressionContainCallExpression(node);\n                const nodeObjHasExcessParens = shouldAllowWrapOnce\n                    ? hasDoubleExcessParens(node.object)\n                    : hasExcessParens(node.object) &&\n                    !(\n                        isImmediateFunctionPrototypeMethodCall(node.parent) &&\n                        node.parent.callee === node &&\n                        IGNORE_FUNCTION_PROTOTYPE_METHODS\n                    );\n\n                if (\n                    nodeObjHasExcessParens &&\n                    precedence(node.object) >= precedence(node) &&\n                    (\n                        node.computed ||\n                        !(\n                            astUtils.isDecimalInteger(node.object) ||\n\n                            // RegExp literal is allowed to have parens (#1589)\n                            (node.object.type === \"Literal\" && node.object.regex)\n                        )\n                    )\n                ) {\n                    report(node.object);\n                }\n\n                if (nodeObjHasExcessParens &&\n                  node.object.type === \"CallExpression\"\n                ) {\n                    report(node.object);\n                }\n\n                if (nodeObjHasExcessParens &&\n                  !IGNORE_NEW_IN_MEMBER_EXPR &&\n                  node.object.type === \"NewExpression\" &&\n                  isNewExpressionWithParens(node.object)) {\n                    report(node.object);\n                }\n\n                if (nodeObjHasExcessParens &&\n                    node.optional &&\n                    node.object.type === \"ChainExpression\"\n                ) {\n                    report(node.object);\n                }\n\n                if (node.computed && hasExcessParens(node.property)) {\n                    report(node.property);\n                }\n            },\n\n            NewExpression: checkCallNew,\n\n            ObjectExpression(node) {\n                node.properties\n                    .filter(property => property.value && hasExcessParensWithPrecedence(property.value, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                    .forEach(property => report(property.value));\n            },\n\n            ObjectPattern(node) {\n                node.properties\n                    .filter(property => {\n                        const value = property.value;\n\n                        return canBeAssignmentTarget(value) && hasExcessParens(value);\n                    }).forEach(property => report(property.value));\n            },\n\n            Property(node) {\n                if (node.computed) {\n                    const { key } = node;\n\n                    if (key && hasExcessParensWithPrecedence(key, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                        report(key);\n                    }\n                }\n            },\n\n            RestElement(node) {\n                const argument = node.argument;\n\n                if (canBeAssignmentTarget(argument) && hasExcessParens(argument)) {\n                    report(argument);\n                }\n            },\n\n            ReturnStatement(node) {\n                const returnToken = sourceCode.getFirstToken(node);\n\n                if (isReturnAssignException(node)) {\n                    return;\n                }\n\n                if (node.argument &&\n                        hasExcessParensNoLineTerminator(returnToken, node.argument) &&\n\n                        // RegExp literal is allowed to have parens (#1589)\n                        !(node.argument.type === \"Literal\" && node.argument.regex)) {\n                    report(node.argument);\n                }\n            },\n\n            SequenceExpression(node) {\n                const precedenceOfNode = precedence(node);\n\n                node.expressions\n                    .filter(e => hasExcessParensWithPrecedence(e, precedenceOfNode))\n                    .forEach(report);\n            },\n\n            SwitchCase(node) {\n                if (node.test && hasExcessParens(node.test)) {\n                    report(node.test);\n                }\n            },\n\n            SwitchStatement(node) {\n                if (hasExcessParens(node.discriminant)) {\n                    report(node.discriminant);\n                }\n            },\n\n            ThrowStatement(node) {\n                const throwToken = sourceCode.getFirstToken(node);\n\n                if (hasExcessParensNoLineTerminator(throwToken, node.argument)) {\n                    report(node.argument);\n                }\n            },\n\n            UnaryExpression: checkArgumentWithPrecedence,\n            UpdateExpression(node) {\n                if (node.prefix) {\n                    checkArgumentWithPrecedence(node);\n                } else {\n                    const { argument } = node;\n                    const operatorToken = sourceCode.getLastToken(node);\n\n                    if (argument.loc.end.line === operatorToken.loc.start.line) {\n                        checkArgumentWithPrecedence(node);\n                    } else {\n                        if (hasDoubleExcessParens(argument)) {\n                            report(argument);\n                        }\n                    }\n                }\n            },\n            AwaitExpression: checkArgumentWithPrecedence,\n\n            VariableDeclarator(node) {\n                if (\n                    node.init && hasExcessParensWithPrecedence(node.init, PRECEDENCE_OF_ASSIGNMENT_EXPR) &&\n\n                    // RegExp literal is allowed to have parens (#1589)\n                    !(node.init.type === \"Literal\" && node.init.regex)\n                ) {\n                    report(node.init);\n                }\n            },\n\n            WhileStatement(node) {\n                if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n                    report(node.test);\n                }\n            },\n\n            WithStatement(node) {\n                if (hasExcessParens(node.object)) {\n                    report(node.object);\n                }\n            },\n\n            YieldExpression(node) {\n                if (node.argument) {\n                    const yieldToken = sourceCode.getFirstToken(node);\n\n                    if ((precedence(node.argument) >= precedence(node) &&\n                            hasExcessParensNoLineTerminator(yieldToken, node.argument)) ||\n                            hasDoubleExcessParens(node.argument)) {\n                        report(node.argument);\n                    }\n                }\n            },\n\n            ClassDeclaration: checkClass,\n            ClassExpression: checkClass,\n\n            SpreadElement: checkSpreadOperator,\n            SpreadProperty: checkSpreadOperator,\n            ExperimentalSpreadProperty: checkSpreadOperator,\n\n            TemplateLiteral(node) {\n                node.expressions\n                    .filter(e => e && hasExcessParens(e))\n                    .forEach(report);\n            },\n\n            AssignmentPattern(node) {\n                const { left, right } = node;\n\n                if (canBeAssignmentTarget(left) && hasExcessParens(left)) {\n                    report(left);\n                }\n\n                if (right && hasExcessParensWithPrecedence(right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                    report(right);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAAAA,OAAA;AAEA,MAAM;EAAEC,eAAe,EAAEC;AAAmB,CAAC,GAAGF,OAAO,CAAC,cAAc,CAAC;AACvE,MAAMG,QAAQ,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AAEhDI,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,kCAAkC;MAC/CC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,MAAM;IAEfC,MAAM,EAAE;MACJC,KAAK,EAAE,CACH;QACIR,IAAI,EAAE,OAAO;QACbS,KAAK,EAAE,CACH;UACIC,IAAI,EAAE,CAAC,WAAW;QACtB,CAAC,CACJ;QACDC,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE;MACd,CAAC,EACD;QACIZ,IAAI,EAAE,OAAO;QACbS,KAAK,EAAE,CACH;UACIC,IAAI,EAAE,CAAC,KAAK;QAChB,CAAC,EACD;UACIV,IAAI,EAAE,QAAQ;UACda,UAAU,EAAE;YACRC,iBAAiB,EAAE;cAAEd,IAAI,EAAE;YAAU,CAAC;YACtCe,uBAAuB,EAAE;cAAEf,IAAI,EAAE;YAAU,CAAC;YAC5CgB,YAAY,EAAE;cAAEhB,IAAI,EAAE;YAAU,CAAC;YACjCiB,SAAS,EAAE;cAAEP,IAAI,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE,YAAY;YAAE,CAAC;YACjEQ,2BAA2B,EAAE;cAAElB,IAAI,EAAE;YAAU,CAAC;YAChDmB,6BAA6B,EAAE;cAAEnB,IAAI,EAAE;YAAU,CAAC;YAClDoB,gCAAgC,EAAE;cAAEpB,IAAI,EAAE;YAAU,CAAC;YACrDqB,kCAAkC,EAAE;cAAErB,IAAI,EAAE;YAAU;UAC1D,CAAC;UACDsB,oBAAoB,EAAE;QAC1B,CAAC,CACJ;QACDX,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE;MACd,CAAC;IAET,CAAC;IAEDW,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAE1C,MAAMC,cAAc,GAAG,IAAIC,OAAO,CAAC,CAAC;IACpC,MAAMC,UAAU,GAAGnC,QAAQ,CAACoC,aAAa;IACzC,MAAMC,SAAS,GAAGP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,KAAK,WAAW;IACpD,MAAMC,kBAAkB,GAAGF,SAAS,IAAIP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,IAAIR,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACpB,iBAAiB,KAAK,KAAK;IAC5G,MAAMsB,aAAa,GAAGH,SAAS,IAAIP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,IAAIR,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACnB,uBAAuB,KAAK,KAAK;IAC7G,MAAMsB,oBAAoB,GAAGJ,SAAS,IAAIP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,IAAIR,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAClB,YAAY,KAAK,KAAK;IACzG,MAAMsB,UAAU,GAAGL,SAAS,IAAIP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,IAAIR,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACjB,SAAS;IAClF,MAAMsB,yBAAyB,GAAGN,SAAS,IAAIP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,IAC7DR,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAChB,2BAA2B,KAAK,KAAK;IAC5D,MAAMsB,2BAA2B,GAAGP,SAAS,IAAIP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,IAC/DR,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACf,6BAA6B,KAAK,KAAK;IAC9D,MAAMsB,yBAAyB,GAAGR,SAAS,IAAIP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,IAC7DR,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACd,gCAAgC,KAAK,KAAK;IACjE,MAAMsB,iCAAiC,GAAGT,SAAS,IAAIP,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,IACrER,OAAO,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACb,kCAAkC,KAAK,KAAK;IAEnE,MAAMsB,6BAA6B,GAAGZ,UAAU,CAAC;MAAE/B,IAAI,EAAE;IAAuB,CAAC,CAAC;IAClF,MAAM4C,yBAAyB,GAAGb,UAAU,CAAC;MAAE/B,IAAI,EAAE;IAAmB,CAAC,CAAC;IAE1E,IAAI6C,aAAa;;IAEjB;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,sCAAsCA,CAACC,IAAI,EAAE;MAClD,MAAMC,QAAQ,GAAGpD,QAAQ,CAACqD,mBAAmB,CAACF,IAAI,CAAC;MAEnD,IAAIC,QAAQ,CAAChD,IAAI,KAAK,gBAAgB,EAAE;QACpC,OAAO,KAAK;MAChB;MACA,MAAMkD,MAAM,GAAGtD,QAAQ,CAACqD,mBAAmB,CAACD,QAAQ,CAACE,MAAM,CAAC;MAE5D,OACIA,MAAM,CAAClD,IAAI,KAAK,kBAAkB,IAClCkD,MAAM,CAACC,MAAM,CAACnD,IAAI,KAAK,oBAAoB,IAC3C,CAAC,MAAM,EAAE,OAAO,CAAC,CAACoD,QAAQ,CAACxD,QAAQ,CAACyD,qBAAqB,CAACH,MAAM,CAAC,CAAC;IAE1E;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASI,WAAWA,CAACP,IAAI,EAAE;MACvB,IAAIA,IAAI,CAAC/C,IAAI,KAAK,YAAY,IAAI+C,IAAI,CAAC/C,IAAI,KAAK,aAAa,EAAE;QAC3D,MAAMuD,YAAY,GAAGR,IAAI,CAACS,GAAG,CAACC,KAAK,CAACC,IAAI,KAAKX,IAAI,CAACS,GAAG,CAACG,GAAG,CAACD,IAAI;QAE9D,QAAQpB,UAAU;UAEd;UACA,KAAK,KAAK;YACN,OAAO,KAAK;;UAEhB;UACA,KAAK,YAAY;YACb,OAAOiB,YAAY;;UAEvB;UACA,KAAK,aAAa;YACd,OAAO,CAACA,YAAY;;UAExB;UACA,KAAK,MAAM;YACP;;UAEJ;QACJ;MACJ;;MAEA,IAAIR,IAAI,CAAC/C,IAAI,KAAK,oBAAoB,IAAIwC,2BAA2B,EAAE;QACnE,OAAO,KAAK;MAChB;MAEA,IAAIM,sCAAsC,CAACC,IAAI,CAAC,IAAIL,iCAAiC,EAAE;QACnF,OAAO,KAAK;MAChB;MAEA,OAAOT,SAAS,IAAIc,IAAI,CAAC/C,IAAI,KAAK,oBAAoB,IAAI+C,IAAI,CAAC/C,IAAI,KAAK,yBAAyB;IACrG;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAAS4D,eAAeA,CAACb,IAAI,EAAE;MAC3B,OAAOpD,kBAAkB,CAAC,CAAC,EAAEoD,IAAI,EAAEpB,UAAU,CAAC;IAClD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASkC,oBAAoBA,CAACd,IAAI,EAAE;MAChC,OAAOpD,kBAAkB,CAAC,CAAC,EAAEoD,IAAI,EAAEpB,UAAU,CAAC;IAClD;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASmC,eAAeA,CAACf,IAAI,EAAE;MAC3B,OAAOO,WAAW,CAACP,IAAI,CAAC,IAAIa,eAAe,CAACb,IAAI,CAAC;IACrD;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASgB,qBAAqBA,CAAChB,IAAI,EAAE;MACjC,OAAOO,WAAW,CAACP,IAAI,CAAC,IAAIc,oBAAoB,CAACd,IAAI,CAAC;IAC1D;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASiB,6BAA6BA,CAACjB,IAAI,EAAEkB,oBAAoB,EAAE;MAC/D,IAAIX,WAAW,CAACP,IAAI,CAAC,IAAIa,eAAe,CAACb,IAAI,CAAC,EAAE;QAC5C,IACIhB,UAAU,CAACgB,IAAI,CAAC,IAAIkB,oBAAoB,IACxCJ,oBAAoB,CAACd,IAAI,CAAC,EAC5B;UACE,OAAO,IAAI;QACf;MACJ;MACA,OAAO,KAAK;IAChB;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASmB,qBAAqBA,CAACnB,IAAI,EAAE;MACjC,OAAOZ,kBAAkB,IAAIY,IAAI,CAACoB,IAAI,CAACnE,IAAI,KAAK,sBAAsB;IAC1E;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASoE,mBAAmBA,CAACrB,IAAI,EAAE;MAC/B,KAAK,IAAIsB,WAAW,GAAGtB,IAAI,EAAEsB,WAAW,EAAEA,WAAW,GAAGA,WAAW,CAACC,MAAM,EAAE;QACxE,IACID,WAAW,CAACrE,IAAI,KAAK,iBAAiB,IACrCqE,WAAW,CAACrE,IAAI,KAAK,yBAAyB,IAAIqE,WAAW,CAACE,IAAI,CAACvE,IAAI,KAAK,gBAAiB,EAChG;UACE,OAAO,IAAI;QACf;MACJ;MAEA,OAAO,KAAK;IAChB;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASwE,yBAAyBA,CAACC,aAAa,EAAE;MAC9C,MAAMC,SAAS,GAAG/C,UAAU,CAACgD,YAAY,CAACF,aAAa,CAAC;MACxD,MAAMG,gBAAgB,GAAGjD,UAAU,CAACkD,cAAc,CAACH,SAAS,CAAC;MAE7D,OAAOD,aAAa,CAACK,SAAS,CAACC,MAAM,GAAG,CAAC;MAGjC;MACAnF,QAAQ,CAACoF,mBAAmB,CAACJ,gBAAgB,CAAC,IAC9ChF,QAAQ,CAACqF,mBAAmB,CAACP,SAAS,CAAC,IACvCD,aAAa,CAACvB,MAAM,CAACgC,KAAK,CAAC,CAAC,CAAC,GAAGT,aAAa,CAACS,KAAK,CAAC,CAAC,CACxD;IACT;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,kBAAkBA,CAACpC,IAAI,EAAE;MAC9B,IAAIA,IAAI,CAAC/C,IAAI,KAAK,sBAAsB,EAAE;QACtC,OAAO,IAAI;MACf;MACA,IAAI+C,IAAI,CAAC/C,IAAI,KAAK,uBAAuB,KAChC+C,IAAI,CAACqC,UAAU,CAACpF,IAAI,KAAK,sBAAsB,IAAI+C,IAAI,CAACsC,SAAS,CAACrF,IAAI,KAAK,sBAAsB,CAAC,EAAE;QACzG,OAAO,IAAI;MACf;MACA,IAAK+C,IAAI,CAACuC,IAAI,IAAIvC,IAAI,CAACuC,IAAI,CAACtF,IAAI,KAAK,sBAAsB,IAClD+C,IAAI,CAACwC,KAAK,IAAIxC,IAAI,CAACwC,KAAK,CAACvF,IAAI,KAAK,sBAAuB,EAAE;QAChE,OAAO,IAAI;MACf;MAEA,OAAO,KAAK;IAChB;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASwF,uBAAuBA,CAACzC,IAAI,EAAE;MACnC,IAAI,CAACV,oBAAoB,IAAI,CAAC+B,mBAAmB,CAACrB,IAAI,CAAC,EAAE;QACrD,OAAO,KAAK;MAChB;MAEA,IAAIA,IAAI,CAAC/C,IAAI,KAAK,iBAAiB,EAAE;QACjC,OAAO+C,IAAI,CAAC0C,QAAQ,IAAIN,kBAAkB,CAACpC,IAAI,CAAC0C,QAAQ,CAAC;MAC7D;MACA,IAAI1C,IAAI,CAAC/C,IAAI,KAAK,yBAAyB,IAAI+C,IAAI,CAACwB,IAAI,CAACvE,IAAI,KAAK,gBAAgB,EAAE;QAChF,OAAOmF,kBAAkB,CAACpC,IAAI,CAACwB,IAAI,CAAC;MACxC;MACA,OAAOY,kBAAkB,CAACpC,IAAI,CAAC;IAEnC;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAAS2C,+BAA+BA,CAACC,KAAK,EAAE5C,IAAI,EAAE;MAClD,IAAI4C,KAAK,CAACnC,GAAG,CAACG,GAAG,CAACD,IAAI,KAAKX,IAAI,CAACS,GAAG,CAACC,KAAK,CAACC,IAAI,EAAE;QAC5C,OAAOI,eAAe,CAACf,IAAI,CAAC;MAChC;MAEA,OAAOgB,qBAAqB,CAAChB,IAAI,CAAC;IACtC;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAAS6C,oBAAoBA,CAAC7C,IAAI,EAAE;MAChC,MAAM8C,cAAc,GAAGlE,UAAU,CAACkD,cAAc,CAAC9B,IAAI,CAAC;MACtD,MAAM+C,oBAAoB,GAAGnE,UAAU,CAACkD,cAAc,CAACgB,cAAc,EAAE;QAAEE,eAAe,EAAE;MAAK,CAAC,CAAC;MACjG,MAAMC,mBAAmB,GAAGrE,UAAU,CAACsE,aAAa,CAACJ,cAAc,EAAE;QAAEE,eAAe,EAAE;MAAK,CAAC,CAAC;MAE/F,OAAOD,oBAAoB,IACvBA,oBAAoB,CAACZ,KAAK,CAAC,CAAC,CAAC,KAAKW,cAAc,CAACX,KAAK,CAAC,CAAC,CAAC,IACzDW,cAAc,CAACX,KAAK,CAAC,CAAC,CAAC,KAAKc,mBAAmB,CAACd,KAAK,CAAC,CAAC,CAAC,IACxD,CAACtF,QAAQ,CAACsG,mBAAmB,CAACJ,oBAAoB,EAAEE,mBAAmB,CAAC;IAChF;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASG,qBAAqBA,CAACpD,IAAI,EAAE;MACjC,MAAMqD,aAAa,GAAGzE,UAAU,CAAC0E,cAAc,CAACtD,IAAI,EAAE;QAAEuD,KAAK,EAAE;MAAE,CAAC,CAAC;MACnE,MAAMC,eAAe,GAAGH,aAAa,CAAC,CAAC,CAAC;MACxC,MAAMI,oBAAoB,GAAGJ,aAAa,CAAC,CAAC,CAAC;MAC7C,MAAMK,qBAAqB,GAAG9E,UAAU,CAACgD,YAAY,CAAC5B,IAAI,CAAC;MAE3D,OAAOwD,eAAe,IAAIC,oBAAoB,IAC1C,CAAC7E,UAAU,CAAC+E,oBAAoB,CAACH,eAAe,EAAEC,oBAAoB,CAAC,IACvE,CAAC5G,QAAQ,CAACsG,mBAAmB,CAACO,qBAAqB,EAAED,oBAAoB,CAAC;IAClF;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASG,MAAMA,CAAC5D,IAAI,EAAE;MAClB,MAAM6D,aAAa,GAAGhH,QAAQ,CAACqD,mBAAmB,CAACF,IAAI,CAAC;MAExD,OAAO6D,aAAa,CAAC5G,IAAI,KAAK,gBAAgB,IAAI4G,aAAa,CAAC1D,MAAM,CAAClD,IAAI,KAAK,oBAAoB;IACxG;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAAS6G,qBAAqBA,CAAC9D,IAAI,EAAE;MACjC,OAAOA,IAAI,KAAKA,IAAI,CAAC/C,IAAI,KAAK,YAAY,IAAI+C,IAAI,CAAC/C,IAAI,KAAK,kBAAkB,CAAC;IACnF;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAAS8G,MAAMA,CAAC/D,IAAI,EAAE;MAClB,MAAM8C,cAAc,GAAGlE,UAAU,CAACkD,cAAc,CAAC9B,IAAI,CAAC;MACtD,MAAMwD,eAAe,GAAG5E,UAAU,CAACsE,aAAa,CAAClD,IAAI,CAAC;MAEtD,IAAI,CAACc,oBAAoB,CAACd,IAAI,CAAC,EAAE;QAC7B,IAAIlB,cAAc,CAACkF,GAAG,CAACpF,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAAC,CAAC,EAAE;UACpD;QACJ;QAEA,IAAI4D,MAAM,CAAC5D,IAAI,CAAC,IAAI,CAACa,eAAe,CAACb,IAAI,CAACG,MAAM,CAAC,EAAE;UAC/C;QACJ;MACJ;;MAEA;AACZ;AACA;AACA;AACA;MACY,SAAS+D,YAAYA,CAAA,EAAG;QACpBvF,OAAO,CAACoF,MAAM,CAAC;UACX/D,IAAI;UACJS,GAAG,EAAEqC,cAAc,CAACrC,GAAG;UACvB0D,SAAS,EAAE,YAAY;UACvBC,GAAGA,CAACC,KAAK,EAAE;YACP,MAAMC,mBAAmB,GAAG1F,UAAU,CAAC2F,IAAI,CAACC,KAAK,CAAC1B,cAAc,CAACX,KAAK,CAAC,CAAC,CAAC,EAAEqB,eAAe,CAACrB,KAAK,CAAC,CAAC,CAAC,CAAC;YAEpG,OAAOkC,KAAK,CAACI,gBAAgB,CAAC,CAC1B3B,cAAc,CAACX,KAAK,CAAC,CAAC,CAAC,EACvBqB,eAAe,CAACrB,KAAK,CAAC,CAAC,CAAC,CAC3B,EAAE,CAACU,oBAAoB,CAAC7C,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIsE,mBAAmB,IAAIlB,qBAAqB,CAACpD,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;UAChH;QACJ,CAAC,CAAC;MACN;MAEA,IAAIF,aAAa,EAAE;QACfA,aAAa,CAAC4E,OAAO,CAACC,IAAI,CAAC;UAAE3E,IAAI;UAAEkE;QAAa,CAAC,CAAC;QAClD;MACJ;MAEAA,YAAY,CAAC,CAAC;IAClB;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASU,2BAA2BA,CAAC5E,IAAI,EAAE;MACvC,IAAIiB,6BAA6B,CAACjB,IAAI,CAAC0C,QAAQ,EAAE1D,UAAU,CAACgB,IAAI,CAAC,CAAC,EAAE;QAChE+D,MAAM,CAAC/D,IAAI,CAAC0C,QAAQ,CAAC;MACzB;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASmC,yCAAyCA,CAAC7E,IAAI,EAAE;MACrD,IAAIsB,WAAW,GAAGtB,IAAI,CAACI,MAAM;MAC7B,IAAI0E,eAAe,GAAG9E,IAAI,CAACI,MAAM,CAACnD,IAAI;MAEtC,OAAO6H,eAAe,KAAK,kBAAkB,EAAE;QAC3CxD,WAAW,GAAGA,WAAW,CAAClB,MAAM;QAChC0E,eAAe,GAAGxD,WAAW,CAACrE,IAAI;MACtC;MAEA,OAAO6H,eAAe,KAAK,gBAAgB;IAC/C;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,YAAYA,CAAC/E,IAAI,EAAE;MACxB,MAAMG,MAAM,GAAGH,IAAI,CAACG,MAAM;MAE1B,IAAIc,6BAA6B,CAACd,MAAM,EAAEnB,UAAU,CAACgB,IAAI,CAAC,CAAC,EAAE;QACzD,IACIgB,qBAAqB,CAACb,MAAM,CAAC,IAC7B,EACIyD,MAAM,CAAC5D,IAAI,CAAC;QAEZ;;QAEIG,MAAM,CAAClD,IAAI,KAAK,eAAe,IAC/B,CAACwE,yBAAyB,CAACtB,MAAM,CAAC,IAClC,EACIH,IAAI,CAAC/C,IAAI,KAAK,eAAe,IAC7B,CAACwE,yBAAyB,CAACzB,IAAI,CAAC,CAEvC;QAED;;QAEIA,IAAI,CAAC/C,IAAI,KAAK,eAAe,IAC7BkD,MAAM,CAAClD,IAAI,KAAK,kBAAkB,IAClC4H,yCAAyC,CAAC1E,MAAM,CACnD;QAED;;QAEI,CAACH,IAAI,CAACgF,QAAQ,IACd7E,MAAM,CAAClD,IAAI,KAAK,iBACnB,CACJ,EACH;UACE8G,MAAM,CAAC/D,IAAI,CAACG,MAAM,CAAC;QACvB;MACJ;MACAH,IAAI,CAAC+B,SAAS,CACTkD,MAAM,CAACC,GAAG,IAAIjE,6BAA6B,CAACiE,GAAG,EAAEtF,6BAA6B,CAAC,CAAC,CAChFuF,OAAO,CAACpB,MAAM,CAAC;IACxB;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASqB,kBAAkBA,CAACpF,IAAI,EAAE;MAC9B,MAAMqF,IAAI,GAAGrG,UAAU,CAACgB,IAAI,CAAC;MAC7B,MAAMsF,cAAc,GAAGtG,UAAU,CAACgB,IAAI,CAACuC,IAAI,CAAC;MAC5C,MAAMgD,eAAe,GAAGvG,UAAU,CAACgB,IAAI,CAACwC,KAAK,CAAC;MAC9C,MAAMgD,gBAAgB,GAAGxF,IAAI,CAACyF,QAAQ,KAAK,IAAI;MAC/C,MAAMC,cAAc,GAAGrG,aAAa,KAAKW,IAAI,CAACuC,IAAI,CAACtF,IAAI,KAAK,kBAAkB,IAAI+C,IAAI,CAACuC,IAAI,CAACtF,IAAI,KAAK,mBAAmB,CAAC;MACzH,MAAM0I,eAAe,GAAGtG,aAAa,KAAKW,IAAI,CAACwC,KAAK,CAACvF,IAAI,KAAK,kBAAkB,IAAI+C,IAAI,CAACwC,KAAK,CAACvF,IAAI,KAAK,mBAAmB,CAAC;MAE5H,IAAI,CAACyI,cAAc,IAAI3E,eAAe,CAACf,IAAI,CAACuC,IAAI,CAAC,EAAE;QAC/C,IACI,EAAE,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAClC,QAAQ,CAACL,IAAI,CAACuC,IAAI,CAACtF,IAAI,CAAC,IAAIuI,gBAAgB,CAAC,IACtF,CAAC3I,QAAQ,CAAC+I,oCAAoC,CAAC5F,IAAI,CAACuC,IAAI,EAAEvC,IAAI,CAAC,KAC9DsF,cAAc,GAAGD,IAAI,IAAKC,cAAc,KAAKD,IAAI,IAAI,CAACG,gBAAiB,CAAC,IACzE1E,oBAAoB,CAACd,IAAI,CAACuC,IAAI,CAAC,EACjC;UACEwB,MAAM,CAAC/D,IAAI,CAACuC,IAAI,CAAC;QACrB;MACJ;MAEA,IAAI,CAACoD,eAAe,IAAI5E,eAAe,CAACf,IAAI,CAACwC,KAAK,CAAC,EAAE;QACjD,IACI,CAAC3F,QAAQ,CAAC+I,oCAAoC,CAAC5F,IAAI,CAACwC,KAAK,EAAExC,IAAI,CAAC,KAC/DuF,eAAe,GAAGF,IAAI,IAAKE,eAAe,KAAKF,IAAI,IAAIG,gBAAiB,CAAC,IAC1E1E,oBAAoB,CAACd,IAAI,CAACwC,KAAK,CAAC,EAClC;UACEuB,MAAM,CAAC/D,IAAI,CAACwC,KAAK,CAAC;QACtB;MACJ;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASqD,UAAUA,CAAC7F,IAAI,EAAE;MACtB,IAAI,CAACA,IAAI,CAAC8F,UAAU,EAAE;QAClB;MACJ;;MAEA;AACZ;AACA;AACA;MACY,MAAMC,cAAc,GAAG/G,UAAU,CAACgB,IAAI,CAAC8F,UAAU,CAAC,GAAGjG,yBAAyB,GACxEkB,eAAe,CAACf,IAAI,CAAC8F,UAAU,CAAC,GAChC9E,qBAAqB,CAAChB,IAAI,CAAC8F,UAAU,CAAC;MAE5C,IAAIC,cAAc,EAAE;QAChBhC,MAAM,CAAC/D,IAAI,CAAC8F,UAAU,CAAC;MAC3B;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASE,mBAAmBA,CAAChG,IAAI,EAAE;MAC/B,IAAIiB,6BAA6B,CAACjB,IAAI,CAAC0C,QAAQ,EAAE9C,6BAA6B,CAAC,EAAE;QAC7EmE,MAAM,CAAC/D,IAAI,CAAC0C,QAAQ,CAAC;MACzB;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASuD,gCAAgCA,CAACjG,IAAI,EAAE;MAC5C,MAAMkG,UAAU,GAAGrF,eAAe,CAACb,IAAI,CAAC,GAAGpB,UAAU,CAACkD,cAAc,CAAC9B,IAAI,CAAC,GAAGpB,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAAC;MAC3G,MAAMmG,WAAW,GAAGvH,UAAU,CAACsE,aAAa,CAACgD,UAAU,EAAErJ,QAAQ,CAACuJ,sBAAsB,CAAC;MACzF,MAAMC,UAAU,GAAGF,WAAW,GAAGvH,UAAU,CAACsE,aAAa,CAACiD,WAAW,CAAC,GAAG,IAAI;MAC7E,MAAMG,uBAAuB,GAAGH,WAAW,GAAGvH,UAAU,CAACsE,aAAa,CAACiD,WAAW,EAAEtJ,QAAQ,CAAC0J,sBAAsB,CAAC,GAAG,IAAI;MAE3H,IACI1J,QAAQ,CAACoF,mBAAmB,CAACiE,UAAU,CAAC,KAEpCrJ,QAAQ,CAAC2J,mBAAmB,CAACL,WAAW,CAAC,IACzCA,WAAW,CAAClJ,IAAI,KAAK,SAAS,KAC1BkJ,WAAW,CAACM,KAAK,KAAK,UAAU,IAChCN,WAAW,CAACM,KAAK,KAAK,OAAO,IAC7BN,WAAW,CAACM,KAAK,KAAK,KAAK,IACvBH,uBAAuB,KAEnBzJ,QAAQ,CAAC6J,qBAAqB,CAACJ,uBAAuB,CAAC,IACvDA,uBAAuB,CAACrJ,IAAI,KAAK,YAAY,CAChD,CACR,IACDkJ,WAAW,IAAIA,WAAW,CAAClJ,IAAI,KAAK,YAAY,IAAIkJ,WAAW,CAACM,KAAK,KAAK,OAAO,IAAIJ,UAAU,IAAIA,UAAU,CAACpJ,IAAI,KAAK,SAAS,IAAIoJ,UAAU,CAACI,KAAK,KAAK,UAAU,CACtK,EACH;QACE3H,cAAc,CAAC6H,GAAG,CAACR,WAAW,CAAC;MACnC;MAEA,MAAMJ,cAAc,GAAG/F,IAAI,CAACuB,MAAM,CAACtE,IAAI,KAAK,0BAA0B,GAChEgE,6BAA6B,CAACjB,IAAI,EAAEJ,6BAA6B,CAAC,GAClEmB,eAAe,CAACf,IAAI,CAAC;MAE3B,IAAI+F,cAAc,EAAE;QAChBhC,MAAM,CAAC/D,IAAI,CAAC;MAChB;IACJ;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAAS4G,cAAcA,CAAC5G,IAAI,EAAE6G,QAAQ,EAAE;MACpC,MAAMC,IAAI,GAAG,CAAC9G,IAAI,CAAC;MACnB,IAAIsB,WAAW,GAAGtB,IAAI;MAEtB,OAAOsB,WAAW,KAAKuF,QAAQ,EAAE;QAE7BvF,WAAW,GAAGA,WAAW,CAACC,MAAM;;QAEhC;QACA,IAAID,WAAW,KAAK,IAAI,EAAE;UACtB,MAAM,IAAIyF,KAAK,CAAC,wDAAwD,CAAC;QAC7E;QAEAD,IAAI,CAACnC,IAAI,CAACrD,WAAW,CAAC;MAC1B;MAEA,OAAOwF,IAAI;IACf;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASE,gBAAgBA,CAAChH,IAAI,EAAEiH,UAAU,EAAE;MACxC,OAAOL,cAAc,CAACK,UAAU,EAAEjH,IAAI,CAAC,CAACkH,OAAO,CAAC,CAAC;IACrD;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,6BAA6BA,CAACnH,IAAI,EAAEoH,KAAK,EAAE;MAChD,QAAQpH,IAAI,CAAC/C,IAAI;QACb,KAAK,iBAAiB;QACtB,KAAK,cAAc;QACnB,KAAK,gBAAgB;QACrB,KAAK,kBAAkB;QACvB,KAAK,eAAe;QACpB,KAAK,iBAAiB;UAClB,OAAO,IAAI;QACf,KAAK,yBAAyB;QAC9B,KAAK,oBAAoB;UACrB,OAAO+C,IAAI,CAACqH,MAAM,CAAChH,QAAQ,CAAC+G,KAAK,CAAC;QACtC,KAAK,gBAAgB;QACrB,KAAK,eAAe;UAChB,OAAOpH,IAAI,CAAC+B,SAAS,CAAC1B,QAAQ,CAAC+G,KAAK,CAAC;QACzC,KAAK,kBAAkB;UACnB,OAAOpH,IAAI,CAACsH,QAAQ,IAAItH,IAAI,CAACuH,QAAQ,KAAKH,KAAK;QACnD,KAAK,uBAAuB;UACxB,OAAOpH,IAAI,CAACqC,UAAU,KAAK+E,KAAK;QACpC;UACI,OAAO,KAAK;MACpB;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASI,wBAAwBA,CAAA,EAAG;MAChC1H,aAAa,GAAG;QACZ2H,KAAK,EAAE3H,aAAa;QACpB4H,iBAAiB,EAAE,EAAE;QACrBhD,OAAO,EAAE;MACb,CAAC;IACL;;IAEA;AACR;AACA;AACA;IACQ,SAASiD,0BAA0BA,CAAA,EAAG;MAClC,MAAM;QAAEF,KAAK;QAAEC,iBAAiB;QAAEhD;MAAQ,CAAC,GAAG5E,aAAa;MAE3D,IAAI2H,KAAK,EAAE;QACPA,KAAK,CAACC,iBAAiB,CAAC/C,IAAI,CAAC,GAAG+C,iBAAiB,CAAC;QAClDD,KAAK,CAAC/C,OAAO,CAACC,IAAI,CAAC,GAAGD,OAAO,CAAC;MAClC,CAAC,MAAM;QAEH;QACAA,OAAO,CAACS,OAAO,CAAC,CAAC;UAAEjB;QAAa,CAAC,KAAKA,YAAY,CAAC,CAAC,CAAC;MACzD;MAEApE,aAAa,GAAG2H,KAAK;IACzB;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASG,wBAAwBA,CAAC5H,IAAI,EAAE;MACpC,OAAOF,aAAa,CAAC4E,OAAO,CAACmD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC9H,IAAI,KAAKA,IAAI,CAAC;IAC3D;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAAS+H,8BAA8BA,CAAC/H,IAAI,EAAE;MAC1CF,aAAa,CAAC4E,OAAO,GAAG5E,aAAa,CAAC4E,OAAO,CAACO,MAAM,CAAC6C,CAAC,IAAIA,CAAC,CAAC9H,IAAI,KAAKA,IAAI,CAAC;IAC9E;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASgI,sBAAsBA,CAAChI,IAAI,EAAE;MAClC,IAAIA,IAAI,CAAC/C,IAAI,KAAK,kBAAkB,EAAE;QAClC,OAAO+C,IAAI,CAACuB,MAAM,CAACtE,IAAI,KAAK,eAAe,IAAI+C,IAAI,CAACuB,MAAM,CAACpB,MAAM,KAAKH,IAAI,GACpE,IAAI,GACJA,IAAI,CAACuB,MAAM,CAACnB,MAAM,KAAKJ,IAAI,IAAIgI,sBAAsB,CAAChI,IAAI,CAACuB,MAAM,CAAC;MAC5E;MACA,OAAO,KAAK;IAChB;IAEA,OAAO;MACH0G,eAAeA,CAACjI,IAAI,EAAE;QAClBA,IAAI,CAACkI,QAAQ,CACRjD,MAAM,CAACkD,CAAC,IAAIA,CAAC,IAAIlH,6BAA6B,CAACkH,CAAC,EAAEvI,6BAA6B,CAAC,CAAC,CACjFuF,OAAO,CAACpB,MAAM,CAAC;MACxB,CAAC;MAEDqE,YAAYA,CAACpI,IAAI,EAAE;QACfA,IAAI,CAACkI,QAAQ,CACRjD,MAAM,CAACkD,CAAC,IAAIrE,qBAAqB,CAACqE,CAAC,CAAC,IAAIpH,eAAe,CAACoH,CAAC,CAAC,CAAC,CAC3DhD,OAAO,CAACpB,MAAM,CAAC;MACxB,CAAC;MAEDsE,uBAAuBA,CAACrI,IAAI,EAAE;QAC1B,IAAIyC,uBAAuB,CAACzC,IAAI,CAAC,EAAE;UAC/B;QACJ;QAEA,IAAIA,IAAI,CAACwB,IAAI,CAACvE,IAAI,KAAK,uBAAuB,IAC1CuC,yBAAyB,EAC3B;UACE;QACJ;QAEA,IAAIQ,IAAI,CAACwB,IAAI,CAACvE,IAAI,KAAK,gBAAgB,EAAE;UACrC,MAAMqL,cAAc,GAAG1J,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAACwB,IAAI,EAAE3E,QAAQ,CAACuJ,sBAAsB,CAAC;UAC3F,MAAMmC,gBAAgB,GAAG3J,UAAU,CAACkD,cAAc,CAACwG,cAAc,CAAC;UAElE,IAAIzL,QAAQ,CAACoF,mBAAmB,CAACsG,gBAAgB,CAAC,IAAI1L,QAAQ,CAAC2J,mBAAmB,CAAC8B,cAAc,CAAC,EAAE;YAChGxJ,cAAc,CAAC6H,GAAG,CAAC2B,cAAc,CAAC;UACtC;UACA,IAAIrH,6BAA6B,CAACjB,IAAI,CAACwB,IAAI,EAAE5B,6BAA6B,CAAC,EAAE;YACzEmE,MAAM,CAAC/D,IAAI,CAACwB,IAAI,CAAC;UACrB;QACJ;MACJ,CAAC;MAEDgH,oBAAoBA,CAACxI,IAAI,EAAE;QACvB,IAAI8D,qBAAqB,CAAC9D,IAAI,CAACuC,IAAI,CAAC,IAAIxB,eAAe,CAACf,IAAI,CAACuC,IAAI,CAAC,EAAE;UAChEwB,MAAM,CAAC/D,IAAI,CAACuC,IAAI,CAAC;QACrB;QAEA,IAAI,CAACE,uBAAuB,CAACzC,IAAI,CAAC,IAAIiB,6BAA6B,CAACjB,IAAI,CAACwC,KAAK,EAAExD,UAAU,CAACgB,IAAI,CAAC,CAAC,EAAE;UAC/F+D,MAAM,CAAC/D,IAAI,CAACwC,KAAK,CAAC;QACtB;MACJ,CAAC;MAEDiG,gBAAgBA,CAACzI,IAAI,EAAE;QACnB,IAAIF,aAAa,IAAIE,IAAI,CAACyF,QAAQ,KAAK,IAAI,EAAE;UACzC3F,aAAa,CAAC4H,iBAAiB,CAAC/C,IAAI,CAAC3E,IAAI,CAAC;QAC9C;QAEAoF,kBAAkB,CAACpF,IAAI,CAAC;MAC5B,CAAC;MAED0I,cAAc,EAAE3D,YAAY;MAE5B4D,SAASA,CAAC3I,IAAI,EAAE;QACZA,IAAI,CAACwB,IAAI,CACJyD,MAAM,CAAC2D,MAAM,IAAIA,MAAM,CAAC3L,IAAI,KAAK,kBAAkB,IAAI2L,MAAM,CAACtB,QAAQ,IAAIsB,MAAM,CAACC,GAAG,CAAC,CACrF5D,MAAM,CAAC2D,MAAM,IAAI3H,6BAA6B,CAAC2H,MAAM,CAACC,GAAG,EAAEjJ,6BAA6B,CAAC,CAAC,CAC1FuF,OAAO,CAACyD,MAAM,IAAI7E,MAAM,CAAC6E,MAAM,CAACC,GAAG,CAAC,CAAC;MAC9C,CAAC;MAEDC,qBAAqBA,CAAC9I,IAAI,EAAE;QACxB,IAAIyC,uBAAuB,CAACzC,IAAI,CAAC,EAAE;UAC/B;QACJ;QACA,IACI,CAACmB,qBAAqB,CAACnB,IAAI,CAAC,IAC5BiB,6BAA6B,CAACjB,IAAI,CAACoB,IAAI,EAAEpC,UAAU,CAAC;UAAE/B,IAAI,EAAE,mBAAmB;UAAEwI,QAAQ,EAAE;QAAK,CAAC,CAAC,CAAC,EACrG;UACE1B,MAAM,CAAC/D,IAAI,CAACoB,IAAI,CAAC;QACrB;QAEA,IAAIH,6BAA6B,CAACjB,IAAI,CAACqC,UAAU,EAAEzC,6BAA6B,CAAC,EAAE;UAC/EmE,MAAM,CAAC/D,IAAI,CAACqC,UAAU,CAAC;QAC3B;QAEA,IAAIpB,6BAA6B,CAACjB,IAAI,CAACsC,SAAS,EAAE1C,6BAA6B,CAAC,EAAE;UAC9EmE,MAAM,CAAC/D,IAAI,CAACsC,SAAS,CAAC;QAC1B;MACJ,CAAC;MAEDyG,gBAAgBA,CAAC/I,IAAI,EAAE;QACnB,IAAIe,eAAe,CAACf,IAAI,CAACoB,IAAI,CAAC,IAAI,CAACD,qBAAqB,CAACnB,IAAI,CAAC,EAAE;UAC5D+D,MAAM,CAAC/D,IAAI,CAACoB,IAAI,CAAC;QACrB;MACJ,CAAC;MAED4H,wBAAwB,EAAEhJ,IAAI,IAAIiG,gCAAgC,CAACjG,IAAI,CAACiJ,WAAW,CAAC;MACpFC,mBAAmB,EAAElJ,IAAI,IAAIiG,gCAAgC,CAACjG,IAAI,CAACmJ,UAAU,CAAC;MAE9EC,cAAcA,CAACpJ,IAAI,EAAE;QACjB,IAAIA,IAAI,CAACuC,IAAI,CAACtF,IAAI,KAAK,qBAAqB,EAAE;UAC1C,MAAMoM,cAAc,GAAGzK,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAACuC,IAAI,EAAE1F,QAAQ,CAACuJ,sBAAsB,CAAC;UAE3F,IACIiD,cAAc,CAAC5C,KAAK,KAAK,KAAK,IAC9B5J,QAAQ,CAAC6J,qBAAqB,CAC1B9H,UAAU,CAACsE,aAAa,CAACmG,cAAc,EAAExM,QAAQ,CAAC0J,sBAAsB,CAC5E,CAAC,EACH;YAEE;YACAzH,cAAc,CAAC6H,GAAG,CAAC0C,cAAc,CAAC;UACtC;QACJ;QAEA,IAAItI,eAAe,CAACf,IAAI,CAACuC,IAAI,CAAC,EAAE;UAC5BwB,MAAM,CAAC/D,IAAI,CAACuC,IAAI,CAAC;QACrB;QAEA,IAAIxB,eAAe,CAACf,IAAI,CAACwC,KAAK,CAAC,EAAE;UAC7BuB,MAAM,CAAC/D,IAAI,CAACwC,KAAK,CAAC;QACtB;MACJ,CAAC;MAED8G,cAAcA,CAACtJ,IAAI,EAAE;QACjB,IAAIA,IAAI,CAACuC,IAAI,CAACtF,IAAI,KAAK,qBAAqB,EAAE;UAC1C,MAAMoM,cAAc,GAAGzK,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAACuC,IAAI,EAAE1F,QAAQ,CAACuJ,sBAAsB,CAAC;UAE3F,IAAIiD,cAAc,CAAC5C,KAAK,KAAK,KAAK,EAAE;YAEhC;YACA3H,cAAc,CAAC6H,GAAG,CAAC0C,cAAc,CAAC;UACtC;QACJ;QAEA,IAAItI,eAAe,CAACf,IAAI,CAACuC,IAAI,CAAC,EAAE;UAC5BwB,MAAM,CAAC/D,IAAI,CAACuC,IAAI,CAAC;QACrB;QAEA,IAAItB,6BAA6B,CAACjB,IAAI,CAACwC,KAAK,EAAE5C,6BAA6B,CAAC,EAAE;UAC1EmE,MAAM,CAAC/D,IAAI,CAACwC,KAAK,CAAC;QACtB;MACJ,CAAC;MAED+G,YAAYA,CAACvJ,IAAI,EAAE;QACf,IAAIA,IAAI,CAACoB,IAAI,IAAIL,eAAe,CAACf,IAAI,CAACoB,IAAI,CAAC,IAAI,CAACD,qBAAqB,CAACnB,IAAI,CAAC,EAAE;UACzE+D,MAAM,CAAC/D,IAAI,CAACoB,IAAI,CAAC;QACrB;QAEA,IAAIpB,IAAI,CAACwJ,MAAM,IAAIzI,eAAe,CAACf,IAAI,CAACwJ,MAAM,CAAC,EAAE;UAC7CzF,MAAM,CAAC/D,IAAI,CAACwJ,MAAM,CAAC;QACvB;QAEA,IAAIxJ,IAAI,CAACyJ,IAAI,EAAE;UAEX,IAAIzJ,IAAI,CAACyJ,IAAI,CAACxM,IAAI,KAAK,qBAAqB,EAAE;YAC1C,MAAMiJ,UAAU,GAAGtH,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAACyJ,IAAI,EAAE5M,QAAQ,CAACuJ,sBAAsB,CAAC;YAEvF,IACIF,UAAU,CAACO,KAAK,KAAK,KAAK,IAC1B5J,QAAQ,CAAC6J,qBAAqB,CAC1B9H,UAAU,CAACsE,aAAa,CAACgD,UAAU,EAAErJ,QAAQ,CAAC0J,sBAAsB,CACxE,CAAC,EACH;cAEE;cACAzH,cAAc,CAAC6H,GAAG,CAACT,UAAU,CAAC;YAClC;UACJ;UAEAsB,wBAAwB,CAAC,CAAC;UAE1B,IAAIzG,eAAe,CAACf,IAAI,CAACyJ,IAAI,CAAC,EAAE;YAC5B1F,MAAM,CAAC/D,IAAI,CAACyJ,IAAI,CAAC;UACrB;QACJ;MACJ,CAAC;MAED,4BAA4BC,CAAC1J,IAAI,EAAE;QAE/B;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;QAEgB,IAAIF,aAAa,CAAC4E,OAAO,CAAC1C,MAAM,EAAE;UAC9BlC,aAAa,CAAC4H,iBAAiB,CAACvC,OAAO,CAACwE,gBAAgB,IAAI;YACxD,MAAM7C,IAAI,GAAGE,gBAAgB,CAAChH,IAAI,EAAE2J,gBAAgB,CAAC;YACrD,IAAIC,aAAa;YAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/C,IAAI,CAAC9E,MAAM,EAAE6H,CAAC,EAAE,EAAE;cAClC,MAAMC,QAAQ,GAAGhD,IAAI,CAAC+C,CAAC,CAAC;cAExB,IAAIA,CAAC,GAAG/C,IAAI,CAAC9E,MAAM,GAAG,CAAC,EAAE;gBACrB,MAAM+H,YAAY,GAAGjD,IAAI,CAAC+C,CAAC,GAAG,CAAC,CAAC;gBAEhC,IAAI1C,6BAA6B,CAAC2C,QAAQ,EAAEC,YAAY,CAAC,EAAE;kBAEvD;kBACA;gBACJ;cACJ;cAEA,IAAIlJ,eAAe,CAACiJ,QAAQ,CAAC,EAAE;gBAC3B,IAAIlC,wBAAwB,CAACkC,QAAQ,CAAC,EAAE;kBAEpC;;kBAEA,IAAIhJ,oBAAoB,CAACgJ,QAAQ,CAAC,EAAE;oBAEhC;AACxC;AACA;AACA;AACA;oBACwC;kBACJ;;kBAEA;kBACA,IAAI,CAACF,aAAa,EAAE;oBAChBA,aAAa,GAAGE,QAAQ;kBAC5B;;kBAEA;gBAEJ,CAAC,MAAM;kBAEH;kBACA;gBACJ;cACJ;YACJ;;YAEA;YACA/B,8BAA8B,CAAC6B,aAAa,CAAC;UACjD,CAAC,CAAC;QACN;QAEAjC,0BAA0B,CAAC,CAAC;MAChC,CAAC;MAEDqC,WAAWA,CAAChK,IAAI,EAAE;QACd,IAAIe,eAAe,CAACf,IAAI,CAACoB,IAAI,CAAC,IAAI,CAACD,qBAAqB,CAACnB,IAAI,CAAC,EAAE;UAC5D+D,MAAM,CAAC/D,IAAI,CAACoB,IAAI,CAAC;QACrB;MACJ,CAAC;MAED6I,gBAAgBA,CAACjK,IAAI,EAAE;QACnB,MAAM;UAAEkK;QAAO,CAAC,GAAGlK,IAAI;QAEvB,IAAIkK,MAAM,CAACjN,IAAI,KAAK,oBAAoB,EAAE;UACtC,IAAI+D,qBAAqB,CAACkJ,MAAM,CAAC,EAAE;YAC/BnG,MAAM,CAACmG,MAAM,CAAC;UAClB;QACJ,CAAC,MAAM,IAAInJ,eAAe,CAACmJ,MAAM,CAAC,EAAE;UAChCnG,MAAM,CAACmG,MAAM,CAAC;QAClB;MACJ,CAAC;MAEDC,iBAAiB,EAAE/E,kBAAkB;MAErCgF,gBAAgBA,CAACpK,IAAI,EAAE;QACnB,MAAMqK,mBAAmB,GAAGrC,sBAAsB,CAAChI,IAAI,CAAC,IACtD6E,yCAAyC,CAAC7E,IAAI,CAAC;QACjD,MAAMsK,sBAAsB,GAAGD,mBAAmB,GAC5CrJ,qBAAqB,CAAChB,IAAI,CAACI,MAAM,CAAC,GAClCW,eAAe,CAACf,IAAI,CAACI,MAAM,CAAC,IAC9B,EACIL,sCAAsC,CAACC,IAAI,CAACuB,MAAM,CAAC,IACnDvB,IAAI,CAACuB,MAAM,CAACpB,MAAM,KAAKH,IAAI,IAC3BL,iCAAiC,CACpC;QAEL,IACI2K,sBAAsB,IACtBtL,UAAU,CAACgB,IAAI,CAACI,MAAM,CAAC,IAAIpB,UAAU,CAACgB,IAAI,CAAC,KAEvCA,IAAI,CAACsH,QAAQ,IACb,EACIzK,QAAQ,CAAC0N,gBAAgB,CAACvK,IAAI,CAACI,MAAM,CAAC;QAEtC;QACCJ,IAAI,CAACI,MAAM,CAACnD,IAAI,KAAK,SAAS,IAAI+C,IAAI,CAACI,MAAM,CAACoK,KAAM,CACxD,CACJ,EACH;UACEzG,MAAM,CAAC/D,IAAI,CAACI,MAAM,CAAC;QACvB;QAEA,IAAIkK,sBAAsB,IACxBtK,IAAI,CAACI,MAAM,CAACnD,IAAI,KAAK,gBAAgB,EACrC;UACE8G,MAAM,CAAC/D,IAAI,CAACI,MAAM,CAAC;QACvB;QAEA,IAAIkK,sBAAsB,IACxB,CAAC5K,yBAAyB,IAC1BM,IAAI,CAACI,MAAM,CAACnD,IAAI,KAAK,eAAe,IACpCwE,yBAAyB,CAACzB,IAAI,CAACI,MAAM,CAAC,EAAE;UACtC2D,MAAM,CAAC/D,IAAI,CAACI,MAAM,CAAC;QACvB;QAEA,IAAIkK,sBAAsB,IACtBtK,IAAI,CAACgF,QAAQ,IACbhF,IAAI,CAACI,MAAM,CAACnD,IAAI,KAAK,iBAAiB,EACxC;UACE8G,MAAM,CAAC/D,IAAI,CAACI,MAAM,CAAC;QACvB;QAEA,IAAIJ,IAAI,CAACsH,QAAQ,IAAIvG,eAAe,CAACf,IAAI,CAACuH,QAAQ,CAAC,EAAE;UACjDxD,MAAM,CAAC/D,IAAI,CAACuH,QAAQ,CAAC;QACzB;MACJ,CAAC;MAEDkD,aAAa,EAAE1F,YAAY;MAE3B2F,gBAAgBA,CAAC1K,IAAI,EAAE;QACnBA,IAAI,CAAClC,UAAU,CACVmH,MAAM,CAACsC,QAAQ,IAAIA,QAAQ,CAACd,KAAK,IAAIxF,6BAA6B,CAACsG,QAAQ,CAACd,KAAK,EAAE7G,6BAA6B,CAAC,CAAC,CAClHuF,OAAO,CAACoC,QAAQ,IAAIxD,MAAM,CAACwD,QAAQ,CAACd,KAAK,CAAC,CAAC;MACpD,CAAC;MAEDkE,aAAaA,CAAC3K,IAAI,EAAE;QAChBA,IAAI,CAAClC,UAAU,CACVmH,MAAM,CAACsC,QAAQ,IAAI;UAChB,MAAMd,KAAK,GAAGc,QAAQ,CAACd,KAAK;UAE5B,OAAO3C,qBAAqB,CAAC2C,KAAK,CAAC,IAAI1F,eAAe,CAAC0F,KAAK,CAAC;QACjE,CAAC,CAAC,CAACtB,OAAO,CAACoC,QAAQ,IAAIxD,MAAM,CAACwD,QAAQ,CAACd,KAAK,CAAC,CAAC;MACtD,CAAC;MAEDmE,QAAQA,CAAC5K,IAAI,EAAE;QACX,IAAIA,IAAI,CAACsH,QAAQ,EAAE;UACf,MAAM;YAAEuB;UAAI,CAAC,GAAG7I,IAAI;UAEpB,IAAI6I,GAAG,IAAI5H,6BAA6B,CAAC4H,GAAG,EAAEjJ,6BAA6B,CAAC,EAAE;YAC1EmE,MAAM,CAAC8E,GAAG,CAAC;UACf;QACJ;MACJ,CAAC;MAEDgC,WAAWA,CAAC7K,IAAI,EAAE;QACd,MAAM0C,QAAQ,GAAG1C,IAAI,CAAC0C,QAAQ;QAE9B,IAAIoB,qBAAqB,CAACpB,QAAQ,CAAC,IAAI3B,eAAe,CAAC2B,QAAQ,CAAC,EAAE;UAC9DqB,MAAM,CAACrB,QAAQ,CAAC;QACpB;MACJ,CAAC;MAEDoI,eAAeA,CAAC9K,IAAI,EAAE;QAClB,MAAM+K,WAAW,GAAGnM,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAAC;QAElD,IAAIyC,uBAAuB,CAACzC,IAAI,CAAC,EAAE;UAC/B;QACJ;QAEA,IAAIA,IAAI,CAAC0C,QAAQ,IACTC,+BAA+B,CAACoI,WAAW,EAAE/K,IAAI,CAAC0C,QAAQ,CAAC;QAE3D;QACA,EAAE1C,IAAI,CAAC0C,QAAQ,CAACzF,IAAI,KAAK,SAAS,IAAI+C,IAAI,CAAC0C,QAAQ,CAAC8H,KAAK,CAAC,EAAE;UAChEzG,MAAM,CAAC/D,IAAI,CAAC0C,QAAQ,CAAC;QACzB;MACJ,CAAC;MAEDsI,kBAAkBA,CAAChL,IAAI,EAAE;QACrB,MAAMiL,gBAAgB,GAAGjM,UAAU,CAACgB,IAAI,CAAC;QAEzCA,IAAI,CAACkL,WAAW,CACXjG,MAAM,CAACkD,CAAC,IAAIlH,6BAA6B,CAACkH,CAAC,EAAE8C,gBAAgB,CAAC,CAAC,CAC/D9F,OAAO,CAACpB,MAAM,CAAC;MACxB,CAAC;MAEDoH,UAAUA,CAACnL,IAAI,EAAE;QACb,IAAIA,IAAI,CAACoB,IAAI,IAAIL,eAAe,CAACf,IAAI,CAACoB,IAAI,CAAC,EAAE;UACzC2C,MAAM,CAAC/D,IAAI,CAACoB,IAAI,CAAC;QACrB;MACJ,CAAC;MAEDgK,eAAeA,CAACpL,IAAI,EAAE;QAClB,IAAIe,eAAe,CAACf,IAAI,CAACqL,YAAY,CAAC,EAAE;UACpCtH,MAAM,CAAC/D,IAAI,CAACqL,YAAY,CAAC;QAC7B;MACJ,CAAC;MAEDC,cAAcA,CAACtL,IAAI,EAAE;QACjB,MAAMuL,UAAU,GAAG3M,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAAC;QAEjD,IAAI2C,+BAA+B,CAAC4I,UAAU,EAAEvL,IAAI,CAAC0C,QAAQ,CAAC,EAAE;UAC5DqB,MAAM,CAAC/D,IAAI,CAAC0C,QAAQ,CAAC;QACzB;MACJ,CAAC;MAED8I,eAAe,EAAE5G,2BAA2B;MAC5C6G,gBAAgBA,CAACzL,IAAI,EAAE;QACnB,IAAIA,IAAI,CAAC0L,MAAM,EAAE;UACb9G,2BAA2B,CAAC5E,IAAI,CAAC;QACrC,CAAC,MAAM;UACH,MAAM;YAAE0C;UAAS,CAAC,GAAG1C,IAAI;UACzB,MAAM2L,aAAa,GAAG/M,UAAU,CAACgD,YAAY,CAAC5B,IAAI,CAAC;UAEnD,IAAI0C,QAAQ,CAACjC,GAAG,CAACG,GAAG,CAACD,IAAI,KAAKgL,aAAa,CAAClL,GAAG,CAACC,KAAK,CAACC,IAAI,EAAE;YACxDiE,2BAA2B,CAAC5E,IAAI,CAAC;UACrC,CAAC,MAAM;YACH,IAAIgB,qBAAqB,CAAC0B,QAAQ,CAAC,EAAE;cACjCqB,MAAM,CAACrB,QAAQ,CAAC;YACpB;UACJ;QACJ;MACJ,CAAC;MACDkJ,eAAe,EAAEhH,2BAA2B;MAE5CiH,kBAAkBA,CAAC7L,IAAI,EAAE;QACrB,IACIA,IAAI,CAACyJ,IAAI,IAAIxI,6BAA6B,CAACjB,IAAI,CAACyJ,IAAI,EAAE7J,6BAA6B,CAAC;QAEpF;QACA,EAAEI,IAAI,CAACyJ,IAAI,CAACxM,IAAI,KAAK,SAAS,IAAI+C,IAAI,CAACyJ,IAAI,CAACe,KAAK,CAAC,EACpD;UACEzG,MAAM,CAAC/D,IAAI,CAACyJ,IAAI,CAAC;QACrB;MACJ,CAAC;MAEDqC,cAAcA,CAAC9L,IAAI,EAAE;QACjB,IAAIe,eAAe,CAACf,IAAI,CAACoB,IAAI,CAAC,IAAI,CAACD,qBAAqB,CAACnB,IAAI,CAAC,EAAE;UAC5D+D,MAAM,CAAC/D,IAAI,CAACoB,IAAI,CAAC;QACrB;MACJ,CAAC;MAED2K,aAAaA,CAAC/L,IAAI,EAAE;QAChB,IAAIe,eAAe,CAACf,IAAI,CAACI,MAAM,CAAC,EAAE;UAC9B2D,MAAM,CAAC/D,IAAI,CAACI,MAAM,CAAC;QACvB;MACJ,CAAC;MAED4L,eAAeA,CAAChM,IAAI,EAAE;QAClB,IAAIA,IAAI,CAAC0C,QAAQ,EAAE;UACf,MAAMuJ,UAAU,GAAGrN,UAAU,CAACqF,aAAa,CAACjE,IAAI,CAAC;UAEjD,IAAKhB,UAAU,CAACgB,IAAI,CAAC0C,QAAQ,CAAC,IAAI1D,UAAU,CAACgB,IAAI,CAAC,IAC1C2C,+BAA+B,CAACsJ,UAAU,EAAEjM,IAAI,CAAC0C,QAAQ,CAAC,IAC1D1B,qBAAqB,CAAChB,IAAI,CAAC0C,QAAQ,CAAC,EAAE;YAC1CqB,MAAM,CAAC/D,IAAI,CAAC0C,QAAQ,CAAC;UACzB;QACJ;MACJ,CAAC;MAEDwJ,gBAAgB,EAAErG,UAAU;MAC5BsG,eAAe,EAAEtG,UAAU;MAE3BuG,aAAa,EAAEpG,mBAAmB;MAClCqG,cAAc,EAAErG,mBAAmB;MACnCsG,0BAA0B,EAAEtG,mBAAmB;MAE/CuG,eAAeA,CAACvM,IAAI,EAAE;QAClBA,IAAI,CAACkL,WAAW,CACXjG,MAAM,CAACkD,CAAC,IAAIA,CAAC,IAAIpH,eAAe,CAACoH,CAAC,CAAC,CAAC,CACpChD,OAAO,CAACpB,MAAM,CAAC;MACxB,CAAC;MAEDyI,iBAAiBA,CAACxM,IAAI,EAAE;QACpB,MAAM;UAAEuC,IAAI;UAAEC;QAAM,CAAC,GAAGxC,IAAI;QAE5B,IAAI8D,qBAAqB,CAACvB,IAAI,CAAC,IAAIxB,eAAe,CAACwB,IAAI,CAAC,EAAE;UACtDwB,MAAM,CAACxB,IAAI,CAAC;QAChB;QAEA,IAAIC,KAAK,IAAIvB,6BAA6B,CAACuB,KAAK,EAAE5C,6BAA6B,CAAC,EAAE;UAC9EmE,MAAM,CAACvB,KAAK,CAAC;QACjB;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}