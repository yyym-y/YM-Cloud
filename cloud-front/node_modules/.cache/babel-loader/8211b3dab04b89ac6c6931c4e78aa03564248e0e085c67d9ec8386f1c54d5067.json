{"ast":null,"code":"/**\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing around embedded expressions of template strings\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/template-curly-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      expectedBefore: \"Expected space(s) before '}'.\",\n      expectedAfter: \"Expected space(s) after '${'.\",\n      unexpectedBefore: \"Unexpected space(s) before '}'.\",\n      unexpectedAfter: \"Unexpected space(s) after '${'.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const always = context.options[0] === \"always\";\n\n    /**\n     * Checks spacing before `}` of a given token.\n     * @param {Token} token A token to check. This is a Template token.\n     * @returns {void}\n     */\n    function checkSpacingBefore(token) {\n      if (!token.value.startsWith(\"}\")) {\n        return; // starts with a backtick, this is the first template element in the template literal\n      }\n\n      const prevToken = sourceCode.getTokenBefore(token, {\n          includeComments: true\n        }),\n        hasSpace = sourceCode.isSpaceBetween(prevToken, token);\n      if (!astUtils.isTokenOnSameLine(prevToken, token)) {\n        return;\n      }\n      if (always && !hasSpace) {\n        context.report({\n          loc: {\n            start: token.loc.start,\n            end: {\n              line: token.loc.start.line,\n              column: token.loc.start.column + 1\n            }\n          },\n          messageId: \"expectedBefore\",\n          fix: fixer => fixer.insertTextBefore(token, \" \")\n        });\n      }\n      if (!always && hasSpace) {\n        context.report({\n          loc: {\n            start: prevToken.loc.end,\n            end: token.loc.start\n          },\n          messageId: \"unexpectedBefore\",\n          fix: fixer => fixer.removeRange([prevToken.range[1], token.range[0]])\n        });\n      }\n    }\n\n    /**\n     * Checks spacing after `${` of a given token.\n     * @param {Token} token A token to check. This is a Template token.\n     * @returns {void}\n     */\n    function checkSpacingAfter(token) {\n      if (!token.value.endsWith(\"${\")) {\n        return; // ends with a backtick, this is the last template element in the template literal\n      }\n\n      const nextToken = sourceCode.getTokenAfter(token, {\n          includeComments: true\n        }),\n        hasSpace = sourceCode.isSpaceBetween(token, nextToken);\n      if (!astUtils.isTokenOnSameLine(token, nextToken)) {\n        return;\n      }\n      if (always && !hasSpace) {\n        context.report({\n          loc: {\n            start: {\n              line: token.loc.end.line,\n              column: token.loc.end.column - 2\n            },\n            end: token.loc.end\n          },\n          messageId: \"expectedAfter\",\n          fix: fixer => fixer.insertTextAfter(token, \" \")\n        });\n      }\n      if (!always && hasSpace) {\n        context.report({\n          loc: {\n            start: token.loc.end,\n            end: nextToken.loc.start\n          },\n          messageId: \"unexpectedAfter\",\n          fix: fixer => fixer.removeRange([token.range[1], nextToken.range[0]])\n        });\n      }\n    }\n    return {\n      TemplateElement(node) {\n        const token = sourceCode.getFirstToken(node);\n        checkSpacingBefore(token);\n        checkSpacingAfter(token);\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","expectedBefore","expectedAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","always","options","checkSpacingBefore","token","value","startsWith","prevToken","getTokenBefore","includeComments","hasSpace","isSpaceBetween","isTokenOnSameLine","report","loc","start","end","line","column","messageId","fix","fixer","insertTextBefore","removeRange","range","checkSpacingAfter","endsWith","nextToken","getTokenAfter","insertTextAfter","TemplateElement","node","getFirstToken"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/template-curly-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing around embedded expressions of template strings\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/template-curly-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            { enum: [\"always\", \"never\"] }\n        ],\n        messages: {\n            expectedBefore: \"Expected space(s) before '}'.\",\n            expectedAfter: \"Expected space(s) after '${'.\",\n            unexpectedBefore: \"Unexpected space(s) before '}'.\",\n            unexpectedAfter: \"Unexpected space(s) after '${'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const always = context.options[0] === \"always\";\n\n        /**\n         * Checks spacing before `}` of a given token.\n         * @param {Token} token A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingBefore(token) {\n            if (!token.value.startsWith(\"}\")) {\n                return; // starts with a backtick, this is the first template element in the template literal\n            }\n\n            const prevToken = sourceCode.getTokenBefore(token, { includeComments: true }),\n                hasSpace = sourceCode.isSpaceBetween(prevToken, token);\n\n            if (!astUtils.isTokenOnSameLine(prevToken, token)) {\n                return;\n            }\n\n            if (always && !hasSpace) {\n                context.report({\n                    loc: {\n                        start: token.loc.start,\n                        end: {\n                            line: token.loc.start.line,\n                            column: token.loc.start.column + 1\n                        }\n                    },\n                    messageId: \"expectedBefore\",\n                    fix: fixer => fixer.insertTextBefore(token, \" \")\n                });\n            }\n\n            if (!always && hasSpace) {\n                context.report({\n                    loc: {\n                        start: prevToken.loc.end,\n                        end: token.loc.start\n                    },\n                    messageId: \"unexpectedBefore\",\n                    fix: fixer => fixer.removeRange([prevToken.range[1], token.range[0]])\n                });\n            }\n        }\n\n        /**\n         * Checks spacing after `${` of a given token.\n         * @param {Token} token A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingAfter(token) {\n            if (!token.value.endsWith(\"${\")) {\n                return; // ends with a backtick, this is the last template element in the template literal\n            }\n\n            const nextToken = sourceCode.getTokenAfter(token, { includeComments: true }),\n                hasSpace = sourceCode.isSpaceBetween(token, nextToken);\n\n            if (!astUtils.isTokenOnSameLine(token, nextToken)) {\n                return;\n            }\n\n            if (always && !hasSpace) {\n                context.report({\n                    loc: {\n                        start: {\n                            line: token.loc.end.line,\n                            column: token.loc.end.column - 2\n                        },\n                        end: token.loc.end\n                    },\n                    messageId: \"expectedAfter\",\n                    fix: fixer => fixer.insertTextAfter(token, \" \")\n                });\n            }\n\n            if (!always && hasSpace) {\n                context.report({\n                    loc: {\n                        start: token.loc.end,\n                        end: nextToken.loc.start\n                    },\n                    messageId: \"unexpectedAfter\",\n                    fix: fixer => fixer.removeRange([token.range[1], nextToken.range[0]])\n                });\n            }\n        }\n\n        return {\n            TemplateElement(node) {\n                const token = sourceCode.getFirstToken(node);\n\n                checkSpacingBefore(token);\n                checkSpacingAfter(token);\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}