{"ast":null,"code":"/**\n * @fileoverview `ExtractedConfig` class.\n *\n * `ExtractedConfig` class expresses a final configuration for a specific file.\n *\n * It provides one method.\n *\n * - `toCompatibleObjectAsConfigFileContent()`\n *      Convert this configuration to the compatible object as the content of\n *      config files. It converts the loaded parser and plugins to strings.\n *      `CLIEngine#getConfigForFile(filePath)` method uses this method.\n *\n * `ConfigArray#extractConfig(filePath)` creates a `ExtractedConfig` instance.\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst {\n  IgnorePattern\n} = require(\"./ignore-pattern\");\n\n// For VSCode intellisense\n/** @typedef {import(\"../../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../../shared/types\").GlobalConf} GlobalConf */\n/** @typedef {import(\"../../shared/types\").SeverityConf} SeverityConf */\n/** @typedef {import(\"./config-dependency\").DependentParser} DependentParser */\n/** @typedef {import(\"./config-dependency\").DependentPlugin} DependentPlugin */\n\n/**\n * Check if `xs` starts with `ys`.\n * @template T\n * @param {T[]} xs The array to check.\n * @param {T[]} ys The array that may be the first part of `xs`.\n * @returns {boolean} `true` if `xs` starts with `ys`.\n */\nfunction startsWith(xs, ys) {\n  return xs.length >= ys.length && ys.every((y, i) => y === xs[i]);\n}\n\n/**\n * The class for extracted config data.\n */\nclass ExtractedConfig {\n  constructor() {\n    /**\n     * The config name what `noInlineConfig` setting came from.\n     * @type {string}\n     */\n    this.configNameOfNoInlineConfig = \"\";\n\n    /**\n     * Environments.\n     * @type {Record<string, boolean>}\n     */\n    this.env = {};\n\n    /**\n     * Global variables.\n     * @type {Record<string, GlobalConf>}\n     */\n    this.globals = {};\n\n    /**\n     * The glob patterns that ignore to lint.\n     * @type {(((filePath:string, dot?:boolean) => boolean) & { basePath:string; patterns:string[] }) | undefined}\n     */\n    this.ignores = void 0;\n\n    /**\n     * The flag that disables directive comments.\n     * @type {boolean|undefined}\n     */\n    this.noInlineConfig = void 0;\n\n    /**\n     * Parser definition.\n     * @type {DependentParser|null}\n     */\n    this.parser = null;\n\n    /**\n     * Options for the parser.\n     * @type {Object}\n     */\n    this.parserOptions = {};\n\n    /**\n     * Plugin definitions.\n     * @type {Record<string, DependentPlugin>}\n     */\n    this.plugins = {};\n\n    /**\n     * Processor ID.\n     * @type {string|null}\n     */\n    this.processor = null;\n\n    /**\n     * The flag that reports unused `eslint-disable` directive comments.\n     * @type {boolean|undefined}\n     */\n    this.reportUnusedDisableDirectives = void 0;\n\n    /**\n     * Rule settings.\n     * @type {Record<string, [SeverityConf, ...any[]]>}\n     */\n    this.rules = {};\n\n    /**\n     * Shared settings.\n     * @type {Object}\n     */\n    this.settings = {};\n  }\n\n  /**\n   * Convert this config to the compatible object as a config file content.\n   * @returns {ConfigData} The converted object.\n   */\n  toCompatibleObjectAsConfigFileContent() {\n    const {\n      /* eslint-disable no-unused-vars */\n      configNameOfNoInlineConfig: _ignore1,\n      processor: _ignore2,\n      /* eslint-enable no-unused-vars */\n      ignores,\n      ...config\n    } = this;\n    config.parser = config.parser && config.parser.filePath;\n    config.plugins = Object.keys(config.plugins).filter(Boolean).reverse();\n    config.ignorePatterns = ignores ? ignores.patterns : [];\n\n    // Strip the default patterns from `ignorePatterns`.\n    if (startsWith(config.ignorePatterns, IgnorePattern.DefaultPatterns)) {\n      config.ignorePatterns = config.ignorePatterns.slice(IgnorePattern.DefaultPatterns.length);\n    }\n    return config;\n  }\n}\nmodule.exports = {\n  ExtractedConfig\n};","map":{"version":3,"names":["IgnorePattern","require","startsWith","xs","ys","length","every","y","i","ExtractedConfig","constructor","configNameOfNoInlineConfig","env","globals","ignores","noInlineConfig","parser","parserOptions","plugins","processor","reportUnusedDisableDirectives","rules","settings","toCompatibleObjectAsConfigFileContent","_ignore1","_ignore2","config","filePath","Object","keys","filter","Boolean","reverse","ignorePatterns","patterns","DefaultPatterns","slice","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/@eslint/eslintrc/lib/config-array/extracted-config.js"],"sourcesContent":["/**\n * @fileoverview `ExtractedConfig` class.\n *\n * `ExtractedConfig` class expresses a final configuration for a specific file.\n *\n * It provides one method.\n *\n * - `toCompatibleObjectAsConfigFileContent()`\n *      Convert this configuration to the compatible object as the content of\n *      config files. It converts the loaded parser and plugins to strings.\n *      `CLIEngine#getConfigForFile(filePath)` method uses this method.\n *\n * `ConfigArray#extractConfig(filePath)` creates a `ExtractedConfig` instance.\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst { IgnorePattern } = require(\"./ignore-pattern\");\n\n// For VSCode intellisense\n/** @typedef {import(\"../../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../../shared/types\").GlobalConf} GlobalConf */\n/** @typedef {import(\"../../shared/types\").SeverityConf} SeverityConf */\n/** @typedef {import(\"./config-dependency\").DependentParser} DependentParser */\n/** @typedef {import(\"./config-dependency\").DependentPlugin} DependentPlugin */\n\n/**\n * Check if `xs` starts with `ys`.\n * @template T\n * @param {T[]} xs The array to check.\n * @param {T[]} ys The array that may be the first part of `xs`.\n * @returns {boolean} `true` if `xs` starts with `ys`.\n */\nfunction startsWith(xs, ys) {\n    return xs.length >= ys.length && ys.every((y, i) => y === xs[i]);\n}\n\n/**\n * The class for extracted config data.\n */\nclass ExtractedConfig {\n    constructor() {\n\n        /**\n         * The config name what `noInlineConfig` setting came from.\n         * @type {string}\n         */\n        this.configNameOfNoInlineConfig = \"\";\n\n        /**\n         * Environments.\n         * @type {Record<string, boolean>}\n         */\n        this.env = {};\n\n        /**\n         * Global variables.\n         * @type {Record<string, GlobalConf>}\n         */\n        this.globals = {};\n\n        /**\n         * The glob patterns that ignore to lint.\n         * @type {(((filePath:string, dot?:boolean) => boolean) & { basePath:string; patterns:string[] }) | undefined}\n         */\n        this.ignores = void 0;\n\n        /**\n         * The flag that disables directive comments.\n         * @type {boolean|undefined}\n         */\n        this.noInlineConfig = void 0;\n\n        /**\n         * Parser definition.\n         * @type {DependentParser|null}\n         */\n        this.parser = null;\n\n        /**\n         * Options for the parser.\n         * @type {Object}\n         */\n        this.parserOptions = {};\n\n        /**\n         * Plugin definitions.\n         * @type {Record<string, DependentPlugin>}\n         */\n        this.plugins = {};\n\n        /**\n         * Processor ID.\n         * @type {string|null}\n         */\n        this.processor = null;\n\n        /**\n         * The flag that reports unused `eslint-disable` directive comments.\n         * @type {boolean|undefined}\n         */\n        this.reportUnusedDisableDirectives = void 0;\n\n        /**\n         * Rule settings.\n         * @type {Record<string, [SeverityConf, ...any[]]>}\n         */\n        this.rules = {};\n\n        /**\n         * Shared settings.\n         * @type {Object}\n         */\n        this.settings = {};\n    }\n\n    /**\n     * Convert this config to the compatible object as a config file content.\n     * @returns {ConfigData} The converted object.\n     */\n    toCompatibleObjectAsConfigFileContent() {\n        const {\n            /* eslint-disable no-unused-vars */\n            configNameOfNoInlineConfig: _ignore1,\n            processor: _ignore2,\n            /* eslint-enable no-unused-vars */\n            ignores,\n            ...config\n        } = this;\n\n        config.parser = config.parser && config.parser.filePath;\n        config.plugins = Object.keys(config.plugins).filter(Boolean).reverse();\n        config.ignorePatterns = ignores ? ignores.patterns : [];\n\n        // Strip the default patterns from `ignorePatterns`.\n        if (startsWith(config.ignorePatterns, IgnorePattern.DefaultPatterns)) {\n            config.ignorePatterns =\n                config.ignorePatterns.slice(IgnorePattern.DefaultPatterns.length);\n        }\n\n        return config;\n    }\n}\n\nmodule.exports = { ExtractedConfig };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAM;EAAEA;AAAc,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,EAAE,EAAEC,EAAE,EAAE;EACxB,OAAOD,EAAE,CAACE,MAAM,IAAID,EAAE,CAACC,MAAM,IAAID,EAAE,CAACE,KAAK,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,KAAKJ,EAAE,CAACK,CAAC,CAAC,CAAC;AACpE;;AAEA;AACA;AACA;AACA,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IAEV;AACR;AACA;AACA;IACQ,IAAI,CAACC,0BAA0B,GAAG,EAAE;;IAEpC;AACR;AACA;AACA;IACQ,IAAI,CAACC,GAAG,GAAG,CAAC,CAAC;;IAEb;AACR;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;;IAEjB;AACR;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,KAAK,CAAC;;IAErB;AACR;AACA;AACA;IACQ,IAAI,CAACC,cAAc,GAAG,KAAK,CAAC;;IAE5B;AACR;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,IAAI;;IAElB;AACR;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;;IAEvB;AACR;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;;IAEjB;AACR;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,IAAI;;IAErB;AACR;AACA;AACA;IACQ,IAAI,CAACC,6BAA6B,GAAG,KAAK,CAAC;;IAE3C;AACR;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;;IAEf;AACR;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EACtB;;EAEA;AACJ;AACA;AACA;EACIC,qCAAqCA,CAAA,EAAG;IACpC,MAAM;MACF;MACAZ,0BAA0B,EAAEa,QAAQ;MACpCL,SAAS,EAAEM,QAAQ;MACnB;MACAX,OAAO;MACP,GAAGY;IACP,CAAC,GAAG,IAAI;IAERA,MAAM,CAACV,MAAM,GAAGU,MAAM,CAACV,MAAM,IAAIU,MAAM,CAACV,MAAM,CAACW,QAAQ;IACvDD,MAAM,CAACR,OAAO,GAAGU,MAAM,CAACC,IAAI,CAACH,MAAM,CAACR,OAAO,CAAC,CAACY,MAAM,CAACC,OAAO,CAAC,CAACC,OAAO,CAAC,CAAC;IACtEN,MAAM,CAACO,cAAc,GAAGnB,OAAO,GAAGA,OAAO,CAACoB,QAAQ,GAAG,EAAE;;IAEvD;IACA,IAAIhC,UAAU,CAACwB,MAAM,CAACO,cAAc,EAAEjC,aAAa,CAACmC,eAAe,CAAC,EAAE;MAClET,MAAM,CAACO,cAAc,GACjBP,MAAM,CAACO,cAAc,CAACG,KAAK,CAACpC,aAAa,CAACmC,eAAe,CAAC9B,MAAM,CAAC;IACzE;IAEA,OAAOqB,MAAM;EACjB;AACJ;AAEAW,MAAM,CAACC,OAAO,GAAG;EAAE7B;AAAgB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}