{"ast":null,"code":"/**\n * @fileoverview Rule to disallow uses of await inside of loops.\n * @author Nat Mote (nmote)\n */\n\"use strict\";\n\n/**\n * Check whether it should stop traversing ancestors at the given node.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if it should stop traversing.\n */\nfunction isBoundary(node) {\n  const t = node.type;\n  return t === \"FunctionDeclaration\" || t === \"FunctionExpression\" || t === \"ArrowFunctionExpression\" ||\n  /*\n   * Don't report the await expressions on for-await-of loop since it's\n   * asynchronous iteration intentionally.\n   */\n  t === \"ForOfStatement\" && node.await === true;\n}\n\n/**\n * Check whether the given node is in loop.\n * @param {ASTNode} node A node to check.\n * @param {ASTNode} parent A parent node to check.\n * @returns {boolean} `true` if the node is in loop.\n */\nfunction isLooped(node, parent) {\n  switch (parent.type) {\n    case \"ForStatement\":\n      return node === parent.test || node === parent.update || node === parent.body;\n    case \"ForOfStatement\":\n    case \"ForInStatement\":\n      return node === parent.body;\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n      return node === parent.test || node === parent.body;\n    default:\n      return false;\n  }\n}\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow `await` inside of loops\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-await-in-loop\"\n    },\n    schema: [],\n    messages: {\n      unexpectedAwait: \"Unexpected `await` inside a loop.\"\n    }\n  },\n  create(context) {\n    /**\n     * Validate an await expression.\n     * @param {ASTNode} awaitNode An AwaitExpression or ForOfStatement node to validate.\n     * @returns {void}\n     */\n    function validate(awaitNode) {\n      if (awaitNode.type === \"ForOfStatement\" && !awaitNode.await) {\n        return;\n      }\n      let node = awaitNode;\n      let parent = node.parent;\n      while (parent && !isBoundary(parent)) {\n        if (isLooped(node, parent)) {\n          context.report({\n            node: awaitNode,\n            messageId: \"unexpectedAwait\"\n          });\n          return;\n        }\n        node = parent;\n        parent = parent.parent;\n      }\n    }\n    return {\n      AwaitExpression: validate,\n      ForOfStatement: validate\n    };\n  }\n};","map":{"version":3,"names":["isBoundary","node","t","type","await","isLooped","parent","test","update","body","module","exports","meta","docs","description","category","recommended","url","schema","messages","unexpectedAwait","create","context","validate","awaitNode","report","messageId","AwaitExpression","ForOfStatement"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-await-in-loop.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow uses of await inside of loops.\n * @author Nat Mote (nmote)\n */\n\"use strict\";\n\n/**\n * Check whether it should stop traversing ancestors at the given node.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if it should stop traversing.\n */\nfunction isBoundary(node) {\n    const t = node.type;\n\n    return (\n        t === \"FunctionDeclaration\" ||\n        t === \"FunctionExpression\" ||\n        t === \"ArrowFunctionExpression\" ||\n\n        /*\n         * Don't report the await expressions on for-await-of loop since it's\n         * asynchronous iteration intentionally.\n         */\n        (t === \"ForOfStatement\" && node.await === true)\n    );\n}\n\n/**\n * Check whether the given node is in loop.\n * @param {ASTNode} node A node to check.\n * @param {ASTNode} parent A parent node to check.\n * @returns {boolean} `true` if the node is in loop.\n */\nfunction isLooped(node, parent) {\n    switch (parent.type) {\n        case \"ForStatement\":\n            return (\n                node === parent.test ||\n                node === parent.update ||\n                node === parent.body\n            );\n\n        case \"ForOfStatement\":\n        case \"ForInStatement\":\n            return node === parent.body;\n\n        case \"WhileStatement\":\n        case \"DoWhileStatement\":\n            return node === parent.test || node === parent.body;\n\n        default:\n            return false;\n    }\n}\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow `await` inside of loops\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-await-in-loop\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedAwait: \"Unexpected `await` inside a loop.\"\n        }\n    },\n    create(context) {\n\n        /**\n         * Validate an await expression.\n         * @param {ASTNode} awaitNode An AwaitExpression or ForOfStatement node to validate.\n         * @returns {void}\n         */\n        function validate(awaitNode) {\n            if (awaitNode.type === \"ForOfStatement\" && !awaitNode.await) {\n                return;\n            }\n\n            let node = awaitNode;\n            let parent = node.parent;\n\n            while (parent && !isBoundary(parent)) {\n                if (isLooped(node, parent)) {\n                    context.report({\n                        node: awaitNode,\n                        messageId: \"unexpectedAwait\"\n                    });\n                    return;\n                }\n                node = parent;\n                parent = parent.parent;\n            }\n        }\n\n        return {\n            AwaitExpression: validate,\n            ForOfStatement: validate\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA,SAASA,UAAUA,CAACC,IAAI,EAAE;EACtB,MAAMC,CAAC,GAAGD,IAAI,CAACE,IAAI;EAEnB,OACID,CAAC,KAAK,qBAAqB,IAC3BA,CAAC,KAAK,oBAAoB,IAC1BA,CAAC,KAAK,yBAAyB;EAE/B;AACR;AACA;AACA;EACSA,CAAC,KAAK,gBAAgB,IAAID,IAAI,CAACG,KAAK,KAAK,IAAK;AAEvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,QAAQA,CAACJ,IAAI,EAAEK,MAAM,EAAE;EAC5B,QAAQA,MAAM,CAACH,IAAI;IACf,KAAK,cAAc;MACf,OACIF,IAAI,KAAKK,MAAM,CAACC,IAAI,IACpBN,IAAI,KAAKK,MAAM,CAACE,MAAM,IACtBP,IAAI,KAAKK,MAAM,CAACG,IAAI;IAG5B,KAAK,gBAAgB;IACrB,KAAK,gBAAgB;MACjB,OAAOR,IAAI,KAAKK,MAAM,CAACG,IAAI;IAE/B,KAAK,gBAAgB;IACrB,KAAK,kBAAkB;MACnB,OAAOR,IAAI,KAAKK,MAAM,CAACC,IAAI,IAAIN,IAAI,KAAKK,MAAM,CAACG,IAAI;IAEvD;MACI,OAAO,KAAK;EACpB;AACJ;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFT,IAAI,EAAE,SAAS;IAEfU,IAAI,EAAE;MACFC,WAAW,EAAE,kCAAkC;MAC/CC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,eAAe,EAAE;IACrB;EACJ,CAAC;EACDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,QAAQA,CAACC,SAAS,EAAE;MACzB,IAAIA,SAAS,CAACrB,IAAI,KAAK,gBAAgB,IAAI,CAACqB,SAAS,CAACpB,KAAK,EAAE;QACzD;MACJ;MAEA,IAAIH,IAAI,GAAGuB,SAAS;MACpB,IAAIlB,MAAM,GAAGL,IAAI,CAACK,MAAM;MAExB,OAAOA,MAAM,IAAI,CAACN,UAAU,CAACM,MAAM,CAAC,EAAE;QAClC,IAAID,QAAQ,CAACJ,IAAI,EAAEK,MAAM,CAAC,EAAE;UACxBgB,OAAO,CAACG,MAAM,CAAC;YACXxB,IAAI,EAAEuB,SAAS;YACfE,SAAS,EAAE;UACf,CAAC,CAAC;UACF;QACJ;QACAzB,IAAI,GAAGK,MAAM;QACbA,MAAM,GAAGA,MAAM,CAACA,MAAM;MAC1B;IACJ;IAEA,OAAO;MACHqB,eAAe,EAAEJ,QAAQ;MACzBK,cAAc,EAAEL;IACpB,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}