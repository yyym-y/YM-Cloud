{"ast":null,"code":"/**\n * @fileoverview Require or disallow Unicode BOM\n * @author Andrew Johnston <https://github.com/ehjay>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow Unicode byte order mark (BOM)\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/unicode-bom\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      expected: \"Expected Unicode BOM (Byte Order Mark).\",\n      unexpected: \"Unexpected Unicode BOM (Byte Order Mark).\"\n    }\n  },\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      Program: function checkUnicodeBOM(node) {\n        const sourceCode = context.getSourceCode(),\n          location = {\n            column: 0,\n            line: 1\n          },\n          requireBOM = context.options[0] || \"never\";\n        if (!sourceCode.hasBOM && requireBOM === \"always\") {\n          context.report({\n            node,\n            loc: location,\n            messageId: \"expected\",\n            fix(fixer) {\n              return fixer.insertTextBeforeRange([0, 1], \"\\uFEFF\");\n            }\n          });\n        } else if (sourceCode.hasBOM && requireBOM === \"never\") {\n          context.report({\n            node,\n            loc: location,\n            messageId: \"unexpected\",\n            fix(fixer) {\n              return fixer.removeRange([-1, 0]);\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","expected","unexpected","create","context","Program","checkUnicodeBOM","node","sourceCode","getSourceCode","location","column","line","requireBOM","options","hasBOM","report","loc","messageId","fix","fixer","insertTextBeforeRange","removeRange"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/unicode-bom.js"],"sourcesContent":["/**\n * @fileoverview Require or disallow Unicode BOM\n * @author Andrew Johnston <https://github.com/ehjay>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow Unicode byte order mark (BOM)\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/unicode-bom\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            }\n        ],\n        messages: {\n            expected: \"Expected Unicode BOM (Byte Order Mark).\",\n            unexpected: \"Unexpected Unicode BOM (Byte Order Mark).\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            Program: function checkUnicodeBOM(node) {\n\n                const sourceCode = context.getSourceCode(),\n                    location = { column: 0, line: 1 },\n                    requireBOM = context.options[0] || \"never\";\n\n                if (!sourceCode.hasBOM && (requireBOM === \"always\")) {\n                    context.report({\n                        node,\n                        loc: location,\n                        messageId: \"expected\",\n                        fix(fixer) {\n                            return fixer.insertTextBeforeRange([0, 1], \"\\uFEFF\");\n                        }\n                    });\n                } else if (sourceCode.hasBOM && (requireBOM === \"never\")) {\n                    context.report({\n                        node,\n                        loc: location,\n                        messageId: \"unexpected\",\n                        fix(fixer) {\n                            return fixer.removeRange([-1, 0]);\n                        }\n                    });\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,mDAAmD;MAChEC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,YAAY;IAErBC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO;IAC5B,CAAC,CACJ;IACDC,QAAQ,EAAE;MACNC,QAAQ,EAAE,yCAAyC;MACnDC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;IACA;IACA;;IAEA,OAAO;MAEHC,OAAO,EAAE,SAASC,eAAeA,CAACC,IAAI,EAAE;QAEpC,MAAMC,UAAU,GAAGJ,OAAO,CAACK,aAAa,CAAC,CAAC;UACtCC,QAAQ,GAAG;YAAEC,MAAM,EAAE,CAAC;YAAEC,IAAI,EAAE;UAAE,CAAC;UACjCC,UAAU,GAAGT,OAAO,CAACU,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO;QAE9C,IAAI,CAACN,UAAU,CAACO,MAAM,IAAKF,UAAU,KAAK,QAAS,EAAE;UACjDT,OAAO,CAACY,MAAM,CAAC;YACXT,IAAI;YACJU,GAAG,EAAEP,QAAQ;YACbQ,SAAS,EAAE,UAAU;YACrBC,GAAGA,CAACC,KAAK,EAAE;cACP,OAAOA,KAAK,CAACC,qBAAqB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC;YACxD;UACJ,CAAC,CAAC;QACN,CAAC,MAAM,IAAIb,UAAU,CAACO,MAAM,IAAKF,UAAU,KAAK,OAAQ,EAAE;UACtDT,OAAO,CAACY,MAAM,CAAC;YACXT,IAAI;YACJU,GAAG,EAAEP,QAAQ;YACbQ,SAAS,EAAE,YAAY;YACvBC,GAAGA,CAACC,KAAK,EAAE;cACP,OAAOA,KAAK,CAACE,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACrC;UACJ,CAAC,CAAC;QACN;MACJ;IAEJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}