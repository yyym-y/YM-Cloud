{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using constructor for wrapper objects\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `new` operators with the `String`, `Number`, and `Boolean` objects\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-new-wrappers\"\n    },\n    schema: [],\n    messages: {\n      noConstructor: \"Do not use {{fn}} as a constructor.\"\n    }\n  },\n  create(context) {\n    return {\n      NewExpression(node) {\n        const wrapperObjects = [\"String\", \"Number\", \"Boolean\"];\n        if (wrapperObjects.indexOf(node.callee.name) > -1) {\n          context.report({\n            node,\n            messageId: \"noConstructor\",\n            data: {\n              fn: node.callee.name\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","noConstructor","create","context","NewExpression","node","wrapperObjects","indexOf","callee","name","report","messageId","data","fn"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-new-wrappers.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using constructor for wrapper objects\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `new` operators with the `String`, `Number`, and `Boolean` objects\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-new-wrappers\"\n        },\n\n        schema: [],\n\n        messages: {\n            noConstructor: \"Do not use {{fn}} as a constructor.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            NewExpression(node) {\n                const wrapperObjects = [\"String\", \"Number\", \"Boolean\"];\n\n                if (wrapperObjects.indexOf(node.callee.name) > -1) {\n                    context.report({\n                        node,\n                        messageId: \"noConstructor\",\n                        data: { fn: node.callee.name }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,6EAA6E;MAC1FC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,aAAa,EAAE;IACnB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,OAAO;MAEHC,aAAaA,CAACC,IAAI,EAAE;QAChB,MAAMC,cAAc,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC;QAEtD,IAAIA,cAAc,CAACC,OAAO,CAACF,IAAI,CAACG,MAAM,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;UAC/CN,OAAO,CAACO,MAAM,CAAC;YACXL,IAAI;YACJM,SAAS,EAAE,eAAe;YAC1BC,IAAI,EAAE;cAAEC,EAAE,EAAER,IAAI,CAACG,MAAM,CAACC;YAAK;UACjC,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}