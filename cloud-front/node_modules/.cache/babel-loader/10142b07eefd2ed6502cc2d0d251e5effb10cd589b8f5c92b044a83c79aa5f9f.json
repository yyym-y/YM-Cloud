{"ast":null,"code":"/**\n * @fileoverview `ConfigDependency` class.\n *\n * `ConfigDependency` class expresses a loaded parser or plugin.\n *\n * If the parser or plugin was loaded successfully, it has `definition` property\n * and `filePath` property. Otherwise, it has `error` property.\n *\n * When `JSON.stringify()` converted a `ConfigDependency` object to a JSON, it\n * omits `definition` property.\n *\n * `ConfigArrayFactory` creates `ConfigDependency` objects when it loads parsers\n * or plugins.\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst util = require(\"util\");\n\n/**\n * The class is to store parsers or plugins.\n * This class hides the loaded object from `JSON.stringify()` and `console.log`.\n * @template T\n */\nclass ConfigDependency {\n  /**\n   * Initialize this instance.\n   * @param {Object} data The dependency data.\n   * @param {T} [data.definition] The dependency if the loading succeeded.\n   * @param {Error} [data.error] The error object if the loading failed.\n   * @param {string} [data.filePath] The actual path to the dependency if the loading succeeded.\n   * @param {string} data.id The ID of this dependency.\n   * @param {string} data.importerName The name of the config file which loads this dependency.\n   * @param {string} data.importerPath The path to the config file which loads this dependency.\n   */\n  constructor({\n    definition = null,\n    error = null,\n    filePath = null,\n    id,\n    importerName,\n    importerPath\n  }) {\n    /**\n     * The loaded dependency if the loading succeeded.\n     * @type {T|null}\n     */\n    this.definition = definition;\n\n    /**\n     * The error object if the loading failed.\n     * @type {Error|null}\n     */\n    this.error = error;\n\n    /**\n     * The loaded dependency if the loading succeeded.\n     * @type {string|null}\n     */\n    this.filePath = filePath;\n\n    /**\n     * The ID of this dependency.\n     * @type {string}\n     */\n    this.id = id;\n\n    /**\n     * The name of the config file which loads this dependency.\n     * @type {string}\n     */\n    this.importerName = importerName;\n\n    /**\n     * The path to the config file which loads this dependency.\n     * @type {string}\n     */\n    this.importerPath = importerPath;\n  }\n\n  // eslint-disable-next-line jsdoc/require-description\n  /**\n   * @returns {Object} a JSON compatible object.\n   */\n  toJSON() {\n    const obj = this[util.inspect.custom]();\n\n    // Display `error.message` (`Error#message` is unenumerable).\n    if (obj.error instanceof Error) {\n      obj.error = {\n        ...obj.error,\n        message: obj.error.message\n      };\n    }\n    return obj;\n  }\n\n  // eslint-disable-next-line jsdoc/require-description\n  /**\n   * @returns {Object} an object to display by `console.log()`.\n   */\n  [util.inspect.custom]() {\n    const {\n      definition: _ignore,\n      // eslint-disable-line no-unused-vars\n      ...obj\n    } = this;\n    return obj;\n  }\n}\n\n/** @typedef {ConfigDependency<import(\"../../shared/types\").Parser>} DependentParser */\n/** @typedef {ConfigDependency<import(\"../../shared/types\").Plugin>} DependentPlugin */\n\nmodule.exports = {\n  ConfigDependency\n};","map":{"version":3,"names":["util","require","ConfigDependency","constructor","definition","error","filePath","id","importerName","importerPath","toJSON","obj","inspect","custom","Error","message","_ignore","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/@eslint/eslintrc/lib/config-array/config-dependency.js"],"sourcesContent":["/**\n * @fileoverview `ConfigDependency` class.\n *\n * `ConfigDependency` class expresses a loaded parser or plugin.\n *\n * If the parser or plugin was loaded successfully, it has `definition` property\n * and `filePath` property. Otherwise, it has `error` property.\n *\n * When `JSON.stringify()` converted a `ConfigDependency` object to a JSON, it\n * omits `definition` property.\n *\n * `ConfigArrayFactory` creates `ConfigDependency` objects when it loads parsers\n * or plugins.\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst util = require(\"util\");\n\n/**\n * The class is to store parsers or plugins.\n * This class hides the loaded object from `JSON.stringify()` and `console.log`.\n * @template T\n */\nclass ConfigDependency {\n\n    /**\n     * Initialize this instance.\n     * @param {Object} data The dependency data.\n     * @param {T} [data.definition] The dependency if the loading succeeded.\n     * @param {Error} [data.error] The error object if the loading failed.\n     * @param {string} [data.filePath] The actual path to the dependency if the loading succeeded.\n     * @param {string} data.id The ID of this dependency.\n     * @param {string} data.importerName The name of the config file which loads this dependency.\n     * @param {string} data.importerPath The path to the config file which loads this dependency.\n     */\n    constructor({\n        definition = null,\n        error = null,\n        filePath = null,\n        id,\n        importerName,\n        importerPath\n    }) {\n\n        /**\n         * The loaded dependency if the loading succeeded.\n         * @type {T|null}\n         */\n        this.definition = definition;\n\n        /**\n         * The error object if the loading failed.\n         * @type {Error|null}\n         */\n        this.error = error;\n\n        /**\n         * The loaded dependency if the loading succeeded.\n         * @type {string|null}\n         */\n        this.filePath = filePath;\n\n        /**\n         * The ID of this dependency.\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * The name of the config file which loads this dependency.\n         * @type {string}\n         */\n        this.importerName = importerName;\n\n        /**\n         * The path to the config file which loads this dependency.\n         * @type {string}\n         */\n        this.importerPath = importerPath;\n    }\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @returns {Object} a JSON compatible object.\n     */\n    toJSON() {\n        const obj = this[util.inspect.custom]();\n\n        // Display `error.message` (`Error#message` is unenumerable).\n        if (obj.error instanceof Error) {\n            obj.error = { ...obj.error, message: obj.error.message };\n        }\n\n        return obj;\n    }\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @returns {Object} an object to display by `console.log()`.\n     */\n    [util.inspect.custom]() {\n        const {\n            definition: _ignore, // eslint-disable-line no-unused-vars\n            ...obj\n        } = this;\n\n        return obj;\n    }\n}\n\n/** @typedef {ConfigDependency<import(\"../../shared/types\").Parser>} DependentParser */\n/** @typedef {ConfigDependency<import(\"../../shared/types\").Plugin>} DependentPlugin */\n\nmodule.exports = { ConfigDependency };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EAEnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAAC;IACRC,UAAU,GAAG,IAAI;IACjBC,KAAK,GAAG,IAAI;IACZC,QAAQ,GAAG,IAAI;IACfC,EAAE;IACFC,YAAY;IACZC;EACJ,CAAC,EAAE;IAEC;AACR;AACA;AACA;IACQ,IAAI,CAACL,UAAU,GAAGA,UAAU;;IAE5B;AACR;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAGA,KAAK;;IAElB;AACR;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAGA,QAAQ;;IAExB;AACR;AACA;AACA;IACQ,IAAI,CAACC,EAAE,GAAGA,EAAE;;IAEZ;AACR;AACA;AACA;IACQ,IAAI,CAACC,YAAY,GAAGA,YAAY;;IAEhC;AACR;AACA;AACA;IACQ,IAAI,CAACC,YAAY,GAAGA,YAAY;EACpC;;EAEA;EACA;AACJ;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,MAAMC,GAAG,GAAG,IAAI,CAACX,IAAI,CAACY,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC;;IAEvC;IACA,IAAIF,GAAG,CAACN,KAAK,YAAYS,KAAK,EAAE;MAC5BH,GAAG,CAACN,KAAK,GAAG;QAAE,GAAGM,GAAG,CAACN,KAAK;QAAEU,OAAO,EAAEJ,GAAG,CAACN,KAAK,CAACU;MAAQ,CAAC;IAC5D;IAEA,OAAOJ,GAAG;EACd;;EAEA;EACA;AACJ;AACA;EACI,CAACX,IAAI,CAACY,OAAO,CAACC,MAAM,IAAI;IACpB,MAAM;MACFT,UAAU,EAAEY,OAAO;MAAE;MACrB,GAAGL;IACP,CAAC,GAAG,IAAI;IAER,OAAOA,GAAG;EACd;AACJ;;AAEA;AACA;;AAEAM,MAAM,CAACC,OAAO,GAAG;EAAEhB;AAAiB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}