{"ast":null,"code":"/**\n * @fileoverview Defines a storage for rules.\n * @author Nicholas C. Zakas\n * @author aladdin-add\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst builtInRules = require(\"../rules\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Normalizes a rule module to the new-style API\n * @param {(Function|{create: Function})} rule A rule object, which can either be a function\n * (\"old-style\") or an object with a `create` method (\"new-style\")\n * @returns {{create: Function}} A new-style rule.\n */\nfunction normalizeRule(rule) {\n  return typeof rule === \"function\" ? Object.assign({\n    create: rule\n  }, rule) : rule;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nclass Rules {\n  constructor() {\n    this._rules = Object.create(null);\n  }\n\n  /**\n   * Registers a rule module for rule id in storage.\n   * @param {string} ruleId Rule id (file name).\n   * @param {Function} ruleModule Rule handler.\n   * @returns {void}\n   */\n  define(ruleId, ruleModule) {\n    this._rules[ruleId] = normalizeRule(ruleModule);\n  }\n\n  /**\n   * Access rule handler by id (file name).\n   * @param {string} ruleId Rule id (file name).\n   * @returns {{create: Function, schema: JsonSchema[]}}\n   * A rule. This is normalized to always have the new-style shape with a `create` method.\n   */\n  get(ruleId) {\n    if (typeof this._rules[ruleId] === \"string\") {\n      this.define(ruleId, require(this._rules[ruleId]));\n    }\n    if (this._rules[ruleId]) {\n      return this._rules[ruleId];\n    }\n    if (builtInRules.has(ruleId)) {\n      return builtInRules.get(ruleId);\n    }\n    return null;\n  }\n  *[Symbol.iterator]() {\n    yield* builtInRules;\n    for (const ruleId of Object.keys(this._rules)) {\n      yield [ruleId, this.get(ruleId)];\n    }\n  }\n}\nmodule.exports = Rules;","map":{"version":3,"names":["builtInRules","require","normalizeRule","rule","Object","assign","create","Rules","constructor","_rules","define","ruleId","ruleModule","get","has","Symbol","iterator","keys","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/linter/rules.js"],"sourcesContent":["/**\n * @fileoverview Defines a storage for rules.\n * @author Nicholas C. Zakas\n * @author aladdin-add\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst builtInRules = require(\"../rules\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Normalizes a rule module to the new-style API\n * @param {(Function|{create: Function})} rule A rule object, which can either be a function\n * (\"old-style\") or an object with a `create` method (\"new-style\")\n * @returns {{create: Function}} A new-style rule.\n */\nfunction normalizeRule(rule) {\n    return typeof rule === \"function\" ? Object.assign({ create: rule }, rule) : rule;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nclass Rules {\n    constructor() {\n        this._rules = Object.create(null);\n    }\n\n    /**\n     * Registers a rule module for rule id in storage.\n     * @param {string} ruleId Rule id (file name).\n     * @param {Function} ruleModule Rule handler.\n     * @returns {void}\n     */\n    define(ruleId, ruleModule) {\n        this._rules[ruleId] = normalizeRule(ruleModule);\n    }\n\n    /**\n     * Access rule handler by id (file name).\n     * @param {string} ruleId Rule id (file name).\n     * @returns {{create: Function, schema: JsonSchema[]}}\n     * A rule. This is normalized to always have the new-style shape with a `create` method.\n     */\n    get(ruleId) {\n        if (typeof this._rules[ruleId] === \"string\") {\n            this.define(ruleId, require(this._rules[ruleId]));\n        }\n        if (this._rules[ruleId]) {\n            return this._rules[ruleId];\n        }\n        if (builtInRules.has(ruleId)) {\n            return builtInRules.get(ruleId);\n        }\n\n        return null;\n    }\n\n    *[Symbol.iterator]() {\n        yield* builtInRules;\n\n        for (const ruleId of Object.keys(this._rules)) {\n            yield [ruleId, this.get(ruleId)];\n        }\n    }\n}\n\nmodule.exports = Rules;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,UAAU,CAAC;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,IAAI,EAAE;EACzB,OAAO,OAAOA,IAAI,KAAK,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC;IAAEC,MAAM,EAAEH;EAAK,CAAC,EAAEA,IAAI,CAAC,GAAGA,IAAI;AACpF;;AAEA;AACA;AACA;;AAEA,MAAMI,KAAK,CAAC;EACRC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,MAAM,GAAGL,MAAM,CAACE,MAAM,CAAC,IAAI,CAAC;EACrC;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACII,MAAMA,CAACC,MAAM,EAAEC,UAAU,EAAE;IACvB,IAAI,CAACH,MAAM,CAACE,MAAM,CAAC,GAAGT,aAAa,CAACU,UAAU,CAAC;EACnD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAACF,MAAM,EAAE;IACR,IAAI,OAAO,IAAI,CAACF,MAAM,CAACE,MAAM,CAAC,KAAK,QAAQ,EAAE;MACzC,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEV,OAAO,CAAC,IAAI,CAACQ,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC;IACrD;IACA,IAAI,IAAI,CAACF,MAAM,CAACE,MAAM,CAAC,EAAE;MACrB,OAAO,IAAI,CAACF,MAAM,CAACE,MAAM,CAAC;IAC9B;IACA,IAAIX,YAAY,CAACc,GAAG,CAACH,MAAM,CAAC,EAAE;MAC1B,OAAOX,YAAY,CAACa,GAAG,CAACF,MAAM,CAAC;IACnC;IAEA,OAAO,IAAI;EACf;EAEA,EAAEI,MAAM,CAACC,QAAQ,IAAI;IACjB,OAAOhB,YAAY;IAEnB,KAAK,MAAMW,MAAM,IAAIP,MAAM,CAACa,IAAI,CAAC,IAAI,CAACR,MAAM,CAAC,EAAE;MAC3C,MAAM,CAACE,MAAM,EAAE,IAAI,CAACE,GAAG,CAACF,MAAM,CAAC,CAAC;IACpC;EACJ;AACJ;AAEAO,MAAM,CAACC,OAAO,GAAGZ,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}