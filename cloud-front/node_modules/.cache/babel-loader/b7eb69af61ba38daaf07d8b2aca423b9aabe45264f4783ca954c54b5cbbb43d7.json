{"ast":null,"code":"/**\n * @fileoverview Rule to flag duplicate arguments\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate arguments in `function` definitions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-args\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate param '{{name}}'.\"\n    }\n  },\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks whether or not a given definition is a parameter's.\n     * @param {eslint-scope.DefEntry} def A definition to check.\n     * @returns {boolean} `true` if the definition is a parameter's.\n     */\n    function isParameter(def) {\n      return def.type === \"Parameter\";\n    }\n\n    /**\n     * Determines if a given node has duplicate parameters.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     * @private\n     */\n    function checkParams(node) {\n      const variables = context.getDeclaredVariables(node);\n      for (let i = 0; i < variables.length; ++i) {\n        const variable = variables[i];\n\n        // Checks and reports duplications.\n        const defs = variable.defs.filter(isParameter);\n        if (defs.length >= 2) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              name: variable.name\n            }\n          });\n        }\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      FunctionDeclaration: checkParams,\n      FunctionExpression: checkParams\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","isParameter","def","checkParams","node","variables","getDeclaredVariables","i","length","variable","defs","filter","report","messageId","data","name","FunctionDeclaration","FunctionExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-dupe-args.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag duplicate arguments\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate arguments in `function` definitions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-dupe-args\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate param '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks whether or not a given definition is a parameter's.\n         * @param {eslint-scope.DefEntry} def A definition to check.\n         * @returns {boolean} `true` if the definition is a parameter's.\n         */\n        function isParameter(def) {\n            return def.type === \"Parameter\";\n        }\n\n        /**\n         * Determines if a given node has duplicate parameters.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkParams(node) {\n            const variables = context.getDeclaredVariables(node);\n\n            for (let i = 0; i < variables.length; ++i) {\n                const variable = variables[i];\n\n                // Checks and reports duplications.\n                const defs = variable.defs.filter(isParameter);\n\n                if (defs.length >= 2) {\n                    context.report({\n                        node,\n                        messageId: \"unexpected\",\n                        data: { name: variable.name }\n                    });\n                }\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: checkParams,\n            FunctionExpression: checkParams\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,wDAAwD;MACrEC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,WAAWA,CAACC,GAAG,EAAE;MACtB,OAAOA,GAAG,CAACZ,IAAI,KAAK,WAAW;IACnC;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASa,WAAWA,CAACC,IAAI,EAAE;MACvB,MAAMC,SAAS,GAAGL,OAAO,CAACM,oBAAoB,CAACF,IAAI,CAAC;MAEpD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;QACvC,MAAME,QAAQ,GAAGJ,SAAS,CAACE,CAAC,CAAC;;QAE7B;QACA,MAAMG,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAACC,MAAM,CAACV,WAAW,CAAC;QAE9C,IAAIS,IAAI,CAACF,MAAM,IAAI,CAAC,EAAE;UAClBR,OAAO,CAACY,MAAM,CAAC;YACXR,IAAI;YACJS,SAAS,EAAE,YAAY;YACvBC,IAAI,EAAE;cAAEC,IAAI,EAAEN,QAAQ,CAACM;YAAK;UAChC,CAAC,CAAC;QACN;MACJ;IACJ;;IAEA;IACA;IACA;;IAEA,OAAO;MACHC,mBAAmB,EAAEb,WAAW;MAChCc,kBAAkB,EAAEd;IACxB,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}