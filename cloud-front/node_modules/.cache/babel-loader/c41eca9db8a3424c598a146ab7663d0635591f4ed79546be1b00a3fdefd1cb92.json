{"ast":null,"code":"/**\n * @fileoverview Rule to flag non-camelcased identifiers\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce camelcase naming convention\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/camelcase\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        ignoreDestructuring: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoreImports: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoreGlobals: {\n          type: \"boolean\",\n          default: false\n        },\n        properties: {\n          enum: [\"always\", \"never\"]\n        },\n        allow: {\n          type: \"array\",\n          items: [{\n            type: \"string\"\n          }],\n          minItems: 0,\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      notCamelCase: \"Identifier '{{name}}' is not in camel case.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {};\n    let properties = options.properties || \"\";\n    const ignoreDestructuring = options.ignoreDestructuring;\n    const ignoreImports = options.ignoreImports;\n    const ignoreGlobals = options.ignoreGlobals;\n    const allow = options.allow || [];\n    let globalScope;\n    if (properties !== \"always\" && properties !== \"never\") {\n      properties = \"always\";\n    }\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // contains reported nodes to avoid reporting twice on destructuring with shorthand notation\n    const reported = [];\n    const ALLOWED_PARENT_TYPES = new Set([\"CallExpression\", \"NewExpression\"]);\n\n    /**\n     * Checks if a string contains an underscore and isn't all upper-case\n     * @param {string} name The string to check.\n     * @returns {boolean} if the string is underscored\n     * @private\n     */\n    function isUnderscored(name) {\n      // if there's an underscore, it might be A_CONSTANT, which is okay\n      return name.includes(\"_\") && name !== name.toUpperCase();\n    }\n\n    /**\n     * Checks if a string match the ignore list\n     * @param {string} name The string to check.\n     * @returns {boolean} if the string is ignored\n     * @private\n     */\n    function isAllowed(name) {\n      return allow.some(entry => name === entry || name.match(new RegExp(entry, \"u\")));\n    }\n\n    /**\n     * Checks if a parent of a node is an ObjectPattern.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} if the node is inside an ObjectPattern\n     * @private\n     */\n    function isInsideObjectPattern(node) {\n      let current = node;\n      while (current) {\n        const parent = current.parent;\n        if (parent && parent.type === \"Property\" && parent.computed && parent.key === current) {\n          return false;\n        }\n        if (current.type === \"ObjectPattern\") {\n          return true;\n        }\n        current = parent;\n      }\n      return false;\n    }\n\n    /**\n     * Checks whether the given node represents assignment target property in destructuring.\n     *\n     * For examples:\n     *    ({a: b.foo} = c);  // => true for `foo`\n     *    ([a.foo] = b);     // => true for `foo`\n     *    ([a.foo = 1] = b); // => true for `foo`\n     *    ({...a.foo} = b);  // => true for `foo`\n     * @param {ASTNode} node An Identifier node to check\n     * @returns {boolean} True if the node is an assignment target property in destructuring.\n     */\n    function isAssignmentTargetPropertyInDestructuring(node) {\n      if (node.parent.type === \"MemberExpression\" && node.parent.property === node && !node.parent.computed) {\n        const effectiveParent = node.parent.parent;\n        return effectiveParent.type === \"Property\" && effectiveParent.value === node.parent && effectiveParent.parent.type === \"ObjectPattern\" || effectiveParent.type === \"ArrayPattern\" || effectiveParent.type === \"RestElement\" || effectiveParent.type === \"AssignmentPattern\" && effectiveParent.left === node.parent;\n      }\n      return false;\n    }\n\n    /**\n     * Checks whether the given node represents a reference to a global variable that is not declared in the source code.\n     * These identifiers will be allowed, as it is assumed that user has no control over the names of external global variables.\n     * @param {ASTNode} node `Identifier` node to check.\n     * @returns {boolean} `true` if the node is a reference to a global variable.\n     */\n    function isReferenceToGlobalVariable(node) {\n      const variable = globalScope.set.get(node.name);\n      return variable && variable.defs.length === 0 && variable.references.some(ref => ref.identifier === node);\n    }\n\n    /**\n     * Checks whether the given node represents a reference to a property of an object in an object literal expression.\n     * This allows to differentiate between a global variable that is allowed to be used as a reference, and the key\n     * of the expressed object (which shouldn't be allowed).\n     * @param {ASTNode} node `Identifier` node to check.\n     * @returns {boolean} `true` if the node is a property name of an object literal expression\n     */\n    function isPropertyNameInObjectLiteral(node) {\n      const parent = node.parent;\n      return parent.type === \"Property\" && parent.parent.type === \"ObjectExpression\" && !parent.computed && parent.key === node;\n    }\n\n    /**\n     * Reports an AST node as a rule violation.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     * @private\n     */\n    function report(node) {\n      if (!reported.includes(node)) {\n        reported.push(node);\n        context.report({\n          node,\n          messageId: \"notCamelCase\",\n          data: {\n            name: node.name\n          }\n        });\n      }\n    }\n    return {\n      Program() {\n        globalScope = context.getScope();\n      },\n      Identifier(node) {\n        /*\n         * Leading and trailing underscores are commonly used to flag\n         * private/protected identifiers, strip them before checking if underscored\n         */\n        const name = node.name,\n          nameIsUnderscored = isUnderscored(name.replace(/^_+|_+$/gu, \"\")),\n          effectiveParent = node.parent.type === \"MemberExpression\" ? node.parent.parent : node.parent;\n\n        // First, we ignore the node if it match the ignore list\n        if (isAllowed(name)) {\n          return;\n        }\n\n        // Check if it's a global variable\n        if (ignoreGlobals && isReferenceToGlobalVariable(node) && !isPropertyNameInObjectLiteral(node)) {\n          return;\n        }\n\n        // MemberExpressions get special rules\n        if (node.parent.type === \"MemberExpression\") {\n          // \"never\" check properties\n          if (properties === \"never\") {\n            return;\n          }\n\n          // Always report underscored object names\n          if (node.parent.object.type === \"Identifier\" && node.parent.object.name === node.name && nameIsUnderscored) {\n            report(node);\n\n            // Report AssignmentExpressions only if they are the left side of the assignment\n          } else if (effectiveParent.type === \"AssignmentExpression\" && nameIsUnderscored && (effectiveParent.right.type !== \"MemberExpression\" || effectiveParent.left.type === \"MemberExpression\" && effectiveParent.left.property.name === node.name)) {\n            report(node);\n          } else if (isAssignmentTargetPropertyInDestructuring(node) && nameIsUnderscored) {\n            report(node);\n          }\n\n          /*\n           * Properties have their own rules, and\n           * AssignmentPattern nodes can be treated like Properties:\n           * e.g.: const { no_camelcased = false } = bar;\n           */\n        } else if (node.parent.type === \"Property\" || node.parent.type === \"AssignmentPattern\") {\n          if (node.parent.parent && node.parent.parent.type === \"ObjectPattern\") {\n            if (node.parent.shorthand && node.parent.value.left && nameIsUnderscored) {\n              report(node);\n            }\n            const assignmentKeyEqualsValue = node.parent.key.name === node.parent.value.name;\n            if (nameIsUnderscored && node.parent.computed) {\n              report(node);\n            }\n\n            // prevent checking righthand side of destructured object\n            if (node.parent.key === node && node.parent.value !== node) {\n              return;\n            }\n            const valueIsUnderscored = node.parent.value.name && nameIsUnderscored;\n\n            // ignore destructuring if the option is set, unless a new identifier is created\n            if (valueIsUnderscored && !(assignmentKeyEqualsValue && ignoreDestructuring)) {\n              report(node);\n            }\n          }\n\n          // \"never\" check properties or always ignore destructuring\n          if (properties === \"never\" || ignoreDestructuring && isInsideObjectPattern(node)) {\n            return;\n          }\n\n          // don't check right hand side of AssignmentExpression to prevent duplicate warnings\n          if (nameIsUnderscored && !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && !(node.parent.right === node)) {\n            report(node);\n          }\n\n          // Check if it's an import specifier\n        } else if ([\"ImportSpecifier\", \"ImportNamespaceSpecifier\", \"ImportDefaultSpecifier\"].includes(node.parent.type)) {\n          if (node.parent.type === \"ImportSpecifier\" && ignoreImports) {\n            return;\n          }\n\n          // Report only if the local imported identifier is underscored\n          if (node.parent.local && node.parent.local.name === node.name && nameIsUnderscored) {\n            report(node);\n          }\n\n          // Report anything that is underscored that isn't a CallExpression\n        } else if (nameIsUnderscored && !ALLOWED_PARENT_TYPES.has(effectiveParent.type)) {\n          report(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","ignoreDestructuring","default","ignoreImports","ignoreGlobals","enum","allow","items","minItems","uniqueItems","additionalProperties","messages","notCamelCase","create","context","options","globalScope","reported","ALLOWED_PARENT_TYPES","Set","isUnderscored","name","includes","toUpperCase","isAllowed","some","entry","match","RegExp","isInsideObjectPattern","node","current","parent","computed","key","isAssignmentTargetPropertyInDestructuring","property","effectiveParent","value","left","isReferenceToGlobalVariable","variable","set","get","defs","length","references","ref","identifier","isPropertyNameInObjectLiteral","report","push","messageId","data","Program","getScope","Identifier","nameIsUnderscored","replace","object","right","shorthand","assignmentKeyEqualsValue","valueIsUnderscored","has","local"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/camelcase.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag non-camelcased identifiers\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce camelcase naming convention\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/camelcase\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    ignoreDestructuring: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    ignoreImports: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    ignoreGlobals: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    properties: {\n                        enum: [\"always\", \"never\"]\n                    },\n                    allow: {\n                        type: \"array\",\n                        items: [\n                            {\n                                type: \"string\"\n                            }\n                        ],\n                        minItems: 0,\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            notCamelCase: \"Identifier '{{name}}' is not in camel case.\"\n        }\n    },\n\n    create(context) {\n\n        const options = context.options[0] || {};\n        let properties = options.properties || \"\";\n        const ignoreDestructuring = options.ignoreDestructuring;\n        const ignoreImports = options.ignoreImports;\n        const ignoreGlobals = options.ignoreGlobals;\n        const allow = options.allow || [];\n\n        let globalScope;\n\n        if (properties !== \"always\" && properties !== \"never\") {\n            properties = \"always\";\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // contains reported nodes to avoid reporting twice on destructuring with shorthand notation\n        const reported = [];\n        const ALLOWED_PARENT_TYPES = new Set([\"CallExpression\", \"NewExpression\"]);\n\n        /**\n         * Checks if a string contains an underscore and isn't all upper-case\n         * @param {string} name The string to check.\n         * @returns {boolean} if the string is underscored\n         * @private\n         */\n        function isUnderscored(name) {\n\n            // if there's an underscore, it might be A_CONSTANT, which is okay\n            return name.includes(\"_\") && name !== name.toUpperCase();\n        }\n\n        /**\n         * Checks if a string match the ignore list\n         * @param {string} name The string to check.\n         * @returns {boolean} if the string is ignored\n         * @private\n         */\n        function isAllowed(name) {\n            return allow.some(\n                entry => name === entry || name.match(new RegExp(entry, \"u\"))\n            );\n        }\n\n        /**\n         * Checks if a parent of a node is an ObjectPattern.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} if the node is inside an ObjectPattern\n         * @private\n         */\n        function isInsideObjectPattern(node) {\n            let current = node;\n\n            while (current) {\n                const parent = current.parent;\n\n                if (parent && parent.type === \"Property\" && parent.computed && parent.key === current) {\n                    return false;\n                }\n\n                if (current.type === \"ObjectPattern\") {\n                    return true;\n                }\n\n                current = parent;\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks whether the given node represents assignment target property in destructuring.\n         *\n         * For examples:\n         *    ({a: b.foo} = c);  // => true for `foo`\n         *    ([a.foo] = b);     // => true for `foo`\n         *    ([a.foo = 1] = b); // => true for `foo`\n         *    ({...a.foo} = b);  // => true for `foo`\n         * @param {ASTNode} node An Identifier node to check\n         * @returns {boolean} True if the node is an assignment target property in destructuring.\n         */\n        function isAssignmentTargetPropertyInDestructuring(node) {\n            if (\n                node.parent.type === \"MemberExpression\" &&\n                node.parent.property === node &&\n                !node.parent.computed\n            ) {\n                const effectiveParent = node.parent.parent;\n\n                return (\n                    effectiveParent.type === \"Property\" &&\n                    effectiveParent.value === node.parent &&\n                    effectiveParent.parent.type === \"ObjectPattern\" ||\n                    effectiveParent.type === \"ArrayPattern\" ||\n                    effectiveParent.type === \"RestElement\" ||\n                    (\n                        effectiveParent.type === \"AssignmentPattern\" &&\n                        effectiveParent.left === node.parent\n                    )\n                );\n            }\n            return false;\n        }\n\n        /**\n         * Checks whether the given node represents a reference to a global variable that is not declared in the source code.\n         * These identifiers will be allowed, as it is assumed that user has no control over the names of external global variables.\n         * @param {ASTNode} node `Identifier` node to check.\n         * @returns {boolean} `true` if the node is a reference to a global variable.\n         */\n        function isReferenceToGlobalVariable(node) {\n            const variable = globalScope.set.get(node.name);\n\n            return variable && variable.defs.length === 0 &&\n                variable.references.some(ref => ref.identifier === node);\n        }\n\n        /**\n         * Checks whether the given node represents a reference to a property of an object in an object literal expression.\n         * This allows to differentiate between a global variable that is allowed to be used as a reference, and the key\n         * of the expressed object (which shouldn't be allowed).\n         * @param {ASTNode} node `Identifier` node to check.\n         * @returns {boolean} `true` if the node is a property name of an object literal expression\n         */\n        function isPropertyNameInObjectLiteral(node) {\n            const parent = node.parent;\n\n            return (\n                parent.type === \"Property\" &&\n                parent.parent.type === \"ObjectExpression\" &&\n                !parent.computed &&\n                parent.key === node\n            );\n        }\n\n        /**\n         * Reports an AST node as a rule violation.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         * @private\n         */\n        function report(node) {\n            if (!reported.includes(node)) {\n                reported.push(node);\n                context.report({ node, messageId: \"notCamelCase\", data: { name: node.name } });\n            }\n        }\n\n        return {\n\n            Program() {\n                globalScope = context.getScope();\n            },\n\n            Identifier(node) {\n\n                /*\n                 * Leading and trailing underscores are commonly used to flag\n                 * private/protected identifiers, strip them before checking if underscored\n                 */\n                const name = node.name,\n                    nameIsUnderscored = isUnderscored(name.replace(/^_+|_+$/gu, \"\")),\n                    effectiveParent = (node.parent.type === \"MemberExpression\") ? node.parent.parent : node.parent;\n\n                // First, we ignore the node if it match the ignore list\n                if (isAllowed(name)) {\n                    return;\n                }\n\n                // Check if it's a global variable\n                if (ignoreGlobals && isReferenceToGlobalVariable(node) && !isPropertyNameInObjectLiteral(node)) {\n                    return;\n                }\n\n                // MemberExpressions get special rules\n                if (node.parent.type === \"MemberExpression\") {\n\n                    // \"never\" check properties\n                    if (properties === \"never\") {\n                        return;\n                    }\n\n                    // Always report underscored object names\n                    if (node.parent.object.type === \"Identifier\" && node.parent.object.name === node.name && nameIsUnderscored) {\n                        report(node);\n\n                    // Report AssignmentExpressions only if they are the left side of the assignment\n                    } else if (effectiveParent.type === \"AssignmentExpression\" && nameIsUnderscored && (effectiveParent.right.type !== \"MemberExpression\" || effectiveParent.left.type === \"MemberExpression\" && effectiveParent.left.property.name === node.name)) {\n                        report(node);\n\n                    } else if (isAssignmentTargetPropertyInDestructuring(node) && nameIsUnderscored) {\n                        report(node);\n                    }\n\n                /*\n                 * Properties have their own rules, and\n                 * AssignmentPattern nodes can be treated like Properties:\n                 * e.g.: const { no_camelcased = false } = bar;\n                 */\n                } else if (node.parent.type === \"Property\" || node.parent.type === \"AssignmentPattern\") {\n\n                    if (node.parent.parent && node.parent.parent.type === \"ObjectPattern\") {\n                        if (node.parent.shorthand && node.parent.value.left && nameIsUnderscored) {\n                            report(node);\n                        }\n\n                        const assignmentKeyEqualsValue = node.parent.key.name === node.parent.value.name;\n\n                        if (nameIsUnderscored && node.parent.computed) {\n                            report(node);\n                        }\n\n                        // prevent checking righthand side of destructured object\n                        if (node.parent.key === node && node.parent.value !== node) {\n                            return;\n                        }\n\n                        const valueIsUnderscored = node.parent.value.name && nameIsUnderscored;\n\n                        // ignore destructuring if the option is set, unless a new identifier is created\n                        if (valueIsUnderscored && !(assignmentKeyEqualsValue && ignoreDestructuring)) {\n                            report(node);\n                        }\n                    }\n\n                    // \"never\" check properties or always ignore destructuring\n                    if (properties === \"never\" || (ignoreDestructuring && isInsideObjectPattern(node))) {\n                        return;\n                    }\n\n                    // don't check right hand side of AssignmentExpression to prevent duplicate warnings\n                    if (nameIsUnderscored && !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && !(node.parent.right === node)) {\n                        report(node);\n                    }\n\n                // Check if it's an import specifier\n                } else if ([\"ImportSpecifier\", \"ImportNamespaceSpecifier\", \"ImportDefaultSpecifier\"].includes(node.parent.type)) {\n\n                    if (node.parent.type === \"ImportSpecifier\" && ignoreImports) {\n                        return;\n                    }\n\n                    // Report only if the local imported identifier is underscored\n                    if (\n                        node.parent.local &&\n                        node.parent.local.name === node.name &&\n                        nameIsUnderscored\n                    ) {\n                        report(node);\n                    }\n\n                // Report anything that is underscored that isn't a CallExpression\n                } else if (nameIsUnderscored && !ALLOWED_PARENT_TYPES.has(effectiveParent.type)) {\n                    report(node);\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}