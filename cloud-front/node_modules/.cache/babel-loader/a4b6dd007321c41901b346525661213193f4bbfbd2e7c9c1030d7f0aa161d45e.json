{"ast":null,"code":"/**\n * @fileoverview A rule to disallow modifying variables of class declarations\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow reassigning class members\",\n      category: \"ECMAScript 6\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-class-assign\"\n    },\n    schema: [],\n    messages: {\n      class: \"'{{name}}' is a class.\"\n    }\n  },\n  create(context) {\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n      astUtils.getModifyingReferences(variable.references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          messageId: \"class\",\n          data: {\n            name: reference.identifier.name\n          }\n        });\n      });\n    }\n\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {ASTNode} node A ClassDeclaration/ClassExpression node to check.\n     * @returns {void}\n     */\n    function checkForClass(node) {\n      context.getDeclaredVariables(node).forEach(checkVariable);\n    }\n    return {\n      ClassDeclaration: checkForClass,\n      ClassExpression: checkForClass\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","class","create","context","checkVariable","variable","getModifyingReferences","references","forEach","reference","report","node","identifier","messageId","data","name","checkForClass","getDeclaredVariables","ClassDeclaration","ClassExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-class-assign.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow modifying variables of class declarations\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow reassigning class members\",\n            category: \"ECMAScript 6\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-class-assign\"\n        },\n\n        schema: [],\n\n        messages: {\n            class: \"'{{name}}' is a class.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            astUtils.getModifyingReferences(variable.references).forEach(reference => {\n                context.report({ node: reference.identifier, messageId: \"class\", data: { name: reference.identifier.name } });\n\n            });\n        }\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {ASTNode} node A ClassDeclaration/ClassExpression node to check.\n         * @returns {void}\n         */\n        function checkForClass(node) {\n            context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n\n        return {\n            ClassDeclaration: checkForClass,\n            ClassExpression: checkForClass\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,oCAAoC;MACjDC,QAAQ,EAAE,cAAc;MACxBC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,KAAK,EAAE;IACX;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,aAAaA,CAACC,QAAQ,EAAE;MAC7BjB,QAAQ,CAACkB,sBAAsB,CAACD,QAAQ,CAACE,UAAU,CAAC,CAACC,OAAO,CAACC,SAAS,IAAI;QACtEN,OAAO,CAACO,MAAM,CAAC;UAAEC,IAAI,EAAEF,SAAS,CAACG,UAAU;UAAEC,SAAS,EAAE,OAAO;UAAEC,IAAI,EAAE;YAAEC,IAAI,EAAEN,SAAS,CAACG,UAAU,CAACG;UAAK;QAAE,CAAC,CAAC;MAEjH,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,aAAaA,CAACL,IAAI,EAAE;MACzBR,OAAO,CAACc,oBAAoB,CAACN,IAAI,CAAC,CAACH,OAAO,CAACJ,aAAa,CAAC;IAC7D;IAEA,OAAO;MACHc,gBAAgB,EAAEF,aAAa;MAC/BG,eAAe,EAAEH;IACrB,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}