{"ast":null,"code":"/**\n * @fileoverview A module that filters reported problems based on `eslint-disable` and `eslint-enable` comments\n * @author Teddy Katz\n */\n\n\"use strict\";\n\n/**\n * Compares the locations of two objects in a source file\n * @param {{line: number, column: number}} itemA The first object\n * @param {{line: number, column: number}} itemB The second object\n * @returns {number} A value less than 1 if itemA appears before itemB in the source file, greater than 1 if\n * itemA appears after itemB in the source file, or 0 if itemA and itemB have the same location.\n */\nrequire(\"core-js/modules/es.array.push.js\");\nfunction compareLocations(itemA, itemB) {\n  return itemA.line - itemB.line || itemA.column - itemB.column;\n}\n\n/**\n * This is the same as the exported function, except that it\n * doesn't handle disable-line and disable-next-line directives, and it always reports unused\n * disable directives.\n * @param {Object} options options for applying directives. This is the same as the options\n * for the exported function, except that `reportUnusedDisableDirectives` is not supported\n * (this function always reports unused disable directives).\n * @returns {{problems: Problem[], unusedDisableDirectives: Problem[]}} An object with a list\n * of filtered problems and unused eslint-disable directives\n */\nfunction applyDirectives(options) {\n  const problems = [];\n  let nextDirectiveIndex = 0;\n  let currentGlobalDisableDirective = null;\n  const disabledRuleMap = new Map();\n\n  // enabledRules is only used when there is a current global disable directive.\n  const enabledRules = new Set();\n  const usedDisableDirectives = new Set();\n  for (const problem of options.problems) {\n    while (nextDirectiveIndex < options.directives.length && compareLocations(options.directives[nextDirectiveIndex], problem) <= 0) {\n      const directive = options.directives[nextDirectiveIndex++];\n      switch (directive.type) {\n        case \"disable\":\n          if (directive.ruleId === null) {\n            currentGlobalDisableDirective = directive;\n            disabledRuleMap.clear();\n            enabledRules.clear();\n          } else if (currentGlobalDisableDirective) {\n            enabledRules.delete(directive.ruleId);\n            disabledRuleMap.set(directive.ruleId, directive);\n          } else {\n            disabledRuleMap.set(directive.ruleId, directive);\n          }\n          break;\n        case \"enable\":\n          if (directive.ruleId === null) {\n            currentGlobalDisableDirective = null;\n            disabledRuleMap.clear();\n          } else if (currentGlobalDisableDirective) {\n            enabledRules.add(directive.ruleId);\n            disabledRuleMap.delete(directive.ruleId);\n          } else {\n            disabledRuleMap.delete(directive.ruleId);\n          }\n          break;\n\n        // no default\n      }\n    }\n\n    if (disabledRuleMap.has(problem.ruleId)) {\n      usedDisableDirectives.add(disabledRuleMap.get(problem.ruleId));\n    } else if (currentGlobalDisableDirective && !enabledRules.has(problem.ruleId)) {\n      usedDisableDirectives.add(currentGlobalDisableDirective);\n    } else {\n      problems.push(problem);\n    }\n  }\n  const unusedDisableDirectives = options.directives.filter(directive => directive.type === \"disable\" && !usedDisableDirectives.has(directive)).map(directive => ({\n    ruleId: null,\n    message: directive.ruleId ? `Unused eslint-disable directive (no problems were reported from '${directive.ruleId}').` : \"Unused eslint-disable directive (no problems were reported).\",\n    line: directive.unprocessedDirective.line,\n    column: directive.unprocessedDirective.column,\n    severity: options.reportUnusedDisableDirectives === \"warn\" ? 1 : 2,\n    nodeType: null\n  }));\n  return {\n    problems,\n    unusedDisableDirectives\n  };\n}\n\n/**\n * Given a list of directive comments (i.e. metadata about eslint-disable and eslint-enable comments) and a list\n * of reported problems, determines which problems should be reported.\n * @param {Object} options Information about directives and problems\n * @param {{\n *      type: (\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\"),\n *      ruleId: (string|null),\n *      line: number,\n *      column: number\n * }} options.directives Directive comments found in the file, with one-based columns.\n * Two directive comments can only have the same location if they also have the same type (e.g. a single eslint-disable\n * comment for two different rules is represented as two directives).\n * @param {{ruleId: (string|null), line: number, column: number}[]} options.problems\n * A list of problems reported by rules, sorted by increasing location in the file, with one-based columns.\n * @param {\"off\" | \"warn\" | \"error\"} options.reportUnusedDisableDirectives If `\"warn\"` or `\"error\"`, adds additional problems for unused directives\n * @returns {{ruleId: (string|null), line: number, column: number}[]}\n * A list of reported problems that were not disabled by the directive comments.\n */\nmodule.exports = ({\n  directives,\n  problems,\n  reportUnusedDisableDirectives = \"off\"\n}) => {\n  const blockDirectives = directives.filter(directive => directive.type === \"disable\" || directive.type === \"enable\").map(directive => Object.assign({}, directive, {\n    unprocessedDirective: directive\n  })).sort(compareLocations);\n\n  /**\n   * Returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level.\n   * TODO(stephenwade): Replace this with array.flatMap when we drop support for Node v10\n   * @param {any[]} array The array to process\n   * @param {Function} fn The function to use\n   * @returns {any[]} The result array\n   */\n  function flatMap(array, fn) {\n    const mapped = array.map(fn);\n    const flattened = [].concat(...mapped);\n    return flattened;\n  }\n  const lineDirectives = flatMap(directives, directive => {\n    switch (directive.type) {\n      case \"disable\":\n      case \"enable\":\n        return [];\n      case \"disable-line\":\n        return [{\n          type: \"disable\",\n          line: directive.line,\n          column: 1,\n          ruleId: directive.ruleId,\n          unprocessedDirective: directive\n        }, {\n          type: \"enable\",\n          line: directive.line + 1,\n          column: 0,\n          ruleId: directive.ruleId,\n          unprocessedDirective: directive\n        }];\n      case \"disable-next-line\":\n        return [{\n          type: \"disable\",\n          line: directive.line + 1,\n          column: 1,\n          ruleId: directive.ruleId,\n          unprocessedDirective: directive\n        }, {\n          type: \"enable\",\n          line: directive.line + 2,\n          column: 0,\n          ruleId: directive.ruleId,\n          unprocessedDirective: directive\n        }];\n      default:\n        throw new TypeError(`Unrecognized directive type '${directive.type}'`);\n    }\n  }).sort(compareLocations);\n  const blockDirectivesResult = applyDirectives({\n    problems,\n    directives: blockDirectives,\n    reportUnusedDisableDirectives\n  });\n  const lineDirectivesResult = applyDirectives({\n    problems: blockDirectivesResult.problems,\n    directives: lineDirectives,\n    reportUnusedDisableDirectives\n  });\n  return reportUnusedDisableDirectives !== \"off\" ? lineDirectivesResult.problems.concat(blockDirectivesResult.unusedDisableDirectives).concat(lineDirectivesResult.unusedDisableDirectives).sort(compareLocations) : lineDirectivesResult.problems;\n};","map":{"version":3,"names":["require","compareLocations","itemA","itemB","line","column","applyDirectives","options","problems","nextDirectiveIndex","currentGlobalDisableDirective","disabledRuleMap","Map","enabledRules","Set","usedDisableDirectives","problem","directives","length","directive","type","ruleId","clear","delete","set","add","has","get","push","unusedDisableDirectives","filter","map","message","unprocessedDirective","severity","reportUnusedDisableDirectives","nodeType","module","exports","blockDirectives","Object","assign","sort","flatMap","array","fn","mapped","flattened","concat","lineDirectives","TypeError","blockDirectivesResult","lineDirectivesResult"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/linter/apply-disable-directives.js"],"sourcesContent":["/**\n * @fileoverview A module that filters reported problems based on `eslint-disable` and `eslint-enable` comments\n * @author Teddy Katz\n */\n\n\"use strict\";\n\n/**\n * Compares the locations of two objects in a source file\n * @param {{line: number, column: number}} itemA The first object\n * @param {{line: number, column: number}} itemB The second object\n * @returns {number} A value less than 1 if itemA appears before itemB in the source file, greater than 1 if\n * itemA appears after itemB in the source file, or 0 if itemA and itemB have the same location.\n */\nfunction compareLocations(itemA, itemB) {\n    return itemA.line - itemB.line || itemA.column - itemB.column;\n}\n\n/**\n * This is the same as the exported function, except that it\n * doesn't handle disable-line and disable-next-line directives, and it always reports unused\n * disable directives.\n * @param {Object} options options for applying directives. This is the same as the options\n * for the exported function, except that `reportUnusedDisableDirectives` is not supported\n * (this function always reports unused disable directives).\n * @returns {{problems: Problem[], unusedDisableDirectives: Problem[]}} An object with a list\n * of filtered problems and unused eslint-disable directives\n */\nfunction applyDirectives(options) {\n    const problems = [];\n    let nextDirectiveIndex = 0;\n    let currentGlobalDisableDirective = null;\n    const disabledRuleMap = new Map();\n\n    // enabledRules is only used when there is a current global disable directive.\n    const enabledRules = new Set();\n    const usedDisableDirectives = new Set();\n\n    for (const problem of options.problems) {\n        while (\n            nextDirectiveIndex < options.directives.length &&\n            compareLocations(options.directives[nextDirectiveIndex], problem) <= 0\n        ) {\n            const directive = options.directives[nextDirectiveIndex++];\n\n            switch (directive.type) {\n                case \"disable\":\n                    if (directive.ruleId === null) {\n                        currentGlobalDisableDirective = directive;\n                        disabledRuleMap.clear();\n                        enabledRules.clear();\n                    } else if (currentGlobalDisableDirective) {\n                        enabledRules.delete(directive.ruleId);\n                        disabledRuleMap.set(directive.ruleId, directive);\n                    } else {\n                        disabledRuleMap.set(directive.ruleId, directive);\n                    }\n                    break;\n\n                case \"enable\":\n                    if (directive.ruleId === null) {\n                        currentGlobalDisableDirective = null;\n                        disabledRuleMap.clear();\n                    } else if (currentGlobalDisableDirective) {\n                        enabledRules.add(directive.ruleId);\n                        disabledRuleMap.delete(directive.ruleId);\n                    } else {\n                        disabledRuleMap.delete(directive.ruleId);\n                    }\n                    break;\n\n                // no default\n            }\n        }\n\n        if (disabledRuleMap.has(problem.ruleId)) {\n            usedDisableDirectives.add(disabledRuleMap.get(problem.ruleId));\n        } else if (currentGlobalDisableDirective && !enabledRules.has(problem.ruleId)) {\n            usedDisableDirectives.add(currentGlobalDisableDirective);\n        } else {\n            problems.push(problem);\n        }\n    }\n\n    const unusedDisableDirectives = options.directives\n        .filter(directive => directive.type === \"disable\" && !usedDisableDirectives.has(directive))\n        .map(directive => ({\n            ruleId: null,\n            message: directive.ruleId\n                ? `Unused eslint-disable directive (no problems were reported from '${directive.ruleId}').`\n                : \"Unused eslint-disable directive (no problems were reported).\",\n            line: directive.unprocessedDirective.line,\n            column: directive.unprocessedDirective.column,\n            severity: options.reportUnusedDisableDirectives === \"warn\" ? 1 : 2,\n            nodeType: null\n        }));\n\n    return { problems, unusedDisableDirectives };\n}\n\n/**\n * Given a list of directive comments (i.e. metadata about eslint-disable and eslint-enable comments) and a list\n * of reported problems, determines which problems should be reported.\n * @param {Object} options Information about directives and problems\n * @param {{\n *      type: (\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\"),\n *      ruleId: (string|null),\n *      line: number,\n *      column: number\n * }} options.directives Directive comments found in the file, with one-based columns.\n * Two directive comments can only have the same location if they also have the same type (e.g. a single eslint-disable\n * comment for two different rules is represented as two directives).\n * @param {{ruleId: (string|null), line: number, column: number}[]} options.problems\n * A list of problems reported by rules, sorted by increasing location in the file, with one-based columns.\n * @param {\"off\" | \"warn\" | \"error\"} options.reportUnusedDisableDirectives If `\"warn\"` or `\"error\"`, adds additional problems for unused directives\n * @returns {{ruleId: (string|null), line: number, column: number}[]}\n * A list of reported problems that were not disabled by the directive comments.\n */\nmodule.exports = ({ directives, problems, reportUnusedDisableDirectives = \"off\" }) => {\n    const blockDirectives = directives\n        .filter(directive => directive.type === \"disable\" || directive.type === \"enable\")\n        .map(directive => Object.assign({}, directive, { unprocessedDirective: directive }))\n        .sort(compareLocations);\n\n    /**\n     * Returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level.\n     * TODO(stephenwade): Replace this with array.flatMap when we drop support for Node v10\n     * @param {any[]} array The array to process\n     * @param {Function} fn The function to use\n     * @returns {any[]} The result array\n     */\n    function flatMap(array, fn) {\n        const mapped = array.map(fn);\n        const flattened = [].concat(...mapped);\n\n        return flattened;\n    }\n\n    const lineDirectives = flatMap(directives, directive => {\n        switch (directive.type) {\n            case \"disable\":\n            case \"enable\":\n                return [];\n\n            case \"disable-line\":\n                return [\n                    { type: \"disable\", line: directive.line, column: 1, ruleId: directive.ruleId, unprocessedDirective: directive },\n                    { type: \"enable\", line: directive.line + 1, column: 0, ruleId: directive.ruleId, unprocessedDirective: directive }\n                ];\n\n            case \"disable-next-line\":\n                return [\n                    { type: \"disable\", line: directive.line + 1, column: 1, ruleId: directive.ruleId, unprocessedDirective: directive },\n                    { type: \"enable\", line: directive.line + 2, column: 0, ruleId: directive.ruleId, unprocessedDirective: directive }\n                ];\n\n            default:\n                throw new TypeError(`Unrecognized directive type '${directive.type}'`);\n        }\n    }).sort(compareLocations);\n\n    const blockDirectivesResult = applyDirectives({\n        problems,\n        directives: blockDirectives,\n        reportUnusedDisableDirectives\n    });\n    const lineDirectivesResult = applyDirectives({\n        problems: blockDirectivesResult.problems,\n        directives: lineDirectives,\n        reportUnusedDisableDirectives\n    });\n\n    return reportUnusedDisableDirectives !== \"off\"\n        ? lineDirectivesResult.problems\n            .concat(blockDirectivesResult.unusedDisableDirectives)\n            .concat(lineDirectivesResult.unusedDisableDirectives)\n            .sort(compareLocations)\n        : lineDirectivesResult.problems;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AANAA,OAAA;AAOA,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,KAAK,EAAE;EACpC,OAAOD,KAAK,CAACE,IAAI,GAAGD,KAAK,CAACC,IAAI,IAAIF,KAAK,CAACG,MAAM,GAAGF,KAAK,CAACE,MAAM;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,OAAO,EAAE;EAC9B,MAAMC,QAAQ,GAAG,EAAE;EACnB,IAAIC,kBAAkB,GAAG,CAAC;EAC1B,IAAIC,6BAA6B,GAAG,IAAI;EACxC,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAEjC;EACA,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC9B,MAAMC,qBAAqB,GAAG,IAAID,GAAG,CAAC,CAAC;EAEvC,KAAK,MAAME,OAAO,IAAIT,OAAO,CAACC,QAAQ,EAAE;IACpC,OACIC,kBAAkB,GAAGF,OAAO,CAACU,UAAU,CAACC,MAAM,IAC9CjB,gBAAgB,CAACM,OAAO,CAACU,UAAU,CAACR,kBAAkB,CAAC,EAAEO,OAAO,CAAC,IAAI,CAAC,EACxE;MACE,MAAMG,SAAS,GAAGZ,OAAO,CAACU,UAAU,CAACR,kBAAkB,EAAE,CAAC;MAE1D,QAAQU,SAAS,CAACC,IAAI;QAClB,KAAK,SAAS;UACV,IAAID,SAAS,CAACE,MAAM,KAAK,IAAI,EAAE;YAC3BX,6BAA6B,GAAGS,SAAS;YACzCR,eAAe,CAACW,KAAK,CAAC,CAAC;YACvBT,YAAY,CAACS,KAAK,CAAC,CAAC;UACxB,CAAC,MAAM,IAAIZ,6BAA6B,EAAE;YACtCG,YAAY,CAACU,MAAM,CAACJ,SAAS,CAACE,MAAM,CAAC;YACrCV,eAAe,CAACa,GAAG,CAACL,SAAS,CAACE,MAAM,EAAEF,SAAS,CAAC;UACpD,CAAC,MAAM;YACHR,eAAe,CAACa,GAAG,CAACL,SAAS,CAACE,MAAM,EAAEF,SAAS,CAAC;UACpD;UACA;QAEJ,KAAK,QAAQ;UACT,IAAIA,SAAS,CAACE,MAAM,KAAK,IAAI,EAAE;YAC3BX,6BAA6B,GAAG,IAAI;YACpCC,eAAe,CAACW,KAAK,CAAC,CAAC;UAC3B,CAAC,MAAM,IAAIZ,6BAA6B,EAAE;YACtCG,YAAY,CAACY,GAAG,CAACN,SAAS,CAACE,MAAM,CAAC;YAClCV,eAAe,CAACY,MAAM,CAACJ,SAAS,CAACE,MAAM,CAAC;UAC5C,CAAC,MAAM;YACHV,eAAe,CAACY,MAAM,CAACJ,SAAS,CAACE,MAAM,CAAC;UAC5C;UACA;;QAEJ;MACJ;IACJ;;IAEA,IAAIV,eAAe,CAACe,GAAG,CAACV,OAAO,CAACK,MAAM,CAAC,EAAE;MACrCN,qBAAqB,CAACU,GAAG,CAACd,eAAe,CAACgB,GAAG,CAACX,OAAO,CAACK,MAAM,CAAC,CAAC;IAClE,CAAC,MAAM,IAAIX,6BAA6B,IAAI,CAACG,YAAY,CAACa,GAAG,CAACV,OAAO,CAACK,MAAM,CAAC,EAAE;MAC3EN,qBAAqB,CAACU,GAAG,CAACf,6BAA6B,CAAC;IAC5D,CAAC,MAAM;MACHF,QAAQ,CAACoB,IAAI,CAACZ,OAAO,CAAC;IAC1B;EACJ;EAEA,MAAMa,uBAAuB,GAAGtB,OAAO,CAACU,UAAU,CAC7Ca,MAAM,CAACX,SAAS,IAAIA,SAAS,CAACC,IAAI,KAAK,SAAS,IAAI,CAACL,qBAAqB,CAACW,GAAG,CAACP,SAAS,CAAC,CAAC,CAC1FY,GAAG,CAACZ,SAAS,KAAK;IACfE,MAAM,EAAE,IAAI;IACZW,OAAO,EAAEb,SAAS,CAACE,MAAM,GAClB,oEAAmEF,SAAS,CAACE,MAAO,KAAI,GACzF,8DAA8D;IACpEjB,IAAI,EAAEe,SAAS,CAACc,oBAAoB,CAAC7B,IAAI;IACzCC,MAAM,EAAEc,SAAS,CAACc,oBAAoB,CAAC5B,MAAM;IAC7C6B,QAAQ,EAAE3B,OAAO,CAAC4B,6BAA6B,KAAK,MAAM,GAAG,CAAC,GAAG,CAAC;IAClEC,QAAQ,EAAE;EACd,CAAC,CAAC,CAAC;EAEP,OAAO;IAAE5B,QAAQ;IAAEqB;EAAwB,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAQ,MAAM,CAACC,OAAO,GAAG,CAAC;EAAErB,UAAU;EAAET,QAAQ;EAAE2B,6BAA6B,GAAG;AAAM,CAAC,KAAK;EAClF,MAAMI,eAAe,GAAGtB,UAAU,CAC7Ba,MAAM,CAACX,SAAS,IAAIA,SAAS,CAACC,IAAI,KAAK,SAAS,IAAID,SAAS,CAACC,IAAI,KAAK,QAAQ,CAAC,CAChFW,GAAG,CAACZ,SAAS,IAAIqB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,SAAS,EAAE;IAAEc,oBAAoB,EAAEd;EAAU,CAAC,CAAC,CAAC,CACnFuB,IAAI,CAACzC,gBAAgB,CAAC;;EAE3B;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAAS0C,OAAOA,CAACC,KAAK,EAAEC,EAAE,EAAE;IACxB,MAAMC,MAAM,GAAGF,KAAK,CAACb,GAAG,CAACc,EAAE,CAAC;IAC5B,MAAME,SAAS,GAAG,EAAE,CAACC,MAAM,CAAC,GAAGF,MAAM,CAAC;IAEtC,OAAOC,SAAS;EACpB;EAEA,MAAME,cAAc,GAAGN,OAAO,CAAC1B,UAAU,EAAEE,SAAS,IAAI;IACpD,QAAQA,SAAS,CAACC,IAAI;MAClB,KAAK,SAAS;MACd,KAAK,QAAQ;QACT,OAAO,EAAE;MAEb,KAAK,cAAc;QACf,OAAO,CACH;UAAEA,IAAI,EAAE,SAAS;UAAEhB,IAAI,EAAEe,SAAS,CAACf,IAAI;UAAEC,MAAM,EAAE,CAAC;UAAEgB,MAAM,EAAEF,SAAS,CAACE,MAAM;UAAEY,oBAAoB,EAAEd;QAAU,CAAC,EAC/G;UAAEC,IAAI,EAAE,QAAQ;UAAEhB,IAAI,EAAEe,SAAS,CAACf,IAAI,GAAG,CAAC;UAAEC,MAAM,EAAE,CAAC;UAAEgB,MAAM,EAAEF,SAAS,CAACE,MAAM;UAAEY,oBAAoB,EAAEd;QAAU,CAAC,CACrH;MAEL,KAAK,mBAAmB;QACpB,OAAO,CACH;UAAEC,IAAI,EAAE,SAAS;UAAEhB,IAAI,EAAEe,SAAS,CAACf,IAAI,GAAG,CAAC;UAAEC,MAAM,EAAE,CAAC;UAAEgB,MAAM,EAAEF,SAAS,CAACE,MAAM;UAAEY,oBAAoB,EAAEd;QAAU,CAAC,EACnH;UAAEC,IAAI,EAAE,QAAQ;UAAEhB,IAAI,EAAEe,SAAS,CAACf,IAAI,GAAG,CAAC;UAAEC,MAAM,EAAE,CAAC;UAAEgB,MAAM,EAAEF,SAAS,CAACE,MAAM;UAAEY,oBAAoB,EAAEd;QAAU,CAAC,CACrH;MAEL;QACI,MAAM,IAAI+B,SAAS,CAAE,gCAA+B/B,SAAS,CAACC,IAAK,GAAE,CAAC;IAC9E;EACJ,CAAC,CAAC,CAACsB,IAAI,CAACzC,gBAAgB,CAAC;EAEzB,MAAMkD,qBAAqB,GAAG7C,eAAe,CAAC;IAC1CE,QAAQ;IACRS,UAAU,EAAEsB,eAAe;IAC3BJ;EACJ,CAAC,CAAC;EACF,MAAMiB,oBAAoB,GAAG9C,eAAe,CAAC;IACzCE,QAAQ,EAAE2C,qBAAqB,CAAC3C,QAAQ;IACxCS,UAAU,EAAEgC,cAAc;IAC1Bd;EACJ,CAAC,CAAC;EAEF,OAAOA,6BAA6B,KAAK,KAAK,GACxCiB,oBAAoB,CAAC5C,QAAQ,CAC1BwC,MAAM,CAACG,qBAAqB,CAACtB,uBAAuB,CAAC,CACrDmB,MAAM,CAACI,oBAAoB,CAACvB,uBAAuB,CAAC,CACpDa,IAAI,CAACzC,gBAAgB,CAAC,GACzBmD,oBAAoB,CAAC5C,QAAQ;AACvC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}