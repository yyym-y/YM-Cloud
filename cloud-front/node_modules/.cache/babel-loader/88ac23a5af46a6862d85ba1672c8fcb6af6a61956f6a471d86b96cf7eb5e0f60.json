{"ast":null,"code":"/**\n * @fileoverview Define the cursor which iterates tokens and comments.\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst Cursor = require(\"./cursor\");\nconst utils = require(\"./utils\");\n\n//------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * The cursor which iterates tokens and comments.\n */\nmodule.exports = class ForwardTokenCommentCursor extends Cursor {\n  /**\n   * Initializes this cursor.\n   * @param {Token[]} tokens The array of tokens.\n   * @param {Comment[]} comments The array of comments.\n   * @param {Object} indexMap The map from locations to indices in `tokens`.\n   * @param {number} startLoc The start location of the iteration range.\n   * @param {number} endLoc The end location of the iteration range.\n   */\n  constructor(tokens, comments, indexMap, startLoc, endLoc) {\n    super();\n    this.tokens = tokens;\n    this.comments = comments;\n    this.tokenIndex = utils.getFirstIndex(tokens, indexMap, startLoc);\n    this.commentIndex = utils.search(comments, startLoc);\n    this.border = endLoc;\n  }\n\n  /** @inheritdoc */\n  moveNext() {\n    const token = this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex] : null;\n    const comment = this.commentIndex < this.comments.length ? this.comments[this.commentIndex] : null;\n    if (token && (!comment || token.range[0] < comment.range[0])) {\n      this.current = token;\n      this.tokenIndex += 1;\n    } else if (comment) {\n      this.current = comment;\n      this.commentIndex += 1;\n    } else {\n      this.current = null;\n    }\n    return Boolean(this.current) && (this.border === -1 || this.current.range[1] <= this.border);\n  }\n};","map":{"version":3,"names":["Cursor","require","utils","module","exports","ForwardTokenCommentCursor","constructor","tokens","comments","indexMap","startLoc","endLoc","tokenIndex","getFirstIndex","commentIndex","search","border","moveNext","token","length","comment","range","current","Boolean"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/source-code/token-store/forward-token-comment-cursor.js"],"sourcesContent":["/**\n * @fileoverview Define the cursor which iterates tokens and comments.\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Cursor = require(\"./cursor\");\nconst utils = require(\"./utils\");\n\n//------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * The cursor which iterates tokens and comments.\n */\nmodule.exports = class ForwardTokenCommentCursor extends Cursor {\n\n    /**\n     * Initializes this cursor.\n     * @param {Token[]} tokens The array of tokens.\n     * @param {Comment[]} comments The array of comments.\n     * @param {Object} indexMap The map from locations to indices in `tokens`.\n     * @param {number} startLoc The start location of the iteration range.\n     * @param {number} endLoc The end location of the iteration range.\n     */\n    constructor(tokens, comments, indexMap, startLoc, endLoc) {\n        super();\n        this.tokens = tokens;\n        this.comments = comments;\n        this.tokenIndex = utils.getFirstIndex(tokens, indexMap, startLoc);\n        this.commentIndex = utils.search(comments, startLoc);\n        this.border = endLoc;\n    }\n\n    /** @inheritdoc */\n    moveNext() {\n        const token = (this.tokenIndex < this.tokens.length) ? this.tokens[this.tokenIndex] : null;\n        const comment = (this.commentIndex < this.comments.length) ? this.comments[this.commentIndex] : null;\n\n        if (token && (!comment || token.range[0] < comment.range[0])) {\n            this.current = token;\n            this.tokenIndex += 1;\n        } else if (comment) {\n            this.current = comment;\n            this.commentIndex += 1;\n        } else {\n            this.current = null;\n        }\n\n        return Boolean(this.current) && (this.border === -1 || this.current.range[1] <= this.border);\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;;AAEhC;AACA;AACA;;AAEA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,MAAMC,yBAAyB,SAASL,MAAM,CAAC;EAE5D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIM,WAAWA,CAACC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IACtD,KAAK,CAAC,CAAC;IACP,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACI,UAAU,GAAGV,KAAK,CAACW,aAAa,CAACN,MAAM,EAAEE,QAAQ,EAAEC,QAAQ,CAAC;IACjE,IAAI,CAACI,YAAY,GAAGZ,KAAK,CAACa,MAAM,CAACP,QAAQ,EAAEE,QAAQ,CAAC;IACpD,IAAI,CAACM,MAAM,GAAGL,MAAM;EACxB;;EAEA;EACAM,QAAQA,CAAA,EAAG;IACP,MAAMC,KAAK,GAAI,IAAI,CAACN,UAAU,GAAG,IAAI,CAACL,MAAM,CAACY,MAAM,GAAI,IAAI,CAACZ,MAAM,CAAC,IAAI,CAACK,UAAU,CAAC,GAAG,IAAI;IAC1F,MAAMQ,OAAO,GAAI,IAAI,CAACN,YAAY,GAAG,IAAI,CAACN,QAAQ,CAACW,MAAM,GAAI,IAAI,CAACX,QAAQ,CAAC,IAAI,CAACM,YAAY,CAAC,GAAG,IAAI;IAEpG,IAAII,KAAK,KAAK,CAACE,OAAO,IAAIF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,GAAGD,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MAC1D,IAAI,CAACC,OAAO,GAAGJ,KAAK;MACpB,IAAI,CAACN,UAAU,IAAI,CAAC;IACxB,CAAC,MAAM,IAAIQ,OAAO,EAAE;MAChB,IAAI,CAACE,OAAO,GAAGF,OAAO;MACtB,IAAI,CAACN,YAAY,IAAI,CAAC;IAC1B,CAAC,MAAM;MACH,IAAI,CAACQ,OAAO,GAAG,IAAI;IACvB;IAEA,OAAOC,OAAO,CAAC,IAAI,CAACD,OAAO,CAAC,KAAK,IAAI,CAACN,MAAM,KAAK,CAAC,CAAC,IAAI,IAAI,CAACM,OAAO,CAACD,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAACL,MAAM,CAAC;EAChG;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}