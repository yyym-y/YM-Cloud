{"ast":null,"code":"/**\n * @fileoverview Rule to disallow whitespace before properties\n * @author Kai Cataldo\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow whitespace before properties\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-whitespace-before-property\"\n    },\n    fixable: \"whitespace\",\n    schema: [],\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace before property {{propName}}.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports whitespace before property token\n     * @param {ASTNode} node the node to report in the event of an error\n     * @param {Token} leftToken the left token\n     * @param {Token} rightToken the right token\n     * @returns {void}\n     * @private\n     */\n    function reportError(node, leftToken, rightToken) {\n      context.report({\n        node,\n        messageId: \"unexpectedWhitespace\",\n        data: {\n          propName: sourceCode.getText(node.property)\n        },\n        fix(fixer) {\n          let replacementText = \"\";\n          if (!node.computed && !node.optional && astUtils.isDecimalInteger(node.object)) {\n            /*\n             * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\n             * Don't fix this case.\n             */\n            return null;\n          }\n\n          // Don't fix if comments exist.\n          if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n            return null;\n          }\n          if (node.optional) {\n            replacementText = \"?.\";\n          } else if (!node.computed) {\n            replacementText = \".\";\n          }\n          return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n        }\n      });\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      MemberExpression(node) {\n        let rightToken;\n        let leftToken;\n        if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\n          return;\n        }\n        if (node.computed) {\n          rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\n          leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);\n        } else {\n          rightToken = sourceCode.getFirstToken(node.property);\n          leftToken = sourceCode.getTokenBefore(rightToken, 1);\n        }\n        if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n          reportError(node, leftToken, rightToken);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","unexpectedWhitespace","create","context","sourceCode","getSourceCode","reportError","node","leftToken","rightToken","report","messageId","data","propName","getText","property","fix","fixer","replacementText","computed","optional","isDecimalInteger","object","commentsExistBetween","replaceTextRange","range","MemberExpression","isTokenOnSameLine","getTokenBefore","isOpeningBracketToken","getFirstToken","isSpaceBetweenTokens"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-whitespace-before-property.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow whitespace before properties\n * @author Kai Cataldo\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow whitespace before properties\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-whitespace-before-property\"\n        },\n\n        fixable: \"whitespace\",\n        schema: [],\n\n        messages: {\n            unexpectedWhitespace: \"Unexpected whitespace before property {{propName}}.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports whitespace before property token\n         * @param {ASTNode} node the node to report in the event of an error\n         * @param {Token} leftToken the left token\n         * @param {Token} rightToken the right token\n         * @returns {void}\n         * @private\n         */\n        function reportError(node, leftToken, rightToken) {\n            context.report({\n                node,\n                messageId: \"unexpectedWhitespace\",\n                data: {\n                    propName: sourceCode.getText(node.property)\n                },\n                fix(fixer) {\n                    let replacementText = \"\";\n\n                    if (!node.computed && !node.optional && astUtils.isDecimalInteger(node.object)) {\n\n                        /*\n                         * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\n                         * Don't fix this case.\n                         */\n                        return null;\n                    }\n\n                    // Don't fix if comments exist.\n                    if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                        return null;\n                    }\n\n                    if (node.optional) {\n                        replacementText = \"?.\";\n                    } else if (!node.computed) {\n                        replacementText = \".\";\n                    }\n\n                    return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n                }\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            MemberExpression(node) {\n                let rightToken;\n                let leftToken;\n\n                if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\n                    return;\n                }\n\n                if (node.computed) {\n                    rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\n                    leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);\n                } else {\n                    rightToken = sourceCode.getFirstToken(node.property);\n                    leftToken = sourceCode.getTokenBefore(rightToken, 1);\n                }\n\n                if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n                    reportError(node, leftToken, rightToken);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}