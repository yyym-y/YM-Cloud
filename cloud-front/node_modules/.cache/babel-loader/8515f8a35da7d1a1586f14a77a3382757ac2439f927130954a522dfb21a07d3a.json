{"ast":null,"code":"/**\n * @fileoverview Enforces empty lines around comments.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Return an array with with any line numbers that are empty.\n * @param {Array} lines An array of each line of the file.\n * @returns {Array} An array of line numbers.\n */\nfunction getEmptyLineNums(lines) {\n  const emptyLines = lines.map((line, i) => ({\n    code: line.trim(),\n    num: i + 1\n  })).filter(line => !line.code).map(line => line.num);\n  return emptyLines;\n}\n\n/**\n * Return an array with with any line numbers that contain comments.\n * @param {Array} comments An array of comment tokens.\n * @returns {Array} An array of line numbers.\n */\nfunction getCommentLineNums(comments) {\n  const lines = [];\n  comments.forEach(token => {\n    const start = token.loc.start.line;\n    const end = token.loc.end.line;\n    lines.push(start, end);\n  });\n  return lines;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require empty lines around comments\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/lines-around-comment\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        beforeBlockComment: {\n          type: \"boolean\",\n          default: true\n        },\n        afterBlockComment: {\n          type: \"boolean\",\n          default: false\n        },\n        beforeLineComment: {\n          type: \"boolean\",\n          default: false\n        },\n        afterLineComment: {\n          type: \"boolean\",\n          default: false\n        },\n        allowBlockStart: {\n          type: \"boolean\",\n          default: false\n        },\n        allowBlockEnd: {\n          type: \"boolean\",\n          default: false\n        },\n        allowClassStart: {\n          type: \"boolean\"\n        },\n        allowClassEnd: {\n          type: \"boolean\"\n        },\n        allowObjectStart: {\n          type: \"boolean\"\n        },\n        allowObjectEnd: {\n          type: \"boolean\"\n        },\n        allowArrayStart: {\n          type: \"boolean\"\n        },\n        allowArrayEnd: {\n          type: \"boolean\"\n        },\n        ignorePattern: {\n          type: \"string\"\n        },\n        applyDefaultIgnorePatterns: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      after: \"Expected line after comment.\",\n      before: \"Expected line before comment.\"\n    }\n  },\n  create(context) {\n    const options = Object.assign({}, context.options[0]);\n    const ignorePattern = options.ignorePattern;\n    const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n    const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n    const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;\n    options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;\n    const sourceCode = context.getSourceCode();\n    const lines = sourceCode.lines,\n      numLines = lines.length + 1,\n      comments = sourceCode.getAllComments(),\n      commentLines = getCommentLineNums(comments),\n      emptyLines = getEmptyLineNums(lines),\n      commentAndEmptyLines = commentLines.concat(emptyLines);\n\n    /**\n     * Returns whether or not comments are on lines starting with or ending with code\n     * @param {token} token The comment token to check.\n     * @returns {boolean} True if the comment is not alone.\n     */\n    function codeAroundComment(token) {\n      let currentToken = token;\n      do {\n        currentToken = sourceCode.getTokenBefore(currentToken, {\n          includeComments: true\n        });\n      } while (currentToken && astUtils.isCommentToken(currentToken));\n      if (currentToken && astUtils.isTokenOnSameLine(currentToken, token)) {\n        return true;\n      }\n      currentToken = token;\n      do {\n        currentToken = sourceCode.getTokenAfter(currentToken, {\n          includeComments: true\n        });\n      } while (currentToken && astUtils.isCommentToken(currentToken));\n      if (currentToken && astUtils.isTokenOnSameLine(token, currentToken)) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns whether or not comments are inside a node type or not.\n     * @param {ASTNode} parent The Comment parent node.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is inside nodeType.\n     */\n    function isParentNodeType(parent, nodeType) {\n      return parent.type === nodeType || parent.body && parent.body.type === nodeType || parent.consequent && parent.consequent.type === nodeType;\n    }\n\n    /**\n     * Returns the parent node that contains the given token.\n     * @param {token} token The token to check.\n     * @returns {ASTNode} The parent node that contains the given token.\n     */\n    function getParentNodeOfToken(token) {\n      return sourceCode.getNodeByRangeIndex(token.range[0]);\n    }\n\n    /**\n     * Returns whether or not comments are at the parent start or not.\n     * @param {token} token The Comment token.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is at parent start.\n     */\n    function isCommentAtParentStart(token, nodeType) {\n      const parent = getParentNodeOfToken(token);\n      return parent && isParentNodeType(parent, nodeType) && token.loc.start.line - parent.loc.start.line === 1;\n    }\n\n    /**\n     * Returns whether or not comments are at the parent end or not.\n     * @param {token} token The Comment token.\n     * @param {string} nodeType The parent type to check against.\n     * @returns {boolean} True if the comment is at parent end.\n     */\n    function isCommentAtParentEnd(token, nodeType) {\n      const parent = getParentNodeOfToken(token);\n      return parent && isParentNodeType(parent, nodeType) && parent.loc.end.line - token.loc.end.line === 1;\n    }\n\n    /**\n     * Returns whether or not comments are at the block start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at block start.\n     */\n    function isCommentAtBlockStart(token) {\n      return isCommentAtParentStart(token, \"ClassBody\") || isCommentAtParentStart(token, \"BlockStatement\") || isCommentAtParentStart(token, \"SwitchCase\");\n    }\n\n    /**\n     * Returns whether or not comments are at the block end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at block end.\n     */\n    function isCommentAtBlockEnd(token) {\n      return isCommentAtParentEnd(token, \"ClassBody\") || isCommentAtParentEnd(token, \"BlockStatement\") || isCommentAtParentEnd(token, \"SwitchCase\") || isCommentAtParentEnd(token, \"SwitchStatement\");\n    }\n\n    /**\n     * Returns whether or not comments are at the class start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at class start.\n     */\n    function isCommentAtClassStart(token) {\n      return isCommentAtParentStart(token, \"ClassBody\");\n    }\n\n    /**\n     * Returns whether or not comments are at the class end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at class end.\n     */\n    function isCommentAtClassEnd(token) {\n      return isCommentAtParentEnd(token, \"ClassBody\");\n    }\n\n    /**\n     * Returns whether or not comments are at the object start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at object start.\n     */\n    function isCommentAtObjectStart(token) {\n      return isCommentAtParentStart(token, \"ObjectExpression\") || isCommentAtParentStart(token, \"ObjectPattern\");\n    }\n\n    /**\n     * Returns whether or not comments are at the object end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at object end.\n     */\n    function isCommentAtObjectEnd(token) {\n      return isCommentAtParentEnd(token, \"ObjectExpression\") || isCommentAtParentEnd(token, \"ObjectPattern\");\n    }\n\n    /**\n     * Returns whether or not comments are at the array start or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at array start.\n     */\n    function isCommentAtArrayStart(token) {\n      return isCommentAtParentStart(token, \"ArrayExpression\") || isCommentAtParentStart(token, \"ArrayPattern\");\n    }\n\n    /**\n     * Returns whether or not comments are at the array end or not.\n     * @param {token} token The Comment token.\n     * @returns {boolean} True if the comment is at array end.\n     */\n    function isCommentAtArrayEnd(token) {\n      return isCommentAtParentEnd(token, \"ArrayExpression\") || isCommentAtParentEnd(token, \"ArrayPattern\");\n    }\n\n    /**\n     * Checks if a comment token has lines around it (ignores inline comments)\n     * @param {token} token The Comment token.\n     * @param {Object} opts Options to determine the newline.\n     * @param {boolean} opts.after Should have a newline after this line.\n     * @param {boolean} opts.before Should have a newline before this line.\n     * @returns {void}\n     */\n    function checkForEmptyLine(token, opts) {\n      if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(token.value)) {\n        return;\n      }\n      if (ignorePattern && customIgnoreRegExp.test(token.value)) {\n        return;\n      }\n      let after = opts.after,\n        before = opts.before;\n      const prevLineNum = token.loc.start.line - 1,\n        nextLineNum = token.loc.end.line + 1,\n        commentIsNotAlone = codeAroundComment(token);\n      const blockStartAllowed = options.allowBlockStart && isCommentAtBlockStart(token) && !(options.allowClassStart === false && isCommentAtClassStart(token)),\n        blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(token) && !(options.allowClassEnd === false && isCommentAtClassEnd(token)),\n        classStartAllowed = options.allowClassStart && isCommentAtClassStart(token),\n        classEndAllowed = options.allowClassEnd && isCommentAtClassEnd(token),\n        objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(token),\n        objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(token),\n        arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(token),\n        arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(token);\n      const exceptionStartAllowed = blockStartAllowed || classStartAllowed || objectStartAllowed || arrayStartAllowed;\n      const exceptionEndAllowed = blockEndAllowed || classEndAllowed || objectEndAllowed || arrayEndAllowed;\n\n      // ignore top of the file and bottom of the file\n      if (prevLineNum < 1) {\n        before = false;\n      }\n      if (nextLineNum >= numLines) {\n        after = false;\n      }\n\n      // we ignore all inline comments\n      if (commentIsNotAlone) {\n        return;\n      }\n      const previousTokenOrComment = sourceCode.getTokenBefore(token, {\n        includeComments: true\n      });\n      const nextTokenOrComment = sourceCode.getTokenAfter(token, {\n        includeComments: true\n      });\n\n      // check for newline before\n      if (!exceptionStartAllowed && before && !commentAndEmptyLines.includes(prevLineNum) && !(astUtils.isCommentToken(previousTokenOrComment) && astUtils.isTokenOnSameLine(previousTokenOrComment, token))) {\n        const lineStart = token.range[0] - token.loc.start.column;\n        const range = [lineStart, lineStart];\n        context.report({\n          node: token,\n          messageId: \"before\",\n          fix(fixer) {\n            return fixer.insertTextBeforeRange(range, \"\\n\");\n          }\n        });\n      }\n\n      // check for newline after\n      if (!exceptionEndAllowed && after && !commentAndEmptyLines.includes(nextLineNum) && !(astUtils.isCommentToken(nextTokenOrComment) && astUtils.isTokenOnSameLine(token, nextTokenOrComment))) {\n        context.report({\n          node: token,\n          messageId: \"after\",\n          fix(fixer) {\n            return fixer.insertTextAfter(token, \"\\n\");\n          }\n        });\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      Program() {\n        comments.forEach(token => {\n          if (token.type === \"Line\") {\n            if (options.beforeLineComment || options.afterLineComment) {\n              checkForEmptyLine(token, {\n                after: options.afterLineComment,\n                before: options.beforeLineComment\n              });\n            }\n          } else if (token.type === \"Block\") {\n            if (options.beforeBlockComment || options.afterBlockComment) {\n              checkForEmptyLine(token, {\n                after: options.afterBlockComment,\n                before: options.beforeBlockComment\n              });\n            }\n          }\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","getEmptyLineNums","lines","emptyLines","map","line","i","code","trim","num","filter","getCommentLineNums","comments","forEach","token","start","loc","end","push","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","beforeBlockComment","default","afterBlockComment","beforeLineComment","afterLineComment","allowBlockStart","allowBlockEnd","allowClassStart","allowClassEnd","allowObjectStart","allowObjectEnd","allowArrayStart","allowArrayEnd","ignorePattern","applyDefaultIgnorePatterns","additionalProperties","messages","after","before","create","context","options","Object","assign","defaultIgnoreRegExp","COMMENTS_IGNORE_PATTERN","customIgnoreRegExp","RegExp","sourceCode","getSourceCode","numLines","length","getAllComments","commentLines","commentAndEmptyLines","concat","codeAroundComment","currentToken","getTokenBefore","includeComments","isCommentToken","isTokenOnSameLine","getTokenAfter","isParentNodeType","parent","nodeType","body","consequent","getParentNodeOfToken","getNodeByRangeIndex","range","isCommentAtParentStart","isCommentAtParentEnd","isCommentAtBlockStart","isCommentAtBlockEnd","isCommentAtClassStart","isCommentAtClassEnd","isCommentAtObjectStart","isCommentAtObjectEnd","isCommentAtArrayStart","isCommentAtArrayEnd","checkForEmptyLine","opts","test","value","prevLineNum","nextLineNum","commentIsNotAlone","blockStartAllowed","blockEndAllowed","classStartAllowed","classEndAllowed","objectStartAllowed","objectEndAllowed","arrayStartAllowed","arrayEndAllowed","exceptionStartAllowed","exceptionEndAllowed","previousTokenOrComment","nextTokenOrComment","includes","lineStart","column","report","node","messageId","fix","fixer","insertTextBeforeRange","insertTextAfter","Program"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/lines-around-comment.js"],"sourcesContent":["/**\n * @fileoverview Enforces empty lines around comments.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Return an array with with any line numbers that are empty.\n * @param {Array} lines An array of each line of the file.\n * @returns {Array} An array of line numbers.\n */\nfunction getEmptyLineNums(lines) {\n    const emptyLines = lines.map((line, i) => ({\n        code: line.trim(),\n        num: i + 1\n    })).filter(line => !line.code).map(line => line.num);\n\n    return emptyLines;\n}\n\n/**\n * Return an array with with any line numbers that contain comments.\n * @param {Array} comments An array of comment tokens.\n * @returns {Array} An array of line numbers.\n */\nfunction getCommentLineNums(comments) {\n    const lines = [];\n\n    comments.forEach(token => {\n        const start = token.loc.start.line;\n        const end = token.loc.end.line;\n\n        lines.push(start, end);\n    });\n    return lines;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require empty lines around comments\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/lines-around-comment\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    beforeBlockComment: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    afterBlockComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    beforeLineComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    afterLineComment: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowBlockStart: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowBlockEnd: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowClassStart: {\n                        type: \"boolean\"\n                    },\n                    allowClassEnd: {\n                        type: \"boolean\"\n                    },\n                    allowObjectStart: {\n                        type: \"boolean\"\n                    },\n                    allowObjectEnd: {\n                        type: \"boolean\"\n                    },\n                    allowArrayStart: {\n                        type: \"boolean\"\n                    },\n                    allowArrayEnd: {\n                        type: \"boolean\"\n                    },\n                    ignorePattern: {\n                        type: \"string\"\n                    },\n                    applyDefaultIgnorePatterns: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            after: \"Expected line after comment.\",\n            before: \"Expected line before comment.\"\n        }\n    },\n\n    create(context) {\n\n        const options = Object.assign({}, context.options[0]);\n        const ignorePattern = options.ignorePattern;\n        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n        const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n        const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;\n\n        options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;\n\n        const sourceCode = context.getSourceCode();\n\n        const lines = sourceCode.lines,\n            numLines = lines.length + 1,\n            comments = sourceCode.getAllComments(),\n            commentLines = getCommentLineNums(comments),\n            emptyLines = getEmptyLineNums(lines),\n            commentAndEmptyLines = commentLines.concat(emptyLines);\n\n        /**\n         * Returns whether or not comments are on lines starting with or ending with code\n         * @param {token} token The comment token to check.\n         * @returns {boolean} True if the comment is not alone.\n         */\n        function codeAroundComment(token) {\n            let currentToken = token;\n\n            do {\n                currentToken = sourceCode.getTokenBefore(currentToken, { includeComments: true });\n            } while (currentToken && astUtils.isCommentToken(currentToken));\n\n            if (currentToken && astUtils.isTokenOnSameLine(currentToken, token)) {\n                return true;\n            }\n\n            currentToken = token;\n            do {\n                currentToken = sourceCode.getTokenAfter(currentToken, { includeComments: true });\n            } while (currentToken && astUtils.isCommentToken(currentToken));\n\n            if (currentToken && astUtils.isTokenOnSameLine(token, currentToken)) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Returns whether or not comments are inside a node type or not.\n         * @param {ASTNode} parent The Comment parent node.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is inside nodeType.\n         */\n        function isParentNodeType(parent, nodeType) {\n            return parent.type === nodeType ||\n                (parent.body && parent.body.type === nodeType) ||\n                (parent.consequent && parent.consequent.type === nodeType);\n        }\n\n        /**\n         * Returns the parent node that contains the given token.\n         * @param {token} token The token to check.\n         * @returns {ASTNode} The parent node that contains the given token.\n         */\n        function getParentNodeOfToken(token) {\n            return sourceCode.getNodeByRangeIndex(token.range[0]);\n        }\n\n        /**\n         * Returns whether or not comments are at the parent start or not.\n         * @param {token} token The Comment token.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is at parent start.\n         */\n        function isCommentAtParentStart(token, nodeType) {\n            const parent = getParentNodeOfToken(token);\n\n            return parent && isParentNodeType(parent, nodeType) &&\n                    token.loc.start.line - parent.loc.start.line === 1;\n        }\n\n        /**\n         * Returns whether or not comments are at the parent end or not.\n         * @param {token} token The Comment token.\n         * @param {string} nodeType The parent type to check against.\n         * @returns {boolean} True if the comment is at parent end.\n         */\n        function isCommentAtParentEnd(token, nodeType) {\n            const parent = getParentNodeOfToken(token);\n\n            return parent && isParentNodeType(parent, nodeType) &&\n                    parent.loc.end.line - token.loc.end.line === 1;\n        }\n\n        /**\n         * Returns whether or not comments are at the block start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at block start.\n         */\n        function isCommentAtBlockStart(token) {\n            return isCommentAtParentStart(token, \"ClassBody\") || isCommentAtParentStart(token, \"BlockStatement\") || isCommentAtParentStart(token, \"SwitchCase\");\n        }\n\n        /**\n         * Returns whether or not comments are at the block end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at block end.\n         */\n        function isCommentAtBlockEnd(token) {\n            return isCommentAtParentEnd(token, \"ClassBody\") || isCommentAtParentEnd(token, \"BlockStatement\") || isCommentAtParentEnd(token, \"SwitchCase\") || isCommentAtParentEnd(token, \"SwitchStatement\");\n        }\n\n        /**\n         * Returns whether or not comments are at the class start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at class start.\n         */\n        function isCommentAtClassStart(token) {\n            return isCommentAtParentStart(token, \"ClassBody\");\n        }\n\n        /**\n         * Returns whether or not comments are at the class end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at class end.\n         */\n        function isCommentAtClassEnd(token) {\n            return isCommentAtParentEnd(token, \"ClassBody\");\n        }\n\n        /**\n         * Returns whether or not comments are at the object start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at object start.\n         */\n        function isCommentAtObjectStart(token) {\n            return isCommentAtParentStart(token, \"ObjectExpression\") || isCommentAtParentStart(token, \"ObjectPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the object end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at object end.\n         */\n        function isCommentAtObjectEnd(token) {\n            return isCommentAtParentEnd(token, \"ObjectExpression\") || isCommentAtParentEnd(token, \"ObjectPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the array start or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at array start.\n         */\n        function isCommentAtArrayStart(token) {\n            return isCommentAtParentStart(token, \"ArrayExpression\") || isCommentAtParentStart(token, \"ArrayPattern\");\n        }\n\n        /**\n         * Returns whether or not comments are at the array end or not.\n         * @param {token} token The Comment token.\n         * @returns {boolean} True if the comment is at array end.\n         */\n        function isCommentAtArrayEnd(token) {\n            return isCommentAtParentEnd(token, \"ArrayExpression\") || isCommentAtParentEnd(token, \"ArrayPattern\");\n        }\n\n        /**\n         * Checks if a comment token has lines around it (ignores inline comments)\n         * @param {token} token The Comment token.\n         * @param {Object} opts Options to determine the newline.\n         * @param {boolean} opts.after Should have a newline after this line.\n         * @param {boolean} opts.before Should have a newline before this line.\n         * @returns {void}\n         */\n        function checkForEmptyLine(token, opts) {\n            if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(token.value)) {\n                return;\n            }\n\n            if (ignorePattern && customIgnoreRegExp.test(token.value)) {\n                return;\n            }\n\n            let after = opts.after,\n                before = opts.before;\n\n            const prevLineNum = token.loc.start.line - 1,\n                nextLineNum = token.loc.end.line + 1,\n                commentIsNotAlone = codeAroundComment(token);\n\n            const blockStartAllowed = options.allowBlockStart &&\n                    isCommentAtBlockStart(token) &&\n                    !(options.allowClassStart === false &&\n                    isCommentAtClassStart(token)),\n                blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(token) && !(options.allowClassEnd === false && isCommentAtClassEnd(token)),\n                classStartAllowed = options.allowClassStart && isCommentAtClassStart(token),\n                classEndAllowed = options.allowClassEnd && isCommentAtClassEnd(token),\n                objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(token),\n                objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(token),\n                arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(token),\n                arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(token);\n\n            const exceptionStartAllowed = blockStartAllowed || classStartAllowed || objectStartAllowed || arrayStartAllowed;\n            const exceptionEndAllowed = blockEndAllowed || classEndAllowed || objectEndAllowed || arrayEndAllowed;\n\n            // ignore top of the file and bottom of the file\n            if (prevLineNum < 1) {\n                before = false;\n            }\n            if (nextLineNum >= numLines) {\n                after = false;\n            }\n\n            // we ignore all inline comments\n            if (commentIsNotAlone) {\n                return;\n            }\n\n            const previousTokenOrComment = sourceCode.getTokenBefore(token, { includeComments: true });\n            const nextTokenOrComment = sourceCode.getTokenAfter(token, { includeComments: true });\n\n            // check for newline before\n            if (!exceptionStartAllowed && before && !commentAndEmptyLines.includes(prevLineNum) &&\n                    !(astUtils.isCommentToken(previousTokenOrComment) && astUtils.isTokenOnSameLine(previousTokenOrComment, token))) {\n                const lineStart = token.range[0] - token.loc.start.column;\n                const range = [lineStart, lineStart];\n\n                context.report({\n                    node: token,\n                    messageId: \"before\",\n                    fix(fixer) {\n                        return fixer.insertTextBeforeRange(range, \"\\n\");\n                    }\n                });\n            }\n\n            // check for newline after\n            if (!exceptionEndAllowed && after && !commentAndEmptyLines.includes(nextLineNum) &&\n                    !(astUtils.isCommentToken(nextTokenOrComment) && astUtils.isTokenOnSameLine(token, nextTokenOrComment))) {\n                context.report({\n                    node: token,\n                    messageId: \"after\",\n                    fix(fixer) {\n                        return fixer.insertTextAfter(token, \"\\n\");\n                    }\n                });\n            }\n\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program() {\n                comments.forEach(token => {\n                    if (token.type === \"Line\") {\n                        if (options.beforeLineComment || options.afterLineComment) {\n                            checkForEmptyLine(token, {\n                                after: options.afterLineComment,\n                                before: options.beforeLineComment\n                            });\n                        }\n                    } else if (token.type === \"Block\") {\n                        if (options.beforeBlockComment || options.afterBlockComment) {\n                            checkForEmptyLine(token, {\n                                after: options.afterBlockComment,\n                                before: options.beforeBlockComment\n                            });\n                        }\n                    }\n                });\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}