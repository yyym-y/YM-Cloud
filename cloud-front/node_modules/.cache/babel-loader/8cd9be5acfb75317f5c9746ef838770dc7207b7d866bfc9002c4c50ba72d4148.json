{"ast":null,"code":"/**\n * @fileoverview Rule to enforce placing object properties on separate lines.\n * @author Vitor Balocco\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce placing object properties on separate lines\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/object-property-newline\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowAllPropertiesOnSameLine: {\n          type: \"boolean\",\n          default: false\n        },\n        allowMultiplePropertiesPerLine: {\n          // Deprecated\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    fixable: \"whitespace\",\n    messages: {\n      propertiesOnNewlineAll: \"Object properties must go on a new line if they aren't all on the same line.\",\n      propertiesOnNewline: \"Object properties must go on a new line.\"\n    }\n  },\n  create(context) {\n    const allowSameLine = context.options[0] && (context.options[0].allowAllPropertiesOnSameLine || context.options[0].allowMultiplePropertiesPerLine /* Deprecated */);\n\n    const messageId = allowSameLine ? \"propertiesOnNewlineAll\" : \"propertiesOnNewline\";\n    const sourceCode = context.getSourceCode();\n    return {\n      ObjectExpression(node) {\n        if (allowSameLine) {\n          if (node.properties.length > 1) {\n            const firstTokenOfFirstProperty = sourceCode.getFirstToken(node.properties[0]);\n            const lastTokenOfLastProperty = sourceCode.getLastToken(node.properties[node.properties.length - 1]);\n            if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {\n              // All keys and values are on the same line\n              return;\n            }\n          }\n        }\n        for (let i = 1; i < node.properties.length; i++) {\n          const lastTokenOfPreviousProperty = sourceCode.getLastToken(node.properties[i - 1]);\n          const firstTokenOfCurrentProperty = sourceCode.getFirstToken(node.properties[i]);\n          if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {\n            context.report({\n              node,\n              loc: firstTokenOfCurrentProperty.loc,\n              messageId,\n              fix(fixer) {\n                const comma = sourceCode.getTokenBefore(firstTokenOfCurrentProperty);\n                const rangeAfterComma = [comma.range[1], firstTokenOfCurrentProperty.range[0]];\n\n                // Don't perform a fix if there are any comments between the comma and the next property.\n                if (sourceCode.text.slice(rangeAfterComma[0], rangeAfterComma[1]).trim()) {\n                  return null;\n                }\n                return fixer.replaceTextRange(rangeAfterComma, \"\\n\");\n              }\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allowAllPropertiesOnSameLine","default","allowMultiplePropertiesPerLine","additionalProperties","fixable","messages","propertiesOnNewlineAll","propertiesOnNewline","create","context","allowSameLine","options","messageId","sourceCode","getSourceCode","ObjectExpression","node","length","firstTokenOfFirstProperty","getFirstToken","lastTokenOfLastProperty","getLastToken","loc","end","line","start","i","lastTokenOfPreviousProperty","firstTokenOfCurrentProperty","report","fix","fixer","comma","getTokenBefore","rangeAfterComma","range","text","slice","trim","replaceTextRange"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/object-property-newline.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce placing object properties on separate lines.\n * @author Vitor Balocco\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce placing object properties on separate lines\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/object-property-newline\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowAllPropertiesOnSameLine: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowMultiplePropertiesPerLine: { // Deprecated\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        fixable: \"whitespace\",\n\n        messages: {\n            propertiesOnNewlineAll: \"Object properties must go on a new line if they aren't all on the same line.\",\n            propertiesOnNewline: \"Object properties must go on a new line.\"\n        }\n    },\n\n    create(context) {\n        const allowSameLine = context.options[0] && (\n            (context.options[0].allowAllPropertiesOnSameLine || context.options[0].allowMultiplePropertiesPerLine /* Deprecated */)\n        );\n        const messageId = allowSameLine\n            ? \"propertiesOnNewlineAll\"\n            : \"propertiesOnNewline\";\n\n        const sourceCode = context.getSourceCode();\n\n        return {\n            ObjectExpression(node) {\n                if (allowSameLine) {\n                    if (node.properties.length > 1) {\n                        const firstTokenOfFirstProperty = sourceCode.getFirstToken(node.properties[0]);\n                        const lastTokenOfLastProperty = sourceCode.getLastToken(node.properties[node.properties.length - 1]);\n\n                        if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {\n\n                            // All keys and values are on the same line\n                            return;\n                        }\n                    }\n                }\n\n                for (let i = 1; i < node.properties.length; i++) {\n                    const lastTokenOfPreviousProperty = sourceCode.getLastToken(node.properties[i - 1]);\n                    const firstTokenOfCurrentProperty = sourceCode.getFirstToken(node.properties[i]);\n\n                    if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {\n                        context.report({\n                            node,\n                            loc: firstTokenOfCurrentProperty.loc,\n                            messageId,\n                            fix(fixer) {\n                                const comma = sourceCode.getTokenBefore(firstTokenOfCurrentProperty);\n                                const rangeAfterComma = [comma.range[1], firstTokenOfCurrentProperty.range[0]];\n\n                                // Don't perform a fix if there are any comments between the comma and the next property.\n                                if (sourceCode.text.slice(rangeAfterComma[0], rangeAfterComma[1]).trim()) {\n                                    return null;\n                                }\n\n                                return fixer.replaceTextRange(rangeAfterComma, \"\\n\");\n                            }\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}