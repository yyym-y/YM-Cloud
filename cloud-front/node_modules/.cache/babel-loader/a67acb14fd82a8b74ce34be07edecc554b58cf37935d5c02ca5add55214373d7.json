{"ast":null,"code":"/**\n * @fileoverview Rule to flag missing semicolons.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst FixTracker = require(\"./utils/fix-tracker\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow semicolons instead of ASI\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/semi\"\n    },\n    fixable: \"code\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }, {\n          type: \"object\",\n          properties: {\n            beforeStatementContinuationChars: {\n              enum: [\"always\", \"any\", \"never\"]\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }, {\n          type: \"object\",\n          properties: {\n            omitLastInOneLineBlock: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      missingSemi: \"Missing semicolon.\",\n      extraSemi: \"Extra semicolon.\"\n    }\n  },\n  create(context) {\n    const OPT_OUT_PATTERN = /^[-[(/+`]/u; // One of [(/+-`\n    const options = context.options[1];\n    const never = context.options[0] === \"never\";\n    const exceptOneLine = Boolean(options && options.omitLastInOneLineBlock);\n    const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || \"any\";\n    const sourceCode = context.getSourceCode();\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports a semicolon error with appropriate location and message.\n     * @param {ASTNode} node The node with an extra or missing semicolon.\n     * @param {boolean} missing True if the semicolon is missing.\n     * @returns {void}\n     */\n    function report(node, missing) {\n      const lastToken = sourceCode.getLastToken(node);\n      let messageId, fix, loc;\n      if (!missing) {\n        messageId = \"missingSemi\";\n        loc = {\n          start: lastToken.loc.end,\n          end: astUtils.getNextLocation(sourceCode, lastToken.loc.end)\n        };\n        fix = function (fixer) {\n          return fixer.insertTextAfter(lastToken, \";\");\n        };\n      } else {\n        messageId = \"extraSemi\";\n        loc = lastToken.loc;\n        fix = function (fixer) {\n          /*\n           * Expand the replacement range to include the surrounding\n           * tokens to avoid conflicting with no-extra-semi.\n           * https://github.com/eslint/eslint/issues/7928\n           */\n          return new FixTracker(fixer, sourceCode).retainSurroundingTokens(lastToken).remove(lastToken);\n        };\n      }\n      context.report({\n        node,\n        loc,\n        messageId,\n        fix\n      });\n    }\n\n    /**\n     * Check whether a given semicolon token is redundant.\n     * @param {Token} semiToken A semicolon token to check.\n     * @returns {boolean} `true` if the next token is `;` or `}`.\n     */\n    function isRedundantSemi(semiToken) {\n      const nextToken = sourceCode.getTokenAfter(semiToken);\n      return !nextToken || astUtils.isClosingBraceToken(nextToken) || astUtils.isSemicolonToken(nextToken);\n    }\n\n    /**\n     * Check whether a given token is the closing brace of an arrow function.\n     * @param {Token} lastToken A token to check.\n     * @returns {boolean} `true` if the token is the closing brace of an arrow function.\n     */\n    function isEndOfArrowBlock(lastToken) {\n      if (!astUtils.isClosingBraceToken(lastToken)) {\n        return false;\n      }\n      const node = sourceCode.getNodeByRangeIndex(lastToken.range[0]);\n      return node.type === \"BlockStatement\" && node.parent.type === \"ArrowFunctionExpression\";\n    }\n\n    /**\n     * Check whether a given node is on the same line with the next token.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} `true` if the node is on the same line with the next token.\n     */\n    function isOnSameLineWithNextToken(node) {\n      const prevToken = sourceCode.getLastToken(node, 1);\n      const nextToken = sourceCode.getTokenAfter(node);\n      return !!nextToken && astUtils.isTokenOnSameLine(prevToken, nextToken);\n    }\n\n    /**\n     * Check whether a given node can connect the next line if the next line is unreliable.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} `true` if the node can connect the next line.\n     */\n    function maybeAsiHazardAfter(node) {\n      const t = node.type;\n      if (t === \"DoWhileStatement\" || t === \"BreakStatement\" || t === \"ContinueStatement\" || t === \"DebuggerStatement\" || t === \"ImportDeclaration\" || t === \"ExportAllDeclaration\") {\n        return false;\n      }\n      if (t === \"ReturnStatement\") {\n        return Boolean(node.argument);\n      }\n      if (t === \"ExportNamedDeclaration\") {\n        return Boolean(node.declaration);\n      }\n      if (isEndOfArrowBlock(sourceCode.getLastToken(node, 1))) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Check whether a given token can connect the previous statement.\n     * @param {Token} token A token to check.\n     * @returns {boolean} `true` if the token is one of `[`, `(`, `/`, `+`, `-`, ```, `++`, and `--`.\n     */\n    function maybeAsiHazardBefore(token) {\n      return Boolean(token) && OPT_OUT_PATTERN.test(token.value) && token.value !== \"++\" && token.value !== \"--\";\n    }\n\n    /**\n     * Check if the semicolon of a given node is unnecessary, only true if:\n     *   - next token is a valid statement divider (`;` or `}`).\n     *   - next token is on a new line and the node is not connectable to the new line.\n     * @param {Node} node A statement node to check.\n     * @returns {boolean} whether the semicolon is unnecessary.\n     */\n    function canRemoveSemicolon(node) {\n      if (isRedundantSemi(sourceCode.getLastToken(node))) {\n        return true; // `;;` or `;}`\n      }\n\n      if (isOnSameLineWithNextToken(node)) {\n        return false; // One liner.\n      }\n\n      if (beforeStatementContinuationChars === \"never\" && !maybeAsiHazardAfter(node)) {\n        return true; // ASI works. This statement doesn't connect to the next.\n      }\n\n      if (!maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n        return true; // ASI works. The next token doesn't connect to this statement.\n      }\n\n      return false;\n    }\n\n    /**\n     * Checks a node to see if it's in a one-liner block statement.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} whether the node is in a one-liner block statement.\n     */\n    function isOneLinerBlock(node) {\n      const parent = node.parent;\n      const nextToken = sourceCode.getTokenAfter(node);\n      if (!nextToken || nextToken.value !== \"}\") {\n        return false;\n      }\n      return !!parent && parent.type === \"BlockStatement\" && parent.loc.start.line === parent.loc.end.line;\n    }\n\n    /**\n     * Checks a node to see if it's followed by a semicolon.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n    function checkForSemicolon(node) {\n      const isSemi = astUtils.isSemicolonToken(sourceCode.getLastToken(node));\n      if (never) {\n        if (isSemi && canRemoveSemicolon(node)) {\n          report(node, true);\n        } else if (!isSemi && beforeStatementContinuationChars === \"always\" && maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n          report(node);\n        }\n      } else {\n        const oneLinerBlock = exceptOneLine && isOneLinerBlock(node);\n        if (isSemi && oneLinerBlock) {\n          report(node, true);\n        } else if (!isSemi && !oneLinerBlock) {\n          report(node);\n        }\n      }\n    }\n\n    /**\n     * Checks to see if there's a semicolon after a variable declaration.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n    function checkForSemicolonForVariableDeclaration(node) {\n      const parent = node.parent;\n      if ((parent.type !== \"ForStatement\" || parent.init !== node) && (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)) {\n        checkForSemicolon(node);\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      VariableDeclaration: checkForSemicolonForVariableDeclaration,\n      ExpressionStatement: checkForSemicolon,\n      ReturnStatement: checkForSemicolon,\n      ThrowStatement: checkForSemicolon,\n      DoWhileStatement: checkForSemicolon,\n      DebuggerStatement: checkForSemicolon,\n      BreakStatement: checkForSemicolon,\n      ContinueStatement: checkForSemicolon,\n      ImportDeclaration: checkForSemicolon,\n      ExportAllDeclaration: checkForSemicolon,\n      ExportNamedDeclaration(node) {\n        if (!node.declaration) {\n          checkForSemicolon(node);\n        }\n      },\n      ExportDefaultDeclaration(node) {\n        if (!/(?:Class|Function)Declaration/u.test(node.declaration.type)) {\n          checkForSemicolon(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["FixTracker","require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","properties","beforeStatementContinuationChars","additionalProperties","minItems","maxItems","omitLastInOneLineBlock","messages","missingSemi","extraSemi","create","context","OPT_OUT_PATTERN","options","never","exceptOneLine","Boolean","sourceCode","getSourceCode","report","node","missing","lastToken","getLastToken","messageId","fix","loc","start","end","getNextLocation","fixer","insertTextAfter","retainSurroundingTokens","remove","isRedundantSemi","semiToken","nextToken","getTokenAfter","isClosingBraceToken","isSemicolonToken","isEndOfArrowBlock","getNodeByRangeIndex","range","parent","isOnSameLineWithNextToken","prevToken","isTokenOnSameLine","maybeAsiHazardAfter","t","argument","declaration","maybeAsiHazardBefore","token","test","value","canRemoveSemicolon","isOneLinerBlock","line","checkForSemicolon","isSemi","oneLinerBlock","checkForSemicolonForVariableDeclaration","init","left","VariableDeclaration","ExpressionStatement","ReturnStatement","ThrowStatement","DoWhileStatement","DebuggerStatement","BreakStatement","ContinueStatement","ImportDeclaration","ExportAllDeclaration","ExportNamedDeclaration","ExportDefaultDeclaration"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/semi.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag missing semicolons.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow semicolons instead of ASI\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/semi\"\n        },\n\n        fixable: \"code\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                beforeStatementContinuationChars: {\n                                    enum: [\"always\", \"any\", \"never\"]\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                omitLastInOneLineBlock: { type: \"boolean\" }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            missingSemi: \"Missing semicolon.\",\n            extraSemi: \"Extra semicolon.\"\n        }\n    },\n\n    create(context) {\n\n        const OPT_OUT_PATTERN = /^[-[(/+`]/u; // One of [(/+-`\n        const options = context.options[1];\n        const never = context.options[0] === \"never\";\n        const exceptOneLine = Boolean(options && options.omitLastInOneLineBlock);\n        const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || \"any\";\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports a semicolon error with appropriate location and message.\n         * @param {ASTNode} node The node with an extra or missing semicolon.\n         * @param {boolean} missing True if the semicolon is missing.\n         * @returns {void}\n         */\n        function report(node, missing) {\n            const lastToken = sourceCode.getLastToken(node);\n            let messageId,\n                fix,\n                loc;\n\n            if (!missing) {\n                messageId = \"missingSemi\";\n                loc = {\n                    start: lastToken.loc.end,\n                    end: astUtils.getNextLocation(sourceCode, lastToken.loc.end)\n                };\n                fix = function(fixer) {\n                    return fixer.insertTextAfter(lastToken, \";\");\n                };\n            } else {\n                messageId = \"extraSemi\";\n                loc = lastToken.loc;\n                fix = function(fixer) {\n\n                    /*\n                     * Expand the replacement range to include the surrounding\n                     * tokens to avoid conflicting with no-extra-semi.\n                     * https://github.com/eslint/eslint/issues/7928\n                     */\n                    return new FixTracker(fixer, sourceCode)\n                        .retainSurroundingTokens(lastToken)\n                        .remove(lastToken);\n                };\n            }\n\n            context.report({\n                node,\n                loc,\n                messageId,\n                fix\n            });\n\n        }\n\n        /**\n         * Check whether a given semicolon token is redundant.\n         * @param {Token} semiToken A semicolon token to check.\n         * @returns {boolean} `true` if the next token is `;` or `}`.\n         */\n        function isRedundantSemi(semiToken) {\n            const nextToken = sourceCode.getTokenAfter(semiToken);\n\n            return (\n                !nextToken ||\n                astUtils.isClosingBraceToken(nextToken) ||\n                astUtils.isSemicolonToken(nextToken)\n            );\n        }\n\n        /**\n         * Check whether a given token is the closing brace of an arrow function.\n         * @param {Token} lastToken A token to check.\n         * @returns {boolean} `true` if the token is the closing brace of an arrow function.\n         */\n        function isEndOfArrowBlock(lastToken) {\n            if (!astUtils.isClosingBraceToken(lastToken)) {\n                return false;\n            }\n            const node = sourceCode.getNodeByRangeIndex(lastToken.range[0]);\n\n            return (\n                node.type === \"BlockStatement\" &&\n                node.parent.type === \"ArrowFunctionExpression\"\n            );\n        }\n\n        /**\n         * Check whether a given node is on the same line with the next token.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} `true` if the node is on the same line with the next token.\n         */\n        function isOnSameLineWithNextToken(node) {\n            const prevToken = sourceCode.getLastToken(node, 1);\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            return !!nextToken && astUtils.isTokenOnSameLine(prevToken, nextToken);\n        }\n\n        /**\n         * Check whether a given node can connect the next line if the next line is unreliable.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} `true` if the node can connect the next line.\n         */\n        function maybeAsiHazardAfter(node) {\n            const t = node.type;\n\n            if (t === \"DoWhileStatement\" ||\n                t === \"BreakStatement\" ||\n                t === \"ContinueStatement\" ||\n                t === \"DebuggerStatement\" ||\n                t === \"ImportDeclaration\" ||\n                t === \"ExportAllDeclaration\"\n            ) {\n                return false;\n            }\n            if (t === \"ReturnStatement\") {\n                return Boolean(node.argument);\n            }\n            if (t === \"ExportNamedDeclaration\") {\n                return Boolean(node.declaration);\n            }\n            if (isEndOfArrowBlock(sourceCode.getLastToken(node, 1))) {\n                return false;\n            }\n\n            return true;\n        }\n\n        /**\n         * Check whether a given token can connect the previous statement.\n         * @param {Token} token A token to check.\n         * @returns {boolean} `true` if the token is one of `[`, `(`, `/`, `+`, `-`, ```, `++`, and `--`.\n         */\n        function maybeAsiHazardBefore(token) {\n            return (\n                Boolean(token) &&\n                OPT_OUT_PATTERN.test(token.value) &&\n                token.value !== \"++\" &&\n                token.value !== \"--\"\n            );\n        }\n\n        /**\n         * Check if the semicolon of a given node is unnecessary, only true if:\n         *   - next token is a valid statement divider (`;` or `}`).\n         *   - next token is on a new line and the node is not connectable to the new line.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} whether the semicolon is unnecessary.\n         */\n        function canRemoveSemicolon(node) {\n            if (isRedundantSemi(sourceCode.getLastToken(node))) {\n                return true; // `;;` or `;}`\n            }\n            if (isOnSameLineWithNextToken(node)) {\n                return false; // One liner.\n            }\n            if (beforeStatementContinuationChars === \"never\" && !maybeAsiHazardAfter(node)) {\n                return true; // ASI works. This statement doesn't connect to the next.\n            }\n            if (!maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n                return true; // ASI works. The next token doesn't connect to this statement.\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks a node to see if it's in a one-liner block statement.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} whether the node is in a one-liner block statement.\n         */\n        function isOneLinerBlock(node) {\n            const parent = node.parent;\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            if (!nextToken || nextToken.value !== \"}\") {\n                return false;\n            }\n            return (\n                !!parent &&\n                parent.type === \"BlockStatement\" &&\n                parent.loc.start.line === parent.loc.end.line\n            );\n        }\n\n        /**\n         * Checks a node to see if it's followed by a semicolon.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolon(node) {\n            const isSemi = astUtils.isSemicolonToken(sourceCode.getLastToken(node));\n\n            if (never) {\n                if (isSemi && canRemoveSemicolon(node)) {\n                    report(node, true);\n                } else if (!isSemi && beforeStatementContinuationChars === \"always\" && maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n                    report(node);\n                }\n            } else {\n                const oneLinerBlock = (exceptOneLine && isOneLinerBlock(node));\n\n                if (isSemi && oneLinerBlock) {\n                    report(node, true);\n                } else if (!isSemi && !oneLinerBlock) {\n                    report(node);\n                }\n            }\n        }\n\n        /**\n         * Checks to see if there's a semicolon after a variable declaration.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolonForVariableDeclaration(node) {\n            const parent = node.parent;\n\n            if ((parent.type !== \"ForStatement\" || parent.init !== node) &&\n                (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)\n            ) {\n                checkForSemicolon(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: checkForSemicolonForVariableDeclaration,\n            ExpressionStatement: checkForSemicolon,\n            ReturnStatement: checkForSemicolon,\n            ThrowStatement: checkForSemicolon,\n            DoWhileStatement: checkForSemicolon,\n            DebuggerStatement: checkForSemicolon,\n            BreakStatement: checkForSemicolon,\n            ContinueStatement: checkForSemicolon,\n            ImportDeclaration: checkForSemicolon,\n            ExportAllDeclaration: checkForSemicolon,\n            ExportNamedDeclaration(node) {\n                if (!node.declaration) {\n                    checkForSemicolon(node);\n                }\n            },\n            ExportDefaultDeclaration(node) {\n                if (!/(?:Class|Function)Declaration/u.test(node.declaration.type)) {\n                    checkForSemicolon(node);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}