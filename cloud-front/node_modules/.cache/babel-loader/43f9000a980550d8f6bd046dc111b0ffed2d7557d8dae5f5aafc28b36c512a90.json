{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using javascript: urls\n * @author Ilya Volodin\n */\n/* jshint scripturl: true */\n/* eslint no-script-url: 0 */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `javascript:` urls\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-script-url\"\n    },\n    schema: [],\n    messages: {\n      unexpectedScriptURL: \"Script URL is a form of eval.\"\n    }\n  },\n  create(context) {\n    /**\n     * Check whether a node's static value starts with \"javascript:\" or not.\n     * And report an error for unexpected script URL.\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n    function check(node) {\n      const value = astUtils.getStaticStringValue(node);\n      if (typeof value === \"string\" && value.toLowerCase().indexOf(\"javascript:\") === 0) {\n        context.report({\n          node,\n          messageId: \"unexpectedScriptURL\"\n        });\n      }\n    }\n    return {\n      Literal(node) {\n        if (node.value && typeof node.value === \"string\") {\n          check(node);\n        }\n      },\n      TemplateLiteral(node) {\n        if (!(node.parent && node.parent.type === \"TaggedTemplateExpression\")) {\n          check(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpectedScriptURL","create","context","check","node","value","getStaticStringValue","toLowerCase","indexOf","report","messageId","Literal","TemplateLiteral","parent"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-script-url.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using javascript: urls\n * @author Ilya Volodin\n */\n/* jshint scripturl: true */\n/* eslint no-script-url: 0 */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `javascript:` urls\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-script-url\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedScriptURL: \"Script URL is a form of eval.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Check whether a node's static value starts with \"javascript:\" or not.\n         * And report an error for unexpected script URL.\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function check(node) {\n            const value = astUtils.getStaticStringValue(node);\n\n            if (typeof value === \"string\" && value.toLowerCase().indexOf(\"javascript:\") === 0) {\n                context.report({ node, messageId: \"unexpectedScriptURL\" });\n            }\n        }\n        return {\n            Literal(node) {\n                if (node.value && typeof node.value === \"string\") {\n                    check(node);\n                }\n            },\n            TemplateLiteral(node) {\n                if (!(node.parent && node.parent.type === \"TaggedTemplateExpression\")) {\n                    check(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,6BAA6B;MAC1CC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,mBAAmB,EAAE;IACzB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,KAAKA,CAACC,IAAI,EAAE;MACjB,MAAMC,KAAK,GAAGlB,QAAQ,CAACmB,oBAAoB,CAACF,IAAI,CAAC;MAEjD,IAAI,OAAOC,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACE,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QAC/EN,OAAO,CAACO,MAAM,CAAC;UAAEL,IAAI;UAAEM,SAAS,EAAE;QAAsB,CAAC,CAAC;MAC9D;IACJ;IACA,OAAO;MACHC,OAAOA,CAACP,IAAI,EAAE;QACV,IAAIA,IAAI,CAACC,KAAK,IAAI,OAAOD,IAAI,CAACC,KAAK,KAAK,QAAQ,EAAE;UAC9CF,KAAK,CAACC,IAAI,CAAC;QACf;MACJ,CAAC;MACDQ,eAAeA,CAACR,IAAI,EAAE;QAClB,IAAI,EAAEA,IAAI,CAACS,MAAM,IAAIT,IAAI,CAACS,MAAM,CAACrB,IAAI,KAAK,0BAA0B,CAAC,EAAE;UACnEW,KAAK,CAACC,IAAI,CAAC;QACf;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}