{"ast":null,"code":"/**\n * @fileoverview A collection of methods for processing Espree's options.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nconst DEFAULT_ECMA_VERSION = 5;\nconst SUPPORTED_VERSIONS = [3, 5, 6, 7, 8, 9, 10, 11, 12];\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @throws {Error} throws an error if the ecmaVersion is invalid.\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(ecmaVersion = DEFAULT_ECMA_VERSION) {\n  if (typeof ecmaVersion !== \"number\") {\n    throw new Error(`ecmaVersion must be a number. Received value of type ${typeof ecmaVersion} instead.`);\n  }\n  let version = ecmaVersion;\n\n  // Calculate ECMAScript edition number from official year version starting with\n  // ES2015, which corresponds with ES6 (or a difference of 2009).\n  if (version >= 2015) {\n    version -= 2009;\n  }\n  if (!SUPPORTED_VERSIONS.includes(version)) {\n    throw new Error(\"Invalid ecmaVersion.\");\n  }\n  return version;\n}\n\n/**\n * Normalize sourceType from the initial config\n * @param {string} sourceType to normalize\n * @throws {Error} throw an error if sourceType is invalid\n * @returns {string} normalized sourceType\n */\nfunction normalizeSourceType(sourceType = \"script\") {\n  if (sourceType === \"script\" || sourceType === \"module\") {\n    return sourceType;\n  }\n  throw new Error(\"Invalid sourceType.\");\n}\n\n/**\n * Normalize parserOptions\n * @param {Object} options the parser options to normalize\n * @throws {Error} throw an error if found invalid option.\n * @returns {Object} normalized options\n */\nfunction normalizeOptions(options) {\n  const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n  const sourceType = normalizeSourceType(options.sourceType);\n  const ranges = options.range === true;\n  const locations = options.loc === true;\n  if (sourceType === \"module\" && ecmaVersion < 6) {\n    throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n  }\n  return Object.assign({}, options, {\n    ecmaVersion,\n    sourceType,\n    ranges,\n    locations\n  });\n}\n\n/**\n * Get the latest ECMAScript version supported by Espree.\n * @returns {number} The latest ECMAScript version.\n */\nfunction getLatestEcmaVersion() {\n  return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];\n}\n\n/**\n * Get the list of ECMAScript versions supported by Espree.\n * @returns {number[]} An array containing the supported ECMAScript versions.\n */\nfunction getSupportedEcmaVersions() {\n  return [...SUPPORTED_VERSIONS];\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  normalizeOptions,\n  getLatestEcmaVersion,\n  getSupportedEcmaVersions\n};","map":{"version":3,"names":["DEFAULT_ECMA_VERSION","SUPPORTED_VERSIONS","normalizeEcmaVersion","ecmaVersion","Error","version","includes","normalizeSourceType","sourceType","normalizeOptions","options","ranges","range","locations","loc","Object","assign","getLatestEcmaVersion","length","getSupportedEcmaVersions","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/espree/lib/options.js"],"sourcesContent":["/**\n * @fileoverview A collection of methods for processing Espree's options.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_ECMA_VERSION = 5;\nconst SUPPORTED_VERSIONS = [\n    3,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12\n];\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @throws {Error} throws an error if the ecmaVersion is invalid.\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(ecmaVersion = DEFAULT_ECMA_VERSION) {\n    if (typeof ecmaVersion !== \"number\") {\n        throw new Error(`ecmaVersion must be a number. Received value of type ${typeof ecmaVersion} instead.`);\n    }\n\n    let version = ecmaVersion;\n\n    // Calculate ECMAScript edition number from official year version starting with\n    // ES2015, which corresponds with ES6 (or a difference of 2009).\n    if (version >= 2015) {\n        version -= 2009;\n    }\n\n    if (!SUPPORTED_VERSIONS.includes(version)) {\n        throw new Error(\"Invalid ecmaVersion.\");\n    }\n\n    return version;\n}\n\n/**\n * Normalize sourceType from the initial config\n * @param {string} sourceType to normalize\n * @throws {Error} throw an error if sourceType is invalid\n * @returns {string} normalized sourceType\n */\nfunction normalizeSourceType(sourceType = \"script\") {\n    if (sourceType === \"script\" || sourceType === \"module\") {\n        return sourceType;\n    }\n    throw new Error(\"Invalid sourceType.\");\n}\n\n/**\n * Normalize parserOptions\n * @param {Object} options the parser options to normalize\n * @throws {Error} throw an error if found invalid option.\n * @returns {Object} normalized options\n */\nfunction normalizeOptions(options) {\n    const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n    const sourceType = normalizeSourceType(options.sourceType);\n    const ranges = options.range === true;\n    const locations = options.loc === true;\n\n    if (sourceType === \"module\" && ecmaVersion < 6) {\n        throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n    }\n    return Object.assign({}, options, { ecmaVersion, sourceType, ranges, locations });\n}\n\n/**\n * Get the latest ECMAScript version supported by Espree.\n * @returns {number} The latest ECMAScript version.\n */\nfunction getLatestEcmaVersion() {\n    return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];\n}\n\n/**\n * Get the list of ECMAScript versions supported by Espree.\n * @returns {number[]} An array containing the supported ECMAScript versions.\n */\nfunction getSupportedEcmaVersions() {\n    return [...SUPPORTED_VERSIONS];\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    normalizeOptions,\n    getLatestEcmaVersion,\n    getSupportedEcmaVersions\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,oBAAoB,GAAG,CAAC;AAC9B,MAAMC,kBAAkB,GAAG,CACvB,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAAC,EACD,EAAE,EACF,EAAE,EACF,EAAE,CACL;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACC,WAAW,GAAGH,oBAAoB,EAAE;EAC9D,IAAI,OAAOG,WAAW,KAAK,QAAQ,EAAE;IACjC,MAAM,IAAIC,KAAK,CAAE,wDAAuD,OAAOD,WAAY,WAAU,CAAC;EAC1G;EAEA,IAAIE,OAAO,GAAGF,WAAW;;EAEzB;EACA;EACA,IAAIE,OAAO,IAAI,IAAI,EAAE;IACjBA,OAAO,IAAI,IAAI;EACnB;EAEA,IAAI,CAACJ,kBAAkB,CAACK,QAAQ,CAACD,OAAO,CAAC,EAAE;IACvC,MAAM,IAAID,KAAK,CAAC,sBAAsB,CAAC;EAC3C;EAEA,OAAOC,OAAO;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,mBAAmBA,CAACC,UAAU,GAAG,QAAQ,EAAE;EAChD,IAAIA,UAAU,KAAK,QAAQ,IAAIA,UAAU,KAAK,QAAQ,EAAE;IACpD,OAAOA,UAAU;EACrB;EACA,MAAM,IAAIJ,KAAK,CAAC,qBAAqB,CAAC;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,gBAAgBA,CAACC,OAAO,EAAE;EAC/B,MAAMP,WAAW,GAAGD,oBAAoB,CAACQ,OAAO,CAACP,WAAW,CAAC;EAC7D,MAAMK,UAAU,GAAGD,mBAAmB,CAACG,OAAO,CAACF,UAAU,CAAC;EAC1D,MAAMG,MAAM,GAAGD,OAAO,CAACE,KAAK,KAAK,IAAI;EACrC,MAAMC,SAAS,GAAGH,OAAO,CAACI,GAAG,KAAK,IAAI;EAEtC,IAAIN,UAAU,KAAK,QAAQ,IAAIL,WAAW,GAAG,CAAC,EAAE;IAC5C,MAAM,IAAIC,KAAK,CAAC,8HAA8H,CAAC;EACnJ;EACA,OAAOW,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,OAAO,EAAE;IAAEP,WAAW;IAAEK,UAAU;IAAEG,MAAM;IAAEE;EAAU,CAAC,CAAC;AACrF;;AAEA;AACA;AACA;AACA;AACA,SAASI,oBAAoBA,CAAA,EAAG;EAC5B,OAAOhB,kBAAkB,CAACA,kBAAkB,CAACiB,MAAM,GAAG,CAAC,CAAC;AAC5D;;AAEA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAAA,EAAG;EAChC,OAAO,CAAC,GAAGlB,kBAAkB,CAAC;AAClC;;AAEA;AACA;AACA;;AAEAmB,MAAM,CAACC,OAAO,GAAG;EACbZ,gBAAgB;EAChBQ,oBAAoB;EACpBE;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}