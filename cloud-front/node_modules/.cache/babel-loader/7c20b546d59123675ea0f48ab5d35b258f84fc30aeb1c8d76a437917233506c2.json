{"ast":null,"code":"/**\n * @fileoverview Rule to disallow use of unmodified expressions in loop conditions\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst Traverser = require(\"../shared/traverser\"),\n  astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SENTINEL_PATTERN = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/u;\nconst LOOP_PATTERN = /^(?:DoWhile|For|While)Statement$/u; // for-in/of statements don't have `test` property.\nconst GROUP_PATTERN = /^(?:BinaryExpression|ConditionalExpression)$/u;\nconst SKIP_PATTERN = /^(?:ArrowFunction|Class|Function)Expression$/u;\nconst DYNAMIC_PATTERN = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/u;\n\n/**\n * @typedef {Object} LoopConditionInfo\n * @property {eslint-scope.Reference} reference - The reference.\n * @property {ASTNode} group - BinaryExpression or ConditionalExpression nodes\n *      that the reference is belonging to.\n * @property {Function} isInLoop - The predicate which checks a given reference\n *      is in this loop.\n * @property {boolean} modified - The flag that the reference is modified in\n *      this loop.\n */\n\n/**\n * Checks whether or not a given reference is a write reference.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is a write reference.\n */\nfunction isWriteReference(reference) {\n  if (reference.init) {\n    const def = reference.resolved && reference.resolved.defs[0];\n    if (!def || def.type !== \"Variable\" || def.parent.kind !== \"var\") {\n      return false;\n    }\n  }\n  return reference.isWrite();\n}\n\n/**\n * Checks whether or not a given loop condition info does not have the modified\n * flag.\n * @param {LoopConditionInfo} condition A loop condition info to check.\n * @returns {boolean} `true` if the loop condition info is \"unmodified\".\n */\nfunction isUnmodified(condition) {\n  return !condition.modified;\n}\n\n/**\n * Checks whether or not a given loop condition info does not have the modified\n * flag and does not have the group this condition belongs to.\n * @param {LoopConditionInfo} condition A loop condition info to check.\n * @returns {boolean} `true` if the loop condition info is \"unmodified\".\n */\nfunction isUnmodifiedAndNotBelongToGroup(condition) {\n  return !(condition.modified || condition.group);\n}\n\n/**\n * Checks whether or not a given reference is inside of a given node.\n * @param {ASTNode} node A node to check.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is inside of the node.\n */\nfunction isInRange(node, reference) {\n  const or = node.range;\n  const ir = reference.identifier.range;\n  return or[0] <= ir[0] && ir[1] <= or[1];\n}\n\n/**\n * Checks whether or not a given reference is inside of a loop node's condition.\n * @param {ASTNode} node A node to check.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is inside of the loop node's\n *      condition.\n */\nconst isInLoop = {\n  WhileStatement: isInRange,\n  DoWhileStatement: isInRange,\n  ForStatement(node, reference) {\n    return isInRange(node, reference) && !(node.init && isInRange(node.init, reference));\n  }\n};\n\n/**\n * Gets the function which encloses a given reference.\n * This supports only FunctionDeclaration.\n * @param {eslint-scope.Reference} reference A reference to get.\n * @returns {ASTNode|null} The function node or null.\n */\nfunction getEncloseFunctionDeclaration(reference) {\n  let node = reference.identifier;\n  while (node) {\n    if (node.type === \"FunctionDeclaration\") {\n      return node.id ? node : null;\n    }\n    node = node.parent;\n  }\n  return null;\n}\n\n/**\n * Updates the \"modified\" flags of given loop conditions with given modifiers.\n * @param {LoopConditionInfo[]} conditions The loop conditions to be updated.\n * @param {eslint-scope.Reference[]} modifiers The references to update.\n * @returns {void}\n */\nfunction updateModifiedFlag(conditions, modifiers) {\n  for (let i = 0; i < conditions.length; ++i) {\n    const condition = conditions[i];\n    for (let j = 0; !condition.modified && j < modifiers.length; ++j) {\n      const modifier = modifiers[j];\n      let funcNode, funcVar;\n\n      /*\n       * Besides checking for the condition being in the loop, we want to\n       * check the function that this modifier is belonging to is called\n       * in the loop.\n       * FIXME: This should probably be extracted to a function.\n       */\n      const inLoop = condition.isInLoop(modifier) || Boolean((funcNode = getEncloseFunctionDeclaration(modifier)) && (funcVar = astUtils.getVariableByName(modifier.from.upper, funcNode.id.name)) && funcVar.references.some(condition.isInLoop));\n      condition.modified = inLoop;\n    }\n  }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow unmodified loop conditions\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-unmodified-loop-condition\"\n    },\n    schema: [],\n    messages: {\n      loopConditionNotModified: \"'{{name}}' is not modified in this loop.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let groupMap = null;\n\n    /**\n     * Reports a given condition info.\n     * @param {LoopConditionInfo} condition A loop condition info to report.\n     * @returns {void}\n     */\n    function report(condition) {\n      const node = condition.reference.identifier;\n      context.report({\n        node,\n        messageId: \"loopConditionNotModified\",\n        data: node\n      });\n    }\n\n    /**\n     * Registers given conditions to the group the condition belongs to.\n     * @param {LoopConditionInfo[]} conditions A loop condition info to\n     *      register.\n     * @returns {void}\n     */\n    function registerConditionsToGroup(conditions) {\n      for (let i = 0; i < conditions.length; ++i) {\n        const condition = conditions[i];\n        if (condition.group) {\n          let group = groupMap.get(condition.group);\n          if (!group) {\n            group = [];\n            groupMap.set(condition.group, group);\n          }\n          group.push(condition);\n        }\n      }\n    }\n\n    /**\n     * Reports references which are inside of unmodified groups.\n     * @param {LoopConditionInfo[]} conditions A loop condition info to report.\n     * @returns {void}\n     */\n    function checkConditionsInGroup(conditions) {\n      if (conditions.every(isUnmodified)) {\n        conditions.forEach(report);\n      }\n    }\n\n    /**\n     * Checks whether or not a given group node has any dynamic elements.\n     * @param {ASTNode} root A node to check.\n     *      This node is one of BinaryExpression or ConditionalExpression.\n     * @returns {boolean} `true` if the node is dynamic.\n     */\n    function hasDynamicExpressions(root) {\n      let retv = false;\n      Traverser.traverse(root, {\n        visitorKeys: sourceCode.visitorKeys,\n        enter(node) {\n          if (DYNAMIC_PATTERN.test(node.type)) {\n            retv = true;\n            this.break();\n          } else if (SKIP_PATTERN.test(node.type)) {\n            this.skip();\n          }\n        }\n      });\n      return retv;\n    }\n\n    /**\n     * Creates the loop condition information from a given reference.\n     * @param {eslint-scope.Reference} reference A reference to create.\n     * @returns {LoopConditionInfo|null} Created loop condition info, or null.\n     */\n    function toLoopCondition(reference) {\n      if (reference.init) {\n        return null;\n      }\n      let group = null;\n      let child = reference.identifier;\n      let node = child.parent;\n      while (node) {\n        if (SENTINEL_PATTERN.test(node.type)) {\n          if (LOOP_PATTERN.test(node.type) && node.test === child) {\n            // This reference is inside of a loop condition.\n            return {\n              reference,\n              group,\n              isInLoop: isInLoop[node.type].bind(null, node),\n              modified: false\n            };\n          }\n\n          // This reference is outside of a loop condition.\n          break;\n        }\n\n        /*\n         * If it's inside of a group, OK if either operand is modified.\n         * So stores the group this reference belongs to.\n         */\n        if (GROUP_PATTERN.test(node.type)) {\n          // If this expression is dynamic, no need to check.\n          if (hasDynamicExpressions(node)) {\n            break;\n          } else {\n            group = node;\n          }\n        }\n        child = node;\n        node = node.parent;\n      }\n      return null;\n    }\n\n    /**\n     * Finds unmodified references which are inside of a loop condition.\n     * Then reports the references which are outside of groups.\n     * @param {eslint-scope.Variable} variable A variable to report.\n     * @returns {void}\n     */\n    function checkReferences(variable) {\n      // Gets references that exist in loop conditions.\n      const conditions = variable.references.map(toLoopCondition).filter(Boolean);\n      if (conditions.length === 0) {\n        return;\n      }\n\n      // Registers the conditions to belonging groups.\n      registerConditionsToGroup(conditions);\n\n      // Check the conditions are modified.\n      const modifiers = variable.references.filter(isWriteReference);\n      if (modifiers.length > 0) {\n        updateModifiedFlag(conditions, modifiers);\n      }\n\n      /*\n       * Reports the conditions which are not belonging to groups.\n       * Others will be reported after all variables are done.\n       */\n      conditions.filter(isUnmodifiedAndNotBelongToGroup).forEach(report);\n    }\n    return {\n      \"Program:exit\"() {\n        const queue = [context.getScope()];\n        groupMap = new Map();\n        let scope;\n        while (scope = queue.pop()) {\n          queue.push(...scope.childScopes);\n          scope.variables.forEach(checkReferences);\n        }\n        groupMap.forEach(checkConditionsInGroup);\n        groupMap = null;\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","Traverser","astUtils","SENTINEL_PATTERN","LOOP_PATTERN","GROUP_PATTERN","SKIP_PATTERN","DYNAMIC_PATTERN","isWriteReference","reference","init","def","resolved","defs","type","parent","kind","isWrite","isUnmodified","condition","modified","isUnmodifiedAndNotBelongToGroup","group","isInRange","node","or","range","ir","identifier","isInLoop","WhileStatement","DoWhileStatement","ForStatement","getEncloseFunctionDeclaration","id","updateModifiedFlag","conditions","modifiers","i","length","j","modifier","funcNode","funcVar","inLoop","Boolean","getVariableByName","from","upper","name","references","some","module","exports","meta","docs","description","category","recommended","url","schema","messages","loopConditionNotModified","create","context","sourceCode","getSourceCode","groupMap","report","messageId","data","registerConditionsToGroup","get","set","push","checkConditionsInGroup","every","forEach","hasDynamicExpressions","root","retv","traverse","visitorKeys","enter","test","break","skip","toLoopCondition","child","bind","checkReferences","variable","map","filter","Program:exit","queue","getScope","Map","scope","pop","childScopes","variables"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-unmodified-loop-condition.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow use of unmodified expressions in loop conditions\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst Traverser = require(\"../shared/traverser\"),\n    astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SENTINEL_PATTERN = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/u;\nconst LOOP_PATTERN = /^(?:DoWhile|For|While)Statement$/u; // for-in/of statements don't have `test` property.\nconst GROUP_PATTERN = /^(?:BinaryExpression|ConditionalExpression)$/u;\nconst SKIP_PATTERN = /^(?:ArrowFunction|Class|Function)Expression$/u;\nconst DYNAMIC_PATTERN = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/u;\n\n/**\n * @typedef {Object} LoopConditionInfo\n * @property {eslint-scope.Reference} reference - The reference.\n * @property {ASTNode} group - BinaryExpression or ConditionalExpression nodes\n *      that the reference is belonging to.\n * @property {Function} isInLoop - The predicate which checks a given reference\n *      is in this loop.\n * @property {boolean} modified - The flag that the reference is modified in\n *      this loop.\n */\n\n/**\n * Checks whether or not a given reference is a write reference.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is a write reference.\n */\nfunction isWriteReference(reference) {\n    if (reference.init) {\n        const def = reference.resolved && reference.resolved.defs[0];\n\n        if (!def || def.type !== \"Variable\" || def.parent.kind !== \"var\") {\n            return false;\n        }\n    }\n    return reference.isWrite();\n}\n\n/**\n * Checks whether or not a given loop condition info does not have the modified\n * flag.\n * @param {LoopConditionInfo} condition A loop condition info to check.\n * @returns {boolean} `true` if the loop condition info is \"unmodified\".\n */\nfunction isUnmodified(condition) {\n    return !condition.modified;\n}\n\n/**\n * Checks whether or not a given loop condition info does not have the modified\n * flag and does not have the group this condition belongs to.\n * @param {LoopConditionInfo} condition A loop condition info to check.\n * @returns {boolean} `true` if the loop condition info is \"unmodified\".\n */\nfunction isUnmodifiedAndNotBelongToGroup(condition) {\n    return !(condition.modified || condition.group);\n}\n\n/**\n * Checks whether or not a given reference is inside of a given node.\n * @param {ASTNode} node A node to check.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is inside of the node.\n */\nfunction isInRange(node, reference) {\n    const or = node.range;\n    const ir = reference.identifier.range;\n\n    return or[0] <= ir[0] && ir[1] <= or[1];\n}\n\n/**\n * Checks whether or not a given reference is inside of a loop node's condition.\n * @param {ASTNode} node A node to check.\n * @param {eslint-scope.Reference} reference A reference to check.\n * @returns {boolean} `true` if the reference is inside of the loop node's\n *      condition.\n */\nconst isInLoop = {\n    WhileStatement: isInRange,\n    DoWhileStatement: isInRange,\n    ForStatement(node, reference) {\n        return (\n            isInRange(node, reference) &&\n            !(node.init && isInRange(node.init, reference))\n        );\n    }\n};\n\n/**\n * Gets the function which encloses a given reference.\n * This supports only FunctionDeclaration.\n * @param {eslint-scope.Reference} reference A reference to get.\n * @returns {ASTNode|null} The function node or null.\n */\nfunction getEncloseFunctionDeclaration(reference) {\n    let node = reference.identifier;\n\n    while (node) {\n        if (node.type === \"FunctionDeclaration\") {\n            return node.id ? node : null;\n        }\n\n        node = node.parent;\n    }\n\n    return null;\n}\n\n/**\n * Updates the \"modified\" flags of given loop conditions with given modifiers.\n * @param {LoopConditionInfo[]} conditions The loop conditions to be updated.\n * @param {eslint-scope.Reference[]} modifiers The references to update.\n * @returns {void}\n */\nfunction updateModifiedFlag(conditions, modifiers) {\n\n    for (let i = 0; i < conditions.length; ++i) {\n        const condition = conditions[i];\n\n        for (let j = 0; !condition.modified && j < modifiers.length; ++j) {\n            const modifier = modifiers[j];\n            let funcNode, funcVar;\n\n            /*\n             * Besides checking for the condition being in the loop, we want to\n             * check the function that this modifier is belonging to is called\n             * in the loop.\n             * FIXME: This should probably be extracted to a function.\n             */\n            const inLoop = condition.isInLoop(modifier) || Boolean(\n                (funcNode = getEncloseFunctionDeclaration(modifier)) &&\n                (funcVar = astUtils.getVariableByName(modifier.from.upper, funcNode.id.name)) &&\n                funcVar.references.some(condition.isInLoop)\n            );\n\n            condition.modified = inLoop;\n        }\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow unmodified loop conditions\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-unmodified-loop-condition\"\n        },\n\n        schema: [],\n\n        messages: {\n            loopConditionNotModified: \"'{{name}}' is not modified in this loop.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let groupMap = null;\n\n        /**\n         * Reports a given condition info.\n         * @param {LoopConditionInfo} condition A loop condition info to report.\n         * @returns {void}\n         */\n        function report(condition) {\n            const node = condition.reference.identifier;\n\n            context.report({\n                node,\n                messageId: \"loopConditionNotModified\",\n                data: node\n            });\n        }\n\n        /**\n         * Registers given conditions to the group the condition belongs to.\n         * @param {LoopConditionInfo[]} conditions A loop condition info to\n         *      register.\n         * @returns {void}\n         */\n        function registerConditionsToGroup(conditions) {\n            for (let i = 0; i < conditions.length; ++i) {\n                const condition = conditions[i];\n\n                if (condition.group) {\n                    let group = groupMap.get(condition.group);\n\n                    if (!group) {\n                        group = [];\n                        groupMap.set(condition.group, group);\n                    }\n                    group.push(condition);\n                }\n            }\n        }\n\n        /**\n         * Reports references which are inside of unmodified groups.\n         * @param {LoopConditionInfo[]} conditions A loop condition info to report.\n         * @returns {void}\n         */\n        function checkConditionsInGroup(conditions) {\n            if (conditions.every(isUnmodified)) {\n                conditions.forEach(report);\n            }\n        }\n\n        /**\n         * Checks whether or not a given group node has any dynamic elements.\n         * @param {ASTNode} root A node to check.\n         *      This node is one of BinaryExpression or ConditionalExpression.\n         * @returns {boolean} `true` if the node is dynamic.\n         */\n        function hasDynamicExpressions(root) {\n            let retv = false;\n\n            Traverser.traverse(root, {\n                visitorKeys: sourceCode.visitorKeys,\n                enter(node) {\n                    if (DYNAMIC_PATTERN.test(node.type)) {\n                        retv = true;\n                        this.break();\n                    } else if (SKIP_PATTERN.test(node.type)) {\n                        this.skip();\n                    }\n                }\n            });\n\n            return retv;\n        }\n\n        /**\n         * Creates the loop condition information from a given reference.\n         * @param {eslint-scope.Reference} reference A reference to create.\n         * @returns {LoopConditionInfo|null} Created loop condition info, or null.\n         */\n        function toLoopCondition(reference) {\n            if (reference.init) {\n                return null;\n            }\n\n            let group = null;\n            let child = reference.identifier;\n            let node = child.parent;\n\n            while (node) {\n                if (SENTINEL_PATTERN.test(node.type)) {\n                    if (LOOP_PATTERN.test(node.type) && node.test === child) {\n\n                        // This reference is inside of a loop condition.\n                        return {\n                            reference,\n                            group,\n                            isInLoop: isInLoop[node.type].bind(null, node),\n                            modified: false\n                        };\n                    }\n\n                    // This reference is outside of a loop condition.\n                    break;\n                }\n\n                /*\n                 * If it's inside of a group, OK if either operand is modified.\n                 * So stores the group this reference belongs to.\n                 */\n                if (GROUP_PATTERN.test(node.type)) {\n\n                    // If this expression is dynamic, no need to check.\n                    if (hasDynamicExpressions(node)) {\n                        break;\n                    } else {\n                        group = node;\n                    }\n                }\n\n                child = node;\n                node = node.parent;\n            }\n\n            return null;\n        }\n\n        /**\n         * Finds unmodified references which are inside of a loop condition.\n         * Then reports the references which are outside of groups.\n         * @param {eslint-scope.Variable} variable A variable to report.\n         * @returns {void}\n         */\n        function checkReferences(variable) {\n\n            // Gets references that exist in loop conditions.\n            const conditions = variable\n                .references\n                .map(toLoopCondition)\n                .filter(Boolean);\n\n            if (conditions.length === 0) {\n                return;\n            }\n\n            // Registers the conditions to belonging groups.\n            registerConditionsToGroup(conditions);\n\n            // Check the conditions are modified.\n            const modifiers = variable.references.filter(isWriteReference);\n\n            if (modifiers.length > 0) {\n                updateModifiedFlag(conditions, modifiers);\n            }\n\n            /*\n             * Reports the conditions which are not belonging to groups.\n             * Others will be reported after all variables are done.\n             */\n            conditions\n                .filter(isUnmodifiedAndNotBelongToGroup)\n                .forEach(report);\n        }\n\n        return {\n            \"Program:exit\"() {\n                const queue = [context.getScope()];\n\n                groupMap = new Map();\n\n                let scope;\n\n                while ((scope = queue.pop())) {\n                    queue.push(...scope.childScopes);\n                    scope.variables.forEach(checkReferences);\n                }\n\n                groupMap.forEach(checkConditionsInGroup);\n                groupMap = null;\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}