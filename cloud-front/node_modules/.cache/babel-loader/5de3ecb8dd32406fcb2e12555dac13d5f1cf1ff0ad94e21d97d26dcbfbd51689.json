{"ast":null,"code":"/**\n * @fileoverview enforce the location of single-line statements\n * @author Teddy Katz\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nconst POSITION_SCHEMA = {\n  enum: [\"beside\", \"below\", \"any\"]\n};\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce the location of single-line statements\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/nonblock-statement-body-position\"\n    },\n    fixable: \"whitespace\",\n    schema: [POSITION_SCHEMA, {\n      properties: {\n        overrides: {\n          properties: {\n            if: POSITION_SCHEMA,\n            else: POSITION_SCHEMA,\n            while: POSITION_SCHEMA,\n            do: POSITION_SCHEMA,\n            for: POSITION_SCHEMA\n          },\n          additionalProperties: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      expectNoLinebreak: \"Expected no linebreak before this statement.\",\n      expectLinebreak: \"Expected a linebreak before this statement.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    //----------------------------------------------------------------------\n    // Helpers\n    //----------------------------------------------------------------------\n\n    /**\n     * Gets the applicable preference for a particular keyword\n     * @param {string} keywordName The name of a keyword, e.g. 'if'\n     * @returns {string} The applicable option for the keyword, e.g. 'beside'\n     */\n    function getOption(keywordName) {\n      return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] || context.options[0] || \"beside\";\n    }\n\n    /**\n     * Validates the location of a single-line statement\n     * @param {ASTNode} node The single-line statement\n     * @param {string} keywordName The applicable keyword name for the single-line statement\n     * @returns {void}\n     */\n    function validateStatement(node, keywordName) {\n      const option = getOption(keywordName);\n      if (node.type === \"BlockStatement\" || option === \"any\") {\n        return;\n      }\n      const tokenBefore = sourceCode.getTokenBefore(node);\n      if (tokenBefore.loc.end.line === node.loc.start.line && option === \"below\") {\n        context.report({\n          node,\n          messageId: \"expectLinebreak\",\n          fix: fixer => fixer.insertTextBefore(node, \"\\n\")\n        });\n      } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === \"beside\") {\n        context.report({\n          node,\n          messageId: \"expectNoLinebreak\",\n          fix(fixer) {\n            if (sourceCode.getText().slice(tokenBefore.range[1], node.range[0]).trim()) {\n              return null;\n            }\n            return fixer.replaceTextRange([tokenBefore.range[1], node.range[0]], \" \");\n          }\n        });\n      }\n    }\n\n    //----------------------------------------------------------------------\n    // Public\n    //----------------------------------------------------------------------\n\n    return {\n      IfStatement(node) {\n        validateStatement(node.consequent, \"if\");\n\n        // Check the `else` node, but don't check 'else if' statements.\n        if (node.alternate && node.alternate.type !== \"IfStatement\") {\n          validateStatement(node.alternate, \"else\");\n        }\n      },\n      WhileStatement: node => validateStatement(node.body, \"while\"),\n      DoWhileStatement: node => validateStatement(node.body, \"do\"),\n      ForStatement: node => validateStatement(node.body, \"for\"),\n      ForInStatement: node => validateStatement(node.body, \"for\"),\n      ForOfStatement: node => validateStatement(node.body, \"for\")\n    };\n  }\n};","map":{"version":3,"names":["POSITION_SCHEMA","enum","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","overrides","if","else","while","do","for","additionalProperties","messages","expectNoLinebreak","expectLinebreak","create","context","sourceCode","getSourceCode","getOption","keywordName","options","validateStatement","node","option","tokenBefore","getTokenBefore","loc","end","line","start","report","messageId","fix","fixer","insertTextBefore","getText","slice","range","trim","replaceTextRange","IfStatement","consequent","alternate","WhileStatement","body","DoWhileStatement","ForStatement","ForInStatement","ForOfStatement"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/nonblock-statement-body-position.js"],"sourcesContent":["/**\n * @fileoverview enforce the location of single-line statements\n * @author Teddy Katz\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst POSITION_SCHEMA = { enum: [\"beside\", \"below\", \"any\"] };\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce the location of single-line statements\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/nonblock-statement-body-position\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            POSITION_SCHEMA,\n            {\n                properties: {\n                    overrides: {\n                        properties: {\n                            if: POSITION_SCHEMA,\n                            else: POSITION_SCHEMA,\n                            while: POSITION_SCHEMA,\n                            do: POSITION_SCHEMA,\n                            for: POSITION_SCHEMA\n                        },\n                        additionalProperties: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            expectNoLinebreak: \"Expected no linebreak before this statement.\",\n            expectLinebreak: \"Expected a linebreak before this statement.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        //----------------------------------------------------------------------\n        // Helpers\n        //----------------------------------------------------------------------\n\n        /**\n         * Gets the applicable preference for a particular keyword\n         * @param {string} keywordName The name of a keyword, e.g. 'if'\n         * @returns {string} The applicable option for the keyword, e.g. 'beside'\n         */\n        function getOption(keywordName) {\n            return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] ||\n                context.options[0] ||\n                \"beside\";\n        }\n\n        /**\n         * Validates the location of a single-line statement\n         * @param {ASTNode} node The single-line statement\n         * @param {string} keywordName The applicable keyword name for the single-line statement\n         * @returns {void}\n         */\n        function validateStatement(node, keywordName) {\n            const option = getOption(keywordName);\n\n            if (node.type === \"BlockStatement\" || option === \"any\") {\n                return;\n            }\n\n            const tokenBefore = sourceCode.getTokenBefore(node);\n\n            if (tokenBefore.loc.end.line === node.loc.start.line && option === \"below\") {\n                context.report({\n                    node,\n                    messageId: \"expectLinebreak\",\n                    fix: fixer => fixer.insertTextBefore(node, \"\\n\")\n                });\n            } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === \"beside\") {\n                context.report({\n                    node,\n                    messageId: \"expectNoLinebreak\",\n                    fix(fixer) {\n                        if (sourceCode.getText().slice(tokenBefore.range[1], node.range[0]).trim()) {\n                            return null;\n                        }\n                        return fixer.replaceTextRange([tokenBefore.range[1], node.range[0]], \" \");\n                    }\n                });\n            }\n        }\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n\n        return {\n            IfStatement(node) {\n                validateStatement(node.consequent, \"if\");\n\n                // Check the `else` node, but don't check 'else if' statements.\n                if (node.alternate && node.alternate.type !== \"IfStatement\") {\n                    validateStatement(node.alternate, \"else\");\n                }\n            },\n            WhileStatement: node => validateStatement(node.body, \"while\"),\n            DoWhileStatement: node => validateStatement(node.body, \"do\"),\n            ForStatement: node => validateStatement(node.body, \"for\"),\n            ForInStatement: node => validateStatement(node.body, \"for\"),\n            ForOfStatement: node => validateStatement(node.body, \"for\")\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}