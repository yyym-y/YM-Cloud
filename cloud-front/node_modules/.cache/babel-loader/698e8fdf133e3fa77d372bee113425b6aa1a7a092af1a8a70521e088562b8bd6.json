{"ast":null,"code":"/**\n * @fileoverview A rule to control the style of variable initializations.\n * @author Colin Ihrig\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a for loop.\n * @param {ASTNode} block A node to check.\n * @returns {boolean} `true` when the node is a for loop.\n */\nfunction isForLoop(block) {\n  return block.type === \"ForInStatement\" || block.type === \"ForOfStatement\" || block.type === \"ForStatement\";\n}\n\n/**\n * Checks whether or not a given declarator node has its initializer.\n * @param {ASTNode} node A declarator node to check.\n * @returns {boolean} `true` when the node has its initializer.\n */\nfunction isInitialized(node) {\n  const declaration = node.parent;\n  const block = declaration.parent;\n  if (isForLoop(block)) {\n    if (block.type === \"ForStatement\") {\n      return block.init === declaration;\n    }\n    return block.left === declaration;\n  }\n  return Boolean(node.init);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require or disallow initialization in variable declarations\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/init-declarations\"\n    },\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }, {\n          type: \"object\",\n          properties: {\n            ignoreForLoopInit: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      initialized: \"Variable '{{idName}}' should be initialized on declaration.\",\n      notInitialized: \"Variable '{{idName}}' should not be initialized on declaration.\"\n    }\n  },\n  create(context) {\n    const MODE_ALWAYS = \"always\",\n      MODE_NEVER = \"never\";\n    const mode = context.options[0] || MODE_ALWAYS;\n    const params = context.options[1] || {};\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      \"VariableDeclaration:exit\"(node) {\n        const kind = node.kind,\n          declarations = node.declarations;\n        for (let i = 0; i < declarations.length; ++i) {\n          const declaration = declarations[i],\n            id = declaration.id,\n            initialized = isInitialized(declaration),\n            isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);\n          let messageId = \"\";\n          if (mode === MODE_ALWAYS && !initialized) {\n            messageId = \"initialized\";\n          } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {\n            messageId = \"notInitialized\";\n          }\n          if (id.type === \"Identifier\" && messageId) {\n            context.report({\n              node: declaration,\n              messageId,\n              data: {\n                idName: id.name\n              }\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["isForLoop","block","type","isInitialized","node","declaration","parent","init","left","Boolean","module","exports","meta","docs","description","category","recommended","url","schema","anyOf","items","enum","minItems","maxItems","properties","ignoreForLoopInit","additionalProperties","messages","initialized","notInitialized","create","context","MODE_ALWAYS","MODE_NEVER","mode","options","params","VariableDeclaration:exit","kind","declarations","i","length","id","isIgnoredForLoop","messageId","report","data","idName","name"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/init-declarations.js"],"sourcesContent":["/**\n * @fileoverview A rule to control the style of variable initializations.\n * @author Colin Ihrig\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a for loop.\n * @param {ASTNode} block A node to check.\n * @returns {boolean} `true` when the node is a for loop.\n */\nfunction isForLoop(block) {\n    return block.type === \"ForInStatement\" ||\n    block.type === \"ForOfStatement\" ||\n    block.type === \"ForStatement\";\n}\n\n/**\n * Checks whether or not a given declarator node has its initializer.\n * @param {ASTNode} node A declarator node to check.\n * @returns {boolean} `true` when the node has its initializer.\n */\nfunction isInitialized(node) {\n    const declaration = node.parent;\n    const block = declaration.parent;\n\n    if (isForLoop(block)) {\n        if (block.type === \"ForStatement\") {\n            return block.init === declaration;\n        }\n        return block.left === declaration;\n    }\n    return Boolean(node.init);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require or disallow initialization in variable declarations\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/init-declarations\"\n        },\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                ignoreForLoopInit: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n        messages: {\n            initialized: \"Variable '{{idName}}' should be initialized on declaration.\",\n            notInitialized: \"Variable '{{idName}}' should not be initialized on declaration.\"\n        }\n    },\n\n    create(context) {\n\n        const MODE_ALWAYS = \"always\",\n            MODE_NEVER = \"never\";\n\n        const mode = context.options[0] || MODE_ALWAYS;\n        const params = context.options[1] || {};\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            \"VariableDeclaration:exit\"(node) {\n\n                const kind = node.kind,\n                    declarations = node.declarations;\n\n                for (let i = 0; i < declarations.length; ++i) {\n                    const declaration = declarations[i],\n                        id = declaration.id,\n                        initialized = isInitialized(declaration),\n                        isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);\n                    let messageId = \"\";\n\n                    if (mode === MODE_ALWAYS && !initialized) {\n                        messageId = \"initialized\";\n                    } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {\n                        messageId = \"notInitialized\";\n                    }\n\n                    if (id.type === \"Identifier\" && messageId) {\n                        context.report({\n                            node: declaration,\n                            messageId,\n                            data: {\n                                idName: id.name\n                            }\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}