{"ast":null,"code":"/**\n * @fileoverview Common helpers for naming of plugins, formatters and configs\n */\n\"use strict\";\n\nconst NAMESPACE_REGEX = /^@.*\\//iu;\n\n/**\n * Brings package name to correct format based on prefix\n * @param {string} name The name of the package.\n * @param {string} prefix Can be either \"eslint-plugin\", \"eslint-config\" or \"eslint-formatter\"\n * @returns {string} Normalized name of the package\n * @private\n */\nfunction normalizePackageName(name, prefix) {\n  let normalizedName = name;\n\n  /**\n   * On Windows, name can come in with Windows slashes instead of Unix slashes.\n   * Normalize to Unix first to avoid errors later on.\n   * https://github.com/eslint/eslint/issues/5644\n   */\n  if (normalizedName.includes(\"\\\\\")) {\n    normalizedName = normalizedName.replace(/\\\\/gu, \"/\");\n  }\n  if (normalizedName.charAt(0) === \"@\") {\n    /**\n     * it's a scoped package\n     * package name is the prefix, or just a username\n     */\n    const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:${prefix})?)?$`, \"u\"),\n      scopedPackageNameRegex = new RegExp(`^${prefix}(-|$)`, \"u\");\n    if (scopedPackageShortcutRegex.test(normalizedName)) {\n      normalizedName = normalizedName.replace(scopedPackageShortcutRegex, `$1/${prefix}`);\n    } else if (!scopedPackageNameRegex.test(normalizedName.split(\"/\")[1])) {\n      /**\n       * for scoped packages, insert the prefix after the first / unless\n       * the path is already @scope/eslint or @scope/eslint-xxx-yyy\n       */\n      normalizedName = normalizedName.replace(/^@([^/]+)\\/(.*)$/u, `@$1/${prefix}-$2`);\n    }\n  } else if (!normalizedName.startsWith(`${prefix}-`)) {\n    normalizedName = `${prefix}-${normalizedName}`;\n  }\n  return normalizedName;\n}\n\n/**\n * Removes the prefix from a fullname.\n * @param {string} fullname The term which may have the prefix.\n * @param {string} prefix The prefix to remove.\n * @returns {string} The term without prefix.\n */\nfunction getShorthandName(fullname, prefix) {\n  if (fullname[0] === \"@\") {\n    let matchResult = new RegExp(`^(@[^/]+)/${prefix}$`, \"u\").exec(fullname);\n    if (matchResult) {\n      return matchResult[1];\n    }\n    matchResult = new RegExp(`^(@[^/]+)/${prefix}-(.+)$`, \"u\").exec(fullname);\n    if (matchResult) {\n      return `${matchResult[1]}/${matchResult[2]}`;\n    }\n  } else if (fullname.startsWith(`${prefix}-`)) {\n    return fullname.slice(prefix.length + 1);\n  }\n  return fullname;\n}\n\n/**\n * Gets the scope (namespace) of a term.\n * @param {string} term The term which may have the namespace.\n * @returns {string} The namespace of the term if it has one.\n */\nfunction getNamespaceFromTerm(term) {\n  const match = term.match(NAMESPACE_REGEX);\n  return match ? match[0] : \"\";\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  normalizePackageName,\n  getShorthandName,\n  getNamespaceFromTerm\n};","map":{"version":3,"names":["NAMESPACE_REGEX","normalizePackageName","name","prefix","normalizedName","includes","replace","charAt","scopedPackageShortcutRegex","RegExp","scopedPackageNameRegex","test","split","startsWith","getShorthandName","fullname","matchResult","exec","slice","length","getNamespaceFromTerm","term","match","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/@eslint/eslintrc/lib/shared/naming.js"],"sourcesContent":["/**\n * @fileoverview Common helpers for naming of plugins, formatters and configs\n */\n\"use strict\";\n\nconst NAMESPACE_REGEX = /^@.*\\//iu;\n\n/**\n * Brings package name to correct format based on prefix\n * @param {string} name The name of the package.\n * @param {string} prefix Can be either \"eslint-plugin\", \"eslint-config\" or \"eslint-formatter\"\n * @returns {string} Normalized name of the package\n * @private\n */\nfunction normalizePackageName(name, prefix) {\n    let normalizedName = name;\n\n    /**\n     * On Windows, name can come in with Windows slashes instead of Unix slashes.\n     * Normalize to Unix first to avoid errors later on.\n     * https://github.com/eslint/eslint/issues/5644\n     */\n    if (normalizedName.includes(\"\\\\\")) {\n        normalizedName = normalizedName.replace(/\\\\/gu, \"/\");\n    }\n\n    if (normalizedName.charAt(0) === \"@\") {\n\n        /**\n         * it's a scoped package\n         * package name is the prefix, or just a username\n         */\n        const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:${prefix})?)?$`, \"u\"),\n            scopedPackageNameRegex = new RegExp(`^${prefix}(-|$)`, \"u\");\n\n        if (scopedPackageShortcutRegex.test(normalizedName)) {\n            normalizedName = normalizedName.replace(scopedPackageShortcutRegex, `$1/${prefix}`);\n        } else if (!scopedPackageNameRegex.test(normalizedName.split(\"/\")[1])) {\n\n            /**\n             * for scoped packages, insert the prefix after the first / unless\n             * the path is already @scope/eslint or @scope/eslint-xxx-yyy\n             */\n            normalizedName = normalizedName.replace(/^@([^/]+)\\/(.*)$/u, `@$1/${prefix}-$2`);\n        }\n    } else if (!normalizedName.startsWith(`${prefix}-`)) {\n        normalizedName = `${prefix}-${normalizedName}`;\n    }\n\n    return normalizedName;\n}\n\n/**\n * Removes the prefix from a fullname.\n * @param {string} fullname The term which may have the prefix.\n * @param {string} prefix The prefix to remove.\n * @returns {string} The term without prefix.\n */\nfunction getShorthandName(fullname, prefix) {\n    if (fullname[0] === \"@\") {\n        let matchResult = new RegExp(`^(@[^/]+)/${prefix}$`, \"u\").exec(fullname);\n\n        if (matchResult) {\n            return matchResult[1];\n        }\n\n        matchResult = new RegExp(`^(@[^/]+)/${prefix}-(.+)$`, \"u\").exec(fullname);\n        if (matchResult) {\n            return `${matchResult[1]}/${matchResult[2]}`;\n        }\n    } else if (fullname.startsWith(`${prefix}-`)) {\n        return fullname.slice(prefix.length + 1);\n    }\n\n    return fullname;\n}\n\n/**\n * Gets the scope (namespace) of a term.\n * @param {string} term The term which may have the namespace.\n * @returns {string} The namespace of the term if it has one.\n */\nfunction getNamespaceFromTerm(term) {\n    const match = term.match(NAMESPACE_REGEX);\n\n    return match ? match[0] : \"\";\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    normalizePackageName,\n    getShorthandName,\n    getNamespaceFromTerm\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,eAAe,GAAG,UAAU;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACC,IAAI,EAAEC,MAAM,EAAE;EACxC,IAAIC,cAAc,GAAGF,IAAI;;EAEzB;AACJ;AACA;AACA;AACA;EACI,IAAIE,cAAc,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC/BD,cAAc,GAAGA,cAAc,CAACE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;EACxD;EAEA,IAAIF,cAAc,CAACG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAElC;AACR;AACA;AACA;IACQ,MAAMC,0BAA0B,GAAG,IAAIC,MAAM,CAAE,mBAAkBN,MAAO,OAAM,EAAE,GAAG,CAAC;MAChFO,sBAAsB,GAAG,IAAID,MAAM,CAAE,IAAGN,MAAO,OAAM,EAAE,GAAG,CAAC;IAE/D,IAAIK,0BAA0B,CAACG,IAAI,CAACP,cAAc,CAAC,EAAE;MACjDA,cAAc,GAAGA,cAAc,CAACE,OAAO,CAACE,0BAA0B,EAAG,MAAKL,MAAO,EAAC,CAAC;IACvF,CAAC,MAAM,IAAI,CAACO,sBAAsB,CAACC,IAAI,CAACP,cAAc,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAEnE;AACZ;AACA;AACA;MACYR,cAAc,GAAGA,cAAc,CAACE,OAAO,CAAC,mBAAmB,EAAG,OAAMH,MAAO,KAAI,CAAC;IACpF;EACJ,CAAC,MAAM,IAAI,CAACC,cAAc,CAACS,UAAU,CAAE,GAAEV,MAAO,GAAE,CAAC,EAAE;IACjDC,cAAc,GAAI,GAAED,MAAO,IAAGC,cAAe,EAAC;EAClD;EAEA,OAAOA,cAAc;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,gBAAgBA,CAACC,QAAQ,EAAEZ,MAAM,EAAE;EACxC,IAAIY,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACrB,IAAIC,WAAW,GAAG,IAAIP,MAAM,CAAE,aAAYN,MAAO,GAAE,EAAE,GAAG,CAAC,CAACc,IAAI,CAACF,QAAQ,CAAC;IAExE,IAAIC,WAAW,EAAE;MACb,OAAOA,WAAW,CAAC,CAAC,CAAC;IACzB;IAEAA,WAAW,GAAG,IAAIP,MAAM,CAAE,aAAYN,MAAO,QAAO,EAAE,GAAG,CAAC,CAACc,IAAI,CAACF,QAAQ,CAAC;IACzE,IAAIC,WAAW,EAAE;MACb,OAAQ,GAAEA,WAAW,CAAC,CAAC,CAAE,IAAGA,WAAW,CAAC,CAAC,CAAE,EAAC;IAChD;EACJ,CAAC,MAAM,IAAID,QAAQ,CAACF,UAAU,CAAE,GAAEV,MAAO,GAAE,CAAC,EAAE;IAC1C,OAAOY,QAAQ,CAACG,KAAK,CAACf,MAAM,CAACgB,MAAM,GAAG,CAAC,CAAC;EAC5C;EAEA,OAAOJ,QAAQ;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASK,oBAAoBA,CAACC,IAAI,EAAE;EAChC,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAACtB,eAAe,CAAC;EAEzC,OAAOsB,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;AAChC;;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbvB,oBAAoB;EACpBa,gBAAgB;EAChBM;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}