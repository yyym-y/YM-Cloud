{"ast":null,"code":"/**\n * @fileoverview Disallow mixed spaces and tabs for indentation\n * @author Jary Niebur\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow mixed spaces and tabs for indentation\",\n      category: \"Stylistic Issues\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs\"\n    },\n    schema: [{\n      enum: [\"smart-tabs\", true, false]\n    }],\n    messages: {\n      mixedSpacesAndTabs: \"Mixed spaces and tabs.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let smartTabs;\n    switch (context.options[0]) {\n      case true: // Support old syntax, maybe add deprecation warning here\n      case \"smart-tabs\":\n        smartTabs = true;\n        break;\n      default:\n        smartTabs = false;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      \"Program:exit\"(node) {\n        const lines = sourceCode.lines,\n          comments = sourceCode.getAllComments(),\n          ignoredCommentLines = new Set();\n\n        // Add all lines except the first ones.\n        comments.forEach(comment => {\n          for (let i = comment.loc.start.line + 1; i <= comment.loc.end.line; i++) {\n            ignoredCommentLines.add(i);\n          }\n        });\n\n        /*\n         * At least one space followed by a tab\n         * or the reverse before non-tab/-space\n         * characters begin.\n         */\n        let regex = /^(?=( +|\\t+))\\1(?:\\t| )/u;\n        if (smartTabs) {\n          /*\n           * At least one space followed by a tab\n           * before non-tab/-space characters begin.\n           */\n          regex = /^(?=(\\t*))\\1(?=( +))\\2\\t/u;\n        }\n        lines.forEach((line, i) => {\n          const match = regex.exec(line);\n          if (match) {\n            const lineNumber = i + 1;\n            const loc = {\n              start: {\n                line: lineNumber,\n                column: match[0].length - 2\n              },\n              end: {\n                line: lineNumber,\n                column: match[0].length\n              }\n            };\n            if (!ignoredCommentLines.has(lineNumber)) {\n              const containingNode = sourceCode.getNodeByRangeIndex(sourceCode.getIndexFromLoc(loc.start));\n              if (!(containingNode && [\"Literal\", \"TemplateElement\"].includes(containingNode.type))) {\n                context.report({\n                  node,\n                  loc,\n                  messageId: \"mixedSpacesAndTabs\"\n                });\n              }\n            }\n          }\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","enum","messages","mixedSpacesAndTabs","create","context","sourceCode","getSourceCode","smartTabs","options","Program:exit","node","lines","comments","getAllComments","ignoredCommentLines","Set","forEach","comment","i","loc","start","line","end","add","regex","match","exec","lineNumber","column","length","has","containingNode","getNodeByRangeIndex","getIndexFromLoc","includes","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-mixed-spaces-and-tabs.js"],"sourcesContent":["/**\n * @fileoverview Disallow mixed spaces and tabs for indentation\n * @author Jary Niebur\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow mixed spaces and tabs for indentation\",\n            category: \"Stylistic Issues\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs\"\n        },\n\n        schema: [\n            {\n                enum: [\"smart-tabs\", true, false]\n            }\n        ],\n\n        messages: {\n            mixedSpacesAndTabs: \"Mixed spaces and tabs.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        let smartTabs;\n\n        switch (context.options[0]) {\n            case true: // Support old syntax, maybe add deprecation warning here\n            case \"smart-tabs\":\n                smartTabs = true;\n                break;\n            default:\n                smartTabs = false;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            \"Program:exit\"(node) {\n                const lines = sourceCode.lines,\n                    comments = sourceCode.getAllComments(),\n                    ignoredCommentLines = new Set();\n\n                // Add all lines except the first ones.\n                comments.forEach(comment => {\n                    for (let i = comment.loc.start.line + 1; i <= comment.loc.end.line; i++) {\n                        ignoredCommentLines.add(i);\n                    }\n                });\n\n                /*\n                 * At least one space followed by a tab\n                 * or the reverse before non-tab/-space\n                 * characters begin.\n                 */\n                let regex = /^(?=( +|\\t+))\\1(?:\\t| )/u;\n\n                if (smartTabs) {\n\n                    /*\n                     * At least one space followed by a tab\n                     * before non-tab/-space characters begin.\n                     */\n                    regex = /^(?=(\\t*))\\1(?=( +))\\2\\t/u;\n                }\n\n                lines.forEach((line, i) => {\n                    const match = regex.exec(line);\n\n                    if (match) {\n                        const lineNumber = i + 1;\n                        const loc = {\n                            start: {\n                                line: lineNumber,\n                                column: match[0].length - 2\n                            },\n                            end: {\n                                line: lineNumber,\n                                column: match[0].length\n                            }\n                        };\n\n                        if (!ignoredCommentLines.has(lineNumber)) {\n                            const containingNode = sourceCode.getNodeByRangeIndex(sourceCode.getIndexFromLoc(loc.start));\n\n                            if (!(containingNode && [\"Literal\", \"TemplateElement\"].includes(containingNode.type))) {\n                                context.report({\n                                    node,\n                                    loc,\n                                    messageId: \"mixedSpacesAndTabs\"\n                                });\n                            }\n                        }\n                    }\n                });\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,gDAAgD;MAC7DC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,YAAY,EAAE,IAAI,EAAE,KAAK;IACpC,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,kBAAkB,EAAE;IACxB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAE1C,IAAIC,SAAS;IAEb,QAAQH,OAAO,CAACI,OAAO,CAAC,CAAC,CAAC;MACtB,KAAK,IAAI,CAAC,CAAC;MACX,KAAK,YAAY;QACbD,SAAS,GAAG,IAAI;QAChB;MACJ;QACIA,SAAS,GAAG,KAAK;IACzB;;IAEA;IACA;IACA;;IAEA,OAAO;MAEH,cAAcE,CAACC,IAAI,EAAE;QACjB,MAAMC,KAAK,GAAGN,UAAU,CAACM,KAAK;UAC1BC,QAAQ,GAAGP,UAAU,CAACQ,cAAc,CAAC,CAAC;UACtCC,mBAAmB,GAAG,IAAIC,GAAG,CAAC,CAAC;;QAEnC;QACAH,QAAQ,CAACI,OAAO,CAACC,OAAO,IAAI;UACxB,KAAK,IAAIC,CAAC,GAAGD,OAAO,CAACE,GAAG,CAACC,KAAK,CAACC,IAAI,GAAG,CAAC,EAAEH,CAAC,IAAID,OAAO,CAACE,GAAG,CAACG,GAAG,CAACD,IAAI,EAAEH,CAAC,EAAE,EAAE;YACrEJ,mBAAmB,CAACS,GAAG,CAACL,CAAC,CAAC;UAC9B;QACJ,CAAC,CAAC;;QAEF;AAChB;AACA;AACA;AACA;QACgB,IAAIM,KAAK,GAAG,0BAA0B;QAEtC,IAAIjB,SAAS,EAAE;UAEX;AACpB;AACA;AACA;UACoBiB,KAAK,GAAG,2BAA2B;QACvC;QAEAb,KAAK,CAACK,OAAO,CAAC,CAACK,IAAI,EAAEH,CAAC,KAAK;UACvB,MAAMO,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACL,IAAI,CAAC;UAE9B,IAAII,KAAK,EAAE;YACP,MAAME,UAAU,GAAGT,CAAC,GAAG,CAAC;YACxB,MAAMC,GAAG,GAAG;cACRC,KAAK,EAAE;gBACHC,IAAI,EAAEM,UAAU;gBAChBC,MAAM,EAAEH,KAAK,CAAC,CAAC,CAAC,CAACI,MAAM,GAAG;cAC9B,CAAC;cACDP,GAAG,EAAE;gBACDD,IAAI,EAAEM,UAAU;gBAChBC,MAAM,EAAEH,KAAK,CAAC,CAAC,CAAC,CAACI;cACrB;YACJ,CAAC;YAED,IAAI,CAACf,mBAAmB,CAACgB,GAAG,CAACH,UAAU,CAAC,EAAE;cACtC,MAAMI,cAAc,GAAG1B,UAAU,CAAC2B,mBAAmB,CAAC3B,UAAU,CAAC4B,eAAe,CAACd,GAAG,CAACC,KAAK,CAAC,CAAC;cAE5F,IAAI,EAAEW,cAAc,IAAI,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAACG,QAAQ,CAACH,cAAc,CAACtC,IAAI,CAAC,CAAC,EAAE;gBACnFW,OAAO,CAAC+B,MAAM,CAAC;kBACXzB,IAAI;kBACJS,GAAG;kBACHiB,SAAS,EAAE;gBACf,CAAC,CAAC;cACN;YACJ;UACJ;QACJ,CAAC,CAAC;MACN;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}