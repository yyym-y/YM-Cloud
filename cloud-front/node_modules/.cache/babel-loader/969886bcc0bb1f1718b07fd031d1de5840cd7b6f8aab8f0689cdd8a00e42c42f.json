{"ast":null,"code":"/**\n * @fileoverview Rule to flag dangling underscores in variable declarations.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow dangling underscores in identifiers\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-underscore-dangle\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        },\n        allowAfterThis: {\n          type: \"boolean\",\n          default: false\n        },\n        allowAfterSuper: {\n          type: \"boolean\",\n          default: false\n        },\n        allowAfterThisConstructor: {\n          type: \"boolean\",\n          default: false\n        },\n        enforceInMethodNames: {\n          type: \"boolean\",\n          default: false\n        },\n        allowFunctionParams: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedUnderscore: \"Unexpected dangling '_' in '{{identifier}}'.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {};\n    const ALLOWED_VARIABLES = options.allow ? options.allow : [];\n    const allowAfterThis = typeof options.allowAfterThis !== \"undefined\" ? options.allowAfterThis : false;\n    const allowAfterSuper = typeof options.allowAfterSuper !== \"undefined\" ? options.allowAfterSuper : false;\n    const allowAfterThisConstructor = typeof options.allowAfterThisConstructor !== \"undefined\" ? options.allowAfterThisConstructor : false;\n    const enforceInMethodNames = typeof options.enforceInMethodNames !== \"undefined\" ? options.enforceInMethodNames : false;\n    const allowFunctionParams = typeof options.allowFunctionParams !== \"undefined\" ? options.allowFunctionParams : true;\n\n    //-------------------------------------------------------------------------\n    // Helpers\n    //-------------------------------------------------------------------------\n\n    /**\n     * Check if identifier is present inside the allowed option\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is present\n     * @private\n     */\n    function isAllowed(identifier) {\n      return ALLOWED_VARIABLES.some(ident => ident === identifier);\n    }\n\n    /**\n     * Check if identifier has a dangling underscore\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is present\n     * @private\n     */\n    function hasDanglingUnderscore(identifier) {\n      const len = identifier.length;\n      return identifier !== \"_\" && (identifier[0] === \"_\" || identifier[len - 1] === \"_\");\n    }\n\n    /**\n     * Check if identifier is a special case member expression\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is a special case\n     * @private\n     */\n    function isSpecialCaseIdentifierForMemberExpression(identifier) {\n      return identifier === \"__proto__\";\n    }\n\n    /**\n     * Check if identifier is a special case variable expression\n     * @param {string} identifier name of the node\n     * @returns {boolean} true if its is a special case\n     * @private\n     */\n    function isSpecialCaseIdentifierInVariableExpression(identifier) {\n      // Checks for the underscore library usage here\n      return identifier === \"_\";\n    }\n\n    /**\n     * Check if a node is a member reference of this.constructor\n     * @param {ASTNode} node node to evaluate\n     * @returns {boolean} true if it is a reference on this.constructor\n     * @private\n     */\n    function isThisConstructorReference(node) {\n      return node.object.type === \"MemberExpression\" && node.object.property.name === \"constructor\" && node.object.object.type === \"ThisExpression\";\n    }\n\n    /**\n     * Check if function parameter has a dangling underscore.\n     * @param {ASTNode} node function node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkForDanglingUnderscoreInFunctionParameters(node) {\n      if (!allowFunctionParams) {\n        node.params.forEach(param => {\n          const {\n            type\n          } = param;\n          let nodeToCheck;\n          if (type === \"RestElement\") {\n            nodeToCheck = param.argument;\n          } else if (type === \"AssignmentPattern\") {\n            nodeToCheck = param.left;\n          } else {\n            nodeToCheck = param;\n          }\n          if (nodeToCheck.type === \"Identifier\") {\n            const identifier = nodeToCheck.name;\n            if (hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n              context.report({\n                node: param,\n                messageId: \"unexpectedUnderscore\",\n                data: {\n                  identifier\n                }\n              });\n            }\n          }\n        });\n      }\n    }\n\n    /**\n     * Check if function has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkForDanglingUnderscoreInFunction(node) {\n      if (node.type === \"FunctionDeclaration\" && node.id) {\n        const identifier = node.id.name;\n        if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n          context.report({\n            node,\n            messageId: \"unexpectedUnderscore\",\n            data: {\n              identifier\n            }\n          });\n        }\n      }\n      checkForDanglingUnderscoreInFunctionParameters(node);\n    }\n\n    /**\n     * Check if variable expression has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkForDanglingUnderscoreInVariableExpression(node) {\n      const identifier = node.id.name;\n      if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {\n        context.report({\n          node,\n          messageId: \"unexpectedUnderscore\",\n          data: {\n            identifier\n          }\n        });\n      }\n    }\n\n    /**\n     * Check if member expression has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkForDanglingUnderscoreInMemberExpression(node) {\n      const identifier = node.property.name,\n        isMemberOfThis = node.object.type === \"ThisExpression\",\n        isMemberOfSuper = node.object.type === \"Super\",\n        isMemberOfThisConstructor = isThisConstructorReference(node);\n      if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && !(isMemberOfThis && allowAfterThis) && !(isMemberOfSuper && allowAfterSuper) && !(isMemberOfThisConstructor && allowAfterThisConstructor) && !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {\n        context.report({\n          node,\n          messageId: \"unexpectedUnderscore\",\n          data: {\n            identifier\n          }\n        });\n      }\n    }\n\n    /**\n     * Check if method declaration or method property has a dangling underscore\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function checkForDanglingUnderscoreInMethod(node) {\n      const identifier = node.key.name;\n      const isMethod = node.type === \"MethodDefinition\" || node.type === \"Property\" && node.method;\n      if (typeof identifier !== \"undefined\" && enforceInMethodNames && isMethod && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n        context.report({\n          node,\n          messageId: \"unexpectedUnderscore\",\n          data: {\n            identifier\n          }\n        });\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      FunctionDeclaration: checkForDanglingUnderscoreInFunction,\n      VariableDeclarator: checkForDanglingUnderscoreInVariableExpression,\n      MemberExpression: checkForDanglingUnderscoreInMemberExpression,\n      MethodDefinition: checkForDanglingUnderscoreInMethod,\n      Property: checkForDanglingUnderscoreInMethod,\n      FunctionExpression: checkForDanglingUnderscoreInFunction,\n      ArrowFunctionExpression: checkForDanglingUnderscoreInFunction\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allow","items","allowAfterThis","default","allowAfterSuper","allowAfterThisConstructor","enforceInMethodNames","allowFunctionParams","additionalProperties","messages","unexpectedUnderscore","create","context","options","ALLOWED_VARIABLES","isAllowed","identifier","some","ident","hasDanglingUnderscore","len","length","isSpecialCaseIdentifierForMemberExpression","isSpecialCaseIdentifierInVariableExpression","isThisConstructorReference","node","object","property","name","checkForDanglingUnderscoreInFunctionParameters","params","forEach","param","nodeToCheck","argument","left","report","messageId","data","checkForDanglingUnderscoreInFunction","id","checkForDanglingUnderscoreInVariableExpression","checkForDanglingUnderscoreInMemberExpression","isMemberOfThis","isMemberOfSuper","isMemberOfThisConstructor","checkForDanglingUnderscoreInMethod","key","isMethod","method","FunctionDeclaration","VariableDeclarator","MemberExpression","MethodDefinition","Property","FunctionExpression","ArrowFunctionExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-underscore-dangle.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag dangling underscores in variable declarations.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow dangling underscores in identifiers\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-underscore-dangle\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    allowAfterThis: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowAfterSuper: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowAfterThisConstructor: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    enforceInMethodNames: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowFunctionParams: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedUnderscore: \"Unexpected dangling '_' in '{{identifier}}'.\"\n        }\n    },\n\n    create(context) {\n\n        const options = context.options[0] || {};\n        const ALLOWED_VARIABLES = options.allow ? options.allow : [];\n        const allowAfterThis = typeof options.allowAfterThis !== \"undefined\" ? options.allowAfterThis : false;\n        const allowAfterSuper = typeof options.allowAfterSuper !== \"undefined\" ? options.allowAfterSuper : false;\n        const allowAfterThisConstructor = typeof options.allowAfterThisConstructor !== \"undefined\" ? options.allowAfterThisConstructor : false;\n        const enforceInMethodNames = typeof options.enforceInMethodNames !== \"undefined\" ? options.enforceInMethodNames : false;\n        const allowFunctionParams = typeof options.allowFunctionParams !== \"undefined\" ? options.allowFunctionParams : true;\n\n        //-------------------------------------------------------------------------\n        // Helpers\n        //-------------------------------------------------------------------------\n\n        /**\n         * Check if identifier is present inside the allowed option\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is present\n         * @private\n         */\n        function isAllowed(identifier) {\n            return ALLOWED_VARIABLES.some(ident => ident === identifier);\n        }\n\n        /**\n         * Check if identifier has a dangling underscore\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is present\n         * @private\n         */\n        function hasDanglingUnderscore(identifier) {\n            const len = identifier.length;\n\n            return identifier !== \"_\" && (identifier[0] === \"_\" || identifier[len - 1] === \"_\");\n        }\n\n        /**\n         * Check if identifier is a special case member expression\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is a special case\n         * @private\n         */\n        function isSpecialCaseIdentifierForMemberExpression(identifier) {\n            return identifier === \"__proto__\";\n        }\n\n        /**\n         * Check if identifier is a special case variable expression\n         * @param {string} identifier name of the node\n         * @returns {boolean} true if its is a special case\n         * @private\n         */\n        function isSpecialCaseIdentifierInVariableExpression(identifier) {\n\n            // Checks for the underscore library usage here\n            return identifier === \"_\";\n        }\n\n        /**\n         * Check if a node is a member reference of this.constructor\n         * @param {ASTNode} node node to evaluate\n         * @returns {boolean} true if it is a reference on this.constructor\n         * @private\n         */\n        function isThisConstructorReference(node) {\n            return node.object.type === \"MemberExpression\" &&\n                node.object.property.name === \"constructor\" &&\n                node.object.object.type === \"ThisExpression\";\n        }\n\n        /**\n         * Check if function parameter has a dangling underscore.\n         * @param {ASTNode} node function node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInFunctionParameters(node) {\n            if (!allowFunctionParams) {\n                node.params.forEach(param => {\n                    const { type } = param;\n                    let nodeToCheck;\n\n                    if (type === \"RestElement\") {\n                        nodeToCheck = param.argument;\n                    } else if (type === \"AssignmentPattern\") {\n                        nodeToCheck = param.left;\n                    } else {\n                        nodeToCheck = param;\n                    }\n\n                    if (nodeToCheck.type === \"Identifier\") {\n                        const identifier = nodeToCheck.name;\n\n                        if (hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n                            context.report({\n                                node: param,\n                                messageId: \"unexpectedUnderscore\",\n                                data: {\n                                    identifier\n                                }\n                            });\n                        }\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if function has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInFunction(node) {\n            if (node.type === \"FunctionDeclaration\" && node.id) {\n                const identifier = node.id.name;\n\n                if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedUnderscore\",\n                        data: {\n                            identifier\n                        }\n                    });\n                }\n            }\n            checkForDanglingUnderscoreInFunctionParameters(node);\n        }\n\n        /**\n         * Check if variable expression has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInVariableExpression(node) {\n            const identifier = node.id.name;\n\n            if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) &&\n                !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnderscore\",\n                    data: {\n                        identifier\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if member expression has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInMemberExpression(node) {\n            const identifier = node.property.name,\n                isMemberOfThis = node.object.type === \"ThisExpression\",\n                isMemberOfSuper = node.object.type === \"Super\",\n                isMemberOfThisConstructor = isThisConstructorReference(node);\n\n            if (typeof identifier !== \"undefined\" && hasDanglingUnderscore(identifier) &&\n                !(isMemberOfThis && allowAfterThis) &&\n                !(isMemberOfSuper && allowAfterSuper) &&\n                !(isMemberOfThisConstructor && allowAfterThisConstructor) &&\n                !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnderscore\",\n                    data: {\n                        identifier\n                    }\n                });\n            }\n        }\n\n        /**\n         * Check if method declaration or method property has a dangling underscore\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkForDanglingUnderscoreInMethod(node) {\n            const identifier = node.key.name;\n            const isMethod = node.type === \"MethodDefinition\" || node.type === \"Property\" && node.method;\n\n            if (typeof identifier !== \"undefined\" && enforceInMethodNames && isMethod && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnderscore\",\n                    data: {\n                        identifier\n                    }\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: checkForDanglingUnderscoreInFunction,\n            VariableDeclarator: checkForDanglingUnderscoreInVariableExpression,\n            MemberExpression: checkForDanglingUnderscoreInMemberExpression,\n            MethodDefinition: checkForDanglingUnderscoreInMethod,\n            Property: checkForDanglingUnderscoreInMethod,\n            FunctionExpression: checkForDanglingUnderscoreInFunction,\n            ArrowFunctionExpression: checkForDanglingUnderscoreInFunction\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}