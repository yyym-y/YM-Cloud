{"ast":null,"code":"/**\n * @fileoverview Rule to disallow if as the only statement in an else block\n * @author Brandon Mills\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `if` statements as the only statement in `else` blocks\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-lonely-if\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unexpectedLonelyIf: \"Unexpected if as the only statement in an else block.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      IfStatement(node) {\n        const ancestors = context.getAncestors(),\n          parent = ancestors.pop(),\n          grandparent = ancestors.pop();\n        if (parent && parent.type === \"BlockStatement\" && parent.body.length === 1 && grandparent && grandparent.type === \"IfStatement\" && parent === grandparent.alternate) {\n          context.report({\n            node,\n            messageId: \"unexpectedLonelyIf\",\n            fix(fixer) {\n              const openingElseCurly = sourceCode.getFirstToken(parent);\n              const closingElseCurly = sourceCode.getLastToken(parent);\n              const elseKeyword = sourceCode.getTokenBefore(openingElseCurly);\n              const tokenAfterElseBlock = sourceCode.getTokenAfter(closingElseCurly);\n              const lastIfToken = sourceCode.getLastToken(node.consequent);\n              const sourceText = sourceCode.getText();\n              if (sourceText.slice(openingElseCurly.range[1], node.range[0]).trim() || sourceText.slice(node.range[1], closingElseCurly.range[0]).trim()) {\n                // Don't fix if there are any non-whitespace characters interfering (e.g. comments)\n                return null;\n              }\n              if (node.consequent.type !== \"BlockStatement\" && lastIfToken.value !== \";\" && tokenAfterElseBlock && (node.consequent.loc.end.line === tokenAfterElseBlock.loc.start.line || /^[([/+`-]/u.test(tokenAfterElseBlock.value) || lastIfToken.value === \"++\" || lastIfToken.value === \"--\")) {\n                /*\n                 * If the `if` statement has no block, and is not followed by a semicolon, make sure that fixing\n                 * the issue would not change semantics due to ASI. If this would happen, don't do a fix.\n                 */\n                return null;\n              }\n              return fixer.replaceTextRange([openingElseCurly.range[0], closingElseCurly.range[1]], (elseKeyword.range[1] === openingElseCurly.range[0] ? \" \" : \"\") + sourceCode.getText(node));\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","unexpectedLonelyIf","create","context","sourceCode","getSourceCode","IfStatement","node","ancestors","getAncestors","parent","pop","grandparent","body","length","alternate","report","messageId","fix","fixer","openingElseCurly","getFirstToken","closingElseCurly","getLastToken","elseKeyword","getTokenBefore","tokenAfterElseBlock","getTokenAfter","lastIfToken","consequent","sourceText","getText","slice","range","trim","value","loc","end","line","start","test","replaceTextRange"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-lonely-if.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow if as the only statement in an else block\n * @author Brandon Mills\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `if` statements as the only statement in `else` blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-lonely-if\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            unexpectedLonelyIf: \"Unexpected if as the only statement in an else block.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n            IfStatement(node) {\n                const ancestors = context.getAncestors(),\n                    parent = ancestors.pop(),\n                    grandparent = ancestors.pop();\n\n                if (parent && parent.type === \"BlockStatement\" &&\n                        parent.body.length === 1 && grandparent &&\n                        grandparent.type === \"IfStatement\" &&\n                        parent === grandparent.alternate) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedLonelyIf\",\n                        fix(fixer) {\n                            const openingElseCurly = sourceCode.getFirstToken(parent);\n                            const closingElseCurly = sourceCode.getLastToken(parent);\n                            const elseKeyword = sourceCode.getTokenBefore(openingElseCurly);\n                            const tokenAfterElseBlock = sourceCode.getTokenAfter(closingElseCurly);\n                            const lastIfToken = sourceCode.getLastToken(node.consequent);\n                            const sourceText = sourceCode.getText();\n\n                            if (sourceText.slice(openingElseCurly.range[1],\n                                node.range[0]).trim() || sourceText.slice(node.range[1], closingElseCurly.range[0]).trim()) {\n\n                                // Don't fix if there are any non-whitespace characters interfering (e.g. comments)\n                                return null;\n                            }\n\n                            if (\n                                node.consequent.type !== \"BlockStatement\" && lastIfToken.value !== \";\" && tokenAfterElseBlock &&\n                                (\n                                    node.consequent.loc.end.line === tokenAfterElseBlock.loc.start.line ||\n                                    /^[([/+`-]/u.test(tokenAfterElseBlock.value) ||\n                                    lastIfToken.value === \"++\" ||\n                                    lastIfToken.value === \"--\"\n                                )\n                            ) {\n\n                                /*\n                                 * If the `if` statement has no block, and is not followed by a semicolon, make sure that fixing\n                                 * the issue would not change semantics due to ASI. If this would happen, don't do a fix.\n                                 */\n                                return null;\n                            }\n\n                            return fixer.replaceTextRange(\n                                [openingElseCurly.range[0], closingElseCurly.range[1]],\n                                (elseKeyword.range[1] === openingElseCurly.range[0] ? \" \" : \"\") + sourceCode.getText(node)\n                            );\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,iEAAiE;MAC9EC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE,MAAM;IAEfC,QAAQ,EAAE;MACNC,kBAAkB,EAAE;IACxB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAE1C,OAAO;MACHC,WAAWA,CAACC,IAAI,EAAE;QACd,MAAMC,SAAS,GAAGL,OAAO,CAACM,YAAY,CAAC,CAAC;UACpCC,MAAM,GAAGF,SAAS,CAACG,GAAG,CAAC,CAAC;UACxBC,WAAW,GAAGJ,SAAS,CAACG,GAAG,CAAC,CAAC;QAEjC,IAAID,MAAM,IAAIA,MAAM,CAAClB,IAAI,KAAK,gBAAgB,IACtCkB,MAAM,CAACG,IAAI,CAACC,MAAM,KAAK,CAAC,IAAIF,WAAW,IACvCA,WAAW,CAACpB,IAAI,KAAK,aAAa,IAClCkB,MAAM,KAAKE,WAAW,CAACG,SAAS,EAAE;UACtCZ,OAAO,CAACa,MAAM,CAAC;YACXT,IAAI;YACJU,SAAS,EAAE,oBAAoB;YAC/BC,GAAGA,CAACC,KAAK,EAAE;cACP,MAAMC,gBAAgB,GAAGhB,UAAU,CAACiB,aAAa,CAACX,MAAM,CAAC;cACzD,MAAMY,gBAAgB,GAAGlB,UAAU,CAACmB,YAAY,CAACb,MAAM,CAAC;cACxD,MAAMc,WAAW,GAAGpB,UAAU,CAACqB,cAAc,CAACL,gBAAgB,CAAC;cAC/D,MAAMM,mBAAmB,GAAGtB,UAAU,CAACuB,aAAa,CAACL,gBAAgB,CAAC;cACtE,MAAMM,WAAW,GAAGxB,UAAU,CAACmB,YAAY,CAAChB,IAAI,CAACsB,UAAU,CAAC;cAC5D,MAAMC,UAAU,GAAG1B,UAAU,CAAC2B,OAAO,CAAC,CAAC;cAEvC,IAAID,UAAU,CAACE,KAAK,CAACZ,gBAAgB,CAACa,KAAK,CAAC,CAAC,CAAC,EAC1C1B,IAAI,CAAC0B,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,IAAIJ,UAAU,CAACE,KAAK,CAACzB,IAAI,CAAC0B,KAAK,CAAC,CAAC,CAAC,EAAEX,gBAAgB,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,EAAE;gBAE5F;gBACA,OAAO,IAAI;cACf;cAEA,IACI3B,IAAI,CAACsB,UAAU,CAACrC,IAAI,KAAK,gBAAgB,IAAIoC,WAAW,CAACO,KAAK,KAAK,GAAG,IAAIT,mBAAmB,KAEzFnB,IAAI,CAACsB,UAAU,CAACO,GAAG,CAACC,GAAG,CAACC,IAAI,KAAKZ,mBAAmB,CAACU,GAAG,CAACG,KAAK,CAACD,IAAI,IACnE,YAAY,CAACE,IAAI,CAACd,mBAAmB,CAACS,KAAK,CAAC,IAC5CP,WAAW,CAACO,KAAK,KAAK,IAAI,IAC1BP,WAAW,CAACO,KAAK,KAAK,IAAI,CAC7B,EACH;gBAEE;AAChC;AACA;AACA;gBACgC,OAAO,IAAI;cACf;cAEA,OAAOhB,KAAK,CAACsB,gBAAgB,CACzB,CAACrB,gBAAgB,CAACa,KAAK,CAAC,CAAC,CAAC,EAAEX,gBAAgB,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC,EACtD,CAACT,WAAW,CAACS,KAAK,CAAC,CAAC,CAAC,KAAKb,gBAAgB,CAACa,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,IAAI7B,UAAU,CAAC2B,OAAO,CAACxB,IAAI,CAC7F,CAAC;YACL;UACJ,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}