{"ast":null,"code":"/**\n * @fileoverview Tracks performance of individual rules.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n/**\n * Align the string to left\n * @param {string} str string to evaluate\n * @param {int} len length of the string\n * @param {string} ch delimiter character\n * @returns {string} modified string\n * @private\n */\nrequire(\"core-js/modules/es.array.push.js\");\nfunction alignLeft(str, len, ch) {\n  return str + new Array(len - str.length + 1).join(ch || \" \");\n}\n\n/* istanbul ignore next */\n/**\n * Align the string to right\n * @param {string} str string to evaluate\n * @param {int} len length of the string\n * @param {string} ch delimiter character\n * @returns {string} modified string\n * @private\n */\nfunction alignRight(str, len, ch) {\n  return new Array(len - str.length + 1).join(ch || \" \") + str;\n}\n\n//------------------------------------------------------------------------------\n// Module definition\n//------------------------------------------------------------------------------\n\nconst enabled = !!process.env.TIMING;\nconst HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];\nconst ALIGN = [alignLeft, alignRight, alignRight];\n\n/**\n * Decide how many rules to show in the output list.\n * @returns {number} the number of rules to show\n */\nfunction getListSize() {\n  const MINIMUM_SIZE = 10;\n  if (typeof process.env.TIMING !== \"string\") {\n    return MINIMUM_SIZE;\n  }\n  if (process.env.TIMING.toLowerCase() === \"all\") {\n    return Number.POSITIVE_INFINITY;\n  }\n  const TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(process.env.TIMING, 10);\n  return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;\n}\n\n/* istanbul ignore next */\n/**\n * display the data\n * @param {Object} data Data object to be displayed\n * @returns {void} prints modified string with console.log\n * @private\n */\nfunction display(data) {\n  let total = 0;\n  const rows = Object.keys(data).map(key => {\n    const time = data[key];\n    total += time;\n    return [key, time];\n  }).sort((a, b) => b[1] - a[1]).slice(0, getListSize());\n  rows.forEach(row => {\n    row.push(`${(row[1] * 100 / total).toFixed(1)}%`);\n    row[1] = row[1].toFixed(3);\n  });\n  rows.unshift(HEADERS);\n  const widths = [];\n  rows.forEach(row => {\n    const len = row.length;\n    for (let i = 0; i < len; i++) {\n      const n = row[i].length;\n      if (!widths[i] || n > widths[i]) {\n        widths[i] = n;\n      }\n    }\n  });\n  const table = rows.map(row => row.map((cell, index) => ALIGN[index](cell, widths[index])).join(\" | \"));\n  table.splice(1, 0, widths.map((width, index) => {\n    const extraAlignment = index !== 0 && index !== widths.length - 1 ? 2 : 1;\n    return ALIGN[index](\":\", width + extraAlignment, \"-\");\n  }).join(\"|\"));\n  console.log(table.join(\"\\n\")); // eslint-disable-line no-console\n}\n\n/* istanbul ignore next */\nmodule.exports = function () {\n  const data = Object.create(null);\n\n  /**\n   * Time the run\n   * @param {*} key key from the data object\n   * @param {Function} fn function to be called\n   * @returns {Function} function to be executed\n   * @private\n   */\n  function time(key, fn) {\n    if (typeof data[key] === \"undefined\") {\n      data[key] = 0;\n    }\n    return function (...args) {\n      let t = process.hrtime();\n      fn(...args);\n      t = process.hrtime(t);\n      data[key] += t[0] * 1e3 + t[1] / 1e6;\n    };\n  }\n  if (enabled) {\n    process.on(\"exit\", () => {\n      display(data);\n    });\n  }\n  return {\n    time,\n    enabled,\n    getListSize\n  };\n}();","map":{"version":3,"names":["require","alignLeft","str","len","ch","Array","length","join","alignRight","enabled","process","env","TIMING","HEADERS","ALIGN","getListSize","MINIMUM_SIZE","toLowerCase","Number","POSITIVE_INFINITY","TIMING_ENV_VAR_AS_INTEGER","parseInt","display","data","total","rows","Object","keys","map","key","time","sort","a","b","slice","forEach","row","push","toFixed","unshift","widths","i","n","table","cell","index","splice","width","extraAlignment","console","log","module","exports","create","fn","args","t","hrtime","on"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/linter/timing.js"],"sourcesContent":["/**\n * @fileoverview Tracks performance of individual rules.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n/**\n * Align the string to left\n * @param {string} str string to evaluate\n * @param {int} len length of the string\n * @param {string} ch delimiter character\n * @returns {string} modified string\n * @private\n */\nfunction alignLeft(str, len, ch) {\n    return str + new Array(len - str.length + 1).join(ch || \" \");\n}\n\n/* istanbul ignore next */\n/**\n * Align the string to right\n * @param {string} str string to evaluate\n * @param {int} len length of the string\n * @param {string} ch delimiter character\n * @returns {string} modified string\n * @private\n */\nfunction alignRight(str, len, ch) {\n    return new Array(len - str.length + 1).join(ch || \" \") + str;\n}\n\n//------------------------------------------------------------------------------\n// Module definition\n//------------------------------------------------------------------------------\n\nconst enabled = !!process.env.TIMING;\n\nconst HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];\nconst ALIGN = [alignLeft, alignRight, alignRight];\n\n/**\n * Decide how many rules to show in the output list.\n * @returns {number} the number of rules to show\n */\nfunction getListSize() {\n    const MINIMUM_SIZE = 10;\n\n    if (typeof process.env.TIMING !== \"string\") {\n        return MINIMUM_SIZE;\n    }\n\n    if (process.env.TIMING.toLowerCase() === \"all\") {\n        return Number.POSITIVE_INFINITY;\n    }\n\n    const TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(process.env.TIMING, 10);\n\n    return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;\n}\n\n/* istanbul ignore next */\n/**\n * display the data\n * @param {Object} data Data object to be displayed\n * @returns {void} prints modified string with console.log\n * @private\n */\nfunction display(data) {\n    let total = 0;\n    const rows = Object.keys(data)\n        .map(key => {\n            const time = data[key];\n\n            total += time;\n            return [key, time];\n        })\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, getListSize());\n\n    rows.forEach(row => {\n        row.push(`${(row[1] * 100 / total).toFixed(1)}%`);\n        row[1] = row[1].toFixed(3);\n    });\n\n    rows.unshift(HEADERS);\n\n    const widths = [];\n\n    rows.forEach(row => {\n        const len = row.length;\n\n        for (let i = 0; i < len; i++) {\n            const n = row[i].length;\n\n            if (!widths[i] || n > widths[i]) {\n                widths[i] = n;\n            }\n        }\n    });\n\n    const table = rows.map(row => (\n        row\n            .map((cell, index) => ALIGN[index](cell, widths[index]))\n            .join(\" | \")\n    ));\n\n    table.splice(1, 0, widths.map((width, index) => {\n        const extraAlignment = index !== 0 && index !== widths.length - 1 ? 2 : 1;\n\n        return ALIGN[index](\":\", width + extraAlignment, \"-\");\n    }).join(\"|\"));\n\n    console.log(table.join(\"\\n\")); // eslint-disable-line no-console\n}\n\n/* istanbul ignore next */\nmodule.exports = (function() {\n\n    const data = Object.create(null);\n\n    /**\n     * Time the run\n     * @param {*} key key from the data object\n     * @param {Function} fn function to be called\n     * @returns {Function} function to be executed\n     * @private\n     */\n    function time(key, fn) {\n        if (typeof data[key] === \"undefined\") {\n            data[key] = 0;\n        }\n\n        return function(...args) {\n            let t = process.hrtime();\n\n            fn(...args);\n            t = process.hrtime(t);\n            data[key] += t[0] * 1e3 + t[1] / 1e6;\n        };\n    }\n\n    if (enabled) {\n        process.on(\"exit\", () => {\n            display(data);\n        });\n    }\n\n    return {\n        time,\n        enabled,\n        getListSize\n    };\n\n}());\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}