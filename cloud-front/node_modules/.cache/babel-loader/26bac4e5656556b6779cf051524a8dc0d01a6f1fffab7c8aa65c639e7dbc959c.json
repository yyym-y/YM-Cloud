{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of an lexical declarations inside a case clause\n * @author Erik Arvidsson\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow lexical declarations in case clauses\",\n      category: \"Best Practices\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-case-declarations\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected lexical declaration in case block.\"\n    }\n  },\n  create(context) {\n    /**\n     * Checks whether or not a node is a lexical declaration.\n     * @param {ASTNode} node A direct child statement of a switch case.\n     * @returns {boolean} Whether or not the node is a lexical declaration.\n     */\n    function isLexicalDeclaration(node) {\n      switch (node.type) {\n        case \"FunctionDeclaration\":\n        case \"ClassDeclaration\":\n          return true;\n        case \"VariableDeclaration\":\n          return node.kind !== \"var\";\n        default:\n          return false;\n      }\n    }\n    return {\n      SwitchCase(node) {\n        for (let i = 0; i < node.consequent.length; i++) {\n          const statement = node.consequent[i];\n          if (isLexicalDeclaration(statement)) {\n            context.report({\n              node: statement,\n              messageId: \"unexpected\"\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","isLexicalDeclaration","node","kind","SwitchCase","i","consequent","length","statement","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-case-declarations.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of an lexical declarations inside a case clause\n * @author Erik Arvidsson\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow lexical declarations in case clauses\",\n            category: \"Best Practices\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-case-declarations\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Unexpected lexical declaration in case block.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Checks whether or not a node is a lexical declaration.\n         * @param {ASTNode} node A direct child statement of a switch case.\n         * @returns {boolean} Whether or not the node is a lexical declaration.\n         */\n        function isLexicalDeclaration(node) {\n            switch (node.type) {\n                case \"FunctionDeclaration\":\n                case \"ClassDeclaration\":\n                    return true;\n                case \"VariableDeclaration\":\n                    return node.kind !== \"var\";\n                default:\n                    return false;\n            }\n        }\n\n        return {\n            SwitchCase(node) {\n                for (let i = 0; i < node.consequent.length; i++) {\n                    const statement = node.consequent[i];\n\n                    if (isLexicalDeclaration(statement)) {\n                        context.report({\n                            node: statement,\n                            messageId: \"unexpected\"\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,+CAA+C;MAC5DC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,oBAAoBA,CAACC,IAAI,EAAE;MAChC,QAAQA,IAAI,CAACZ,IAAI;QACb,KAAK,qBAAqB;QAC1B,KAAK,kBAAkB;UACnB,OAAO,IAAI;QACf,KAAK,qBAAqB;UACtB,OAAOY,IAAI,CAACC,IAAI,KAAK,KAAK;QAC9B;UACI,OAAO,KAAK;MACpB;IACJ;IAEA,OAAO;MACHC,UAAUA,CAACF,IAAI,EAAE;QACb,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,UAAU,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;UAC7C,MAAMG,SAAS,GAAGN,IAAI,CAACI,UAAU,CAACD,CAAC,CAAC;UAEpC,IAAIJ,oBAAoB,CAACO,SAAS,CAAC,EAAE;YACjCR,OAAO,CAACS,MAAM,CAAC;cACXP,IAAI,EAAEM,SAAS;cACfE,SAAS,EAAE;YACf,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}