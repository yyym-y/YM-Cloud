{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst resolveFrom = require('resolve-from');\nconst parentModule = require('parent-module');\nmodule.exports = moduleId => {\n  if (typeof moduleId !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  const parentPath = parentModule(__filename);\n  const cwd = parentPath ? path.dirname(parentPath) : __dirname;\n  const filePath = resolveFrom(cwd, moduleId);\n  const oldModule = require.cache[filePath];\n  // Delete itself from module parent\n  if (oldModule && oldModule.parent) {\n    let i = oldModule.parent.children.length;\n    while (i--) {\n      if (oldModule.parent.children[i].id === filePath) {\n        oldModule.parent.children.splice(i, 1);\n      }\n    }\n  }\n  delete require.cache[filePath]; // Delete module from cache\n\n  const parent = require.cache[parentPath]; // If `filePath` and `parentPath` are the same, cache will already be deleted so we won't get a memory leak in next step\n\n  return parent === undefined ? require(filePath) : parent.require(filePath); // In case cache doesn't have parent, fall back to normal require\n};","map":{"version":3,"names":["path","require","resolveFrom","parentModule","module","exports","moduleId","TypeError","parentPath","__filename","cwd","dirname","__dirname","filePath","oldModule","cache","parent","i","children","length","id","splice","undefined"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/import-fresh/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst resolveFrom = require('resolve-from');\nconst parentModule = require('parent-module');\n\nmodule.exports = moduleId => {\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tconst parentPath = parentModule(__filename);\n\n\tconst cwd = parentPath ? path.dirname(parentPath) : __dirname;\n\tconst filePath = resolveFrom(cwd, moduleId);\n\n\tconst oldModule = require.cache[filePath];\n\t// Delete itself from module parent\n\tif (oldModule && oldModule.parent) {\n\t\tlet i = oldModule.parent.children.length;\n\n\t\twhile (i--) {\n\t\t\tif (oldModule.parent.children[i].id === filePath) {\n\t\t\t\toldModule.parent.children.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete require.cache[filePath]; // Delete module from cache\n\n\tconst parent = require.cache[parentPath]; // If `filePath` and `parentPath` are the same, cache will already be deleted so we won't get a memory leak in next step\n\n\treturn parent === undefined ? require(filePath) : parent.require(filePath); // In case cache doesn't have parent, fall back to normal require\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAe,CAAC;AAE7CG,MAAM,CAACC,OAAO,GAAGC,QAAQ,IAAI;EAC5B,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IACjC,MAAM,IAAIC,SAAS,CAAC,mBAAmB,CAAC;EACzC;EAEA,MAAMC,UAAU,GAAGL,YAAY,CAACM,UAAU,CAAC;EAE3C,MAAMC,GAAG,GAAGF,UAAU,GAAGR,IAAI,CAACW,OAAO,CAACH,UAAU,CAAC,GAAGI,SAAS;EAC7D,MAAMC,QAAQ,GAAGX,WAAW,CAACQ,GAAG,EAAEJ,QAAQ,CAAC;EAE3C,MAAMQ,SAAS,GAAGb,OAAO,CAACc,KAAK,CAACF,QAAQ,CAAC;EACzC;EACA,IAAIC,SAAS,IAAIA,SAAS,CAACE,MAAM,EAAE;IAClC,IAAIC,CAAC,GAAGH,SAAS,CAACE,MAAM,CAACE,QAAQ,CAACC,MAAM;IAExC,OAAOF,CAAC,EAAE,EAAE;MACX,IAAIH,SAAS,CAACE,MAAM,CAACE,QAAQ,CAACD,CAAC,CAAC,CAACG,EAAE,KAAKP,QAAQ,EAAE;QACjDC,SAAS,CAACE,MAAM,CAACE,QAAQ,CAACG,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC;MACvC;IACD;EACD;EAEA,OAAOhB,OAAO,CAACc,KAAK,CAACF,QAAQ,CAAC,CAAC,CAAC;;EAEhC,MAAMG,MAAM,GAAGf,OAAO,CAACc,KAAK,CAACP,UAAU,CAAC,CAAC,CAAC;;EAE1C,OAAOQ,MAAM,KAAKM,SAAS,GAAGrB,OAAO,CAACY,QAAQ,CAAC,GAAGG,MAAM,CAACf,OAAO,CAACY,QAAQ,CAAC,CAAC,CAAC;AAC7E,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}