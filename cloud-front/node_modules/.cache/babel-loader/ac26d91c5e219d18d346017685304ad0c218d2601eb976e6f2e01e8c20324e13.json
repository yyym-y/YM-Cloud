{"ast":null,"code":"/**\n * @fileoverview Rule to disallow a negated condition\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow negated conditions\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-negated-condition\"\n    },\n    schema: [],\n    messages: {\n      unexpectedNegated: \"Unexpected negated condition.\"\n    }\n  },\n  create(context) {\n    /**\n     * Determines if a given node is an if-else without a condition on the else\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node has an else without an if.\n     * @private\n     */\n    function hasElseWithoutCondition(node) {\n      return node.alternate && node.alternate.type !== \"IfStatement\";\n    }\n\n    /**\n     * Determines if a given node is a negated unary expression\n     * @param {Object} test The test object to check.\n     * @returns {boolean} True if the node is a negated unary expression.\n     * @private\n     */\n    function isNegatedUnaryExpression(test) {\n      return test.type === \"UnaryExpression\" && test.operator === \"!\";\n    }\n\n    /**\n     * Determines if a given node is a negated binary expression\n     * @param {Test} test The test to check.\n     * @returns {boolean} True if the node is a negated binary expression.\n     * @private\n     */\n    function isNegatedBinaryExpression(test) {\n      return test.type === \"BinaryExpression\" && (test.operator === \"!=\" || test.operator === \"!==\");\n    }\n\n    /**\n     * Determines if a given node has a negated if expression\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node has a negated if expression.\n     * @private\n     */\n    function isNegatedIf(node) {\n      return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n    }\n    return {\n      IfStatement(node) {\n        if (!hasElseWithoutCondition(node)) {\n          return;\n        }\n        if (isNegatedIf(node)) {\n          context.report({\n            node,\n            messageId: \"unexpectedNegated\"\n          });\n        }\n      },\n      ConditionalExpression(node) {\n        if (isNegatedIf(node)) {\n          context.report({\n            node,\n            messageId: \"unexpectedNegated\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpectedNegated","create","context","hasElseWithoutCondition","node","alternate","isNegatedUnaryExpression","test","operator","isNegatedBinaryExpression","isNegatedIf","IfStatement","report","messageId","ConditionalExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-negated-condition.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow a negated condition\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow negated conditions\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-negated-condition\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedNegated: \"Unexpected negated condition.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Determines if a given node is an if-else without a condition on the else\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node has an else without an if.\n         * @private\n         */\n        function hasElseWithoutCondition(node) {\n            return node.alternate && node.alternate.type !== \"IfStatement\";\n        }\n\n        /**\n         * Determines if a given node is a negated unary expression\n         * @param {Object} test The test object to check.\n         * @returns {boolean} True if the node is a negated unary expression.\n         * @private\n         */\n        function isNegatedUnaryExpression(test) {\n            return test.type === \"UnaryExpression\" && test.operator === \"!\";\n        }\n\n        /**\n         * Determines if a given node is a negated binary expression\n         * @param {Test} test The test to check.\n         * @returns {boolean} True if the node is a negated binary expression.\n         * @private\n         */\n        function isNegatedBinaryExpression(test) {\n            return test.type === \"BinaryExpression\" &&\n                (test.operator === \"!=\" || test.operator === \"!==\");\n        }\n\n        /**\n         * Determines if a given node has a negated if expression\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node has a negated if expression.\n         * @private\n         */\n        function isNegatedIf(node) {\n            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n        }\n\n        return {\n            IfStatement(node) {\n                if (!hasElseWithoutCondition(node)) {\n                    return;\n                }\n\n                if (isNegatedIf(node)) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedNegated\"\n                    });\n                }\n            },\n            ConditionalExpression(node) {\n                if (isNegatedIf(node)) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedNegated\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,6BAA6B;MAC1CC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,iBAAiB,EAAE;IACvB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,uBAAuBA,CAACC,IAAI,EAAE;MACnC,OAAOA,IAAI,CAACC,SAAS,IAAID,IAAI,CAACC,SAAS,CAACb,IAAI,KAAK,aAAa;IAClE;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASc,wBAAwBA,CAACC,IAAI,EAAE;MACpC,OAAOA,IAAI,CAACf,IAAI,KAAK,iBAAiB,IAAIe,IAAI,CAACC,QAAQ,KAAK,GAAG;IACnE;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,yBAAyBA,CAACF,IAAI,EAAE;MACrC,OAAOA,IAAI,CAACf,IAAI,KAAK,kBAAkB,KAClCe,IAAI,CAACC,QAAQ,KAAK,IAAI,IAAID,IAAI,CAACC,QAAQ,KAAK,KAAK,CAAC;IAC3D;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASE,WAAWA,CAACN,IAAI,EAAE;MACvB,OAAOE,wBAAwB,CAACF,IAAI,CAACG,IAAI,CAAC,IAAIE,yBAAyB,CAACL,IAAI,CAACG,IAAI,CAAC;IACtF;IAEA,OAAO;MACHI,WAAWA,CAACP,IAAI,EAAE;QACd,IAAI,CAACD,uBAAuB,CAACC,IAAI,CAAC,EAAE;UAChC;QACJ;QAEA,IAAIM,WAAW,CAACN,IAAI,CAAC,EAAE;UACnBF,OAAO,CAACU,MAAM,CAAC;YACXR,IAAI;YACJS,SAAS,EAAE;UACf,CAAC,CAAC;QACN;MACJ,CAAC;MACDC,qBAAqBA,CAACV,IAAI,EAAE;QACxB,IAAIM,WAAW,CAACN,IAAI,CAAC,EAAE;UACnBF,OAAO,CAACU,MAAM,CAAC;YACXR,IAAI;YACJS,SAAS,EAAE;UACf,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}