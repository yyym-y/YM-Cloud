{"ast":null,"code":"/**\n * @fileoverview Rule to flag octal escape sequences in string literals.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow octal escape sequences in string literals\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-octal-escape\"\n    },\n    schema: [],\n    messages: {\n      octalEscapeSequence: \"Don't use octal: '\\\\{{sequence}}'. Use '\\\\u....' instead.\"\n    }\n  },\n  create(context) {\n    return {\n      Literal(node) {\n        if (typeof node.value !== \"string\") {\n          return;\n        }\n\n        // \\0 represents a valid NULL character if it isn't followed by a digit.\n        const match = node.raw.match(/^(?:[^\\\\]|\\\\.)*?\\\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/su);\n        if (match) {\n          context.report({\n            node,\n            messageId: \"octalEscapeSequence\",\n            data: {\n              sequence: match[1]\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","octalEscapeSequence","create","context","Literal","node","value","match","raw","report","messageId","data","sequence"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-octal-escape.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag octal escape sequences in string literals.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow octal escape sequences in string literals\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-octal-escape\"\n        },\n\n        schema: [],\n\n        messages: {\n            octalEscapeSequence: \"Don't use octal: '\\\\{{sequence}}'. Use '\\\\u....' instead.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            Literal(node) {\n                if (typeof node.value !== \"string\") {\n                    return;\n                }\n\n                // \\0 represents a valid NULL character if it isn't followed by a digit.\n                const match = node.raw.match(\n                    /^(?:[^\\\\]|\\\\.)*?\\\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/su\n                );\n\n                if (match) {\n                    context.report({\n                        node,\n                        messageId: \"octalEscapeSequence\",\n                        data: { sequence: match[1] }\n                    });\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,oDAAoD;MACjEC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,mBAAmB,EAAE;IACzB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,OAAO;MAEHC,OAAOA,CAACC,IAAI,EAAE;QACV,IAAI,OAAOA,IAAI,CAACC,KAAK,KAAK,QAAQ,EAAE;UAChC;QACJ;;QAEA;QACA,MAAMC,KAAK,GAAGF,IAAI,CAACG,GAAG,CAACD,KAAK,CACxB,kEACJ,CAAC;QAED,IAAIA,KAAK,EAAE;UACPJ,OAAO,CAACM,MAAM,CAAC;YACXJ,IAAI;YACJK,SAAS,EAAE,qBAAqB;YAChCC,IAAI,EAAE;cAAEC,QAAQ,EAAEL,KAAK,CAAC,CAAC;YAAE;UAC/B,CAAC,CAAC;QACN;MACJ;IAEJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}