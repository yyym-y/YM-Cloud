{"ast":null,"code":"/**\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\n * @author Glen Mailer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow confusing multiline expressions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-unexpected-multiline\"\n    },\n    schema: [],\n    messages: {\n      function: \"Unexpected newline between function and ( of function call.\",\n      property: \"Unexpected newline between object and [ of property access.\",\n      taggedTemplate: \"Unexpected newline between template tag and template literal.\",\n      division: \"Unexpected newline between numerator and division operator.\"\n    }\n  },\n  create(context) {\n    const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;\n    const sourceCode = context.getSourceCode();\n\n    /**\n     * Check to see if there is a newline between the node and the following open bracket\n     * line's expression\n     * @param {ASTNode} node The node to check.\n     * @param {string} messageId The error messageId to use.\n     * @returns {void}\n     * @private\n     */\n    function checkForBreakAfter(node, messageId) {\n      const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);\n      const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);\n      if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\n        context.report({\n          node,\n          loc: openParen.loc,\n          messageId\n        });\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      MemberExpression(node) {\n        if (!node.computed || node.optional) {\n          return;\n        }\n        checkForBreakAfter(node.object, \"property\");\n      },\n      TaggedTemplateExpression(node) {\n        const {\n          quasi\n        } = node;\n\n        // handles common tags, parenthesized tags, and typescript's generic type arguments\n        const tokenBefore = sourceCode.getTokenBefore(quasi);\n        if (tokenBefore.loc.end.line !== quasi.loc.start.line) {\n          context.report({\n            node,\n            loc: {\n              start: quasi.loc.start,\n              end: {\n                line: quasi.loc.start.line,\n                column: quasi.loc.start.column + 1\n              }\n            },\n            messageId: \"taggedTemplate\"\n          });\n        }\n      },\n      CallExpression(node) {\n        if (node.arguments.length === 0 || node.optional) {\n          return;\n        }\n        checkForBreakAfter(node.callee, \"function\");\n      },\n      \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\n        const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n        const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n        if (tokenAfterOperator.type === \"Identifier\" && REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) && secondSlash.range[1] === tokenAfterOperator.range[0]) {\n          checkForBreakAfter(node.left, \"division\");\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","function","property","taggedTemplate","division","create","context","REGEX_FLAG_MATCHER","sourceCode","getSourceCode","checkForBreakAfter","node","messageId","openParen","getTokenAfter","isNotClosingParenToken","nodeExpressionEnd","getTokenBefore","loc","start","line","end","report","MemberExpression","computed","optional","object","TaggedTemplateExpression","quasi","tokenBefore","column","CallExpression","arguments","length","callee","BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left","secondSlash","token","value","tokenAfterOperator","test","range","left"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-unexpected-multiline.js"],"sourcesContent":["/**\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\n * @author Glen Mailer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow confusing multiline expressions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-unexpected-multiline\"\n        },\n\n        schema: [],\n        messages: {\n            function: \"Unexpected newline between function and ( of function call.\",\n            property: \"Unexpected newline between object and [ of property access.\",\n            taggedTemplate: \"Unexpected newline between template tag and template literal.\",\n            division: \"Unexpected newline between numerator and division operator.\"\n        }\n    },\n\n    create(context) {\n\n        const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Check to see if there is a newline between the node and the following open bracket\n         * line's expression\n         * @param {ASTNode} node The node to check.\n         * @param {string} messageId The error messageId to use.\n         * @returns {void}\n         * @private\n         */\n        function checkForBreakAfter(node, messageId) {\n            const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);\n            const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);\n\n            if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\n                context.report({\n                    node,\n                    loc: openParen.loc,\n                    messageId\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            MemberExpression(node) {\n                if (!node.computed || node.optional) {\n                    return;\n                }\n                checkForBreakAfter(node.object, \"property\");\n            },\n\n            TaggedTemplateExpression(node) {\n                const { quasi } = node;\n\n                // handles common tags, parenthesized tags, and typescript's generic type arguments\n                const tokenBefore = sourceCode.getTokenBefore(quasi);\n\n                if (tokenBefore.loc.end.line !== quasi.loc.start.line) {\n                    context.report({\n                        node,\n                        loc: {\n                            start: quasi.loc.start,\n                            end: {\n                                line: quasi.loc.start.line,\n                                column: quasi.loc.start.column + 1\n                            }\n                        },\n                        messageId: \"taggedTemplate\"\n                    });\n                }\n            },\n\n            CallExpression(node) {\n                if (node.arguments.length === 0 || node.optional) {\n                    return;\n                }\n                checkForBreakAfter(node.callee, \"function\");\n            },\n\n            \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\n                const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n                const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n\n                if (\n                    tokenAfterOperator.type === \"Identifier\" &&\n                    REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) &&\n                    secondSlash.range[1] === tokenAfterOperator.range[0]\n                ) {\n                    checkForBreakAfter(node.left, \"division\");\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}