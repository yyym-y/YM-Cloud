{"ast":null,"code":"/**\n * @fileoverview Rule to flag unsafe statements in finally block\n * @author Onur Temizkan\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nconst SENTINEL_NODE_TYPE_RETURN_THROW = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/u;\nconst SENTINEL_NODE_TYPE_BREAK = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/u;\nconst SENTINEL_NODE_TYPE_CONTINUE = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow control flow statements in `finally` blocks\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-unsafe-finally\"\n    },\n    schema: [],\n    messages: {\n      unsafeUsage: \"Unsafe usage of {{nodeType}}.\"\n    }\n  },\n  create(context) {\n    /**\n     * Checks if the node is the finalizer of a TryStatement\n     * @param {ASTNode} node node to check.\n     * @returns {boolean} - true if the node is the finalizer of a TryStatement\n     */\n    function isFinallyBlock(node) {\n      return node.parent.type === \"TryStatement\" && node.parent.finalizer === node;\n    }\n\n    /**\n     * Climbs up the tree if the node is not a sentinel node\n     * @param {ASTNode} node node to check.\n     * @param {string} label label of the break or continue statement\n     * @returns {boolean} - return whether the node is a finally block or a sentinel node\n     */\n    function isInFinallyBlock(node, label) {\n      let labelInside = false;\n      let sentinelNodeType;\n      if (node.type === \"BreakStatement\" && !node.label) {\n        sentinelNodeType = SENTINEL_NODE_TYPE_BREAK;\n      } else if (node.type === \"ContinueStatement\") {\n        sentinelNodeType = SENTINEL_NODE_TYPE_CONTINUE;\n      } else {\n        sentinelNodeType = SENTINEL_NODE_TYPE_RETURN_THROW;\n      }\n      for (let currentNode = node; currentNode && !sentinelNodeType.test(currentNode.type); currentNode = currentNode.parent) {\n        if (currentNode.parent.label && label && currentNode.parent.label.name === label.name) {\n          labelInside = true;\n        }\n        if (isFinallyBlock(currentNode)) {\n          if (label && labelInside) {\n            return false;\n          }\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Checks whether the possibly-unsafe statement is inside a finally block.\n     * @param {ASTNode} node node to check.\n     * @returns {void}\n     */\n    function check(node) {\n      if (isInFinallyBlock(node, node.label)) {\n        context.report({\n          messageId: \"unsafeUsage\",\n          data: {\n            nodeType: node.type\n          },\n          node,\n          line: node.loc.line,\n          column: node.loc.column\n        });\n      }\n    }\n    return {\n      ReturnStatement: check,\n      ThrowStatement: check,\n      BreakStatement: check,\n      ContinueStatement: check\n    };\n  }\n};","map":{"version":3,"names":["SENTINEL_NODE_TYPE_RETURN_THROW","SENTINEL_NODE_TYPE_BREAK","SENTINEL_NODE_TYPE_CONTINUE","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unsafeUsage","create","context","isFinallyBlock","node","parent","finalizer","isInFinallyBlock","label","labelInside","sentinelNodeType","currentNode","test","name","check","report","messageId","data","nodeType","line","loc","column","ReturnStatement","ThrowStatement","BreakStatement","ContinueStatement"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-unsafe-finally.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag unsafe statements in finally block\n * @author Onur Temizkan\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SENTINEL_NODE_TYPE_RETURN_THROW = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/u;\nconst SENTINEL_NODE_TYPE_BREAK = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/u;\nconst SENTINEL_NODE_TYPE_CONTINUE = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/u;\n\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow control flow statements in `finally` blocks\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-unsafe-finally\"\n        },\n\n        schema: [],\n\n        messages: {\n            unsafeUsage: \"Unsafe usage of {{nodeType}}.\"\n        }\n    },\n    create(context) {\n\n        /**\n         * Checks if the node is the finalizer of a TryStatement\n         * @param {ASTNode} node node to check.\n         * @returns {boolean} - true if the node is the finalizer of a TryStatement\n         */\n        function isFinallyBlock(node) {\n            return node.parent.type === \"TryStatement\" && node.parent.finalizer === node;\n        }\n\n        /**\n         * Climbs up the tree if the node is not a sentinel node\n         * @param {ASTNode} node node to check.\n         * @param {string} label label of the break or continue statement\n         * @returns {boolean} - return whether the node is a finally block or a sentinel node\n         */\n        function isInFinallyBlock(node, label) {\n            let labelInside = false;\n            let sentinelNodeType;\n\n            if (node.type === \"BreakStatement\" && !node.label) {\n                sentinelNodeType = SENTINEL_NODE_TYPE_BREAK;\n            } else if (node.type === \"ContinueStatement\") {\n                sentinelNodeType = SENTINEL_NODE_TYPE_CONTINUE;\n            } else {\n                sentinelNodeType = SENTINEL_NODE_TYPE_RETURN_THROW;\n            }\n\n            for (\n                let currentNode = node;\n                currentNode && !sentinelNodeType.test(currentNode.type);\n                currentNode = currentNode.parent\n            ) {\n                if (currentNode.parent.label && label && (currentNode.parent.label.name === label.name)) {\n                    labelInside = true;\n                }\n                if (isFinallyBlock(currentNode)) {\n                    if (label && labelInside) {\n                        return false;\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\n         * Checks whether the possibly-unsafe statement is inside a finally block.\n         * @param {ASTNode} node node to check.\n         * @returns {void}\n         */\n        function check(node) {\n            if (isInFinallyBlock(node, node.label)) {\n                context.report({\n                    messageId: \"unsafeUsage\",\n                    data: {\n                        nodeType: node.type\n                    },\n                    node,\n                    line: node.loc.line,\n                    column: node.loc.column\n                });\n            }\n        }\n\n        return {\n            ReturnStatement: check,\n            ThrowStatement: check,\n            BreakStatement: check,\n            ContinueStatement: check\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,+BAA+B,GAAG,qFAAqF;AAC7H,MAAMC,wBAAwB,GAAG,gLAAgL;AACjN,MAAMC,2BAA2B,GAAG,gKAAgK;;AAGpM;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,sDAAsD;MACnEC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,WAAW,EAAE;IACjB;EACJ,CAAC;EACDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,cAAcA,CAACC,IAAI,EAAE;MAC1B,OAAOA,IAAI,CAACC,MAAM,CAACb,IAAI,KAAK,cAAc,IAAIY,IAAI,CAACC,MAAM,CAACC,SAAS,KAAKF,IAAI;IAChF;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASG,gBAAgBA,CAACH,IAAI,EAAEI,KAAK,EAAE;MACnC,IAAIC,WAAW,GAAG,KAAK;MACvB,IAAIC,gBAAgB;MAEpB,IAAIN,IAAI,CAACZ,IAAI,KAAK,gBAAgB,IAAI,CAACY,IAAI,CAACI,KAAK,EAAE;QAC/CE,gBAAgB,GAAGvB,wBAAwB;MAC/C,CAAC,MAAM,IAAIiB,IAAI,CAACZ,IAAI,KAAK,mBAAmB,EAAE;QAC1CkB,gBAAgB,GAAGtB,2BAA2B;MAClD,CAAC,MAAM;QACHsB,gBAAgB,GAAGxB,+BAA+B;MACtD;MAEA,KACI,IAAIyB,WAAW,GAAGP,IAAI,EACtBO,WAAW,IAAI,CAACD,gBAAgB,CAACE,IAAI,CAACD,WAAW,CAACnB,IAAI,CAAC,EACvDmB,WAAW,GAAGA,WAAW,CAACN,MAAM,EAClC;QACE,IAAIM,WAAW,CAACN,MAAM,CAACG,KAAK,IAAIA,KAAK,IAAKG,WAAW,CAACN,MAAM,CAACG,KAAK,CAACK,IAAI,KAAKL,KAAK,CAACK,IAAK,EAAE;UACrFJ,WAAW,GAAG,IAAI;QACtB;QACA,IAAIN,cAAc,CAACQ,WAAW,CAAC,EAAE;UAC7B,IAAIH,KAAK,IAAIC,WAAW,EAAE;YACtB,OAAO,KAAK;UAChB;UACA,OAAO,IAAI;QACf;MACJ;MACA,OAAO,KAAK;IAChB;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASK,KAAKA,CAACV,IAAI,EAAE;MACjB,IAAIG,gBAAgB,CAACH,IAAI,EAAEA,IAAI,CAACI,KAAK,CAAC,EAAE;QACpCN,OAAO,CAACa,MAAM,CAAC;UACXC,SAAS,EAAE,aAAa;UACxBC,IAAI,EAAE;YACFC,QAAQ,EAAEd,IAAI,CAACZ;UACnB,CAAC;UACDY,IAAI;UACJe,IAAI,EAAEf,IAAI,CAACgB,GAAG,CAACD,IAAI;UACnBE,MAAM,EAAEjB,IAAI,CAACgB,GAAG,CAACC;QACrB,CAAC,CAAC;MACN;IACJ;IAEA,OAAO;MACHC,eAAe,EAAER,KAAK;MACtBS,cAAc,EAAET,KAAK;MACrBU,cAAc,EAAEV,KAAK;MACrBW,iBAAiB,EAAEX;IACvB,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}