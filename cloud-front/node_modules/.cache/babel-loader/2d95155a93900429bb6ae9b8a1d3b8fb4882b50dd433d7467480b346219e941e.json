{"ast":null,"code":"/**\n * @fileoverview Compatibility class for flat config.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst path = require(\"path\");\nconst environments = require(\"../conf/environments\");\nconst createDebug = require(\"debug\");\nconst {\n  ConfigArrayFactory\n} = require(\"./config-array-factory\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"../../shared/types\").Environment} Environment */\n/** @typedef {import(\"../../shared/types\").Processor} Processor */\n\nconst debug = createDebug(\"eslintrc:flat-compat\");\nconst cafactory = Symbol(\"cafactory\");\n\n/**\n * Translates an ESLintRC-style config object into a flag-config-style config\n * object.\n * @param {Object} eslintrcConfig An ESLintRC-style config object.\n * @param {Object} options Options to help translate the config.\n * @param {string} options.resolveConfigRelativeTo To the directory to resolve\n *      configs from.\n * @param {string} options.resolvePluginsRelativeTo The directory to resolve\n *      plugins from.\n * @param {ReadOnlyMap<string,Environment>} options.pluginEnvironments A map of plugin environment\n *      names to objects.\n * @param {ReadOnlyMap<string,Processor>} options.pluginProcessors A map of plugin processor\n *      names to objects.\n * @returns {Object} A flag-config-style config object.\n */\nfunction translateESLintRC(eslintrcConfig, {\n  resolveConfigRelativeTo,\n  resolvePluginsRelativeTo,\n  pluginEnvironments,\n  pluginProcessors\n}) {\n  const flatConfig = {};\n  const configs = [];\n  const languageOptions = {};\n  const linterOptions = {};\n  const keysToCopy = [\"settings\", \"rules\", \"processor\"];\n  const languageOptionsKeysToCopy = [\"globals\", \"parser\", \"parserOptions\"];\n  const linterOptionsKeysToCopy = [\"noInlineConfig\", \"reportUnusedDisableDirectives\"];\n\n  // check for special settings for eslint:all and eslint:recommended:\n  if (eslintrcConfig.settings) {\n    if (eslintrcConfig.settings[\"eslint:all\"] === true) {\n      return [\"eslint:all\"];\n    }\n    if (eslintrcConfig.settings[\"eslint:recommended\"] === true) {\n      return [\"eslint:recommended\"];\n    }\n  }\n\n  // copy over simple translations\n  for (const key of keysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      flatConfig[key] = eslintrcConfig[key];\n    }\n  }\n\n  // copy over languageOptions\n  for (const key of languageOptionsKeysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      // create the languageOptions key in the flat config\n      flatConfig.languageOptions = languageOptions;\n      if (key === \"parser\") {\n        debug(`Resolving parser '${languageOptions[key]}' relative to ${resolveConfigRelativeTo}`);\n        if (eslintrcConfig[key].error) {\n          throw eslintrcConfig[key].error;\n        }\n        languageOptions[key] = eslintrcConfig[key].definition;\n        continue;\n      }\n\n      // clone any object values that are in the eslintrc config\n      if (eslintrcConfig[key] && typeof eslintrcConfig[key] === \"object\") {\n        languageOptions[key] = {\n          ...eslintrcConfig[key]\n        };\n      } else {\n        languageOptions[key] = eslintrcConfig[key];\n      }\n    }\n  }\n\n  // copy over linterOptions\n  for (const key of linterOptionsKeysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      flatConfig.linterOptions = linterOptions;\n      linterOptions[key] = eslintrcConfig[key];\n    }\n  }\n\n  // move ecmaVersion a level up\n  if (languageOptions.parserOptions) {\n    if (\"ecmaVersion\" in languageOptions.parserOptions) {\n      languageOptions.ecmaVersion = languageOptions.parserOptions.ecmaVersion;\n      delete languageOptions.parserOptions.ecmaVersion;\n    }\n    if (\"sourceType\" in languageOptions.parserOptions) {\n      languageOptions.sourceType = languageOptions.parserOptions.sourceType;\n      delete languageOptions.parserOptions.sourceType;\n    }\n\n    // check to see if we even need parserOptions anymore and remove it if not\n    if (Object.keys(languageOptions.parserOptions).length === 0) {\n      delete languageOptions.parserOptions;\n    }\n  }\n\n  // overrides\n  if (eslintrcConfig.criteria) {\n    flatConfig.files = [absoluteFilePath => eslintrcConfig.criteria.test(absoluteFilePath)];\n  }\n\n  // translate plugins\n  if (eslintrcConfig.plugins && typeof eslintrcConfig.plugins === \"object\") {\n    debug(`Translating plugins: ${eslintrcConfig.plugins}`);\n    flatConfig.plugins = {};\n    for (const pluginName of Object.keys(eslintrcConfig.plugins)) {\n      debug(`Translating plugin: ${pluginName}`);\n      debug(`Resolving plugin '${pluginName} relative to ${resolvePluginsRelativeTo}`);\n      const {\n        definition: plugin,\n        error\n      } = eslintrcConfig.plugins[pluginName];\n      if (error) {\n        throw error;\n      }\n      flatConfig.plugins[pluginName] = plugin;\n\n      // create a config for any processors\n      if (plugin.processors) {\n        for (const processorName of Object.keys(plugin.processors)) {\n          if (processorName.startsWith(\".\")) {\n            debug(`Assigning processor: ${pluginName}/${processorName}`);\n            configs.unshift({\n              files: [`**/*${processorName}`],\n              processor: pluginProcessors.get(`${pluginName}/${processorName}`)\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // translate env - must come after plugins\n  if (eslintrcConfig.env && typeof eslintrcConfig.env === \"object\") {\n    for (const envName of Object.keys(eslintrcConfig.env)) {\n      // only add environments that are true\n      if (eslintrcConfig.env[envName]) {\n        debug(`Translating environment: ${envName}`);\n        if (environments.has(envName)) {\n          // built-in environments should be defined first\n          configs.unshift(...translateESLintRC(environments.get(envName), {\n            resolveConfigRelativeTo,\n            resolvePluginsRelativeTo\n          }));\n        } else if (pluginEnvironments.has(envName)) {\n          // if the environment comes from a plugin, it should come after the plugin config\n          configs.push(...translateESLintRC(pluginEnvironments.get(envName), {\n            resolveConfigRelativeTo,\n            resolvePluginsRelativeTo\n          }));\n        }\n      }\n    }\n  }\n\n  // only add if there are actually keys in the config\n  if (Object.keys(flatConfig).length > 0) {\n    configs.push(flatConfig);\n  }\n  return configs;\n}\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * A compatibility class for working with configs.\n */\nclass FlatCompat {\n  constructor({\n    baseDirectory = process.cwd(),\n    resolvePluginsRelativeTo = baseDirectory\n  } = {}) {\n    this.baseDirectory = baseDirectory;\n    this.resolvePluginsRelativeTo = resolvePluginsRelativeTo;\n    this[cafactory] = new ConfigArrayFactory({\n      cwd: baseDirectory,\n      resolvePluginsRelativeTo,\n      eslintAllPath: path.resolve(__dirname, \"../conf/eslint-all.js\"),\n      eslintRecommendedPath: path.resolve(__dirname, \"../conf/eslint-recommended.js\")\n    });\n  }\n\n  /**\n   * Translates an ESLintRC-style config into a flag-config-style config.\n   * @param {Object} eslintrcConfig The ESLintRC-style config object.\n   * @returns {Object} A flag-config-style config object.\n   */\n  config(eslintrcConfig) {\n    const eslintrcArray = this[cafactory].create(eslintrcConfig, {\n      basePath: this.baseDirectory\n    });\n    const flatArray = [];\n    let hasIgnorePatterns = false;\n    eslintrcArray.forEach(configData => {\n      if (configData.type === \"config\") {\n        hasIgnorePatterns = hasIgnorePatterns || configData.ignorePattern;\n        flatArray.push(...translateESLintRC(configData, {\n          resolveConfigRelativeTo: path.join(this.baseDirectory, \"__placeholder.js\"),\n          resolvePluginsRelativeTo: path.join(this.resolvePluginsRelativeTo, \"__placeholder.js\"),\n          pluginEnvironments: eslintrcArray.pluginEnvironments,\n          pluginProcessors: eslintrcArray.pluginProcessors\n        }));\n      }\n    });\n\n    // combine ignorePatterns to emulate ESLintRC behavior better\n    if (hasIgnorePatterns) {\n      flatArray.unshift({\n        ignores: [filePath => {\n          // Compute the final config for this file.\n          // This filters config array elements by `files`/`excludedFiles` then merges the elements.\n          const finalConfig = eslintrcArray.extractConfig(filePath);\n\n          // Test the `ignorePattern` properties of the final config.\n          return Boolean(finalConfig.ignores) && finalConfig.ignores(filePath);\n        }]\n      });\n    }\n    return flatArray;\n  }\n\n  /**\n   * Translates the `env` section of an ESLintRC-style config.\n   * @param {Object} envConfig The `env` section of an ESLintRC config.\n   * @returns {Object} A flag-config object representing the environments.\n   */\n  env(envConfig) {\n    return this.config({\n      env: envConfig\n    });\n  }\n\n  /**\n   * Translates the `extends` section of an ESLintRC-style config.\n   * @param {...string} configsToExtend The names of the configs to load.\n   * @returns {Object} A flag-config object representing the config.\n   */\n  extends(...configsToExtend) {\n    return this.config({\n      extends: configsToExtend\n    });\n  }\n\n  /**\n   * Translates the `plugins` section of an ESLintRC-style config.\n   * @param {...string} plugins The names of the plugins to load.\n   * @returns {Object} A flag-config object representing the plugins.\n   */\n  plugins(...plugins) {\n    return this.config({\n      plugins\n    });\n  }\n}\nexports.FlatCompat = FlatCompat;","map":{"version":3,"names":["require","path","environments","createDebug","ConfigArrayFactory","debug","cafactory","Symbol","translateESLintRC","eslintrcConfig","resolveConfigRelativeTo","resolvePluginsRelativeTo","pluginEnvironments","pluginProcessors","flatConfig","configs","languageOptions","linterOptions","keysToCopy","languageOptionsKeysToCopy","linterOptionsKeysToCopy","settings","key","error","definition","parserOptions","ecmaVersion","sourceType","Object","keys","length","criteria","files","absoluteFilePath","test","plugins","pluginName","plugin","processors","processorName","startsWith","unshift","processor","get","env","envName","has","push","FlatCompat","constructor","baseDirectory","process","cwd","eslintAllPath","resolve","__dirname","eslintRecommendedPath","config","eslintrcArray","create","basePath","flatArray","hasIgnorePatterns","forEach","configData","type","ignorePattern","join","ignores","filePath","finalConfig","extractConfig","Boolean","envConfig","extends","configsToExtend","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/@eslint/eslintrc/lib/flat-compat.js"],"sourcesContent":["/**\n * @fileoverview Compatibility class for flat config.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst path = require(\"path\");\nconst environments = require(\"../conf/environments\");\nconst createDebug = require(\"debug\");\nconst { ConfigArrayFactory } = require(\"./config-array-factory\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"../../shared/types\").Environment} Environment */\n/** @typedef {import(\"../../shared/types\").Processor} Processor */\n\nconst debug = createDebug(\"eslintrc:flat-compat\");\nconst cafactory = Symbol(\"cafactory\");\n\n/**\n * Translates an ESLintRC-style config object into a flag-config-style config\n * object.\n * @param {Object} eslintrcConfig An ESLintRC-style config object.\n * @param {Object} options Options to help translate the config.\n * @param {string} options.resolveConfigRelativeTo To the directory to resolve\n *      configs from.\n * @param {string} options.resolvePluginsRelativeTo The directory to resolve\n *      plugins from.\n * @param {ReadOnlyMap<string,Environment>} options.pluginEnvironments A map of plugin environment\n *      names to objects.\n * @param {ReadOnlyMap<string,Processor>} options.pluginProcessors A map of plugin processor\n *      names to objects.\n * @returns {Object} A flag-config-style config object.\n */\nfunction translateESLintRC(eslintrcConfig, {\n    resolveConfigRelativeTo,\n    resolvePluginsRelativeTo,\n    pluginEnvironments,\n    pluginProcessors\n}) {\n\n    const flatConfig = {};\n    const configs = [];\n    const languageOptions = {};\n    const linterOptions = {};\n    const keysToCopy = [\"settings\", \"rules\", \"processor\"];\n    const languageOptionsKeysToCopy = [\"globals\", \"parser\", \"parserOptions\"];\n    const linterOptionsKeysToCopy = [\"noInlineConfig\", \"reportUnusedDisableDirectives\"];\n\n    // check for special settings for eslint:all and eslint:recommended:\n    if (eslintrcConfig.settings) {\n        if (eslintrcConfig.settings[\"eslint:all\"] === true) {\n            return [\"eslint:all\"];\n        }\n\n        if (eslintrcConfig.settings[\"eslint:recommended\"] === true) {\n            return [\"eslint:recommended\"];\n        }\n    }\n\n    // copy over simple translations\n    for (const key of keysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n            flatConfig[key] = eslintrcConfig[key];\n        }\n    }\n\n    // copy over languageOptions\n    for (const key of languageOptionsKeysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n\n            // create the languageOptions key in the flat config\n            flatConfig.languageOptions = languageOptions;\n\n            if (key === \"parser\") {\n                debug(`Resolving parser '${languageOptions[key]}' relative to ${resolveConfigRelativeTo}`);\n\n                if (eslintrcConfig[key].error) {\n                    throw eslintrcConfig[key].error;\n                }\n\n                languageOptions[key] = eslintrcConfig[key].definition;\n                continue;\n            }\n\n            // clone any object values that are in the eslintrc config\n            if (eslintrcConfig[key] && typeof eslintrcConfig[key] === \"object\") {\n                languageOptions[key] = {\n                    ...eslintrcConfig[key]\n                };\n            } else {\n                languageOptions[key] = eslintrcConfig[key];\n            }\n        }\n    }\n\n    // copy over linterOptions\n    for (const key of linterOptionsKeysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n            flatConfig.linterOptions = linterOptions;\n            linterOptions[key] = eslintrcConfig[key];\n        }\n    }\n\n    // move ecmaVersion a level up\n    if (languageOptions.parserOptions) {\n\n        if (\"ecmaVersion\" in languageOptions.parserOptions) {\n            languageOptions.ecmaVersion = languageOptions.parserOptions.ecmaVersion;\n            delete languageOptions.parserOptions.ecmaVersion;\n        }\n\n        if (\"sourceType\" in languageOptions.parserOptions) {\n            languageOptions.sourceType = languageOptions.parserOptions.sourceType;\n            delete languageOptions.parserOptions.sourceType;\n        }\n\n        // check to see if we even need parserOptions anymore and remove it if not\n        if (Object.keys(languageOptions.parserOptions).length === 0) {\n            delete languageOptions.parserOptions;\n        }\n    }\n\n    // overrides\n    if (eslintrcConfig.criteria) {\n        flatConfig.files = [absoluteFilePath => eslintrcConfig.criteria.test(absoluteFilePath)];\n    }\n\n    // translate plugins\n    if (eslintrcConfig.plugins && typeof eslintrcConfig.plugins === \"object\") {\n        debug(`Translating plugins: ${eslintrcConfig.plugins}`);\n\n        flatConfig.plugins = {};\n\n        for (const pluginName of Object.keys(eslintrcConfig.plugins)) {\n\n            debug(`Translating plugin: ${pluginName}`);\n            debug(`Resolving plugin '${pluginName} relative to ${resolvePluginsRelativeTo}`);\n\n            const { definition: plugin, error } = eslintrcConfig.plugins[pluginName];\n\n            if (error) {\n                throw error;\n            }\n\n            flatConfig.plugins[pluginName] = plugin;\n\n            // create a config for any processors\n            if (plugin.processors) {\n                for (const processorName of Object.keys(plugin.processors)) {\n                    if (processorName.startsWith(\".\")) {\n                        debug(`Assigning processor: ${pluginName}/${processorName}`);\n\n                        configs.unshift({\n                            files: [`**/*${processorName}`],\n                            processor: pluginProcessors.get(`${pluginName}/${processorName}`)\n                        });\n                    }\n\n                }\n            }\n        }\n    }\n\n    // translate env - must come after plugins\n    if (eslintrcConfig.env && typeof eslintrcConfig.env === \"object\") {\n        for (const envName of Object.keys(eslintrcConfig.env)) {\n\n            // only add environments that are true\n            if (eslintrcConfig.env[envName]) {\n                debug(`Translating environment: ${envName}`);\n\n                if (environments.has(envName)) {\n\n                    // built-in environments should be defined first\n                    configs.unshift(...translateESLintRC(environments.get(envName), {\n                        resolveConfigRelativeTo,\n                        resolvePluginsRelativeTo\n                    }));\n                } else if (pluginEnvironments.has(envName)) {\n\n                    // if the environment comes from a plugin, it should come after the plugin config\n                    configs.push(...translateESLintRC(pluginEnvironments.get(envName), {\n                        resolveConfigRelativeTo,\n                        resolvePluginsRelativeTo\n                    }));\n                }\n            }\n        }\n    }\n\n    // only add if there are actually keys in the config\n    if (Object.keys(flatConfig).length > 0) {\n        configs.push(flatConfig);\n    }\n\n    return configs;\n}\n\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * A compatibility class for working with configs.\n */\nclass FlatCompat {\n\n    constructor({\n        baseDirectory = process.cwd(),\n        resolvePluginsRelativeTo = baseDirectory\n    } = {}) {\n        this.baseDirectory = baseDirectory;\n        this.resolvePluginsRelativeTo = resolvePluginsRelativeTo;\n        this[cafactory] = new ConfigArrayFactory({\n            cwd: baseDirectory,\n            resolvePluginsRelativeTo,\n            eslintAllPath: path.resolve(__dirname, \"../conf/eslint-all.js\"),\n            eslintRecommendedPath: path.resolve(__dirname, \"../conf/eslint-recommended.js\")\n        });\n    }\n\n    /**\n     * Translates an ESLintRC-style config into a flag-config-style config.\n     * @param {Object} eslintrcConfig The ESLintRC-style config object.\n     * @returns {Object} A flag-config-style config object.\n     */\n    config(eslintrcConfig) {\n        const eslintrcArray = this[cafactory].create(eslintrcConfig, {\n            basePath: this.baseDirectory\n        });\n\n        const flatArray = [];\n        let hasIgnorePatterns = false;\n\n        eslintrcArray.forEach(configData => {\n            if (configData.type === \"config\") {\n                hasIgnorePatterns = hasIgnorePatterns || configData.ignorePattern;\n                flatArray.push(...translateESLintRC(configData, {\n                    resolveConfigRelativeTo: path.join(this.baseDirectory, \"__placeholder.js\"),\n                    resolvePluginsRelativeTo: path.join(this.resolvePluginsRelativeTo, \"__placeholder.js\"),\n                    pluginEnvironments: eslintrcArray.pluginEnvironments,\n                    pluginProcessors: eslintrcArray.pluginProcessors\n                }));\n            }\n        });\n\n        // combine ignorePatterns to emulate ESLintRC behavior better\n        if (hasIgnorePatterns) {\n            flatArray.unshift({\n                ignores: [filePath => {\n\n                    // Compute the final config for this file.\n                    // This filters config array elements by `files`/`excludedFiles` then merges the elements.\n                    const finalConfig = eslintrcArray.extractConfig(filePath);\n\n                    // Test the `ignorePattern` properties of the final config.\n                    return Boolean(finalConfig.ignores) && finalConfig.ignores(filePath);\n                }]\n            });\n        }\n\n        return flatArray;\n    }\n\n    /**\n     * Translates the `env` section of an ESLintRC-style config.\n     * @param {Object} envConfig The `env` section of an ESLintRC config.\n     * @returns {Object} A flag-config object representing the environments.\n     */\n    env(envConfig) {\n        return this.config({\n            env: envConfig\n        });\n    }\n\n    /**\n     * Translates the `extends` section of an ESLintRC-style config.\n     * @param {...string} configsToExtend The names of the configs to load.\n     * @returns {Object} A flag-config object representing the config.\n     */\n    extends(...configsToExtend) {\n        return this.config({\n            extends: configsToExtend\n        });\n    }\n\n    /**\n     * Translates the `plugins` section of an ESLintRC-style config.\n     * @param {...string} plugins The names of the plugins to load.\n     * @returns {Object} A flag-config object representing the plugins.\n     */\n    plugins(...plugins) {\n        return this.config({\n            plugins\n        });\n    }\n}\n\nexports.FlatCompat = FlatCompat;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAAAA,OAAA;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,YAAY,GAAGF,OAAO,CAAC,sBAAsB,CAAC;AACpD,MAAMG,WAAW,GAAGH,OAAO,CAAC,OAAO,CAAC;AACpC,MAAM;EAAEI;AAAmB,CAAC,GAAGJ,OAAO,CAAC,wBAAwB,CAAC;;AAEhE;AACA;AACA;;AAEA;AACA;;AAEA,MAAMK,KAAK,GAAGF,WAAW,CAAC,sBAAsB,CAAC;AACjD,MAAMG,SAAS,GAAGC,MAAM,CAAC,WAAW,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,cAAc,EAAE;EACvCC,uBAAuB;EACvBC,wBAAwB;EACxBC,kBAAkB;EAClBC;AACJ,CAAC,EAAE;EAEC,MAAMC,UAAU,GAAG,CAAC,CAAC;EACrB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,eAAe,GAAG,CAAC,CAAC;EAC1B,MAAMC,aAAa,GAAG,CAAC,CAAC;EACxB,MAAMC,UAAU,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,WAAW,CAAC;EACrD,MAAMC,yBAAyB,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,eAAe,CAAC;EACxE,MAAMC,uBAAuB,GAAG,CAAC,gBAAgB,EAAE,+BAA+B,CAAC;;EAEnF;EACA,IAAIX,cAAc,CAACY,QAAQ,EAAE;IACzB,IAAIZ,cAAc,CAACY,QAAQ,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE;MAChD,OAAO,CAAC,YAAY,CAAC;IACzB;IAEA,IAAIZ,cAAc,CAACY,QAAQ,CAAC,oBAAoB,CAAC,KAAK,IAAI,EAAE;MACxD,OAAO,CAAC,oBAAoB,CAAC;IACjC;EACJ;;EAEA;EACA,KAAK,MAAMC,GAAG,IAAIJ,UAAU,EAAE;IAC1B,IAAII,GAAG,IAAIb,cAAc,IAAI,OAAOA,cAAc,CAACa,GAAG,CAAC,KAAK,WAAW,EAAE;MACrER,UAAU,CAACQ,GAAG,CAAC,GAAGb,cAAc,CAACa,GAAG,CAAC;IACzC;EACJ;;EAEA;EACA,KAAK,MAAMA,GAAG,IAAIH,yBAAyB,EAAE;IACzC,IAAIG,GAAG,IAAIb,cAAc,IAAI,OAAOA,cAAc,CAACa,GAAG,CAAC,KAAK,WAAW,EAAE;MAErE;MACAR,UAAU,CAACE,eAAe,GAAGA,eAAe;MAE5C,IAAIM,GAAG,KAAK,QAAQ,EAAE;QAClBjB,KAAK,CAAE,qBAAoBW,eAAe,CAACM,GAAG,CAAE,iBAAgBZ,uBAAwB,EAAC,CAAC;QAE1F,IAAID,cAAc,CAACa,GAAG,CAAC,CAACC,KAAK,EAAE;UAC3B,MAAMd,cAAc,CAACa,GAAG,CAAC,CAACC,KAAK;QACnC;QAEAP,eAAe,CAACM,GAAG,CAAC,GAAGb,cAAc,CAACa,GAAG,CAAC,CAACE,UAAU;QACrD;MACJ;;MAEA;MACA,IAAIf,cAAc,CAACa,GAAG,CAAC,IAAI,OAAOb,cAAc,CAACa,GAAG,CAAC,KAAK,QAAQ,EAAE;QAChEN,eAAe,CAACM,GAAG,CAAC,GAAG;UACnB,GAAGb,cAAc,CAACa,GAAG;QACzB,CAAC;MACL,CAAC,MAAM;QACHN,eAAe,CAACM,GAAG,CAAC,GAAGb,cAAc,CAACa,GAAG,CAAC;MAC9C;IACJ;EACJ;;EAEA;EACA,KAAK,MAAMA,GAAG,IAAIF,uBAAuB,EAAE;IACvC,IAAIE,GAAG,IAAIb,cAAc,IAAI,OAAOA,cAAc,CAACa,GAAG,CAAC,KAAK,WAAW,EAAE;MACrER,UAAU,CAACG,aAAa,GAAGA,aAAa;MACxCA,aAAa,CAACK,GAAG,CAAC,GAAGb,cAAc,CAACa,GAAG,CAAC;IAC5C;EACJ;;EAEA;EACA,IAAIN,eAAe,CAACS,aAAa,EAAE;IAE/B,IAAI,aAAa,IAAIT,eAAe,CAACS,aAAa,EAAE;MAChDT,eAAe,CAACU,WAAW,GAAGV,eAAe,CAACS,aAAa,CAACC,WAAW;MACvE,OAAOV,eAAe,CAACS,aAAa,CAACC,WAAW;IACpD;IAEA,IAAI,YAAY,IAAIV,eAAe,CAACS,aAAa,EAAE;MAC/CT,eAAe,CAACW,UAAU,GAAGX,eAAe,CAACS,aAAa,CAACE,UAAU;MACrE,OAAOX,eAAe,CAACS,aAAa,CAACE,UAAU;IACnD;;IAEA;IACA,IAAIC,MAAM,CAACC,IAAI,CAACb,eAAe,CAACS,aAAa,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;MACzD,OAAOd,eAAe,CAACS,aAAa;IACxC;EACJ;;EAEA;EACA,IAAIhB,cAAc,CAACsB,QAAQ,EAAE;IACzBjB,UAAU,CAACkB,KAAK,GAAG,CAACC,gBAAgB,IAAIxB,cAAc,CAACsB,QAAQ,CAACG,IAAI,CAACD,gBAAgB,CAAC,CAAC;EAC3F;;EAEA;EACA,IAAIxB,cAAc,CAAC0B,OAAO,IAAI,OAAO1B,cAAc,CAAC0B,OAAO,KAAK,QAAQ,EAAE;IACtE9B,KAAK,CAAE,wBAAuBI,cAAc,CAAC0B,OAAQ,EAAC,CAAC;IAEvDrB,UAAU,CAACqB,OAAO,GAAG,CAAC,CAAC;IAEvB,KAAK,MAAMC,UAAU,IAAIR,MAAM,CAACC,IAAI,CAACpB,cAAc,CAAC0B,OAAO,CAAC,EAAE;MAE1D9B,KAAK,CAAE,uBAAsB+B,UAAW,EAAC,CAAC;MAC1C/B,KAAK,CAAE,qBAAoB+B,UAAW,gBAAezB,wBAAyB,EAAC,CAAC;MAEhF,MAAM;QAAEa,UAAU,EAAEa,MAAM;QAAEd;MAAM,CAAC,GAAGd,cAAc,CAAC0B,OAAO,CAACC,UAAU,CAAC;MAExE,IAAIb,KAAK,EAAE;QACP,MAAMA,KAAK;MACf;MAEAT,UAAU,CAACqB,OAAO,CAACC,UAAU,CAAC,GAAGC,MAAM;;MAEvC;MACA,IAAIA,MAAM,CAACC,UAAU,EAAE;QACnB,KAAK,MAAMC,aAAa,IAAIX,MAAM,CAACC,IAAI,CAACQ,MAAM,CAACC,UAAU,CAAC,EAAE;UACxD,IAAIC,aAAa,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC/BnC,KAAK,CAAE,wBAAuB+B,UAAW,IAAGG,aAAc,EAAC,CAAC;YAE5DxB,OAAO,CAAC0B,OAAO,CAAC;cACZT,KAAK,EAAE,CAAE,OAAMO,aAAc,EAAC,CAAC;cAC/BG,SAAS,EAAE7B,gBAAgB,CAAC8B,GAAG,CAAE,GAAEP,UAAW,IAAGG,aAAc,EAAC;YACpE,CAAC,CAAC;UACN;QAEJ;MACJ;IACJ;EACJ;;EAEA;EACA,IAAI9B,cAAc,CAACmC,GAAG,IAAI,OAAOnC,cAAc,CAACmC,GAAG,KAAK,QAAQ,EAAE;IAC9D,KAAK,MAAMC,OAAO,IAAIjB,MAAM,CAACC,IAAI,CAACpB,cAAc,CAACmC,GAAG,CAAC,EAAE;MAEnD;MACA,IAAInC,cAAc,CAACmC,GAAG,CAACC,OAAO,CAAC,EAAE;QAC7BxC,KAAK,CAAE,4BAA2BwC,OAAQ,EAAC,CAAC;QAE5C,IAAI3C,YAAY,CAAC4C,GAAG,CAACD,OAAO,CAAC,EAAE;UAE3B;UACA9B,OAAO,CAAC0B,OAAO,CAAC,GAAGjC,iBAAiB,CAACN,YAAY,CAACyC,GAAG,CAACE,OAAO,CAAC,EAAE;YAC5DnC,uBAAuB;YACvBC;UACJ,CAAC,CAAC,CAAC;QACP,CAAC,MAAM,IAAIC,kBAAkB,CAACkC,GAAG,CAACD,OAAO,CAAC,EAAE;UAExC;UACA9B,OAAO,CAACgC,IAAI,CAAC,GAAGvC,iBAAiB,CAACI,kBAAkB,CAAC+B,GAAG,CAACE,OAAO,CAAC,EAAE;YAC/DnC,uBAAuB;YACvBC;UACJ,CAAC,CAAC,CAAC;QACP;MACJ;IACJ;EACJ;;EAEA;EACA,IAAIiB,MAAM,CAACC,IAAI,CAACf,UAAU,CAAC,CAACgB,MAAM,GAAG,CAAC,EAAE;IACpCf,OAAO,CAACgC,IAAI,CAACjC,UAAU,CAAC;EAC5B;EAEA,OAAOC,OAAO;AAClB;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMiC,UAAU,CAAC;EAEbC,WAAWA,CAAC;IACRC,aAAa,GAAGC,OAAO,CAACC,GAAG,CAAC,CAAC;IAC7BzC,wBAAwB,GAAGuC;EAC/B,CAAC,GAAG,CAAC,CAAC,EAAE;IACJ,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACvC,wBAAwB,GAAGA,wBAAwB;IACxD,IAAI,CAACL,SAAS,CAAC,GAAG,IAAIF,kBAAkB,CAAC;MACrCgD,GAAG,EAAEF,aAAa;MAClBvC,wBAAwB;MACxB0C,aAAa,EAAEpD,IAAI,CAACqD,OAAO,CAACC,SAAS,EAAE,uBAAuB,CAAC;MAC/DC,qBAAqB,EAAEvD,IAAI,CAACqD,OAAO,CAACC,SAAS,EAAE,+BAA+B;IAClF,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACIE,MAAMA,CAAChD,cAAc,EAAE;IACnB,MAAMiD,aAAa,GAAG,IAAI,CAACpD,SAAS,CAAC,CAACqD,MAAM,CAAClD,cAAc,EAAE;MACzDmD,QAAQ,EAAE,IAAI,CAACV;IACnB,CAAC,CAAC;IAEF,MAAMW,SAAS,GAAG,EAAE;IACpB,IAAIC,iBAAiB,GAAG,KAAK;IAE7BJ,aAAa,CAACK,OAAO,CAACC,UAAU,IAAI;MAChC,IAAIA,UAAU,CAACC,IAAI,KAAK,QAAQ,EAAE;QAC9BH,iBAAiB,GAAGA,iBAAiB,IAAIE,UAAU,CAACE,aAAa;QACjEL,SAAS,CAACd,IAAI,CAAC,GAAGvC,iBAAiB,CAACwD,UAAU,EAAE;UAC5CtD,uBAAuB,EAAET,IAAI,CAACkE,IAAI,CAAC,IAAI,CAACjB,aAAa,EAAE,kBAAkB,CAAC;UAC1EvC,wBAAwB,EAAEV,IAAI,CAACkE,IAAI,CAAC,IAAI,CAACxD,wBAAwB,EAAE,kBAAkB,CAAC;UACtFC,kBAAkB,EAAE8C,aAAa,CAAC9C,kBAAkB;UACpDC,gBAAgB,EAAE6C,aAAa,CAAC7C;QACpC,CAAC,CAAC,CAAC;MACP;IACJ,CAAC,CAAC;;IAEF;IACA,IAAIiD,iBAAiB,EAAE;MACnBD,SAAS,CAACpB,OAAO,CAAC;QACd2B,OAAO,EAAE,CAACC,QAAQ,IAAI;UAElB;UACA;UACA,MAAMC,WAAW,GAAGZ,aAAa,CAACa,aAAa,CAACF,QAAQ,CAAC;;UAEzD;UACA,OAAOG,OAAO,CAACF,WAAW,CAACF,OAAO,CAAC,IAAIE,WAAW,CAACF,OAAO,CAACC,QAAQ,CAAC;QACxE,CAAC;MACL,CAAC,CAAC;IACN;IAEA,OAAOR,SAAS;EACpB;;EAEA;AACJ;AACA;AACA;AACA;EACIjB,GAAGA,CAAC6B,SAAS,EAAE;IACX,OAAO,IAAI,CAAChB,MAAM,CAAC;MACfb,GAAG,EAAE6B;IACT,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACIC,OAAOA,CAAC,GAAGC,eAAe,EAAE;IACxB,OAAO,IAAI,CAAClB,MAAM,CAAC;MACfiB,OAAO,EAAEC;IACb,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;EACIxC,OAAOA,CAAC,GAAGA,OAAO,EAAE;IAChB,OAAO,IAAI,CAACsB,MAAM,CAAC;MACftB;IACJ,CAAC,CAAC;EACN;AACJ;AAEAyC,OAAO,CAAC5B,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}