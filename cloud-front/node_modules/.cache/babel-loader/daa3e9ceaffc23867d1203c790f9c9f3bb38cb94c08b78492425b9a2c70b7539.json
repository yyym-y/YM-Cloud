{"ast":null,"code":"/**\n * @fileoverview Mocha test wrapper\n * @author Ilya Volodin\n */\n\"use strict\";\n\n/* global describe, it */\n\n/*\n * This is a wrapper around mocha to allow for DRY unittests for eslint\n * Format:\n * RuleTester.run(\"{ruleName}\", {\n *      valid: [\n *          \"{code}\",\n *          { code: \"{code}\", options: {options}, globals: {globals}, parser: \"{parser}\", settings: {settings} }\n *      ],\n *      invalid: [\n *          { code: \"{code}\", errors: {numErrors} },\n *          { code: \"{code}\", errors: [\"{errorMessage}\"] },\n *          { code: \"{code}\", options: {options}, globals: {globals}, parser: \"{parser}\", settings: {settings}, errors: [{ message: \"{errorMessage}\", type: \"{errorNodeType}\"}] }\n *      ]\n *  });\n *\n * Variables:\n * {code} - String that represents the code to be tested\n * {options} - Arguments that are passed to the configurable rules.\n * {globals} - An object representing a list of variables that are\n *             registered as globals\n * {parser} - String representing the parser to use\n * {settings} - An object representing global settings for all rules\n * {numErrors} - If failing case doesn't need to check error message,\n *               this integer will specify how many errors should be\n *               received\n * {errorMessage} - Message that is returned by the rule on failure\n * {errorNodeType} - AST node type that is returned by they rule as\n *                   a cause of the failure.\n */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst assert = require(\"assert\"),\n  path = require(\"path\"),\n  util = require(\"util\"),\n  merge = require(\"lodash.merge\"),\n  equal = require(\"fast-deep-equal\"),\n  Traverser = require(\"../../lib/shared/traverser\"),\n  {\n    getRuleOptionsSchema,\n    validate\n  } = require(\"../shared/config-validator\"),\n  {\n    Linter,\n    SourceCodeFixer,\n    interpolate\n  } = require(\"../linter\");\nconst ajv = require(\"../shared/ajv\")({\n  strictDefaults: true\n});\nconst espreePath = require.resolve(\"espree\");\nconst parserSymbol = Symbol.for(\"eslint.RuleTester.parser\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {import(\"../shared/types\").Parser} Parser */\n\n/**\n * A test case that is expected to pass lint.\n * @typedef {Object} ValidTestCase\n * @property {string} code Code for the test case.\n * @property {any[]} [options] Options for the test case.\n * @property {{ [name: string]: any }} [settings] Settings for the test case.\n * @property {string} [filename] The fake filename for the test case. Useful for rules that make assertion about filenames.\n * @property {string} [parser] The absolute path for the parser.\n * @property {{ [name: string]: any }} [parserOptions] Options for the parser.\n * @property {{ [name: string]: \"readonly\" | \"writable\" | \"off\" }} [globals] The additional global variables.\n * @property {{ [name: string]: boolean }} [env] Environments for the test case.\n * @property {boolean} [only] Run only this test case or the subset of test cases with this property.\n */\n\n/**\n * A test case that is expected to fail lint.\n * @typedef {Object} InvalidTestCase\n * @property {string} code Code for the test case.\n * @property {number | Array<TestCaseError | string | RegExp>} errors Expected errors.\n * @property {string | null} [output] The expected code after autofixes are applied. If set to `null`, the test runner will assert that no autofix is suggested.\n * @property {any[]} [options] Options for the test case.\n * @property {{ [name: string]: any }} [settings] Settings for the test case.\n * @property {string} [filename] The fake filename for the test case. Useful for rules that make assertion about filenames.\n * @property {string} [parser] The absolute path for the parser.\n * @property {{ [name: string]: any }} [parserOptions] Options for the parser.\n * @property {{ [name: string]: \"readonly\" | \"writable\" | \"off\" }} [globals] The additional global variables.\n * @property {{ [name: string]: boolean }} [env] Environments for the test case.\n * @property {boolean} [only] Run only this test case or the subset of test cases with this property.\n */\n\n/**\n * A description of a reported error used in a rule tester test.\n * @typedef {Object} TestCaseError\n * @property {string | RegExp} [message] Message.\n * @property {string} [messageId] Message ID.\n * @property {string} [type] The type of the reported AST node.\n * @property {{ [name: string]: string }} [data] The data used to fill the message template.\n * @property {number} [line] The 1-based line number of the reported start location.\n * @property {number} [column] The 1-based column number of the reported start location.\n * @property {number} [endLine] The 1-based line number of the reported end location.\n * @property {number} [endColumn] The 1-based column number of the reported end location.\n */\n\n//------------------------------------------------------------------------------\n// Private Members\n//------------------------------------------------------------------------------\n\n/*\n * testerDefaultConfig must not be modified as it allows to reset the tester to\n * the initial default configuration\n */\nconst testerDefaultConfig = {\n  rules: {}\n};\nlet defaultConfig = {\n  rules: {}\n};\n\n/*\n * List every parameters possible on a test case that are not related to eslint\n * configuration\n */\nconst RuleTesterParameters = [\"code\", \"filename\", \"options\", \"errors\", \"output\", \"only\"];\n\n/*\n * All allowed property names in error objects.\n */\nconst errorObjectParameters = new Set([\"message\", \"messageId\", \"data\", \"type\", \"line\", \"column\", \"endLine\", \"endColumn\", \"suggestions\"]);\nconst friendlyErrorObjectParameterList = `[${[...errorObjectParameters].map(key => `'${key}'`).join(\", \")}]`;\n\n/*\n * All allowed property names in suggestion objects.\n */\nconst suggestionObjectParameters = new Set([\"desc\", \"messageId\", \"data\", \"output\"]);\nconst friendlySuggestionObjectParameterList = `[${[...suggestionObjectParameters].map(key => `'${key}'`).join(\", \")}]`;\nconst hasOwnProperty = Function.call.bind(Object.hasOwnProperty);\n\n/**\n * Clones a given value deeply.\n * Note: This ignores `parent` property.\n * @param {any} x A value to clone.\n * @returns {any} A cloned value.\n */\nfunction cloneDeeplyExcludesParent(x) {\n  if (typeof x === \"object\" && x !== null) {\n    if (Array.isArray(x)) {\n      return x.map(cloneDeeplyExcludesParent);\n    }\n    const retv = {};\n    for (const key in x) {\n      if (key !== \"parent\" && hasOwnProperty(x, key)) {\n        retv[key] = cloneDeeplyExcludesParent(x[key]);\n      }\n    }\n    return retv;\n  }\n  return x;\n}\n\n/**\n * Freezes a given value deeply.\n * @param {any} x A value to freeze.\n * @returns {void}\n */\nfunction freezeDeeply(x) {\n  if (typeof x === \"object\" && x !== null) {\n    if (Array.isArray(x)) {\n      x.forEach(freezeDeeply);\n    } else {\n      for (const key in x) {\n        if (key !== \"parent\" && hasOwnProperty(x, key)) {\n          freezeDeeply(x[key]);\n        }\n      }\n    }\n    Object.freeze(x);\n  }\n}\n\n/**\n * Replace control characters by `\\u00xx` form.\n * @param {string} text The text to sanitize.\n * @returns {string} The sanitized text.\n */\nfunction sanitize(text) {\n  return text.replace(/[\\u0000-\\u0009\\u000b-\\u001a]/gu,\n  // eslint-disable-line no-control-regex\n  c => `\\\\u${c.codePointAt(0).toString(16).padStart(4, \"0\")}`);\n}\n\n/**\n * Define `start`/`end` properties as throwing error.\n * @param {string} objName Object name used for error messages.\n * @param {ASTNode} node The node to define.\n * @returns {void}\n */\nfunction defineStartEndAsError(objName, node) {\n  Object.defineProperties(node, {\n    start: {\n      get() {\n        throw new Error(`Use ${objName}.range[0] instead of ${objName}.start`);\n      },\n      configurable: true,\n      enumerable: false\n    },\n    end: {\n      get() {\n        throw new Error(`Use ${objName}.range[1] instead of ${objName}.end`);\n      },\n      configurable: true,\n      enumerable: false\n    }\n  });\n}\n\n/**\n * Define `start`/`end` properties of all nodes of the given AST as throwing error.\n * @param {ASTNode} ast The root node to errorize `start`/`end` properties.\n * @param {Object} [visitorKeys] Visitor keys to be used for traversing the given ast.\n * @returns {void}\n */\nfunction defineStartEndAsErrorInTree(ast, visitorKeys) {\n  Traverser.traverse(ast, {\n    visitorKeys,\n    enter: defineStartEndAsError.bind(null, \"node\")\n  });\n  ast.tokens.forEach(defineStartEndAsError.bind(null, \"token\"));\n  ast.comments.forEach(defineStartEndAsError.bind(null, \"token\"));\n}\n\n/**\n * Wraps the given parser in order to intercept and modify return values from the `parse` and `parseForESLint` methods, for test purposes.\n * In particular, to modify ast nodes, tokens and comments to throw on access to their `start` and `end` properties.\n * @param {Parser} parser Parser object.\n * @returns {Parser} Wrapped parser object.\n */\nfunction wrapParser(parser) {\n  if (typeof parser.parseForESLint === \"function\") {\n    return {\n      [parserSymbol]: parser,\n      parseForESLint(...args) {\n        const ret = parser.parseForESLint(...args);\n        defineStartEndAsErrorInTree(ret.ast, ret.visitorKeys);\n        return ret;\n      }\n    };\n  }\n  return {\n    [parserSymbol]: parser,\n    parse(...args) {\n      const ast = parser.parse(...args);\n      defineStartEndAsErrorInTree(ast);\n      return ast;\n    }\n  };\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n// default separators for testing\nconst DESCRIBE = Symbol(\"describe\");\nconst IT = Symbol(\"it\");\nconst IT_ONLY = Symbol(\"itOnly\");\n\n/**\n * This is `it` default handler if `it` don't exist.\n * @this {Mocha}\n * @param {string} text The description of the test case.\n * @param {Function} method The logic of the test case.\n * @returns {any} Returned value of `method`.\n */\nfunction itDefaultHandler(text, method) {\n  try {\n    return method.call(this);\n  } catch (err) {\n    if (err instanceof assert.AssertionError) {\n      err.message += ` (${util.inspect(err.actual)} ${err.operator} ${util.inspect(err.expected)})`;\n    }\n    throw err;\n  }\n}\n\n/**\n * This is `describe` default handler if `describe` don't exist.\n * @this {Mocha}\n * @param {string} text The description of the test case.\n * @param {Function} method The logic of the test case.\n * @returns {any} Returned value of `method`.\n */\nfunction describeDefaultHandler(text, method) {\n  return method.call(this);\n}\nclass RuleTester {\n  /**\n   * Creates a new instance of RuleTester.\n   * @param {Object} [testerConfig] Optional, extra configuration for the tester\n   */\n  constructor(testerConfig) {\n    /**\n     * The configuration to use for this tester. Combination of the tester\n     * configuration and the default configuration.\n     * @type {Object}\n     */\n    this.testerConfig = merge({}, defaultConfig, testerConfig, {\n      rules: {\n        \"rule-tester/validate-ast\": \"error\"\n      }\n    });\n\n    /**\n     * Rule definitions to define before tests.\n     * @type {Object}\n     */\n    this.rules = {};\n    this.linter = new Linter();\n  }\n\n  /**\n   * Set the configuration to use for all future tests\n   * @param {Object} config the configuration to use.\n   * @returns {void}\n   */\n  static setDefaultConfig(config) {\n    if (typeof config !== \"object\") {\n      throw new TypeError(\"RuleTester.setDefaultConfig: config must be an object\");\n    }\n    defaultConfig = config;\n\n    // Make sure the rules object exists since it is assumed to exist later\n    defaultConfig.rules = defaultConfig.rules || {};\n  }\n\n  /**\n   * Get the current configuration used for all tests\n   * @returns {Object} the current configuration\n   */\n  static getDefaultConfig() {\n    return defaultConfig;\n  }\n\n  /**\n   * Reset the configuration to the initial configuration of the tester removing\n   * any changes made until now.\n   * @returns {void}\n   */\n  static resetDefaultConfig() {\n    defaultConfig = merge({}, testerDefaultConfig);\n  }\n\n  /*\n   * If people use `mocha test.js --watch` command, `describe` and `it` function\n   * instances are different for each execution. So `describe` and `it` should get fresh instance\n   * always.\n   */\n  static get describe() {\n    return this[DESCRIBE] || (typeof describe === \"function\" ? describe : describeDefaultHandler);\n  }\n  static set describe(value) {\n    this[DESCRIBE] = value;\n  }\n  static get it() {\n    return this[IT] || (typeof it === \"function\" ? it : itDefaultHandler);\n  }\n  static set it(value) {\n    this[IT] = value;\n  }\n\n  /**\n   * Adds the `only` property to a test to run it in isolation.\n   * @param {string | ValidTestCase | InvalidTestCase} item A single test to run by itself.\n   * @returns {ValidTestCase | InvalidTestCase} The test with `only` set.\n   */\n  static only(item) {\n    if (typeof item === \"string\") {\n      return {\n        code: item,\n        only: true\n      };\n    }\n    return {\n      ...item,\n      only: true\n    };\n  }\n  static get itOnly() {\n    if (typeof this[IT_ONLY] === \"function\") {\n      return this[IT_ONLY];\n    }\n    if (typeof this[IT] === \"function\" && typeof this[IT].only === \"function\") {\n      return Function.bind.call(this[IT].only, this[IT]);\n    }\n    if (typeof it === \"function\" && typeof it.only === \"function\") {\n      return Function.bind.call(it.only, it);\n    }\n    if (typeof this[DESCRIBE] === \"function\" || typeof this[IT] === \"function\") {\n      throw new Error(\"Set `RuleTester.itOnly` to use `only` with a custom test framework.\\n\" + \"See https://eslint.org/docs/developer-guide/nodejs-api#customizing-ruletester for more.\");\n    }\n    if (typeof it === \"function\") {\n      throw new Error(\"The current test framework does not support exclusive tests with `only`.\");\n    }\n    throw new Error(\"To use `only`, use RuleTester with a test framework that provides `it.only()` like Mocha.\");\n  }\n  static set itOnly(value) {\n    this[IT_ONLY] = value;\n  }\n\n  /**\n   * Define a rule for one particular run of tests.\n   * @param {string} name The name of the rule to define.\n   * @param {Function} rule The rule definition.\n   * @returns {void}\n   */\n  defineRule(name, rule) {\n    this.rules[name] = rule;\n  }\n\n  /**\n   * Adds a new rule test to execute.\n   * @param {string} ruleName The name of the rule to run.\n   * @param {Function} rule The rule to test.\n   * @param {{\n   *   valid: (ValidTestCase | string)[],\n   *   invalid: InvalidTestCase[]\n   * }} test The collection of tests to run.\n   * @returns {void}\n   */\n  run(ruleName, rule, test) {\n    const testerConfig = this.testerConfig,\n      requiredScenarios = [\"valid\", \"invalid\"],\n      scenarioErrors = [],\n      linter = this.linter;\n    if (!test || typeof test !== \"object\") {\n      throw new TypeError(`Test Scenarios for rule ${ruleName} : Could not find test scenario object`);\n    }\n    requiredScenarios.forEach(scenarioType => {\n      if (!test[scenarioType]) {\n        scenarioErrors.push(`Could not find any ${scenarioType} test scenarios`);\n      }\n    });\n    if (scenarioErrors.length > 0) {\n      throw new Error([`Test Scenarios for rule ${ruleName} is invalid:`].concat(scenarioErrors).join(\"\\n\"));\n    }\n    linter.defineRule(ruleName, Object.assign({}, rule, {\n      // Create a wrapper rule that freezes the `context` properties.\n      create(context) {\n        freezeDeeply(context.options);\n        freezeDeeply(context.settings);\n        freezeDeeply(context.parserOptions);\n        return (typeof rule === \"function\" ? rule : rule.create)(context);\n      }\n    }));\n    linter.defineRules(this.rules);\n\n    /**\n     * Run the rule for the given item\n     * @param {string|Object} item Item to run the rule against\n     * @returns {Object} Eslint run result\n     * @private\n     */\n    function runRuleForItem(item) {\n      let config = merge({}, testerConfig),\n        code,\n        filename,\n        output,\n        beforeAST,\n        afterAST;\n      if (typeof item === \"string\") {\n        code = item;\n      } else {\n        code = item.code;\n\n        /*\n         * Assumes everything on the item is a config except for the\n         * parameters used by this tester\n         */\n        const itemConfig = {\n          ...item\n        };\n        for (const parameter of RuleTesterParameters) {\n          delete itemConfig[parameter];\n        }\n\n        /*\n         * Create the config object from the tester config and this item\n         * specific configurations.\n         */\n        config = merge(config, itemConfig);\n      }\n      if (item.filename) {\n        filename = item.filename;\n      }\n      if (hasOwnProperty(item, \"options\")) {\n        assert(Array.isArray(item.options), \"options must be an array\");\n        config.rules[ruleName] = [1].concat(item.options);\n      } else {\n        config.rules[ruleName] = 1;\n      }\n      const schema = getRuleOptionsSchema(rule);\n\n      /*\n       * Setup AST getters.\n       * The goal is to check whether or not AST was modified when\n       * running the rule under test.\n       */\n      linter.defineRule(\"rule-tester/validate-ast\", () => ({\n        Program(node) {\n          beforeAST = cloneDeeplyExcludesParent(node);\n        },\n        \"Program:exit\"(node) {\n          afterAST = node;\n        }\n      }));\n      if (typeof config.parser === \"string\") {\n        assert(path.isAbsolute(config.parser), \"Parsers provided as strings to RuleTester must be absolute paths\");\n      } else {\n        config.parser = espreePath;\n      }\n      linter.defineParser(config.parser, wrapParser(require(config.parser)));\n      if (schema) {\n        ajv.validateSchema(schema);\n        if (ajv.errors) {\n          const errors = ajv.errors.map(error => {\n            const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n            return `\\t${field}: ${error.message}`;\n          }).join(\"\\n\");\n          throw new Error([`Schema for rule ${ruleName} is invalid:`, errors]);\n        }\n\n        /*\n         * `ajv.validateSchema` checks for errors in the structure of the schema (by comparing the schema against a \"meta-schema\"),\n         * and it reports those errors individually. However, there are other types of schema errors that only occur when compiling\n         * the schema (e.g. using invalid defaults in a schema), and only one of these errors can be reported at a time. As a result,\n         * the schema is compiled here separately from checking for `validateSchema` errors.\n         */\n        try {\n          ajv.compile(schema);\n        } catch (err) {\n          throw new Error(`Schema for rule ${ruleName} is invalid: ${err.message}`);\n        }\n      }\n      validate(config, \"rule-tester\", id => id === ruleName ? rule : null);\n\n      // Verify the code.\n      const messages = linter.verify(code, config, filename);\n      const fatalErrorMessage = messages.find(m => m.fatal);\n      assert(!fatalErrorMessage, `A fatal parsing error occurred: ${fatalErrorMessage && fatalErrorMessage.message}`);\n\n      // Verify if autofix makes a syntax error or not.\n      if (messages.some(m => m.fix)) {\n        output = SourceCodeFixer.applyFixes(code, messages).output;\n        const errorMessageInFix = linter.verify(output, config, filename).find(m => m.fatal);\n        assert(!errorMessageInFix, [\"A fatal parsing error occurred in autofix.\", `Error: ${errorMessageInFix && errorMessageInFix.message}`, \"Autofix output:\", output].join(\"\\n\"));\n      } else {\n        output = code;\n      }\n      return {\n        messages,\n        output,\n        beforeAST,\n        afterAST: cloneDeeplyExcludesParent(afterAST)\n      };\n    }\n\n    /**\n     * Check if the AST was changed\n     * @param {ASTNode} beforeAST AST node before running\n     * @param {ASTNode} afterAST AST node after running\n     * @returns {void}\n     * @private\n     */\n    function assertASTDidntChange(beforeAST, afterAST) {\n      if (!equal(beforeAST, afterAST)) {\n        assert.fail(\"Rule should not modify AST.\");\n      }\n    }\n\n    /**\n     * Check if the template is valid or not\n     * all valid cases go through this\n     * @param {string|Object} item Item to run the rule against\n     * @returns {void}\n     * @private\n     */\n    function testValidTemplate(item) {\n      const result = runRuleForItem(item);\n      const messages = result.messages;\n      assert.strictEqual(messages.length, 0, util.format(\"Should have no errors but had %d: %s\", messages.length, util.inspect(messages)));\n      assertASTDidntChange(result.beforeAST, result.afterAST);\n    }\n\n    /**\n     * Asserts that the message matches its expected value. If the expected\n     * value is a regular expression, it is checked against the actual\n     * value.\n     * @param {string} actual Actual value\n     * @param {string|RegExp} expected Expected value\n     * @returns {void}\n     * @private\n     */\n    function assertMessageMatches(actual, expected) {\n      if (expected instanceof RegExp) {\n        // assert.js doesn't have a built-in RegExp match function\n        assert.ok(expected.test(actual), `Expected '${actual}' to match ${expected}`);\n      } else {\n        assert.strictEqual(actual, expected);\n      }\n    }\n\n    /**\n     * Check if the template is invalid or not\n     * all invalid cases go through this.\n     * @param {string|Object} item Item to run the rule against\n     * @returns {void}\n     * @private\n     */\n    function testInvalidTemplate(item) {\n      assert.ok(item.errors || item.errors === 0, `Did not specify errors for an invalid test of ${ruleName}`);\n      if (Array.isArray(item.errors) && item.errors.length === 0) {\n        assert.fail(\"Invalid cases must have at least one error\");\n      }\n      const ruleHasMetaMessages = hasOwnProperty(rule, \"meta\") && hasOwnProperty(rule.meta, \"messages\");\n      const friendlyIDList = ruleHasMetaMessages ? `[${Object.keys(rule.meta.messages).map(key => `'${key}'`).join(\", \")}]` : null;\n      const result = runRuleForItem(item);\n      const messages = result.messages;\n      if (typeof item.errors === \"number\") {\n        if (item.errors === 0) {\n          assert.fail(\"Invalid cases must have 'error' value greater than 0\");\n        }\n        assert.strictEqual(messages.length, item.errors, util.format(\"Should have %d error%s but had %d: %s\", item.errors, item.errors === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));\n      } else {\n        assert.strictEqual(messages.length, item.errors.length, util.format(\"Should have %d error%s but had %d: %s\", item.errors.length, item.errors.length === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));\n        const hasMessageOfThisRule = messages.some(m => m.ruleId === ruleName);\n        for (let i = 0, l = item.errors.length; i < l; i++) {\n          const error = item.errors[i];\n          const message = messages[i];\n          assert(hasMessageOfThisRule, \"Error rule name should be the same as the name of the rule being tested\");\n          if (typeof error === \"string\" || error instanceof RegExp) {\n            // Just an error message.\n            assertMessageMatches(message.message, error);\n          } else if (typeof error === \"object\" && error !== null) {\n            /*\n             * Error object.\n             * This may have a message, messageId, data, node type, line, and/or\n             * column.\n             */\n\n            Object.keys(error).forEach(propertyName => {\n              assert.ok(errorObjectParameters.has(propertyName), `Invalid error property name '${propertyName}'. Expected one of ${friendlyErrorObjectParameterList}.`);\n            });\n            if (hasOwnProperty(error, \"message\")) {\n              assert.ok(!hasOwnProperty(error, \"messageId\"), \"Error should not specify both 'message' and a 'messageId'.\");\n              assert.ok(!hasOwnProperty(error, \"data\"), \"Error should not specify both 'data' and 'message'.\");\n              assertMessageMatches(message.message, error.message);\n            } else if (hasOwnProperty(error, \"messageId\")) {\n              assert.ok(ruleHasMetaMessages, \"Error can not use 'messageId' if rule under test doesn't define 'meta.messages'.\");\n              if (!hasOwnProperty(rule.meta.messages, error.messageId)) {\n                assert(false, `Invalid messageId '${error.messageId}'. Expected one of ${friendlyIDList}.`);\n              }\n              assert.strictEqual(message.messageId, error.messageId, `messageId '${message.messageId}' does not match expected messageId '${error.messageId}'.`);\n              if (hasOwnProperty(error, \"data\")) {\n                /*\n                 *  if data was provided, then directly compare the returned message to a synthetic\n                 *  interpolated message using the same message ID and data provided in the test.\n                 *  See https://github.com/eslint/eslint/issues/9890 for context.\n                 */\n                const unformattedOriginalMessage = rule.meta.messages[error.messageId];\n                const rehydratedMessage = interpolate(unformattedOriginalMessage, error.data);\n                assert.strictEqual(message.message, rehydratedMessage, `Hydrated message \"${rehydratedMessage}\" does not match \"${message.message}\"`);\n              }\n            }\n            assert.ok(hasOwnProperty(error, \"data\") ? hasOwnProperty(error, \"messageId\") : true, \"Error must specify 'messageId' if 'data' is used.\");\n            if (error.type) {\n              assert.strictEqual(message.nodeType, error.type, `Error type should be ${error.type}, found ${message.nodeType}`);\n            }\n            if (hasOwnProperty(error, \"line\")) {\n              assert.strictEqual(message.line, error.line, `Error line should be ${error.line}`);\n            }\n            if (hasOwnProperty(error, \"column\")) {\n              assert.strictEqual(message.column, error.column, `Error column should be ${error.column}`);\n            }\n            if (hasOwnProperty(error, \"endLine\")) {\n              assert.strictEqual(message.endLine, error.endLine, `Error endLine should be ${error.endLine}`);\n            }\n            if (hasOwnProperty(error, \"endColumn\")) {\n              assert.strictEqual(message.endColumn, error.endColumn, `Error endColumn should be ${error.endColumn}`);\n            }\n            if (hasOwnProperty(error, \"suggestions\")) {\n              // Support asserting there are no suggestions\n              if (!error.suggestions || Array.isArray(error.suggestions) && error.suggestions.length === 0) {\n                if (Array.isArray(message.suggestions) && message.suggestions.length > 0) {\n                  assert.fail(`Error should have no suggestions on error with message: \"${message.message}\"`);\n                }\n              } else {\n                assert.strictEqual(Array.isArray(message.suggestions), true, `Error should have an array of suggestions. Instead received \"${message.suggestions}\" on error with message: \"${message.message}\"`);\n                assert.strictEqual(message.suggestions.length, error.suggestions.length, `Error should have ${error.suggestions.length} suggestions. Instead found ${message.suggestions.length} suggestions`);\n                error.suggestions.forEach((expectedSuggestion, index) => {\n                  assert.ok(typeof expectedSuggestion === \"object\" && expectedSuggestion !== null, \"Test suggestion in 'suggestions' array must be an object.\");\n                  Object.keys(expectedSuggestion).forEach(propertyName => {\n                    assert.ok(suggestionObjectParameters.has(propertyName), `Invalid suggestion property name '${propertyName}'. Expected one of ${friendlySuggestionObjectParameterList}.`);\n                  });\n                  const actualSuggestion = message.suggestions[index];\n                  const suggestionPrefix = `Error Suggestion at index ${index} :`;\n                  if (hasOwnProperty(expectedSuggestion, \"desc\")) {\n                    assert.ok(!hasOwnProperty(expectedSuggestion, \"data\"), `${suggestionPrefix} Test should not specify both 'desc' and 'data'.`);\n                    assert.strictEqual(actualSuggestion.desc, expectedSuggestion.desc, `${suggestionPrefix} desc should be \"${expectedSuggestion.desc}\" but got \"${actualSuggestion.desc}\" instead.`);\n                  }\n                  if (hasOwnProperty(expectedSuggestion, \"messageId\")) {\n                    assert.ok(ruleHasMetaMessages, `${suggestionPrefix} Test can not use 'messageId' if rule under test doesn't define 'meta.messages'.`);\n                    assert.ok(hasOwnProperty(rule.meta.messages, expectedSuggestion.messageId), `${suggestionPrefix} Test has invalid messageId '${expectedSuggestion.messageId}', the rule under test allows only one of ${friendlyIDList}.`);\n                    assert.strictEqual(actualSuggestion.messageId, expectedSuggestion.messageId, `${suggestionPrefix} messageId should be '${expectedSuggestion.messageId}' but got '${actualSuggestion.messageId}' instead.`);\n                    if (hasOwnProperty(expectedSuggestion, \"data\")) {\n                      const unformattedMetaMessage = rule.meta.messages[expectedSuggestion.messageId];\n                      const rehydratedDesc = interpolate(unformattedMetaMessage, expectedSuggestion.data);\n                      assert.strictEqual(actualSuggestion.desc, rehydratedDesc, `${suggestionPrefix} Hydrated test desc \"${rehydratedDesc}\" does not match received desc \"${actualSuggestion.desc}\".`);\n                    }\n                  } else {\n                    assert.ok(!hasOwnProperty(expectedSuggestion, \"data\"), `${suggestionPrefix} Test must specify 'messageId' if 'data' is used.`);\n                  }\n                  if (hasOwnProperty(expectedSuggestion, \"output\")) {\n                    const codeWithAppliedSuggestion = SourceCodeFixer.applyFixes(item.code, [actualSuggestion]).output;\n                    assert.strictEqual(codeWithAppliedSuggestion, expectedSuggestion.output, `Expected the applied suggestion fix to match the test suggestion output for suggestion at index: ${index} on error with message: \"${message.message}\"`);\n                  }\n                });\n              }\n            }\n          } else {\n            // Message was an unexpected type\n            assert.fail(`Error should be a string, object, or RegExp, but found (${util.inspect(message)})`);\n          }\n        }\n      }\n      if (hasOwnProperty(item, \"output\")) {\n        if (item.output === null) {\n          assert.strictEqual(result.output, item.code, \"Expected no autofixes to be suggested\");\n        } else {\n          assert.strictEqual(result.output, item.output, \"Output is incorrect.\");\n        }\n      } else {\n        assert.strictEqual(result.output, item.code, \"The rule fixed the code. Please add 'output' property.\");\n      }\n\n      // Rules that produce fixes must have `meta.fixable` property.\n      if (result.output !== item.code) {\n        assert.ok(hasOwnProperty(rule, \"meta\"), \"Fixable rules should export a `meta.fixable` property.\");\n\n        // Linter throws if a rule that produced a fix has `meta` but doesn't have `meta.fixable`.\n      }\n\n      assertASTDidntChange(result.beforeAST, result.afterAST);\n    }\n\n    /*\n     * This creates a mocha test suite and pipes all supplied info through\n     * one of the templates above.\n     */\n    RuleTester.describe(ruleName, () => {\n      RuleTester.describe(\"valid\", () => {\n        test.valid.forEach(valid => {\n          RuleTester[valid.only ? \"itOnly\" : \"it\"](sanitize(typeof valid === \"object\" ? valid.code : valid), () => {\n            testValidTemplate(valid);\n          });\n        });\n      });\n      RuleTester.describe(\"invalid\", () => {\n        test.invalid.forEach(invalid => {\n          RuleTester[invalid.only ? \"itOnly\" : \"it\"](sanitize(invalid.code), () => {\n            testInvalidTemplate(invalid);\n          });\n        });\n      });\n    });\n  }\n}\nRuleTester[DESCRIBE] = RuleTester[IT] = RuleTester[IT_ONLY] = null;\nmodule.exports = RuleTester;","map":{"version":3,"names":["require","assert","path","util","merge","equal","Traverser","getRuleOptionsSchema","validate","Linter","SourceCodeFixer","interpolate","ajv","strictDefaults","espreePath","resolve","parserSymbol","Symbol","for","testerDefaultConfig","rules","defaultConfig","RuleTesterParameters","errorObjectParameters","Set","friendlyErrorObjectParameterList","map","key","join","suggestionObjectParameters","friendlySuggestionObjectParameterList","hasOwnProperty","Function","call","bind","Object","cloneDeeplyExcludesParent","x","Array","isArray","retv","freezeDeeply","forEach","freeze","sanitize","text","replace","c","codePointAt","toString","padStart","defineStartEndAsError","objName","node","defineProperties","start","get","Error","configurable","enumerable","end","defineStartEndAsErrorInTree","ast","visitorKeys","traverse","enter","tokens","comments","wrapParser","parser","parseForESLint","args","ret","parse","DESCRIBE","IT","IT_ONLY","itDefaultHandler","method","err","AssertionError","message","inspect","actual","operator","expected","describeDefaultHandler","RuleTester","constructor","testerConfig","linter","setDefaultConfig","config","TypeError","getDefaultConfig","resetDefaultConfig","describe","value","it","only","item","code","itOnly","defineRule","name","rule","run","ruleName","test","requiredScenarios","scenarioErrors","scenarioType","push","length","concat","assign","create","context","options","settings","parserOptions","defineRules","runRuleForItem","filename","output","beforeAST","afterAST","itemConfig","parameter","schema","Program","Program:exit","isAbsolute","defineParser","validateSchema","errors","error","field","dataPath","slice","compile","id","messages","verify","fatalErrorMessage","find","m","fatal","some","fix","applyFixes","errorMessageInFix","assertASTDidntChange","fail","testValidTemplate","result","strictEqual","format","assertMessageMatches","RegExp","ok","testInvalidTemplate","ruleHasMetaMessages","meta","friendlyIDList","keys","hasMessageOfThisRule","ruleId","i","l","propertyName","has","messageId","unformattedOriginalMessage","rehydratedMessage","data","type","nodeType","line","column","endLine","endColumn","suggestions","expectedSuggestion","index","actualSuggestion","suggestionPrefix","desc","unformattedMetaMessage","rehydratedDesc","codeWithAppliedSuggestion","valid","invalid","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rule-tester/rule-tester.js"],"sourcesContent":["/**\n * @fileoverview Mocha test wrapper\n * @author Ilya Volodin\n */\n\"use strict\";\n\n/* global describe, it */\n\n/*\n * This is a wrapper around mocha to allow for DRY unittests for eslint\n * Format:\n * RuleTester.run(\"{ruleName}\", {\n *      valid: [\n *          \"{code}\",\n *          { code: \"{code}\", options: {options}, globals: {globals}, parser: \"{parser}\", settings: {settings} }\n *      ],\n *      invalid: [\n *          { code: \"{code}\", errors: {numErrors} },\n *          { code: \"{code}\", errors: [\"{errorMessage}\"] },\n *          { code: \"{code}\", options: {options}, globals: {globals}, parser: \"{parser}\", settings: {settings}, errors: [{ message: \"{errorMessage}\", type: \"{errorNodeType}\"}] }\n *      ]\n *  });\n *\n * Variables:\n * {code} - String that represents the code to be tested\n * {options} - Arguments that are passed to the configurable rules.\n * {globals} - An object representing a list of variables that are\n *             registered as globals\n * {parser} - String representing the parser to use\n * {settings} - An object representing global settings for all rules\n * {numErrors} - If failing case doesn't need to check error message,\n *               this integer will specify how many errors should be\n *               received\n * {errorMessage} - Message that is returned by the rule on failure\n * {errorNodeType} - AST node type that is returned by they rule as\n *                   a cause of the failure.\n */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst\n    assert = require(\"assert\"),\n    path = require(\"path\"),\n    util = require(\"util\"),\n    merge = require(\"lodash.merge\"),\n    equal = require(\"fast-deep-equal\"),\n    Traverser = require(\"../../lib/shared/traverser\"),\n    { getRuleOptionsSchema, validate } = require(\"../shared/config-validator\"),\n    { Linter, SourceCodeFixer, interpolate } = require(\"../linter\");\n\nconst ajv = require(\"../shared/ajv\")({ strictDefaults: true });\n\nconst espreePath = require.resolve(\"espree\");\nconst parserSymbol = Symbol.for(\"eslint.RuleTester.parser\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {import(\"../shared/types\").Parser} Parser */\n\n/**\n * A test case that is expected to pass lint.\n * @typedef {Object} ValidTestCase\n * @property {string} code Code for the test case.\n * @property {any[]} [options] Options for the test case.\n * @property {{ [name: string]: any }} [settings] Settings for the test case.\n * @property {string} [filename] The fake filename for the test case. Useful for rules that make assertion about filenames.\n * @property {string} [parser] The absolute path for the parser.\n * @property {{ [name: string]: any }} [parserOptions] Options for the parser.\n * @property {{ [name: string]: \"readonly\" | \"writable\" | \"off\" }} [globals] The additional global variables.\n * @property {{ [name: string]: boolean }} [env] Environments for the test case.\n * @property {boolean} [only] Run only this test case or the subset of test cases with this property.\n */\n\n/**\n * A test case that is expected to fail lint.\n * @typedef {Object} InvalidTestCase\n * @property {string} code Code for the test case.\n * @property {number | Array<TestCaseError | string | RegExp>} errors Expected errors.\n * @property {string | null} [output] The expected code after autofixes are applied. If set to `null`, the test runner will assert that no autofix is suggested.\n * @property {any[]} [options] Options for the test case.\n * @property {{ [name: string]: any }} [settings] Settings for the test case.\n * @property {string} [filename] The fake filename for the test case. Useful for rules that make assertion about filenames.\n * @property {string} [parser] The absolute path for the parser.\n * @property {{ [name: string]: any }} [parserOptions] Options for the parser.\n * @property {{ [name: string]: \"readonly\" | \"writable\" | \"off\" }} [globals] The additional global variables.\n * @property {{ [name: string]: boolean }} [env] Environments for the test case.\n * @property {boolean} [only] Run only this test case or the subset of test cases with this property.\n */\n\n/**\n * A description of a reported error used in a rule tester test.\n * @typedef {Object} TestCaseError\n * @property {string | RegExp} [message] Message.\n * @property {string} [messageId] Message ID.\n * @property {string} [type] The type of the reported AST node.\n * @property {{ [name: string]: string }} [data] The data used to fill the message template.\n * @property {number} [line] The 1-based line number of the reported start location.\n * @property {number} [column] The 1-based column number of the reported start location.\n * @property {number} [endLine] The 1-based line number of the reported end location.\n * @property {number} [endColumn] The 1-based column number of the reported end location.\n */\n\n//------------------------------------------------------------------------------\n// Private Members\n//------------------------------------------------------------------------------\n\n/*\n * testerDefaultConfig must not be modified as it allows to reset the tester to\n * the initial default configuration\n */\nconst testerDefaultConfig = { rules: {} };\nlet defaultConfig = { rules: {} };\n\n/*\n * List every parameters possible on a test case that are not related to eslint\n * configuration\n */\nconst RuleTesterParameters = [\n    \"code\",\n    \"filename\",\n    \"options\",\n    \"errors\",\n    \"output\",\n    \"only\"\n];\n\n/*\n * All allowed property names in error objects.\n */\nconst errorObjectParameters = new Set([\n    \"message\",\n    \"messageId\",\n    \"data\",\n    \"type\",\n    \"line\",\n    \"column\",\n    \"endLine\",\n    \"endColumn\",\n    \"suggestions\"\n]);\nconst friendlyErrorObjectParameterList = `[${[...errorObjectParameters].map(key => `'${key}'`).join(\", \")}]`;\n\n/*\n * All allowed property names in suggestion objects.\n */\nconst suggestionObjectParameters = new Set([\n    \"desc\",\n    \"messageId\",\n    \"data\",\n    \"output\"\n]);\nconst friendlySuggestionObjectParameterList = `[${[...suggestionObjectParameters].map(key => `'${key}'`).join(\", \")}]`;\n\nconst hasOwnProperty = Function.call.bind(Object.hasOwnProperty);\n\n/**\n * Clones a given value deeply.\n * Note: This ignores `parent` property.\n * @param {any} x A value to clone.\n * @returns {any} A cloned value.\n */\nfunction cloneDeeplyExcludesParent(x) {\n    if (typeof x === \"object\" && x !== null) {\n        if (Array.isArray(x)) {\n            return x.map(cloneDeeplyExcludesParent);\n        }\n\n        const retv = {};\n\n        for (const key in x) {\n            if (key !== \"parent\" && hasOwnProperty(x, key)) {\n                retv[key] = cloneDeeplyExcludesParent(x[key]);\n            }\n        }\n\n        return retv;\n    }\n\n    return x;\n}\n\n/**\n * Freezes a given value deeply.\n * @param {any} x A value to freeze.\n * @returns {void}\n */\nfunction freezeDeeply(x) {\n    if (typeof x === \"object\" && x !== null) {\n        if (Array.isArray(x)) {\n            x.forEach(freezeDeeply);\n        } else {\n            for (const key in x) {\n                if (key !== \"parent\" && hasOwnProperty(x, key)) {\n                    freezeDeeply(x[key]);\n                }\n            }\n        }\n        Object.freeze(x);\n    }\n}\n\n/**\n * Replace control characters by `\\u00xx` form.\n * @param {string} text The text to sanitize.\n * @returns {string} The sanitized text.\n */\nfunction sanitize(text) {\n    return text.replace(\n        /[\\u0000-\\u0009\\u000b-\\u001a]/gu, // eslint-disable-line no-control-regex\n        c => `\\\\u${c.codePointAt(0).toString(16).padStart(4, \"0\")}`\n    );\n}\n\n/**\n * Define `start`/`end` properties as throwing error.\n * @param {string} objName Object name used for error messages.\n * @param {ASTNode} node The node to define.\n * @returns {void}\n */\nfunction defineStartEndAsError(objName, node) {\n    Object.defineProperties(node, {\n        start: {\n            get() {\n                throw new Error(`Use ${objName}.range[0] instead of ${objName}.start`);\n            },\n            configurable: true,\n            enumerable: false\n        },\n        end: {\n            get() {\n                throw new Error(`Use ${objName}.range[1] instead of ${objName}.end`);\n            },\n            configurable: true,\n            enumerable: false\n        }\n    });\n}\n\n\n/**\n * Define `start`/`end` properties of all nodes of the given AST as throwing error.\n * @param {ASTNode} ast The root node to errorize `start`/`end` properties.\n * @param {Object} [visitorKeys] Visitor keys to be used for traversing the given ast.\n * @returns {void}\n */\nfunction defineStartEndAsErrorInTree(ast, visitorKeys) {\n    Traverser.traverse(ast, { visitorKeys, enter: defineStartEndAsError.bind(null, \"node\") });\n    ast.tokens.forEach(defineStartEndAsError.bind(null, \"token\"));\n    ast.comments.forEach(defineStartEndAsError.bind(null, \"token\"));\n}\n\n/**\n * Wraps the given parser in order to intercept and modify return values from the `parse` and `parseForESLint` methods, for test purposes.\n * In particular, to modify ast nodes, tokens and comments to throw on access to their `start` and `end` properties.\n * @param {Parser} parser Parser object.\n * @returns {Parser} Wrapped parser object.\n */\nfunction wrapParser(parser) {\n\n    if (typeof parser.parseForESLint === \"function\") {\n        return {\n            [parserSymbol]: parser,\n            parseForESLint(...args) {\n                const ret = parser.parseForESLint(...args);\n\n                defineStartEndAsErrorInTree(ret.ast, ret.visitorKeys);\n                return ret;\n            }\n        };\n    }\n\n    return {\n        [parserSymbol]: parser,\n        parse(...args) {\n            const ast = parser.parse(...args);\n\n            defineStartEndAsErrorInTree(ast);\n            return ast;\n        }\n    };\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n// default separators for testing\nconst DESCRIBE = Symbol(\"describe\");\nconst IT = Symbol(\"it\");\nconst IT_ONLY = Symbol(\"itOnly\");\n\n/**\n * This is `it` default handler if `it` don't exist.\n * @this {Mocha}\n * @param {string} text The description of the test case.\n * @param {Function} method The logic of the test case.\n * @returns {any} Returned value of `method`.\n */\nfunction itDefaultHandler(text, method) {\n    try {\n        return method.call(this);\n    } catch (err) {\n        if (err instanceof assert.AssertionError) {\n            err.message += ` (${util.inspect(err.actual)} ${err.operator} ${util.inspect(err.expected)})`;\n        }\n        throw err;\n    }\n}\n\n/**\n * This is `describe` default handler if `describe` don't exist.\n * @this {Mocha}\n * @param {string} text The description of the test case.\n * @param {Function} method The logic of the test case.\n * @returns {any} Returned value of `method`.\n */\nfunction describeDefaultHandler(text, method) {\n    return method.call(this);\n}\n\nclass RuleTester {\n\n    /**\n     * Creates a new instance of RuleTester.\n     * @param {Object} [testerConfig] Optional, extra configuration for the tester\n     */\n    constructor(testerConfig) {\n\n        /**\n         * The configuration to use for this tester. Combination of the tester\n         * configuration and the default configuration.\n         * @type {Object}\n         */\n        this.testerConfig = merge(\n            {},\n            defaultConfig,\n            testerConfig,\n            { rules: { \"rule-tester/validate-ast\": \"error\" } }\n        );\n\n        /**\n         * Rule definitions to define before tests.\n         * @type {Object}\n         */\n        this.rules = {};\n        this.linter = new Linter();\n    }\n\n    /**\n     * Set the configuration to use for all future tests\n     * @param {Object} config the configuration to use.\n     * @returns {void}\n     */\n    static setDefaultConfig(config) {\n        if (typeof config !== \"object\") {\n            throw new TypeError(\"RuleTester.setDefaultConfig: config must be an object\");\n        }\n        defaultConfig = config;\n\n        // Make sure the rules object exists since it is assumed to exist later\n        defaultConfig.rules = defaultConfig.rules || {};\n    }\n\n    /**\n     * Get the current configuration used for all tests\n     * @returns {Object} the current configuration\n     */\n    static getDefaultConfig() {\n        return defaultConfig;\n    }\n\n    /**\n     * Reset the configuration to the initial configuration of the tester removing\n     * any changes made until now.\n     * @returns {void}\n     */\n    static resetDefaultConfig() {\n        defaultConfig = merge({}, testerDefaultConfig);\n    }\n\n\n    /*\n     * If people use `mocha test.js --watch` command, `describe` and `it` function\n     * instances are different for each execution. So `describe` and `it` should get fresh instance\n     * always.\n     */\n    static get describe() {\n        return (\n            this[DESCRIBE] ||\n            (typeof describe === \"function\" ? describe : describeDefaultHandler)\n        );\n    }\n\n    static set describe(value) {\n        this[DESCRIBE] = value;\n    }\n\n    static get it() {\n        return (\n            this[IT] ||\n            (typeof it === \"function\" ? it : itDefaultHandler)\n        );\n    }\n\n    static set it(value) {\n        this[IT] = value;\n    }\n\n    /**\n     * Adds the `only` property to a test to run it in isolation.\n     * @param {string | ValidTestCase | InvalidTestCase} item A single test to run by itself.\n     * @returns {ValidTestCase | InvalidTestCase} The test with `only` set.\n     */\n    static only(item) {\n        if (typeof item === \"string\") {\n            return { code: item, only: true };\n        }\n\n        return { ...item, only: true };\n    }\n\n    static get itOnly() {\n        if (typeof this[IT_ONLY] === \"function\") {\n            return this[IT_ONLY];\n        }\n        if (typeof this[IT] === \"function\" && typeof this[IT].only === \"function\") {\n            return Function.bind.call(this[IT].only, this[IT]);\n        }\n        if (typeof it === \"function\" && typeof it.only === \"function\") {\n            return Function.bind.call(it.only, it);\n        }\n\n        if (typeof this[DESCRIBE] === \"function\" || typeof this[IT] === \"function\") {\n            throw new Error(\n                \"Set `RuleTester.itOnly` to use `only` with a custom test framework.\\n\" +\n                \"See https://eslint.org/docs/developer-guide/nodejs-api#customizing-ruletester for more.\"\n            );\n        }\n        if (typeof it === \"function\") {\n            throw new Error(\"The current test framework does not support exclusive tests with `only`.\");\n        }\n        throw new Error(\"To use `only`, use RuleTester with a test framework that provides `it.only()` like Mocha.\");\n    }\n\n    static set itOnly(value) {\n        this[IT_ONLY] = value;\n    }\n\n    /**\n     * Define a rule for one particular run of tests.\n     * @param {string} name The name of the rule to define.\n     * @param {Function} rule The rule definition.\n     * @returns {void}\n     */\n    defineRule(name, rule) {\n        this.rules[name] = rule;\n    }\n\n    /**\n     * Adds a new rule test to execute.\n     * @param {string} ruleName The name of the rule to run.\n     * @param {Function} rule The rule to test.\n     * @param {{\n     *   valid: (ValidTestCase | string)[],\n     *   invalid: InvalidTestCase[]\n     * }} test The collection of tests to run.\n     * @returns {void}\n     */\n    run(ruleName, rule, test) {\n\n        const testerConfig = this.testerConfig,\n            requiredScenarios = [\"valid\", \"invalid\"],\n            scenarioErrors = [],\n            linter = this.linter;\n\n        if (!test || typeof test !== \"object\") {\n            throw new TypeError(`Test Scenarios for rule ${ruleName} : Could not find test scenario object`);\n        }\n\n        requiredScenarios.forEach(scenarioType => {\n            if (!test[scenarioType]) {\n                scenarioErrors.push(`Could not find any ${scenarioType} test scenarios`);\n            }\n        });\n\n        if (scenarioErrors.length > 0) {\n            throw new Error([\n                `Test Scenarios for rule ${ruleName} is invalid:`\n            ].concat(scenarioErrors).join(\"\\n\"));\n        }\n\n\n        linter.defineRule(ruleName, Object.assign({}, rule, {\n\n            // Create a wrapper rule that freezes the `context` properties.\n            create(context) {\n                freezeDeeply(context.options);\n                freezeDeeply(context.settings);\n                freezeDeeply(context.parserOptions);\n\n                return (typeof rule === \"function\" ? rule : rule.create)(context);\n            }\n        }));\n\n        linter.defineRules(this.rules);\n\n        /**\n         * Run the rule for the given item\n         * @param {string|Object} item Item to run the rule against\n         * @returns {Object} Eslint run result\n         * @private\n         */\n        function runRuleForItem(item) {\n            let config = merge({}, testerConfig),\n                code, filename, output, beforeAST, afterAST;\n\n            if (typeof item === \"string\") {\n                code = item;\n            } else {\n                code = item.code;\n\n                /*\n                 * Assumes everything on the item is a config except for the\n                 * parameters used by this tester\n                 */\n                const itemConfig = { ...item };\n\n                for (const parameter of RuleTesterParameters) {\n                    delete itemConfig[parameter];\n                }\n\n                /*\n                 * Create the config object from the tester config and this item\n                 * specific configurations.\n                 */\n                config = merge(\n                    config,\n                    itemConfig\n                );\n            }\n\n            if (item.filename) {\n                filename = item.filename;\n            }\n\n            if (hasOwnProperty(item, \"options\")) {\n                assert(Array.isArray(item.options), \"options must be an array\");\n                config.rules[ruleName] = [1].concat(item.options);\n            } else {\n                config.rules[ruleName] = 1;\n            }\n\n            const schema = getRuleOptionsSchema(rule);\n\n            /*\n             * Setup AST getters.\n             * The goal is to check whether or not AST was modified when\n             * running the rule under test.\n             */\n            linter.defineRule(\"rule-tester/validate-ast\", () => ({\n                Program(node) {\n                    beforeAST = cloneDeeplyExcludesParent(node);\n                },\n                \"Program:exit\"(node) {\n                    afterAST = node;\n                }\n            }));\n\n            if (typeof config.parser === \"string\") {\n                assert(path.isAbsolute(config.parser), \"Parsers provided as strings to RuleTester must be absolute paths\");\n            } else {\n                config.parser = espreePath;\n            }\n\n            linter.defineParser(config.parser, wrapParser(require(config.parser)));\n\n            if (schema) {\n                ajv.validateSchema(schema);\n\n                if (ajv.errors) {\n                    const errors = ajv.errors.map(error => {\n                        const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n\n                        return `\\t${field}: ${error.message}`;\n                    }).join(\"\\n\");\n\n                    throw new Error([`Schema for rule ${ruleName} is invalid:`, errors]);\n                }\n\n                /*\n                 * `ajv.validateSchema` checks for errors in the structure of the schema (by comparing the schema against a \"meta-schema\"),\n                 * and it reports those errors individually. However, there are other types of schema errors that only occur when compiling\n                 * the schema (e.g. using invalid defaults in a schema), and only one of these errors can be reported at a time. As a result,\n                 * the schema is compiled here separately from checking for `validateSchema` errors.\n                 */\n                try {\n                    ajv.compile(schema);\n                } catch (err) {\n                    throw new Error(`Schema for rule ${ruleName} is invalid: ${err.message}`);\n                }\n            }\n\n            validate(config, \"rule-tester\", id => (id === ruleName ? rule : null));\n\n            // Verify the code.\n            const messages = linter.verify(code, config, filename);\n            const fatalErrorMessage = messages.find(m => m.fatal);\n\n            assert(!fatalErrorMessage, `A fatal parsing error occurred: ${fatalErrorMessage && fatalErrorMessage.message}`);\n\n            // Verify if autofix makes a syntax error or not.\n            if (messages.some(m => m.fix)) {\n                output = SourceCodeFixer.applyFixes(code, messages).output;\n                const errorMessageInFix = linter.verify(output, config, filename).find(m => m.fatal);\n\n                assert(!errorMessageInFix, [\n                    \"A fatal parsing error occurred in autofix.\",\n                    `Error: ${errorMessageInFix && errorMessageInFix.message}`,\n                    \"Autofix output:\",\n                    output\n                ].join(\"\\n\"));\n            } else {\n                output = code;\n            }\n\n            return {\n                messages,\n                output,\n                beforeAST,\n                afterAST: cloneDeeplyExcludesParent(afterAST)\n            };\n        }\n\n        /**\n         * Check if the AST was changed\n         * @param {ASTNode} beforeAST AST node before running\n         * @param {ASTNode} afterAST AST node after running\n         * @returns {void}\n         * @private\n         */\n        function assertASTDidntChange(beforeAST, afterAST) {\n            if (!equal(beforeAST, afterAST)) {\n                assert.fail(\"Rule should not modify AST.\");\n            }\n        }\n\n        /**\n         * Check if the template is valid or not\n         * all valid cases go through this\n         * @param {string|Object} item Item to run the rule against\n         * @returns {void}\n         * @private\n         */\n        function testValidTemplate(item) {\n            const result = runRuleForItem(item);\n            const messages = result.messages;\n\n            assert.strictEqual(messages.length, 0, util.format(\"Should have no errors but had %d: %s\",\n                messages.length,\n                util.inspect(messages)));\n\n            assertASTDidntChange(result.beforeAST, result.afterAST);\n        }\n\n        /**\n         * Asserts that the message matches its expected value. If the expected\n         * value is a regular expression, it is checked against the actual\n         * value.\n         * @param {string} actual Actual value\n         * @param {string|RegExp} expected Expected value\n         * @returns {void}\n         * @private\n         */\n        function assertMessageMatches(actual, expected) {\n            if (expected instanceof RegExp) {\n\n                // assert.js doesn't have a built-in RegExp match function\n                assert.ok(\n                    expected.test(actual),\n                    `Expected '${actual}' to match ${expected}`\n                );\n            } else {\n                assert.strictEqual(actual, expected);\n            }\n        }\n\n        /**\n         * Check if the template is invalid or not\n         * all invalid cases go through this.\n         * @param {string|Object} item Item to run the rule against\n         * @returns {void}\n         * @private\n         */\n        function testInvalidTemplate(item) {\n            assert.ok(item.errors || item.errors === 0,\n                `Did not specify errors for an invalid test of ${ruleName}`);\n\n            if (Array.isArray(item.errors) && item.errors.length === 0) {\n                assert.fail(\"Invalid cases must have at least one error\");\n            }\n\n            const ruleHasMetaMessages = hasOwnProperty(rule, \"meta\") && hasOwnProperty(rule.meta, \"messages\");\n            const friendlyIDList = ruleHasMetaMessages ? `[${Object.keys(rule.meta.messages).map(key => `'${key}'`).join(\", \")}]` : null;\n\n            const result = runRuleForItem(item);\n            const messages = result.messages;\n\n            if (typeof item.errors === \"number\") {\n\n                if (item.errors === 0) {\n                    assert.fail(\"Invalid cases must have 'error' value greater than 0\");\n                }\n\n                assert.strictEqual(messages.length, item.errors, util.format(\"Should have %d error%s but had %d: %s\",\n                    item.errors,\n                    item.errors === 1 ? \"\" : \"s\",\n                    messages.length,\n                    util.inspect(messages)));\n            } else {\n                assert.strictEqual(\n                    messages.length, item.errors.length, util.format(\n                        \"Should have %d error%s but had %d: %s\",\n                        item.errors.length,\n                        item.errors.length === 1 ? \"\" : \"s\",\n                        messages.length,\n                        util.inspect(messages)\n                    )\n                );\n\n                const hasMessageOfThisRule = messages.some(m => m.ruleId === ruleName);\n\n                for (let i = 0, l = item.errors.length; i < l; i++) {\n                    const error = item.errors[i];\n                    const message = messages[i];\n\n                    assert(hasMessageOfThisRule, \"Error rule name should be the same as the name of the rule being tested\");\n\n                    if (typeof error === \"string\" || error instanceof RegExp) {\n\n                        // Just an error message.\n                        assertMessageMatches(message.message, error);\n                    } else if (typeof error === \"object\" && error !== null) {\n\n                        /*\n                         * Error object.\n                         * This may have a message, messageId, data, node type, line, and/or\n                         * column.\n                         */\n\n                        Object.keys(error).forEach(propertyName => {\n                            assert.ok(\n                                errorObjectParameters.has(propertyName),\n                                `Invalid error property name '${propertyName}'. Expected one of ${friendlyErrorObjectParameterList}.`\n                            );\n                        });\n\n                        if (hasOwnProperty(error, \"message\")) {\n                            assert.ok(!hasOwnProperty(error, \"messageId\"), \"Error should not specify both 'message' and a 'messageId'.\");\n                            assert.ok(!hasOwnProperty(error, \"data\"), \"Error should not specify both 'data' and 'message'.\");\n                            assertMessageMatches(message.message, error.message);\n                        } else if (hasOwnProperty(error, \"messageId\")) {\n                            assert.ok(\n                                ruleHasMetaMessages,\n                                \"Error can not use 'messageId' if rule under test doesn't define 'meta.messages'.\"\n                            );\n                            if (!hasOwnProperty(rule.meta.messages, error.messageId)) {\n                                assert(false, `Invalid messageId '${error.messageId}'. Expected one of ${friendlyIDList}.`);\n                            }\n                            assert.strictEqual(\n                                message.messageId,\n                                error.messageId,\n                                `messageId '${message.messageId}' does not match expected messageId '${error.messageId}'.`\n                            );\n                            if (hasOwnProperty(error, \"data\")) {\n\n                                /*\n                                 *  if data was provided, then directly compare the returned message to a synthetic\n                                 *  interpolated message using the same message ID and data provided in the test.\n                                 *  See https://github.com/eslint/eslint/issues/9890 for context.\n                                 */\n                                const unformattedOriginalMessage = rule.meta.messages[error.messageId];\n                                const rehydratedMessage = interpolate(unformattedOriginalMessage, error.data);\n\n                                assert.strictEqual(\n                                    message.message,\n                                    rehydratedMessage,\n                                    `Hydrated message \"${rehydratedMessage}\" does not match \"${message.message}\"`\n                                );\n                            }\n                        }\n\n                        assert.ok(\n                            hasOwnProperty(error, \"data\") ? hasOwnProperty(error, \"messageId\") : true,\n                            \"Error must specify 'messageId' if 'data' is used.\"\n                        );\n\n                        if (error.type) {\n                            assert.strictEqual(message.nodeType, error.type, `Error type should be ${error.type}, found ${message.nodeType}`);\n                        }\n\n                        if (hasOwnProperty(error, \"line\")) {\n                            assert.strictEqual(message.line, error.line, `Error line should be ${error.line}`);\n                        }\n\n                        if (hasOwnProperty(error, \"column\")) {\n                            assert.strictEqual(message.column, error.column, `Error column should be ${error.column}`);\n                        }\n\n                        if (hasOwnProperty(error, \"endLine\")) {\n                            assert.strictEqual(message.endLine, error.endLine, `Error endLine should be ${error.endLine}`);\n                        }\n\n                        if (hasOwnProperty(error, \"endColumn\")) {\n                            assert.strictEqual(message.endColumn, error.endColumn, `Error endColumn should be ${error.endColumn}`);\n                        }\n\n                        if (hasOwnProperty(error, \"suggestions\")) {\n\n                            // Support asserting there are no suggestions\n                            if (!error.suggestions || (Array.isArray(error.suggestions) && error.suggestions.length === 0)) {\n                                if (Array.isArray(message.suggestions) && message.suggestions.length > 0) {\n                                    assert.fail(`Error should have no suggestions on error with message: \"${message.message}\"`);\n                                }\n                            } else {\n                                assert.strictEqual(Array.isArray(message.suggestions), true, `Error should have an array of suggestions. Instead received \"${message.suggestions}\" on error with message: \"${message.message}\"`);\n                                assert.strictEqual(message.suggestions.length, error.suggestions.length, `Error should have ${error.suggestions.length} suggestions. Instead found ${message.suggestions.length} suggestions`);\n\n                                error.suggestions.forEach((expectedSuggestion, index) => {\n                                    assert.ok(\n                                        typeof expectedSuggestion === \"object\" && expectedSuggestion !== null,\n                                        \"Test suggestion in 'suggestions' array must be an object.\"\n                                    );\n                                    Object.keys(expectedSuggestion).forEach(propertyName => {\n                                        assert.ok(\n                                            suggestionObjectParameters.has(propertyName),\n                                            `Invalid suggestion property name '${propertyName}'. Expected one of ${friendlySuggestionObjectParameterList}.`\n                                        );\n                                    });\n\n                                    const actualSuggestion = message.suggestions[index];\n                                    const suggestionPrefix = `Error Suggestion at index ${index} :`;\n\n                                    if (hasOwnProperty(expectedSuggestion, \"desc\")) {\n                                        assert.ok(\n                                            !hasOwnProperty(expectedSuggestion, \"data\"),\n                                            `${suggestionPrefix} Test should not specify both 'desc' and 'data'.`\n                                        );\n                                        assert.strictEqual(\n                                            actualSuggestion.desc,\n                                            expectedSuggestion.desc,\n                                            `${suggestionPrefix} desc should be \"${expectedSuggestion.desc}\" but got \"${actualSuggestion.desc}\" instead.`\n                                        );\n                                    }\n\n                                    if (hasOwnProperty(expectedSuggestion, \"messageId\")) {\n                                        assert.ok(\n                                            ruleHasMetaMessages,\n                                            `${suggestionPrefix} Test can not use 'messageId' if rule under test doesn't define 'meta.messages'.`\n                                        );\n                                        assert.ok(\n                                            hasOwnProperty(rule.meta.messages, expectedSuggestion.messageId),\n                                            `${suggestionPrefix} Test has invalid messageId '${expectedSuggestion.messageId}', the rule under test allows only one of ${friendlyIDList}.`\n                                        );\n                                        assert.strictEqual(\n                                            actualSuggestion.messageId,\n                                            expectedSuggestion.messageId,\n                                            `${suggestionPrefix} messageId should be '${expectedSuggestion.messageId}' but got '${actualSuggestion.messageId}' instead.`\n                                        );\n                                        if (hasOwnProperty(expectedSuggestion, \"data\")) {\n                                            const unformattedMetaMessage = rule.meta.messages[expectedSuggestion.messageId];\n                                            const rehydratedDesc = interpolate(unformattedMetaMessage, expectedSuggestion.data);\n\n                                            assert.strictEqual(\n                                                actualSuggestion.desc,\n                                                rehydratedDesc,\n                                                `${suggestionPrefix} Hydrated test desc \"${rehydratedDesc}\" does not match received desc \"${actualSuggestion.desc}\".`\n                                            );\n                                        }\n                                    } else {\n                                        assert.ok(\n                                            !hasOwnProperty(expectedSuggestion, \"data\"),\n                                            `${suggestionPrefix} Test must specify 'messageId' if 'data' is used.`\n                                        );\n                                    }\n\n                                    if (hasOwnProperty(expectedSuggestion, \"output\")) {\n                                        const codeWithAppliedSuggestion = SourceCodeFixer.applyFixes(item.code, [actualSuggestion]).output;\n\n                                        assert.strictEqual(codeWithAppliedSuggestion, expectedSuggestion.output, `Expected the applied suggestion fix to match the test suggestion output for suggestion at index: ${index} on error with message: \"${message.message}\"`);\n                                    }\n                                });\n                            }\n                        }\n                    } else {\n\n                        // Message was an unexpected type\n                        assert.fail(`Error should be a string, object, or RegExp, but found (${util.inspect(message)})`);\n                    }\n                }\n            }\n\n            if (hasOwnProperty(item, \"output\")) {\n                if (item.output === null) {\n                    assert.strictEqual(\n                        result.output,\n                        item.code,\n                        \"Expected no autofixes to be suggested\"\n                    );\n                } else {\n                    assert.strictEqual(result.output, item.output, \"Output is incorrect.\");\n                }\n            } else {\n                assert.strictEqual(\n                    result.output,\n                    item.code,\n                    \"The rule fixed the code. Please add 'output' property.\"\n                );\n            }\n\n            // Rules that produce fixes must have `meta.fixable` property.\n            if (result.output !== item.code) {\n                assert.ok(\n                    hasOwnProperty(rule, \"meta\"),\n                    \"Fixable rules should export a `meta.fixable` property.\"\n                );\n\n                // Linter throws if a rule that produced a fix has `meta` but doesn't have `meta.fixable`.\n            }\n\n            assertASTDidntChange(result.beforeAST, result.afterAST);\n        }\n\n        /*\n         * This creates a mocha test suite and pipes all supplied info through\n         * one of the templates above.\n         */\n        RuleTester.describe(ruleName, () => {\n            RuleTester.describe(\"valid\", () => {\n                test.valid.forEach(valid => {\n                    RuleTester[valid.only ? \"itOnly\" : \"it\"](\n                        sanitize(typeof valid === \"object\" ? valid.code : valid),\n                        () => {\n                            testValidTemplate(valid);\n                        }\n                    );\n                });\n            });\n\n            RuleTester.describe(\"invalid\", () => {\n                test.invalid.forEach(invalid => {\n                    RuleTester[invalid.only ? \"itOnly\" : \"it\"](\n                        sanitize(invalid.code),\n                        () => {\n                            testInvalidTemplate(invalid);\n                        }\n                    );\n                });\n            });\n        });\n    }\n}\n\nRuleTester[DESCRIBE] = RuleTester[IT] = RuleTester[IT_ONLY] = null;\n\nmodule.exports = RuleTester;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}