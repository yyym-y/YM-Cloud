{"ast":null,"code":"/**\n * @fileoverview Rule to require grouped accessor pairs in object literals and classes\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/**\n * Property name if it can be computed statically, otherwise the list of the tokens of the key node.\n * @typedef {string|Token[]} Key\n */\n\n/**\n * Accessor nodes with the same key.\n * @typedef {Object} AccessorData\n * @property {Key} key Accessor's key\n * @property {ASTNode[]} getters List of getter nodes.\n * @property {ASTNode[]} setters List of setter nodes.\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not the given lists represent the equal tokens in the same order.\n * Tokens are compared by their properties, not by instance.\n * @param {Token[]} left First list of tokens.\n * @param {Token[]} right Second list of tokens.\n * @returns {boolean} `true` if the lists have same tokens.\n */\nfunction areEqualTokenLists(left, right) {\n  if (left.length !== right.length) {\n    return false;\n  }\n  for (let i = 0; i < left.length; i++) {\n    const leftToken = left[i],\n      rightToken = right[i];\n    if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks whether or not the given keys are equal.\n * @param {Key} left First key.\n * @param {Key} right Second key.\n * @returns {boolean} `true` if the keys are equal.\n */\nfunction areEqualKeys(left, right) {\n  if (typeof left === \"string\" && typeof right === \"string\") {\n    // Statically computed names.\n    return left === right;\n  }\n  if (Array.isArray(left) && Array.isArray(right)) {\n    // Token lists.\n    return areEqualTokenLists(left, right);\n  }\n  return false;\n}\n\n/**\n * Checks whether or not a given node is of an accessor kind ('get' or 'set').\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if the node is of an accessor kind.\n */\nfunction isAccessorKind(node) {\n  return node.kind === \"get\" || node.kind === \"set\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require grouped accessor pairs in object literals and classes\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/grouped-accessor-pairs\"\n    },\n    schema: [{\n      enum: [\"anyOrder\", \"getBeforeSet\", \"setBeforeGet\"]\n    }],\n    messages: {\n      notGrouped: \"Accessor pair {{ formerName }} and {{ latterName }} should be grouped.\",\n      invalidOrder: \"Expected {{ latterName }} to be before {{ formerName }}.\"\n    }\n  },\n  create(context) {\n    const order = context.options[0] || \"anyOrder\";\n    const sourceCode = context.getSourceCode();\n\n    /**\n     * Reports the given accessor pair.\n     * @param {string} messageId messageId to report.\n     * @param {ASTNode} formerNode getter/setter node that is defined before `latterNode`.\n     * @param {ASTNode} latterNode getter/setter node that is defined after `formerNode`.\n     * @returns {void}\n     * @private\n     */\n    function report(messageId, formerNode, latterNode) {\n      context.report({\n        node: latterNode,\n        messageId,\n        loc: astUtils.getFunctionHeadLoc(latterNode.value, sourceCode),\n        data: {\n          formerName: astUtils.getFunctionNameWithKind(formerNode.value),\n          latterName: astUtils.getFunctionNameWithKind(latterNode.value)\n        }\n      });\n    }\n\n    /**\n     * Creates a new `AccessorData` object for the given getter or setter node.\n     * @param {ASTNode} node A getter or setter node.\n     * @returns {AccessorData} New `AccessorData` object that contains the given node.\n     * @private\n     */\n    function createAccessorData(node) {\n      const name = astUtils.getStaticPropertyName(node);\n      const key = name !== null ? name : sourceCode.getTokens(node.key);\n      return {\n        key,\n        getters: node.kind === \"get\" ? [node] : [],\n        setters: node.kind === \"set\" ? [node] : []\n      };\n    }\n\n    /**\n     * Merges the given `AccessorData` object into the given accessors list.\n     * @param {AccessorData[]} accessors The list to merge into.\n     * @param {AccessorData} accessorData The object to merge.\n     * @returns {AccessorData[]} The same instance with the merged object.\n     * @private\n     */\n    function mergeAccessorData(accessors, accessorData) {\n      const equalKeyElement = accessors.find(a => areEqualKeys(a.key, accessorData.key));\n      if (equalKeyElement) {\n        equalKeyElement.getters.push(...accessorData.getters);\n        equalKeyElement.setters.push(...accessorData.setters);\n      } else {\n        accessors.push(accessorData);\n      }\n      return accessors;\n    }\n\n    /**\n     * Checks accessor pairs in the given list of nodes.\n     * @param {ASTNode[]} nodes The list to check.\n     * @param {Function} shouldCheck â€“ Predicate that returns `true` if the node should be checked.\n     * @returns {void}\n     * @private\n     */\n    function checkList(nodes, shouldCheck) {\n      const accessors = nodes.filter(shouldCheck).filter(isAccessorKind).map(createAccessorData).reduce(mergeAccessorData, []);\n      for (const {\n        getters,\n        setters\n      } of accessors) {\n        // Don't report accessor properties that have duplicate getters or setters.\n        if (getters.length === 1 && setters.length === 1) {\n          const [getter] = getters,\n            [setter] = setters,\n            getterIndex = nodes.indexOf(getter),\n            setterIndex = nodes.indexOf(setter),\n            formerNode = getterIndex < setterIndex ? getter : setter,\n            latterNode = getterIndex < setterIndex ? setter : getter;\n          if (Math.abs(getterIndex - setterIndex) > 1) {\n            report(\"notGrouped\", formerNode, latterNode);\n          } else if (order === \"getBeforeSet\" && getterIndex > setterIndex || order === \"setBeforeGet\" && getterIndex < setterIndex) {\n            report(\"invalidOrder\", formerNode, latterNode);\n          }\n        }\n      }\n    }\n    return {\n      ObjectExpression(node) {\n        checkList(node.properties, n => n.type === \"Property\");\n      },\n      ClassBody(node) {\n        checkList(node.body, n => n.type === \"MethodDefinition\" && !n.static);\n        checkList(node.body, n => n.type === \"MethodDefinition\" && n.static);\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","areEqualTokenLists","left","right","length","i","leftToken","rightToken","type","value","areEqualKeys","Array","isArray","isAccessorKind","node","kind","module","exports","meta","docs","description","category","recommended","url","schema","enum","messages","notGrouped","invalidOrder","create","context","order","options","sourceCode","getSourceCode","report","messageId","formerNode","latterNode","loc","getFunctionHeadLoc","data","formerName","getFunctionNameWithKind","latterName","createAccessorData","name","getStaticPropertyName","key","getTokens","getters","setters","mergeAccessorData","accessors","accessorData","equalKeyElement","find","a","push","checkList","nodes","shouldCheck","filter","map","reduce","getter","setter","getterIndex","indexOf","setterIndex","Math","abs","ObjectExpression","properties","n","ClassBody","body","static"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/grouped-accessor-pairs.js"],"sourcesContent":["/**\n * @fileoverview Rule to require grouped accessor pairs in object literals and classes\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/**\n * Property name if it can be computed statically, otherwise the list of the tokens of the key node.\n * @typedef {string|Token[]} Key\n */\n\n/**\n * Accessor nodes with the same key.\n * @typedef {Object} AccessorData\n * @property {Key} key Accessor's key\n * @property {ASTNode[]} getters List of getter nodes.\n * @property {ASTNode[]} setters List of setter nodes.\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not the given lists represent the equal tokens in the same order.\n * Tokens are compared by their properties, not by instance.\n * @param {Token[]} left First list of tokens.\n * @param {Token[]} right Second list of tokens.\n * @returns {boolean} `true` if the lists have same tokens.\n */\nfunction areEqualTokenLists(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n\n    for (let i = 0; i < left.length; i++) {\n        const leftToken = left[i],\n            rightToken = right[i];\n\n        if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Checks whether or not the given keys are equal.\n * @param {Key} left First key.\n * @param {Key} right Second key.\n * @returns {boolean} `true` if the keys are equal.\n */\nfunction areEqualKeys(left, right) {\n    if (typeof left === \"string\" && typeof right === \"string\") {\n\n        // Statically computed names.\n        return left === right;\n    }\n    if (Array.isArray(left) && Array.isArray(right)) {\n\n        // Token lists.\n        return areEqualTokenLists(left, right);\n    }\n\n    return false;\n}\n\n/**\n * Checks whether or not a given node is of an accessor kind ('get' or 'set').\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if the node is of an accessor kind.\n */\nfunction isAccessorKind(node) {\n    return node.kind === \"get\" || node.kind === \"set\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require grouped accessor pairs in object literals and classes\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/grouped-accessor-pairs\"\n        },\n\n        schema: [\n            {\n                enum: [\"anyOrder\", \"getBeforeSet\", \"setBeforeGet\"]\n            }\n        ],\n\n        messages: {\n            notGrouped: \"Accessor pair {{ formerName }} and {{ latterName }} should be grouped.\",\n            invalidOrder: \"Expected {{ latterName }} to be before {{ formerName }}.\"\n        }\n    },\n\n    create(context) {\n        const order = context.options[0] || \"anyOrder\";\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Reports the given accessor pair.\n         * @param {string} messageId messageId to report.\n         * @param {ASTNode} formerNode getter/setter node that is defined before `latterNode`.\n         * @param {ASTNode} latterNode getter/setter node that is defined after `formerNode`.\n         * @returns {void}\n         * @private\n         */\n        function report(messageId, formerNode, latterNode) {\n            context.report({\n                node: latterNode,\n                messageId,\n                loc: astUtils.getFunctionHeadLoc(latterNode.value, sourceCode),\n                data: {\n                    formerName: astUtils.getFunctionNameWithKind(formerNode.value),\n                    latterName: astUtils.getFunctionNameWithKind(latterNode.value)\n                }\n            });\n        }\n\n        /**\n         * Creates a new `AccessorData` object for the given getter or setter node.\n         * @param {ASTNode} node A getter or setter node.\n         * @returns {AccessorData} New `AccessorData` object that contains the given node.\n         * @private\n         */\n        function createAccessorData(node) {\n            const name = astUtils.getStaticPropertyName(node);\n            const key = (name !== null) ? name : sourceCode.getTokens(node.key);\n\n            return {\n                key,\n                getters: node.kind === \"get\" ? [node] : [],\n                setters: node.kind === \"set\" ? [node] : []\n            };\n        }\n\n        /**\n         * Merges the given `AccessorData` object into the given accessors list.\n         * @param {AccessorData[]} accessors The list to merge into.\n         * @param {AccessorData} accessorData The object to merge.\n         * @returns {AccessorData[]} The same instance with the merged object.\n         * @private\n         */\n        function mergeAccessorData(accessors, accessorData) {\n            const equalKeyElement = accessors.find(a => areEqualKeys(a.key, accessorData.key));\n\n            if (equalKeyElement) {\n                equalKeyElement.getters.push(...accessorData.getters);\n                equalKeyElement.setters.push(...accessorData.setters);\n            } else {\n                accessors.push(accessorData);\n            }\n\n            return accessors;\n        }\n\n        /**\n         * Checks accessor pairs in the given list of nodes.\n         * @param {ASTNode[]} nodes The list to check.\n         * @param {Function} shouldCheck â€“ Predicate that returns `true` if the node should be checked.\n         * @returns {void}\n         * @private\n         */\n        function checkList(nodes, shouldCheck) {\n            const accessors = nodes\n                .filter(shouldCheck)\n                .filter(isAccessorKind)\n                .map(createAccessorData)\n                .reduce(mergeAccessorData, []);\n\n            for (const { getters, setters } of accessors) {\n\n                // Don't report accessor properties that have duplicate getters or setters.\n                if (getters.length === 1 && setters.length === 1) {\n                    const [getter] = getters,\n                        [setter] = setters,\n                        getterIndex = nodes.indexOf(getter),\n                        setterIndex = nodes.indexOf(setter),\n                        formerNode = getterIndex < setterIndex ? getter : setter,\n                        latterNode = getterIndex < setterIndex ? setter : getter;\n\n                    if (Math.abs(getterIndex - setterIndex) > 1) {\n                        report(\"notGrouped\", formerNode, latterNode);\n                    } else if (\n                        (order === \"getBeforeSet\" && getterIndex > setterIndex) ||\n                        (order === \"setBeforeGet\" && getterIndex < setterIndex)\n                    ) {\n                        report(\"invalidOrder\", formerNode, latterNode);\n                    }\n                }\n            }\n        }\n\n        return {\n            ObjectExpression(node) {\n                checkList(node.properties, n => n.type === \"Property\");\n            },\n            ClassBody(node) {\n                checkList(node.body, n => n.type === \"MethodDefinition\" && !n.static);\n                checkList(node.body, n => n.type === \"MethodDefinition\" && n.static);\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}