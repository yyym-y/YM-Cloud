{"ast":null,"code":"'use strict';\n\nvar common = require('../common');\nvar Type = require('../type');\nfunction isHexCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */ || 0x41 /* A */ <= c && c <= 0x46 /* F */ || 0x61 /* a */ <= c && c <= 0x66 /* f */;\n}\n\nfunction isOctCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x37 /* 7 */;\n}\n\nfunction isDecCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n    index = 0,\n    hasDigits = false,\n    ch;\n  if (!max) return false;\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n    if (ch === 'x') {\n      // base 16\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n    // base 8\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n    return hasDigits && ch !== '_';\n  }\n\n  // base 10 (except 0) or base 60\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  // if !base60 - done;\n  if (ch !== ':') return true;\n\n  // base60 almost not used, no needs to optimize\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\nfunction constructYamlInteger(data) {\n  var value = data,\n    sign = 1,\n    ch,\n    base,\n    digits = [];\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n  ch = value[0];\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n  if (value === '0') return 0;\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n    value = 0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n  return sign * parseInt(value, 10);\n}\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function (obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function (obj) {\n      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);\n    },\n    decimal: function (obj) {\n      return obj.toString(10);\n    },\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});","map":{"version":3,"names":["common","require","Type","isHexCode","c","isOctCode","isDecCode","resolveYamlInteger","data","max","length","index","hasDigits","ch","charCodeAt","test","slice","constructYamlInteger","value","sign","base","digits","indexOf","replace","parseInt","split","forEach","v","unshift","d","isInteger","object","Object","prototype","toString","call","isNegativeZero","module","exports","kind","resolve","construct","predicate","represent","binary","obj","octal","decimal","hexadecimal","toUpperCase","defaultStyle","styleAliases"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/js-yaml/lib/js-yaml/type/int.js"],"sourcesContent":["'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nfunction isHexCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n         ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n}\n\nfunction isOctCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n}\n\nfunction isDecCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n\n  if (!max) return false;\n\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n    // base 8\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n    return hasDigits && ch !== '_';\n  }\n\n  // base 10 (except 0) or base 60\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  // if !base60 - done;\n  if (ch !== ':') return true;\n\n  // base60 almost not used, no needs to optimize\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\n\nfunction constructYamlInteger(data) {\n  var value = data, sign = 1, ch, base, digits = [];\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n\n    value = 0;\n    base = 1;\n\n    digits.forEach(function (d) {\n      value += (d * base);\n      base *= 60;\n    });\n\n    return sign * value;\n\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return (Object.prototype.toString.call(object)) === '[object Number]' &&\n         (object % 1 === 0 && !common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },\n    octal:       function (obj) { return obj >= 0 ? '0'  + obj.toString(8) : '-0'  + obj.toString(8).slice(1); },\n    decimal:     function (obj) { return obj.toString(10); },\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary:      [ 2,  'bin' ],\n    octal:       [ 8,  'oct' ],\n    decimal:     [ 10, 'dec' ],\n    hexadecimal: [ 16, 'hex' ]\n  }\n});\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIC,IAAI,GAAKD,OAAO,CAAC,SAAS,CAAC;AAE/B,SAASE,SAASA,CAACC,CAAC,EAAE;EACpB,OAAS,IAAI,YAAWA,CAAC,IAAMA,CAAC,IAAI,IAAI,QAAQ,IACvC,IAAI,YAAWA,CAAC,IAAMA,CAAC,IAAI,IAAI,QAAS,IACxC,IAAI,YAAWA,CAAC,IAAMA,CAAC,IAAI,IAAI,QAAS;AACnD;;AAEA,SAASC,SAASA,CAACD,CAAC,EAAE;EACpB,OAAS,IAAI,YAAWA,CAAC,IAAMA,CAAC,IAAI,IAAI,QAAQ;AAClD;;AAEA,SAASE,SAASA,CAACF,CAAC,EAAE;EACpB,OAAS,IAAI,YAAWA,CAAC,IAAMA,CAAC,IAAI,IAAI,QAAQ;AAClD;;AAEA,SAASG,kBAAkBA,CAACC,IAAI,EAAE;EAChC,IAAIA,IAAI,KAAK,IAAI,EAAE,OAAO,KAAK;EAE/B,IAAIC,GAAG,GAAGD,IAAI,CAACE,MAAM;IACjBC,KAAK,GAAG,CAAC;IACTC,SAAS,GAAG,KAAK;IACjBC,EAAE;EAEN,IAAI,CAACJ,GAAG,EAAE,OAAO,KAAK;EAEtBI,EAAE,GAAGL,IAAI,CAACG,KAAK,CAAC;;EAEhB;EACA,IAAIE,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAE;IAC5BA,EAAE,GAAGL,IAAI,CAAC,EAAEG,KAAK,CAAC;EACpB;EAEA,IAAIE,EAAE,KAAK,GAAG,EAAE;IACd;IACA,IAAIF,KAAK,GAAG,CAAC,KAAKF,GAAG,EAAE,OAAO,IAAI;IAClCI,EAAE,GAAGL,IAAI,CAAC,EAAEG,KAAK,CAAC;;IAElB;;IAEA,IAAIE,EAAE,KAAK,GAAG,EAAE;MACd;MACAF,KAAK,EAAE;MAEP,OAAOA,KAAK,GAAGF,GAAG,EAAEE,KAAK,EAAE,EAAE;QAC3BE,EAAE,GAAGL,IAAI,CAACG,KAAK,CAAC;QAChB,IAAIE,EAAE,KAAK,GAAG,EAAE;QAChB,IAAIA,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAE,OAAO,KAAK;QAC1CD,SAAS,GAAG,IAAI;MAClB;MACA,OAAOA,SAAS,IAAIC,EAAE,KAAK,GAAG;IAChC;IAGA,IAAIA,EAAE,KAAK,GAAG,EAAE;MACd;MACAF,KAAK,EAAE;MAEP,OAAOA,KAAK,GAAGF,GAAG,EAAEE,KAAK,EAAE,EAAE;QAC3BE,EAAE,GAAGL,IAAI,CAACG,KAAK,CAAC;QAChB,IAAIE,EAAE,KAAK,GAAG,EAAE;QAChB,IAAI,CAACV,SAAS,CAACK,IAAI,CAACM,UAAU,CAACH,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK;QACpDC,SAAS,GAAG,IAAI;MAClB;MACA,OAAOA,SAAS,IAAIC,EAAE,KAAK,GAAG;IAChC;;IAEA;IACA,OAAOF,KAAK,GAAGF,GAAG,EAAEE,KAAK,EAAE,EAAE;MAC3BE,EAAE,GAAGL,IAAI,CAACG,KAAK,CAAC;MAChB,IAAIE,EAAE,KAAK,GAAG,EAAE;MAChB,IAAI,CAACR,SAAS,CAACG,IAAI,CAACM,UAAU,CAACH,KAAK,CAAC,CAAC,EAAE,OAAO,KAAK;MACpDC,SAAS,GAAG,IAAI;IAClB;IACA,OAAOA,SAAS,IAAIC,EAAE,KAAK,GAAG;EAChC;;EAEA;;EAEA;EACA,IAAIA,EAAE,KAAK,GAAG,EAAE,OAAO,KAAK;EAE5B,OAAOF,KAAK,GAAGF,GAAG,EAAEE,KAAK,EAAE,EAAE;IAC3BE,EAAE,GAAGL,IAAI,CAACG,KAAK,CAAC;IAChB,IAAIE,EAAE,KAAK,GAAG,EAAE;IAChB,IAAIA,EAAE,KAAK,GAAG,EAAE;IAChB,IAAI,CAACP,SAAS,CAACE,IAAI,CAACM,UAAU,CAACH,KAAK,CAAC,CAAC,EAAE;MACtC,OAAO,KAAK;IACd;IACAC,SAAS,GAAG,IAAI;EAClB;;EAEA;EACA,IAAI,CAACA,SAAS,IAAIC,EAAE,KAAK,GAAG,EAAE,OAAO,KAAK;;EAE1C;EACA,IAAIA,EAAE,KAAK,GAAG,EAAE,OAAO,IAAI;;EAE3B;EACA,OAAO,mBAAmB,CAACE,IAAI,CAACP,IAAI,CAACQ,KAAK,CAACL,KAAK,CAAC,CAAC;AACpD;AAEA,SAASM,oBAAoBA,CAACT,IAAI,EAAE;EAClC,IAAIU,KAAK,GAAGV,IAAI;IAAEW,IAAI,GAAG,CAAC;IAAEN,EAAE;IAAEO,IAAI;IAAEC,MAAM,GAAG,EAAE;EAEjD,IAAIH,KAAK,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IAC7BJ,KAAK,GAAGA,KAAK,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EACjC;EAEAV,EAAE,GAAGK,KAAK,CAAC,CAAC,CAAC;EAEb,IAAIL,EAAE,KAAK,GAAG,IAAIA,EAAE,KAAK,GAAG,EAAE;IAC5B,IAAIA,EAAE,KAAK,GAAG,EAAEM,IAAI,GAAG,CAAC,CAAC;IACzBD,KAAK,GAAGA,KAAK,CAACF,KAAK,CAAC,CAAC,CAAC;IACtBH,EAAE,GAAGK,KAAK,CAAC,CAAC,CAAC;EACf;EAEA,IAAIA,KAAK,KAAK,GAAG,EAAE,OAAO,CAAC;EAE3B,IAAIL,EAAE,KAAK,GAAG,EAAE;IACd,IAAIK,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,OAAOC,IAAI,GAAGK,QAAQ,CAACN,KAAK,CAACF,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC/D,IAAIE,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,OAAOC,IAAI,GAAGK,QAAQ,CAACN,KAAK,EAAE,EAAE,CAAC;IACvD,OAAOC,IAAI,GAAGK,QAAQ,CAACN,KAAK,EAAE,CAAC,CAAC;EAClC;EAEA,IAAIA,KAAK,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IAC7BJ,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,UAAUC,CAAC,EAAE;MACpCN,MAAM,CAACO,OAAO,CAACJ,QAAQ,CAACG,CAAC,EAAE,EAAE,CAAC,CAAC;IACjC,CAAC,CAAC;IAEFT,KAAK,GAAG,CAAC;IACTE,IAAI,GAAG,CAAC;IAERC,MAAM,CAACK,OAAO,CAAC,UAAUG,CAAC,EAAE;MAC1BX,KAAK,IAAKW,CAAC,GAAGT,IAAK;MACnBA,IAAI,IAAI,EAAE;IACZ,CAAC,CAAC;IAEF,OAAOD,IAAI,GAAGD,KAAK;EAErB;EAEA,OAAOC,IAAI,GAAGK,QAAQ,CAACN,KAAK,EAAE,EAAE,CAAC;AACnC;AAEA,SAASY,SAASA,CAACC,MAAM,EAAE;EACzB,OAAQC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,MAAM,CAAC,KAAM,iBAAiB,IAC7DA,MAAM,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC/B,MAAM,CAACoC,cAAc,CAACL,MAAM,CAAE;AAC7D;AAEAM,MAAM,CAACC,OAAO,GAAG,IAAIpC,IAAI,CAAC,uBAAuB,EAAE;EACjDqC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAEjC,kBAAkB;EAC3BkC,SAAS,EAAExB,oBAAoB;EAC/ByB,SAAS,EAAEZ,SAAS;EACpBa,SAAS,EAAE;IACTC,MAAM,EAAO,SAAAA,CAAUC,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAI,CAAC,GAAG,IAAI,GAAGA,GAAG,CAACX,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,GAAGW,GAAG,CAACX,QAAQ,CAAC,CAAC,CAAC,CAAClB,KAAK,CAAC,CAAC,CAAC;IAAE,CAAC;IAC5G8B,KAAK,EAAQ,SAAAA,CAAUD,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAI,CAAC,GAAG,GAAG,GAAIA,GAAG,CAACX,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,GAAIW,GAAG,CAACX,QAAQ,CAAC,CAAC,CAAC,CAAClB,KAAK,CAAC,CAAC,CAAC;IAAE,CAAC;IAC5G+B,OAAO,EAAM,SAAAA,CAAUF,GAAG,EAAE;MAAE,OAAOA,GAAG,CAACX,QAAQ,CAAC,EAAE,CAAC;IAAE,CAAC;IACxD;IACAc,WAAW,EAAE,SAAAA,CAAUH,GAAG,EAAE;MAAE,OAAOA,GAAG,IAAI,CAAC,GAAG,IAAI,GAAGA,GAAG,CAACX,QAAQ,CAAC,EAAE,CAAC,CAACe,WAAW,CAAC,CAAC,GAAI,KAAK,GAAGJ,GAAG,CAACX,QAAQ,CAAC,EAAE,CAAC,CAACe,WAAW,CAAC,CAAC,CAACjC,KAAK,CAAC,CAAC,CAAC;IAAE;EAC5I,CAAC;EACDkC,YAAY,EAAE,SAAS;EACvBC,YAAY,EAAE;IACZP,MAAM,EAAO,CAAE,CAAC,EAAG,KAAK,CAAE;IAC1BE,KAAK,EAAQ,CAAE,CAAC,EAAG,KAAK,CAAE;IAC1BC,OAAO,EAAM,CAAE,EAAE,EAAE,KAAK,CAAE;IAC1BC,WAAW,EAAE,CAAE,EAAE,EAAE,KAAK;EAC1B;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}