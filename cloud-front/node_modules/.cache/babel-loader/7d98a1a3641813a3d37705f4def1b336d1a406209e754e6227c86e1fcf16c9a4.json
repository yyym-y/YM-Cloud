{"ast":null,"code":"/**\n * @fileoverview Rule to check for ambiguous div operator in regexes\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow division operators explicitly at the beginning of regular expressions\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-div-regex\"\n    },\n    fixable: \"code\",\n    schema: [],\n    messages: {\n      unexpected: \"A regular expression literal can be confused with '/='.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      Literal(node) {\n        const token = sourceCode.getFirstToken(node);\n        if (token.type === \"RegularExpression\" && token.value[1] === \"=\") {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            fix(fixer) {\n              return fixer.replaceTextRange([token.range[0] + 1, token.range[0] + 2], \"[=]\");\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","unexpected","create","context","sourceCode","getSourceCode","Literal","node","token","getFirstToken","value","report","messageId","fix","fixer","replaceTextRange","range"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-div-regex.js"],"sourcesContent":["/**\n * @fileoverview Rule to check for ambiguous div operator in regexes\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow division operators explicitly at the beginning of regular expressions\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-div-regex\"\n        },\n\n        fixable: \"code\",\n\n        schema: [],\n\n        messages: {\n            unexpected: \"A regular expression literal can be confused with '/='.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n\n            Literal(node) {\n                const token = sourceCode.getFirstToken(node);\n\n                if (token.type === \"RegularExpression\" && token.value[1] === \"=\") {\n                    context.report({\n                        node,\n                        messageId: \"unexpected\",\n                        fix(fixer) {\n                            return fixer.replaceTextRange([token.range[0] + 1, token.range[0] + 2], \"[=]\");\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,gFAAgF;MAC7FC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,MAAM;IAEfC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAE1C,OAAO;MAEHC,OAAOA,CAACC,IAAI,EAAE;QACV,MAAMC,KAAK,GAAGJ,UAAU,CAACK,aAAa,CAACF,IAAI,CAAC;QAE5C,IAAIC,KAAK,CAAChB,IAAI,KAAK,mBAAmB,IAAIgB,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAC9DP,OAAO,CAACQ,MAAM,CAAC;YACXJ,IAAI;YACJK,SAAS,EAAE,YAAY;YACvBC,GAAGA,CAACC,KAAK,EAAE;cACP,OAAOA,KAAK,CAACC,gBAAgB,CAAC,CAACP,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAER,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;YAClF;UACJ,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}