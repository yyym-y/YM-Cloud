{"ast":null,"code":"/**\n * @fileoverview Traverser to traverse AST trees.\n * @author Nicholas C. Zakas\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst vk = require(\"eslint-visitor-keys\");\nconst debug = require(\"debug\")(\"eslint:traverser\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Do nothing.\n * @returns {void}\n */\nfunction noop() {\n\n  // do nothing.\n}\n\n/**\n * Check whether the given value is an ASTNode or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an ASTNode.\n */\nfunction isNode(x) {\n  return x !== null && typeof x === \"object\" && typeof x.type === \"string\";\n}\n\n/**\n * Get the visitor keys of a given node.\n * @param {Object} visitorKeys The map of visitor keys.\n * @param {ASTNode} node The node to get their visitor keys.\n * @returns {string[]} The visitor keys of the node.\n */\nfunction getVisitorKeys(visitorKeys, node) {\n  let keys = visitorKeys[node.type];\n  if (!keys) {\n    keys = vk.getKeys(node);\n    debug(\"Unknown node type \\\"%s\\\": Estimated visitor keys %j\", node.type, keys);\n  }\n  return keys;\n}\n\n/**\n * The traverser class to traverse AST trees.\n */\nclass Traverser {\n  constructor() {\n    this._current = null;\n    this._parents = [];\n    this._skipped = false;\n    this._broken = false;\n    this._visitorKeys = null;\n    this._enter = null;\n    this._leave = null;\n  }\n\n  // eslint-disable-next-line jsdoc/require-description\n  /**\n   * @returns {ASTNode} The current node.\n   */\n  current() {\n    return this._current;\n  }\n\n  // eslint-disable-next-line jsdoc/require-description\n  /**\n   * @returns {ASTNode[]} The ancestor nodes.\n   */\n  parents() {\n    return this._parents.slice(0);\n  }\n\n  /**\n   * Break the current traversal.\n   * @returns {void}\n   */\n  break() {\n    this._broken = true;\n  }\n\n  /**\n   * Skip child nodes for the current traversal.\n   * @returns {void}\n   */\n  skip() {\n    this._skipped = true;\n  }\n\n  /**\n   * Traverse the given AST tree.\n   * @param {ASTNode} node The root node to traverse.\n   * @param {Object} options The option object.\n   * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n   * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n   * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n   * @returns {void}\n   */\n  traverse(node, options) {\n    this._current = null;\n    this._parents = [];\n    this._skipped = false;\n    this._broken = false;\n    this._visitorKeys = options.visitorKeys || vk.KEYS;\n    this._enter = options.enter || noop;\n    this._leave = options.leave || noop;\n    this._traverse(node, null);\n  }\n\n  /**\n   * Traverse the given AST tree recursively.\n   * @param {ASTNode} node The current node.\n   * @param {ASTNode|null} parent The parent node.\n   * @returns {void}\n   * @private\n   */\n  _traverse(node, parent) {\n    if (!isNode(node)) {\n      return;\n    }\n    this._current = node;\n    this._skipped = false;\n    this._enter(node, parent);\n    if (!this._skipped && !this._broken) {\n      const keys = getVisitorKeys(this._visitorKeys, node);\n      if (keys.length >= 1) {\n        this._parents.push(node);\n        for (let i = 0; i < keys.length && !this._broken; ++i) {\n          const child = node[keys[i]];\n          if (Array.isArray(child)) {\n            for (let j = 0; j < child.length && !this._broken; ++j) {\n              this._traverse(child[j], node);\n            }\n          } else {\n            this._traverse(child, node);\n          }\n        }\n        this._parents.pop();\n      }\n    }\n    if (!this._broken) {\n      this._leave(node, parent);\n    }\n    this._current = parent;\n  }\n\n  /**\n   * Calculates the keys to use for traversal.\n   * @param {ASTNode} node The node to read keys from.\n   * @returns {string[]} An array of keys to visit on the node.\n   * @private\n   */\n  static getKeys(node) {\n    return vk.getKeys(node);\n  }\n\n  /**\n   * Traverse the given AST tree.\n   * @param {ASTNode} node The root node to traverse.\n   * @param {Object} options The option object.\n   * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n   * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n   * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n   * @returns {void}\n   */\n  static traverse(node, options) {\n    new Traverser().traverse(node, options);\n  }\n\n  /**\n   * The default visitor keys.\n   * @type {Object}\n   */\n  static get DEFAULT_VISITOR_KEYS() {\n    return vk.KEYS;\n  }\n}\nmodule.exports = Traverser;","map":{"version":3,"names":["require","vk","debug","noop","isNode","x","type","getVisitorKeys","visitorKeys","node","keys","getKeys","Traverser","constructor","_current","_parents","_skipped","_broken","_visitorKeys","_enter","_leave","current","parents","slice","break","skip","traverse","options","KEYS","enter","leave","_traverse","parent","length","push","i","child","Array","isArray","j","pop","DEFAULT_VISITOR_KEYS","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/shared/traverser.js"],"sourcesContent":["/**\n * @fileoverview Traverser to traverse AST trees.\n * @author Nicholas C. Zakas\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst vk = require(\"eslint-visitor-keys\");\nconst debug = require(\"debug\")(\"eslint:traverser\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Do nothing.\n * @returns {void}\n */\nfunction noop() {\n\n    // do nothing.\n}\n\n/**\n * Check whether the given value is an ASTNode or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an ASTNode.\n */\nfunction isNode(x) {\n    return x !== null && typeof x === \"object\" && typeof x.type === \"string\";\n}\n\n/**\n * Get the visitor keys of a given node.\n * @param {Object} visitorKeys The map of visitor keys.\n * @param {ASTNode} node The node to get their visitor keys.\n * @returns {string[]} The visitor keys of the node.\n */\nfunction getVisitorKeys(visitorKeys, node) {\n    let keys = visitorKeys[node.type];\n\n    if (!keys) {\n        keys = vk.getKeys(node);\n        debug(\"Unknown node type \\\"%s\\\": Estimated visitor keys %j\", node.type, keys);\n    }\n\n    return keys;\n}\n\n/**\n * The traverser class to traverse AST trees.\n */\nclass Traverser {\n    constructor() {\n        this._current = null;\n        this._parents = [];\n        this._skipped = false;\n        this._broken = false;\n        this._visitorKeys = null;\n        this._enter = null;\n        this._leave = null;\n    }\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @returns {ASTNode} The current node.\n     */\n    current() {\n        return this._current;\n    }\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @returns {ASTNode[]} The ancestor nodes.\n     */\n    parents() {\n        return this._parents.slice(0);\n    }\n\n    /**\n     * Break the current traversal.\n     * @returns {void}\n     */\n    break() {\n        this._broken = true;\n    }\n\n    /**\n     * Skip child nodes for the current traversal.\n     * @returns {void}\n     */\n    skip() {\n        this._skipped = true;\n    }\n\n    /**\n     * Traverse the given AST tree.\n     * @param {ASTNode} node The root node to traverse.\n     * @param {Object} options The option object.\n     * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n     * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n     * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n     * @returns {void}\n     */\n    traverse(node, options) {\n        this._current = null;\n        this._parents = [];\n        this._skipped = false;\n        this._broken = false;\n        this._visitorKeys = options.visitorKeys || vk.KEYS;\n        this._enter = options.enter || noop;\n        this._leave = options.leave || noop;\n        this._traverse(node, null);\n    }\n\n    /**\n     * Traverse the given AST tree recursively.\n     * @param {ASTNode} node The current node.\n     * @param {ASTNode|null} parent The parent node.\n     * @returns {void}\n     * @private\n     */\n    _traverse(node, parent) {\n        if (!isNode(node)) {\n            return;\n        }\n\n        this._current = node;\n        this._skipped = false;\n        this._enter(node, parent);\n\n        if (!this._skipped && !this._broken) {\n            const keys = getVisitorKeys(this._visitorKeys, node);\n\n            if (keys.length >= 1) {\n                this._parents.push(node);\n                for (let i = 0; i < keys.length && !this._broken; ++i) {\n                    const child = node[keys[i]];\n\n                    if (Array.isArray(child)) {\n                        for (let j = 0; j < child.length && !this._broken; ++j) {\n                            this._traverse(child[j], node);\n                        }\n                    } else {\n                        this._traverse(child, node);\n                    }\n                }\n                this._parents.pop();\n            }\n        }\n\n        if (!this._broken) {\n            this._leave(node, parent);\n        }\n\n        this._current = parent;\n    }\n\n    /**\n     * Calculates the keys to use for traversal.\n     * @param {ASTNode} node The node to read keys from.\n     * @returns {string[]} An array of keys to visit on the node.\n     * @private\n     */\n    static getKeys(node) {\n        return vk.getKeys(node);\n    }\n\n    /**\n     * Traverse the given AST tree.\n     * @param {ASTNode} node The root node to traverse.\n     * @param {Object} options The option object.\n     * @param {Object} [options.visitorKeys=DEFAULT_VISITOR_KEYS] The keys of each node types to traverse child nodes. Default is `./default-visitor-keys.json`.\n     * @param {Function} [options.enter=noop] The callback function which is called on entering each node.\n     * @param {Function} [options.leave=noop] The callback function which is called on leaving each node.\n     * @returns {void}\n     */\n    static traverse(node, options) {\n        new Traverser().traverse(node, options);\n    }\n\n    /**\n     * The default visitor keys.\n     * @type {Object}\n     */\n    static get DEFAULT_VISITOR_KEYS() {\n        return vk.KEYS;\n    }\n}\n\nmodule.exports = Traverser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}