{"ast":null,"code":"/**\n * @fileoverview A rule to ensure whitespace before blocks.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether the given node represents the body of a function.\n * @param {ASTNode} node the node to check.\n * @returns {boolean} `true` if the node is function body.\n */\nfunction isFunctionBody(node) {\n  const parent = node.parent;\n  return node.type === \"BlockStatement\" && astUtils.isFunction(parent) && parent.body === node;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing before blocks\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/space-before-blocks\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      oneOf: [{\n        enum: [\"always\", \"never\"]\n      }, {\n        type: \"object\",\n        properties: {\n          keywords: {\n            enum: [\"always\", \"never\", \"off\"]\n          },\n          functions: {\n            enum: [\"always\", \"never\", \"off\"]\n          },\n          classes: {\n            enum: [\"always\", \"never\", \"off\"]\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      unexpectedSpace: \"Unexpected space before opening brace.\",\n      missingSpace: \"Missing space before opening brace.\"\n    }\n  },\n  create(context) {\n    const config = context.options[0],\n      sourceCode = context.getSourceCode();\n    let alwaysFunctions = true,\n      alwaysKeywords = true,\n      alwaysClasses = true,\n      neverFunctions = false,\n      neverKeywords = false,\n      neverClasses = false;\n    if (typeof config === \"object\") {\n      alwaysFunctions = config.functions === \"always\";\n      alwaysKeywords = config.keywords === \"always\";\n      alwaysClasses = config.classes === \"always\";\n      neverFunctions = config.functions === \"never\";\n      neverKeywords = config.keywords === \"never\";\n      neverClasses = config.classes === \"never\";\n    } else if (config === \"never\") {\n      alwaysFunctions = false;\n      alwaysKeywords = false;\n      alwaysClasses = false;\n      neverFunctions = true;\n      neverKeywords = true;\n      neverClasses = true;\n    }\n\n    /**\n     * Checks whether the spacing before the given block is already controlled by another rule:\n     * - `arrow-spacing` checks spaces after `=>`.\n     * - `keyword-spacing` checks spaces after keywords in certain contexts.\n     * @param {Token} precedingToken first token before the block.\n     * @param {ASTNode|Token} node `BlockStatement` node or `{` token of a `SwitchStatement` node.\n     * @returns {boolean} `true` if requiring or disallowing spaces before the given block could produce conflicts with other rules.\n     */\n    function isConflicted(precedingToken, node) {\n      return astUtils.isArrowToken(precedingToken) || astUtils.isKeywordToken(precedingToken) && !isFunctionBody(node);\n    }\n\n    /**\n     * Checks the given BlockStatement node has a preceding space if it doesnâ€™t start on a new line.\n     * @param {ASTNode|Token} node The AST node of a BlockStatement.\n     * @returns {void} undefined.\n     */\n    function checkPrecedingSpace(node) {\n      const precedingToken = sourceCode.getTokenBefore(node);\n      if (precedingToken && !isConflicted(precedingToken, node) && astUtils.isTokenOnSameLine(precedingToken, node)) {\n        const hasSpace = sourceCode.isSpaceBetweenTokens(precedingToken, node);\n        let requireSpace;\n        let requireNoSpace;\n        if (isFunctionBody(node)) {\n          requireSpace = alwaysFunctions;\n          requireNoSpace = neverFunctions;\n        } else if (node.type === \"ClassBody\") {\n          requireSpace = alwaysClasses;\n          requireNoSpace = neverClasses;\n        } else {\n          requireSpace = alwaysKeywords;\n          requireNoSpace = neverKeywords;\n        }\n        if (requireSpace && !hasSpace) {\n          context.report({\n            node,\n            messageId: \"missingSpace\",\n            fix(fixer) {\n              return fixer.insertTextBefore(node, \" \");\n            }\n          });\n        } else if (requireNoSpace && hasSpace) {\n          context.report({\n            node,\n            messageId: \"unexpectedSpace\",\n            fix(fixer) {\n              return fixer.removeRange([precedingToken.range[1], node.range[0]]);\n            }\n          });\n        }\n      }\n    }\n\n    /**\n     * Checks if the CaseBlock of an given SwitchStatement node has a preceding space.\n     * @param {ASTNode} node The node of a SwitchStatement.\n     * @returns {void} undefined.\n     */\n    function checkSpaceBeforeCaseBlock(node) {\n      const cases = node.cases;\n      let openingBrace;\n      if (cases.length > 0) {\n        openingBrace = sourceCode.getTokenBefore(cases[0]);\n      } else {\n        openingBrace = sourceCode.getLastToken(node, 1);\n      }\n      checkPrecedingSpace(openingBrace);\n    }\n    return {\n      BlockStatement: checkPrecedingSpace,\n      ClassBody: checkPrecedingSpace,\n      SwitchStatement: checkSpaceBeforeCaseBlock\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","isFunctionBody","node","parent","type","isFunction","body","module","exports","meta","docs","description","category","recommended","url","fixable","schema","oneOf","enum","properties","keywords","functions","classes","additionalProperties","messages","unexpectedSpace","missingSpace","create","context","config","options","sourceCode","getSourceCode","alwaysFunctions","alwaysKeywords","alwaysClasses","neverFunctions","neverKeywords","neverClasses","isConflicted","precedingToken","isArrowToken","isKeywordToken","checkPrecedingSpace","getTokenBefore","isTokenOnSameLine","hasSpace","isSpaceBetweenTokens","requireSpace","requireNoSpace","report","messageId","fix","fixer","insertTextBefore","removeRange","range","checkSpaceBeforeCaseBlock","cases","openingBrace","length","getLastToken","BlockStatement","ClassBody","SwitchStatement"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/space-before-blocks.js"],"sourcesContent":["/**\n * @fileoverview A rule to ensure whitespace before blocks.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether the given node represents the body of a function.\n * @param {ASTNode} node the node to check.\n * @returns {boolean} `true` if the node is function body.\n */\nfunction isFunctionBody(node) {\n    const parent = node.parent;\n\n    return (\n        node.type === \"BlockStatement\" &&\n        astUtils.isFunction(parent) &&\n        parent.body === node\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing before blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/space-before-blocks\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"always\", \"never\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            keywords: {\n                                enum: [\"always\", \"never\", \"off\"]\n                            },\n                            functions: {\n                                enum: [\"always\", \"never\", \"off\"]\n                            },\n                            classes: {\n                                enum: [\"always\", \"never\", \"off\"]\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            unexpectedSpace: \"Unexpected space before opening brace.\",\n            missingSpace: \"Missing space before opening brace.\"\n        }\n    },\n\n    create(context) {\n        const config = context.options[0],\n            sourceCode = context.getSourceCode();\n        let alwaysFunctions = true,\n            alwaysKeywords = true,\n            alwaysClasses = true,\n            neverFunctions = false,\n            neverKeywords = false,\n            neverClasses = false;\n\n        if (typeof config === \"object\") {\n            alwaysFunctions = config.functions === \"always\";\n            alwaysKeywords = config.keywords === \"always\";\n            alwaysClasses = config.classes === \"always\";\n            neverFunctions = config.functions === \"never\";\n            neverKeywords = config.keywords === \"never\";\n            neverClasses = config.classes === \"never\";\n        } else if (config === \"never\") {\n            alwaysFunctions = false;\n            alwaysKeywords = false;\n            alwaysClasses = false;\n            neverFunctions = true;\n            neverKeywords = true;\n            neverClasses = true;\n        }\n\n        /**\n         * Checks whether the spacing before the given block is already controlled by another rule:\n         * - `arrow-spacing` checks spaces after `=>`.\n         * - `keyword-spacing` checks spaces after keywords in certain contexts.\n         * @param {Token} precedingToken first token before the block.\n         * @param {ASTNode|Token} node `BlockStatement` node or `{` token of a `SwitchStatement` node.\n         * @returns {boolean} `true` if requiring or disallowing spaces before the given block could produce conflicts with other rules.\n         */\n        function isConflicted(precedingToken, node) {\n            return astUtils.isArrowToken(precedingToken) ||\n                astUtils.isKeywordToken(precedingToken) && !isFunctionBody(node);\n        }\n\n        /**\n         * Checks the given BlockStatement node has a preceding space if it doesnâ€™t start on a new line.\n         * @param {ASTNode|Token} node The AST node of a BlockStatement.\n         * @returns {void} undefined.\n         */\n        function checkPrecedingSpace(node) {\n            const precedingToken = sourceCode.getTokenBefore(node);\n\n            if (precedingToken && !isConflicted(precedingToken, node) && astUtils.isTokenOnSameLine(precedingToken, node)) {\n                const hasSpace = sourceCode.isSpaceBetweenTokens(precedingToken, node);\n                let requireSpace;\n                let requireNoSpace;\n\n                if (isFunctionBody(node)) {\n                    requireSpace = alwaysFunctions;\n                    requireNoSpace = neverFunctions;\n                } else if (node.type === \"ClassBody\") {\n                    requireSpace = alwaysClasses;\n                    requireNoSpace = neverClasses;\n                } else {\n                    requireSpace = alwaysKeywords;\n                    requireNoSpace = neverKeywords;\n                }\n\n                if (requireSpace && !hasSpace) {\n                    context.report({\n                        node,\n                        messageId: \"missingSpace\",\n                        fix(fixer) {\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                    });\n                } else if (requireNoSpace && hasSpace) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedSpace\",\n                        fix(fixer) {\n                            return fixer.removeRange([precedingToken.range[1], node.range[0]]);\n                        }\n                    });\n                }\n            }\n        }\n\n        /**\n         * Checks if the CaseBlock of an given SwitchStatement node has a preceding space.\n         * @param {ASTNode} node The node of a SwitchStatement.\n         * @returns {void} undefined.\n         */\n        function checkSpaceBeforeCaseBlock(node) {\n            const cases = node.cases;\n            let openingBrace;\n\n            if (cases.length > 0) {\n                openingBrace = sourceCode.getTokenBefore(cases[0]);\n            } else {\n                openingBrace = sourceCode.getLastToken(node, 1);\n            }\n\n            checkPrecedingSpace(openingBrace);\n        }\n\n        return {\n            BlockStatement: checkPrecedingSpace,\n            ClassBody: checkPrecedingSpace,\n            SwitchStatement: checkSpaceBeforeCaseBlock\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}