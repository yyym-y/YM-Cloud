{"ast":null,"code":"/**\n * @fileoverview Rule to enforce var declarations are only at the top of a function.\n * @author Danny Fritz\n * @author Gyandeep Singh\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `var` declarations be placed at the top of their containing scope\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/vars-on-top\"\n    },\n    schema: [],\n    messages: {\n      top: \"All 'var' declarations must be at the top of the function scope.\"\n    }\n  },\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {ASTNode} node any node\n     * @returns {boolean} whether the given node structurally represents a directive\n     */\n    function looksLikeDirective(node) {\n      return node.type === \"ExpressionStatement\" && node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n    }\n\n    /**\n     * Check to see if its a ES6 import declaration\n     * @param {ASTNode} node any node\n     * @returns {boolean} whether the given node represents a import declaration\n     */\n    function looksLikeImport(node) {\n      return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" || node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";\n    }\n\n    /**\n     * Checks whether a given node is a variable declaration or not.\n     * @param {ASTNode} node any node\n     * @returns {boolean} `true` if the node is a variable declaration.\n     */\n    function isVariableDeclaration(node) {\n      return node.type === \"VariableDeclaration\" || node.type === \"ExportNamedDeclaration\" && node.declaration && node.declaration.type === \"VariableDeclaration\";\n    }\n\n    /**\n     * Checks whether this variable is on top of the block body\n     * @param {ASTNode} node The node to check\n     * @param {ASTNode[]} statements collection of ASTNodes for the parent node block\n     * @returns {boolean} True if var is on top otherwise false\n     */\n    function isVarOnTop(node, statements) {\n      const l = statements.length;\n      let i = 0;\n\n      // skip over directives\n      for (; i < l; ++i) {\n        if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {\n          break;\n        }\n      }\n      for (; i < l; ++i) {\n        if (!isVariableDeclaration(statements[i])) {\n          return false;\n        }\n        if (statements[i] === node) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Checks whether variable is on top at the global level\n     * @param {ASTNode} node The node to check\n     * @param {ASTNode} parent Parent of the node\n     * @returns {void}\n     */\n    function globalVarCheck(node, parent) {\n      if (!isVarOnTop(node, parent.body)) {\n        context.report({\n          node,\n          messageId: \"top\"\n        });\n      }\n    }\n\n    /**\n     * Checks whether variable is on top at functional block scope level\n     * @param {ASTNode} node The node to check\n     * @param {ASTNode} parent Parent of the node\n     * @param {ASTNode} grandParent Parent of the node's parent\n     * @returns {void}\n     */\n    function blockScopeVarCheck(node, parent, grandParent) {\n      if (!(/Function/u.test(grandParent.type) && parent.type === \"BlockStatement\" && isVarOnTop(node, parent.body))) {\n        context.report({\n          node,\n          messageId: \"top\"\n        });\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      \"VariableDeclaration[kind='var']\"(node) {\n        if (node.parent.type === \"ExportNamedDeclaration\") {\n          globalVarCheck(node.parent, node.parent.parent);\n        } else if (node.parent.type === \"Program\") {\n          globalVarCheck(node, node.parent);\n        } else {\n          blockScopeVarCheck(node, node.parent, node.parent.parent);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","top","create","context","looksLikeDirective","node","expression","value","looksLikeImport","isVariableDeclaration","declaration","isVarOnTop","statements","l","length","i","globalVarCheck","parent","body","report","messageId","blockScopeVarCheck","grandParent","test","VariableDeclaration[kind='var']"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/vars-on-top.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce var declarations are only at the top of a function.\n * @author Danny Fritz\n * @author Gyandeep Singh\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `var` declarations be placed at the top of their containing scope\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/vars-on-top\"\n        },\n\n        schema: [],\n        messages: {\n            top: \"All 'var' declarations must be at the top of the function scope.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // eslint-disable-next-line jsdoc/require-description\n        /**\n         * @param {ASTNode} node any node\n         * @returns {boolean} whether the given node structurally represents a directive\n         */\n        function looksLikeDirective(node) {\n            return node.type === \"ExpressionStatement\" &&\n                node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n        }\n\n        /**\n         * Check to see if its a ES6 import declaration\n         * @param {ASTNode} node any node\n         * @returns {boolean} whether the given node represents a import declaration\n         */\n        function looksLikeImport(node) {\n            return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" ||\n                node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";\n        }\n\n        /**\n         * Checks whether a given node is a variable declaration or not.\n         * @param {ASTNode} node any node\n         * @returns {boolean} `true` if the node is a variable declaration.\n         */\n        function isVariableDeclaration(node) {\n            return (\n                node.type === \"VariableDeclaration\" ||\n                (\n                    node.type === \"ExportNamedDeclaration\" &&\n                    node.declaration &&\n                    node.declaration.type === \"VariableDeclaration\"\n                )\n            );\n        }\n\n        /**\n         * Checks whether this variable is on top of the block body\n         * @param {ASTNode} node The node to check\n         * @param {ASTNode[]} statements collection of ASTNodes for the parent node block\n         * @returns {boolean} True if var is on top otherwise false\n         */\n        function isVarOnTop(node, statements) {\n            const l = statements.length;\n            let i = 0;\n\n            // skip over directives\n            for (; i < l; ++i) {\n                if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {\n                    break;\n                }\n            }\n\n            for (; i < l; ++i) {\n                if (!isVariableDeclaration(statements[i])) {\n                    return false;\n                }\n                if (statements[i] === node) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks whether variable is on top at the global level\n         * @param {ASTNode} node The node to check\n         * @param {ASTNode} parent Parent of the node\n         * @returns {void}\n         */\n        function globalVarCheck(node, parent) {\n            if (!isVarOnTop(node, parent.body)) {\n                context.report({ node, messageId: \"top\" });\n            }\n        }\n\n        /**\n         * Checks whether variable is on top at functional block scope level\n         * @param {ASTNode} node The node to check\n         * @param {ASTNode} parent Parent of the node\n         * @param {ASTNode} grandParent Parent of the node's parent\n         * @returns {void}\n         */\n        function blockScopeVarCheck(node, parent, grandParent) {\n            if (!(/Function/u.test(grandParent.type) &&\n                    parent.type === \"BlockStatement\" &&\n                    isVarOnTop(node, parent.body))) {\n                context.report({ node, messageId: \"top\" });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            \"VariableDeclaration[kind='var']\"(node) {\n                if (node.parent.type === \"ExportNamedDeclaration\") {\n                    globalVarCheck(node.parent, node.parent.parent);\n                } else if (node.parent.type === \"Program\") {\n                    globalVarCheck(node, node.parent);\n                } else {\n                    blockScopeVarCheck(node, node.parent, node.parent.parent);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}