{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst Module = require('module');\nconst fs = require('fs');\nconst resolveFrom = (fromDir, moduleId, silent) => {\n  if (typeof fromDir !== 'string') {\n    throw new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDir}\\``);\n  }\n  if (typeof moduleId !== 'string') {\n    throw new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n  }\n  try {\n    fromDir = fs.realpathSync(fromDir);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      fromDir = path.resolve(fromDir);\n    } else if (silent) {\n      return null;\n    } else {\n      throw err;\n    }\n  }\n  const fromFile = path.join(fromDir, 'noop.js');\n  const resolveFileName = () => Module._resolveFilename(moduleId, {\n    id: fromFile,\n    filename: fromFile,\n    paths: Module._nodeModulePaths(fromDir)\n  });\n  if (silent) {\n    try {\n      return resolveFileName();\n    } catch (err) {\n      return null;\n    }\n  }\n  return resolveFileName();\n};\nmodule.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId);\nmodule.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true);","map":{"version":3,"names":["path","require","Module","fs","resolveFrom","fromDir","moduleId","silent","TypeError","realpathSync","err","code","resolve","fromFile","join","resolveFileName","_resolveFilename","id","filename","paths","_nodeModulePaths","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/resolve-from/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst Module = require('module');\nconst fs = require('fs');\n\nconst resolveFrom = (fromDir, moduleId, silent) => {\n\tif (typeof fromDir !== 'string') {\n\t\tthrow new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDir}\\``);\n\t}\n\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n\t}\n\n\ttry {\n\t\tfromDir = fs.realpathSync(fromDir);\n\t} catch (err) {\n\t\tif (err.code === 'ENOENT') {\n\t\t\tfromDir = path.resolve(fromDir);\n\t\t} else if (silent) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tconst fromFile = path.join(fromDir, 'noop.js');\n\n\tconst resolveFileName = () => Module._resolveFilename(moduleId, {\n\t\tid: fromFile,\n\t\tfilename: fromFile,\n\t\tpaths: Module._nodeModulePaths(fromDir)\n\t});\n\n\tif (silent) {\n\t\ttry {\n\t\t\treturn resolveFileName();\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn resolveFileName();\n};\n\nmodule.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId);\nmodule.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true);\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AAExB,MAAMG,WAAW,GAAGA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,MAAM,KAAK;EAClD,IAAI,OAAOF,OAAO,KAAK,QAAQ,EAAE;IAChC,MAAM,IAAIG,SAAS,CAAE,wDAAuD,OAAOH,OAAQ,IAAG,CAAC;EAChG;EAEA,IAAI,OAAOC,QAAQ,KAAK,QAAQ,EAAE;IACjC,MAAM,IAAIE,SAAS,CAAE,yDAAwD,OAAOF,QAAS,IAAG,CAAC;EAClG;EAEA,IAAI;IACHD,OAAO,GAAGF,EAAE,CAACM,YAAY,CAACJ,OAAO,CAAC;EACnC,CAAC,CAAC,OAAOK,GAAG,EAAE;IACb,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;MAC1BN,OAAO,GAAGL,IAAI,CAACY,OAAO,CAACP,OAAO,CAAC;IAChC,CAAC,MAAM,IAAIE,MAAM,EAAE;MAClB,OAAO,IAAI;IACZ,CAAC,MAAM;MACN,MAAMG,GAAG;IACV;EACD;EAEA,MAAMG,QAAQ,GAAGb,IAAI,CAACc,IAAI,CAACT,OAAO,EAAE,SAAS,CAAC;EAE9C,MAAMU,eAAe,GAAGA,CAAA,KAAMb,MAAM,CAACc,gBAAgB,CAACV,QAAQ,EAAE;IAC/DW,EAAE,EAAEJ,QAAQ;IACZK,QAAQ,EAAEL,QAAQ;IAClBM,KAAK,EAAEjB,MAAM,CAACkB,gBAAgB,CAACf,OAAO;EACvC,CAAC,CAAC;EAEF,IAAIE,MAAM,EAAE;IACX,IAAI;MACH,OAAOQ,eAAe,CAAC,CAAC;IACzB,CAAC,CAAC,OAAOL,GAAG,EAAE;MACb,OAAO,IAAI;IACZ;EACD;EAEA,OAAOK,eAAe,CAAC,CAAC;AACzB,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG,CAACjB,OAAO,EAAEC,QAAQ,KAAKF,WAAW,CAACC,OAAO,EAAEC,QAAQ,CAAC;AACtEe,MAAM,CAACC,OAAO,CAACf,MAAM,GAAG,CAACF,OAAO,EAAEC,QAAQ,KAAKF,WAAW,CAACC,OAAO,EAAEC,QAAQ,EAAE,IAAI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}