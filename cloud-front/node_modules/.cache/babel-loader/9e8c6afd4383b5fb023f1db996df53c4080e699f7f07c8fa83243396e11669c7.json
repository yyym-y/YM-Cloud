{"ast":null,"code":"/**\n * @fileoverview Module for loading rules from files and directories.\n * @author Michael Ficarra\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst fs = require(\"fs\"),\n  path = require(\"path\");\nconst rulesDirCache = {};\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Load all rule modules from specified directory.\n * @param {string} relativeRulesDir Path to rules directory, may be relative.\n * @param {string} cwd Current working directory\n * @returns {Object} Loaded rule modules.\n */\nmodule.exports = function (relativeRulesDir, cwd) {\n  const rulesDir = path.resolve(cwd, relativeRulesDir);\n\n  // cache will help performance as IO operation are expensive\n  if (rulesDirCache[rulesDir]) {\n    return rulesDirCache[rulesDir];\n  }\n  const rules = Object.create(null);\n  fs.readdirSync(rulesDir).forEach(file => {\n    if (path.extname(file) !== \".js\") {\n      return;\n    }\n    rules[file.slice(0, -3)] = require(path.join(rulesDir, file));\n  });\n  rulesDirCache[rulesDir] = rules;\n  return rules;\n};","map":{"version":3,"names":["fs","require","path","rulesDirCache","module","exports","relativeRulesDir","cwd","rulesDir","resolve","rules","Object","create","readdirSync","forEach","file","extname","slice","join"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/cli-engine/load-rules.js"],"sourcesContent":["/**\n * @fileoverview Module for loading rules from files and directories.\n * @author Michael Ficarra\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\"),\n    path = require(\"path\");\n\nconst rulesDirCache = {};\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Load all rule modules from specified directory.\n * @param {string} relativeRulesDir Path to rules directory, may be relative.\n * @param {string} cwd Current working directory\n * @returns {Object} Loaded rule modules.\n */\nmodule.exports = function(relativeRulesDir, cwd) {\n    const rulesDir = path.resolve(cwd, relativeRulesDir);\n\n    // cache will help performance as IO operation are expensive\n    if (rulesDirCache[rulesDir]) {\n        return rulesDirCache[rulesDir];\n    }\n\n    const rules = Object.create(null);\n\n    fs.readdirSync(rulesDir).forEach(file => {\n        if (path.extname(file) !== \".js\") {\n            return;\n        }\n        rules[file.slice(0, -3)] = require(path.join(rulesDir, file));\n    });\n    rulesDirCache[rulesDir] = rules;\n\n    return rules;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;EACpBC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAE1B,MAAME,aAAa,GAAG,CAAC,CAAC;;AAExB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,UAASC,gBAAgB,EAAEC,GAAG,EAAE;EAC7C,MAAMC,QAAQ,GAAGN,IAAI,CAACO,OAAO,CAACF,GAAG,EAAED,gBAAgB,CAAC;;EAEpD;EACA,IAAIH,aAAa,CAACK,QAAQ,CAAC,EAAE;IACzB,OAAOL,aAAa,CAACK,QAAQ,CAAC;EAClC;EAEA,MAAME,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAEjCZ,EAAE,CAACa,WAAW,CAACL,QAAQ,CAAC,CAACM,OAAO,CAACC,IAAI,IAAI;IACrC,IAAIb,IAAI,CAACc,OAAO,CAACD,IAAI,CAAC,KAAK,KAAK,EAAE;MAC9B;IACJ;IACAL,KAAK,CAACK,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAGhB,OAAO,CAACC,IAAI,CAACgB,IAAI,CAACV,QAAQ,EAAEO,IAAI,CAAC,CAAC;EACjE,CAAC,CAAC;EACFZ,aAAa,CAACK,QAAQ,CAAC,GAAGE,KAAK;EAE/B,OAAOA,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}