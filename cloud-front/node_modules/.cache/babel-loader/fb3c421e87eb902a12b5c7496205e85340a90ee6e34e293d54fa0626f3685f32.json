{"ast":null,"code":"var fs = require('fs');\nvar path = require('path');\nvar flatted = require('flatted');\nmodule.exports = {\n  tryParse: function (filePath, defaultValue) {\n    var result;\n    try {\n      result = this.readJSON(filePath);\n    } catch (ex) {\n      result = defaultValue;\n    }\n    return result;\n  },\n  /**\n   * Read json file synchronously using flatted\n   *\n   * @method readJSON\n   * @param  {String} filePath Json filepath\n   * @returns {*} parse result\n   */\n  readJSON: function (filePath) {\n    return flatted.parse(fs.readFileSync(filePath, {\n      encoding: 'utf8'\n    }));\n  },\n  /**\n   * Write json file synchronously using circular-json\n   *\n   * @method writeJSON\n   * @param  {String} filePath Json filepath\n   * @param  {*} data Object to serialize\n   */\n  writeJSON: function (filePath, data) {\n    fs.mkdirSync(path.dirname(filePath), {\n      recursive: true\n    });\n    fs.writeFileSync(filePath, flatted.stringify(data));\n  }\n};","map":{"version":3,"names":["fs","require","path","flatted","module","exports","tryParse","filePath","defaultValue","result","readJSON","ex","parse","readFileSync","encoding","writeJSON","data","mkdirSync","dirname","recursive","writeFileSync","stringify"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/flat-cache/src/utils.js"],"sourcesContent":["var fs = require('fs');\nvar path = require('path');\nvar flatted = require('flatted');\n\nmodule.exports = {\n  tryParse: function (filePath, defaultValue) {\n    var result;\n    try {\n      result = this.readJSON(filePath);\n    } catch (ex) {\n      result = defaultValue;\n    }\n    return result;\n  },\n\n  /**\n   * Read json file synchronously using flatted\n   *\n   * @method readJSON\n   * @param  {String} filePath Json filepath\n   * @returns {*} parse result\n   */\n  readJSON: function (filePath) {\n    return flatted.parse(\n      fs.readFileSync(filePath, {\n        encoding: 'utf8',\n      })\n    );\n  },\n\n  /**\n   * Write json file synchronously using circular-json\n   *\n   * @method writeJSON\n   * @param  {String} filePath Json filepath\n   * @param  {*} data Object to serialize\n   */\n  writeJSON: function (filePath, data) {\n    fs.mkdirSync(path.dirname(filePath), {\n      recursive: true,\n    });\n    fs.writeFileSync(filePath, flatted.stringify(data));\n  },\n};\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAEhCG,MAAM,CAACC,OAAO,GAAG;EACfC,QAAQ,EAAE,SAAAA,CAAUC,QAAQ,EAAEC,YAAY,EAAE;IAC1C,IAAIC,MAAM;IACV,IAAI;MACFA,MAAM,GAAG,IAAI,CAACC,QAAQ,CAACH,QAAQ,CAAC;IAClC,CAAC,CAAC,OAAOI,EAAE,EAAE;MACXF,MAAM,GAAGD,YAAY;IACvB;IACA,OAAOC,MAAM;EACf,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,SAAAA,CAAUH,QAAQ,EAAE;IAC5B,OAAOJ,OAAO,CAACS,KAAK,CAClBZ,EAAE,CAACa,YAAY,CAACN,QAAQ,EAAE;MACxBO,QAAQ,EAAE;IACZ,CAAC,CACH,CAAC;EACH,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,SAAAA,CAAUR,QAAQ,EAAES,IAAI,EAAE;IACnChB,EAAE,CAACiB,SAAS,CAACf,IAAI,CAACgB,OAAO,CAACX,QAAQ,CAAC,EAAE;MACnCY,SAAS,EAAE;IACb,CAAC,CAAC;IACFnB,EAAE,CAACoB,aAAa,CAACb,QAAQ,EAAEJ,OAAO,CAACkB,SAAS,CAACL,IAAI,CAAC,CAAC;EACrD;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}