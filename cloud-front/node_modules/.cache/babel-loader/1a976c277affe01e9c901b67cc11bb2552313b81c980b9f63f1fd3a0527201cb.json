{"ast":null,"code":"/**\n * @fileoverview Rule to disallow `\\8` and `\\9` escape sequences in string literals.\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst QUICK_TEST_REGEX = /\\\\[89]/u;\n\n/**\n * Returns unicode escape sequence that represents the given character.\n * @param {string} character A single code unit.\n * @returns {string} \"\\uXXXX\" sequence.\n */\nfunction getUnicodeEscape(character) {\n  return `\\\\u${character.charCodeAt(0).toString(16).padStart(4, \"0\")}`;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `\\\\8` and `\\\\9` escape sequences in string literals\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-nonoctal-decimal-escape\",\n      suggestion: true\n    },\n    schema: [],\n    messages: {\n      decimalEscape: \"Don't use '{{decimalEscape}}' escape sequence.\",\n      // suggestions\n      refactor: \"Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.\",\n      escapeBackslash: \"Replace '{{original}}' with '{{replacement}}' to include the actual backslash character.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    /**\n     * Creates a new Suggestion object.\n     * @param {string} messageId \"refactor\" or \"escapeBackslash\".\n     * @param {int[]} range The range to replace.\n     * @param {string} replacement New text for the range.\n     * @returns {Object} Suggestion\n     */\n    function createSuggestion(messageId, range, replacement) {\n      return {\n        messageId,\n        data: {\n          original: sourceCode.getText().slice(...range),\n          replacement\n        },\n        fix(fixer) {\n          return fixer.replaceTextRange(range, replacement);\n        }\n      };\n    }\n    return {\n      Literal(node) {\n        if (typeof node.value !== \"string\") {\n          return;\n        }\n        if (!QUICK_TEST_REGEX.test(node.raw)) {\n          return;\n        }\n        const regex = /(?:[^\\\\]|(?<previousEscape>\\\\.))*?(?<decimalEscape>\\\\[89])/suy;\n        let match;\n        while (match = regex.exec(node.raw)) {\n          const {\n            previousEscape,\n            decimalEscape\n          } = match.groups;\n          const decimalEscapeRangeEnd = node.range[0] + match.index + match[0].length;\n          const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;\n          const decimalEscapeRange = [decimalEscapeRangeStart, decimalEscapeRangeEnd];\n          const suggest = [];\n\n          // When `regex` is matched, `previousEscape` can only capture characters adjacent to `decimalEscape`\n          if (previousEscape === \"\\\\0\") {\n            /*\n             * Now we have a NULL escape \"\\0\" immediately followed by a decimal escape, e.g.: \"\\0\\8\".\n             * Fixing this to \"\\08\" would turn \"\\0\" into a legacy octal escape. To avoid producing\n             * an octal escape while fixing a decimal escape, we provide different suggestions.\n             */\n            suggest.push(createSuggestion(\n            // \"\\0\\8\" -> \"\\u00008\"\n            \"refactor\", [decimalEscapeRangeStart - previousEscape.length, decimalEscapeRangeEnd], `${getUnicodeEscape(\"\\0\")}${decimalEscape[1]}`), createSuggestion(\n            // \"\\8\" -> \"\\u0038\"\n            \"refactor\", decimalEscapeRange, getUnicodeEscape(decimalEscape[1])));\n          } else {\n            suggest.push(createSuggestion(\n            // \"\\8\" -> \"8\"\n            \"refactor\", decimalEscapeRange, decimalEscape[1]));\n          }\n          suggest.push(createSuggestion(\n          // \"\\8\" -> \"\\\\8\"\n          \"escapeBackslash\", decimalEscapeRange, `\\\\${decimalEscape}`));\n          context.report({\n            node,\n            loc: {\n              start: sourceCode.getLocFromIndex(decimalEscapeRangeStart),\n              end: sourceCode.getLocFromIndex(decimalEscapeRangeEnd)\n            },\n            messageId: \"decimalEscape\",\n            data: {\n              decimalEscape\n            },\n            suggest\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","QUICK_TEST_REGEX","getUnicodeEscape","character","charCodeAt","toString","padStart","module","exports","meta","type","docs","description","category","recommended","url","suggestion","schema","messages","decimalEscape","refactor","escapeBackslash","create","context","sourceCode","getSourceCode","createSuggestion","messageId","range","replacement","data","original","getText","slice","fix","fixer","replaceTextRange","Literal","node","value","test","raw","regex","match","exec","previousEscape","groups","decimalEscapeRangeEnd","index","length","decimalEscapeRangeStart","decimalEscapeRange","suggest","push","report","loc","start","getLocFromIndex","end"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-nonoctal-decimal-escape.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow `\\8` and `\\9` escape sequences in string literals.\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst QUICK_TEST_REGEX = /\\\\[89]/u;\n\n/**\n * Returns unicode escape sequence that represents the given character.\n * @param {string} character A single code unit.\n * @returns {string} \"\\uXXXX\" sequence.\n */\nfunction getUnicodeEscape(character) {\n    return `\\\\u${character.charCodeAt(0).toString(16).padStart(4, \"0\")}`;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `\\\\8` and `\\\\9` escape sequences in string literals\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-nonoctal-decimal-escape\",\n            suggestion: true\n        },\n\n        schema: [],\n\n        messages: {\n            decimalEscape: \"Don't use '{{decimalEscape}}' escape sequence.\",\n\n            // suggestions\n            refactor: \"Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.\",\n            escapeBackslash: \"Replace '{{original}}' with '{{replacement}}' to include the actual backslash character.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Creates a new Suggestion object.\n         * @param {string} messageId \"refactor\" or \"escapeBackslash\".\n         * @param {int[]} range The range to replace.\n         * @param {string} replacement New text for the range.\n         * @returns {Object} Suggestion\n         */\n        function createSuggestion(messageId, range, replacement) {\n            return {\n                messageId,\n                data: {\n                    original: sourceCode.getText().slice(...range),\n                    replacement\n                },\n                fix(fixer) {\n                    return fixer.replaceTextRange(range, replacement);\n                }\n            };\n        }\n\n        return {\n            Literal(node) {\n                if (typeof node.value !== \"string\") {\n                    return;\n                }\n\n                if (!QUICK_TEST_REGEX.test(node.raw)) {\n                    return;\n                }\n\n                const regex = /(?:[^\\\\]|(?<previousEscape>\\\\.))*?(?<decimalEscape>\\\\[89])/suy;\n                let match;\n\n                while ((match = regex.exec(node.raw))) {\n                    const { previousEscape, decimalEscape } = match.groups;\n                    const decimalEscapeRangeEnd = node.range[0] + match.index + match[0].length;\n                    const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;\n                    const decimalEscapeRange = [decimalEscapeRangeStart, decimalEscapeRangeEnd];\n                    const suggest = [];\n\n                    // When `regex` is matched, `previousEscape` can only capture characters adjacent to `decimalEscape`\n                    if (previousEscape === \"\\\\0\") {\n\n                        /*\n                         * Now we have a NULL escape \"\\0\" immediately followed by a decimal escape, e.g.: \"\\0\\8\".\n                         * Fixing this to \"\\08\" would turn \"\\0\" into a legacy octal escape. To avoid producing\n                         * an octal escape while fixing a decimal escape, we provide different suggestions.\n                         */\n                        suggest.push(\n                            createSuggestion( // \"\\0\\8\" -> \"\\u00008\"\n                                \"refactor\",\n                                [decimalEscapeRangeStart - previousEscape.length, decimalEscapeRangeEnd],\n                                `${getUnicodeEscape(\"\\0\")}${decimalEscape[1]}`\n                            ),\n                            createSuggestion( // \"\\8\" -> \"\\u0038\"\n                                \"refactor\",\n                                decimalEscapeRange,\n                                getUnicodeEscape(decimalEscape[1])\n                            )\n                        );\n                    } else {\n                        suggest.push(\n                            createSuggestion( // \"\\8\" -> \"8\"\n                                \"refactor\",\n                                decimalEscapeRange,\n                                decimalEscape[1]\n                            )\n                        );\n                    }\n\n                    suggest.push(\n                        createSuggestion( // \"\\8\" -> \"\\\\8\"\n                            \"escapeBackslash\",\n                            decimalEscapeRange,\n                            `\\\\${decimalEscape}`\n                        )\n                    );\n\n                    context.report({\n                        node,\n                        loc: {\n                            start: sourceCode.getLocFromIndex(decimalEscapeRangeStart),\n                            end: sourceCode.getLocFromIndex(decimalEscapeRangeEnd)\n                        },\n                        messageId: \"decimalEscape\",\n                        data: {\n                            decimalEscape\n                        },\n                        suggest\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}