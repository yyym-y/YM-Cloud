{"ast":null,"code":"/**\n * @fileoverview Config file operations. This file must be usable in the browser,\n * so no Node-specific code can be here.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\nconst RULE_SEVERITY_STRINGS = [\"off\", \"warn\", \"error\"],\n  RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {\n    map[value] = index;\n    return map;\n  }, {}),\n  VALID_SEVERITIES = [0, 1, 2, \"off\", \"warn\", \"error\"];\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  /**\n   * Normalizes the severity value of a rule's configuration to a number\n   * @param {(number|string|[number, ...*]|[string, ...*])} ruleConfig A rule's configuration value, generally\n   * received from the user. A valid config value is either 0, 1, 2, the string \"off\" (treated the same as 0),\n   * the string \"warn\" (treated the same as 1), the string \"error\" (treated the same as 2), or an array\n   * whose first element is one of the above values. Strings are matched case-insensitively.\n   * @returns {(0|1|2)} The numeric severity value if the config value was valid, otherwise 0.\n   */\n  getRuleSeverity(ruleConfig) {\n    const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n    if (severityValue === 0 || severityValue === 1 || severityValue === 2) {\n      return severityValue;\n    }\n    if (typeof severityValue === \"string\") {\n      return RULE_SEVERITY[severityValue.toLowerCase()] || 0;\n    }\n    return 0;\n  },\n  /**\n   * Converts old-style severity settings (0, 1, 2) into new-style\n   * severity settings (off, warn, error) for all rules. Assumption is that severity\n   * values have already been validated as correct.\n   * @param {Object} config The config object to normalize.\n   * @returns {void}\n   */\n  normalizeToStrings(config) {\n    if (config.rules) {\n      Object.keys(config.rules).forEach(ruleId => {\n        const ruleConfig = config.rules[ruleId];\n        if (typeof ruleConfig === \"number\") {\n          config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];\n        } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"number\") {\n          ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];\n        }\n      });\n    }\n  },\n  /**\n   * Determines if the severity for the given rule configuration represents an error.\n   * @param {int|string|Array} ruleConfig The configuration for an individual rule.\n   * @returns {boolean} True if the rule represents an error, false if not.\n   */\n  isErrorSeverity(ruleConfig) {\n    return module.exports.getRuleSeverity(ruleConfig) === 2;\n  },\n  /**\n   * Checks whether a given config has valid severity or not.\n   * @param {number|string|Array} ruleConfig The configuration for an individual rule.\n   * @returns {boolean} `true` if the configuration has valid severity.\n   */\n  isValidSeverity(ruleConfig) {\n    let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n    if (typeof severity === \"string\") {\n      severity = severity.toLowerCase();\n    }\n    return VALID_SEVERITIES.indexOf(severity) !== -1;\n  },\n  /**\n   * Checks whether every rule of a given config has valid severity or not.\n   * @param {Object} config The configuration for rules.\n   * @returns {boolean} `true` if the configuration has valid severity.\n   */\n  isEverySeverityValid(config) {\n    return Object.keys(config).every(ruleId => this.isValidSeverity(config[ruleId]));\n  },\n  /**\n   * Normalizes a value for a global in a config\n   * @param {(boolean|string|null)} configuredValue The value given for a global in configuration or in\n   * a global directive comment\n   * @returns {(\"readable\"|\"writeable\"|\"off\")} The value normalized as a string\n   * @throws Error if global value is invalid\n   */\n  normalizeConfigGlobal(configuredValue) {\n    switch (configuredValue) {\n      case \"off\":\n        return \"off\";\n      case true:\n      case \"true\":\n      case \"writeable\":\n      case \"writable\":\n        return \"writable\";\n      case null:\n      case false:\n      case \"false\":\n      case \"readable\":\n      case \"readonly\":\n        return \"readonly\";\n      default:\n        throw new Error(`'${configuredValue}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);\n    }\n  }\n};","map":{"version":3,"names":["RULE_SEVERITY_STRINGS","RULE_SEVERITY","reduce","map","value","index","VALID_SEVERITIES","module","exports","getRuleSeverity","ruleConfig","severityValue","Array","isArray","toLowerCase","normalizeToStrings","config","rules","Object","keys","forEach","ruleId","isErrorSeverity","isValidSeverity","severity","indexOf","isEverySeverityValid","every","normalizeConfigGlobal","configuredValue","Error"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/@eslint/eslintrc/lib/shared/config-ops.js"],"sourcesContent":["/**\n * @fileoverview Config file operations. This file must be usable in the browser,\n * so no Node-specific code can be here.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\nconst RULE_SEVERITY_STRINGS = [\"off\", \"warn\", \"error\"],\n    RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {\n        map[value] = index;\n        return map;\n    }, {}),\n    VALID_SEVERITIES = [0, 1, 2, \"off\", \"warn\", \"error\"];\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n\n    /**\n     * Normalizes the severity value of a rule's configuration to a number\n     * @param {(number|string|[number, ...*]|[string, ...*])} ruleConfig A rule's configuration value, generally\n     * received from the user. A valid config value is either 0, 1, 2, the string \"off\" (treated the same as 0),\n     * the string \"warn\" (treated the same as 1), the string \"error\" (treated the same as 2), or an array\n     * whose first element is one of the above values. Strings are matched case-insensitively.\n     * @returns {(0|1|2)} The numeric severity value if the config value was valid, otherwise 0.\n     */\n    getRuleSeverity(ruleConfig) {\n        const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n\n        if (severityValue === 0 || severityValue === 1 || severityValue === 2) {\n            return severityValue;\n        }\n\n        if (typeof severityValue === \"string\") {\n            return RULE_SEVERITY[severityValue.toLowerCase()] || 0;\n        }\n\n        return 0;\n    },\n\n    /**\n     * Converts old-style severity settings (0, 1, 2) into new-style\n     * severity settings (off, warn, error) for all rules. Assumption is that severity\n     * values have already been validated as correct.\n     * @param {Object} config The config object to normalize.\n     * @returns {void}\n     */\n    normalizeToStrings(config) {\n\n        if (config.rules) {\n            Object.keys(config.rules).forEach(ruleId => {\n                const ruleConfig = config.rules[ruleId];\n\n                if (typeof ruleConfig === \"number\") {\n                    config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];\n                } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"number\") {\n                    ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];\n                }\n            });\n        }\n    },\n\n    /**\n     * Determines if the severity for the given rule configuration represents an error.\n     * @param {int|string|Array} ruleConfig The configuration for an individual rule.\n     * @returns {boolean} True if the rule represents an error, false if not.\n     */\n    isErrorSeverity(ruleConfig) {\n        return module.exports.getRuleSeverity(ruleConfig) === 2;\n    },\n\n    /**\n     * Checks whether a given config has valid severity or not.\n     * @param {number|string|Array} ruleConfig The configuration for an individual rule.\n     * @returns {boolean} `true` if the configuration has valid severity.\n     */\n    isValidSeverity(ruleConfig) {\n        let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n\n        if (typeof severity === \"string\") {\n            severity = severity.toLowerCase();\n        }\n        return VALID_SEVERITIES.indexOf(severity) !== -1;\n    },\n\n    /**\n     * Checks whether every rule of a given config has valid severity or not.\n     * @param {Object} config The configuration for rules.\n     * @returns {boolean} `true` if the configuration has valid severity.\n     */\n    isEverySeverityValid(config) {\n        return Object.keys(config).every(ruleId => this.isValidSeverity(config[ruleId]));\n    },\n\n    /**\n     * Normalizes a value for a global in a config\n     * @param {(boolean|string|null)} configuredValue The value given for a global in configuration or in\n     * a global directive comment\n     * @returns {(\"readable\"|\"writeable\"|\"off\")} The value normalized as a string\n     * @throws Error if global value is invalid\n     */\n    normalizeConfigGlobal(configuredValue) {\n        switch (configuredValue) {\n            case \"off\":\n                return \"off\";\n\n            case true:\n            case \"true\":\n            case \"writeable\":\n            case \"writable\":\n                return \"writable\";\n\n            case null:\n            case false:\n            case \"false\":\n            case \"readable\":\n            case \"readonly\":\n                return \"readonly\";\n\n            default:\n                throw new Error(`'${configuredValue}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}