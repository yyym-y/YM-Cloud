{"ast":null,"code":"/**\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\n * @author Andrew Levine\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow calling some `Object.prototype` methods directly on objects\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-prototype-builtins\"\n    },\n    schema: [],\n    messages: {\n      prototypeBuildIn: \"Do not access Object.prototype method '{{prop}}' from target object.\"\n    }\n  },\n  create(context) {\n    const DISALLOWED_PROPS = [\"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\"];\n\n    /**\n     * Reports if a disallowed property is used in a CallExpression\n     * @param {ASTNode} node The CallExpression node.\n     * @returns {void}\n     */\n    function disallowBuiltIns(node) {\n      const callee = astUtils.skipChainExpression(node.callee);\n      if (callee.type !== \"MemberExpression\") {\n        return;\n      }\n      const propName = astUtils.getStaticPropertyName(callee);\n      if (propName !== null && DISALLOWED_PROPS.indexOf(propName) > -1) {\n        context.report({\n          messageId: \"prototypeBuildIn\",\n          loc: callee.property.loc,\n          data: {\n            prop: propName\n          },\n          node\n        });\n      }\n    }\n    return {\n      CallExpression: disallowBuiltIns\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","prototypeBuildIn","create","context","DISALLOWED_PROPS","disallowBuiltIns","node","callee","skipChainExpression","propName","getStaticPropertyName","indexOf","report","messageId","loc","property","data","prop","CallExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-prototype-builtins.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\n * @author Andrew Levine\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow calling some `Object.prototype` methods directly on objects\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-prototype-builtins\"\n        },\n\n        schema: [],\n\n        messages: {\n            prototypeBuildIn: \"Do not access Object.prototype method '{{prop}}' from target object.\"\n        }\n    },\n\n    create(context) {\n        const DISALLOWED_PROPS = [\n            \"hasOwnProperty\",\n            \"isPrototypeOf\",\n            \"propertyIsEnumerable\"\n        ];\n\n        /**\n         * Reports if a disallowed property is used in a CallExpression\n         * @param {ASTNode} node The CallExpression node.\n         * @returns {void}\n         */\n        function disallowBuiltIns(node) {\n\n            const callee = astUtils.skipChainExpression(node.callee);\n\n            if (callee.type !== \"MemberExpression\") {\n                return;\n            }\n\n            const propName = astUtils.getStaticPropertyName(callee);\n\n            if (propName !== null && DISALLOWED_PROPS.indexOf(propName) > -1) {\n                context.report({\n                    messageId: \"prototypeBuildIn\",\n                    loc: callee.property.loc,\n                    data: { prop: propName },\n                    node\n                });\n            }\n        }\n\n        return {\n            CallExpression: disallowBuiltIns\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,sEAAsE;MACnFC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,gBAAgB,EAAE;IACtB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,gBAAgB,GAAG,CACrB,gBAAgB,EAChB,eAAe,EACf,sBAAsB,CACzB;;IAED;AACR;AACA;AACA;AACA;IACQ,SAASC,gBAAgBA,CAACC,IAAI,EAAE;MAE5B,MAAMC,MAAM,GAAGnB,QAAQ,CAACoB,mBAAmB,CAACF,IAAI,CAACC,MAAM,CAAC;MAExD,IAAIA,MAAM,CAACd,IAAI,KAAK,kBAAkB,EAAE;QACpC;MACJ;MAEA,MAAMgB,QAAQ,GAAGrB,QAAQ,CAACsB,qBAAqB,CAACH,MAAM,CAAC;MAEvD,IAAIE,QAAQ,KAAK,IAAI,IAAIL,gBAAgB,CAACO,OAAO,CAACF,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;QAC9DN,OAAO,CAACS,MAAM,CAAC;UACXC,SAAS,EAAE,kBAAkB;UAC7BC,GAAG,EAAEP,MAAM,CAACQ,QAAQ,CAACD,GAAG;UACxBE,IAAI,EAAE;YAAEC,IAAI,EAAER;UAAS,CAAC;UACxBH;QACJ,CAAC,CAAC;MACN;IACJ;IAEA,OAAO;MACHY,cAAc,EAAEb;IACpB,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}