{"ast":null,"code":"/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function () {\n  var cache;\n\n  // Call this function without `new` to use the cached object (good for\n  // single-threaded environments), or with `new` to create a new object.\n  //\n  // @param {string} key A UTF-16 or ASCII string\n  // @param {number} seed An optional positive integer\n  // @return {object} A MurmurHash3 object for incremental hashing\n  function MurmurHash3(key, seed) {\n    var m = this instanceof MurmurHash3 ? this : cache;\n    m.reset(seed);\n    if (typeof key === 'string' && key.length > 0) {\n      m.hash(key);\n    }\n    if (m !== this) {\n      return m;\n    }\n  }\n  ;\n\n  // Incrementally add a string to this hash\n  //\n  // @param {string} key A UTF-16 or ASCII string\n  // @return {object} this\n  MurmurHash3.prototype.hash = function (key) {\n    var h1, k1, i, top, len;\n    len = key.length;\n    this.len += len;\n    k1 = this.k1;\n    i = 0;\n    switch (this.rem) {\n      case 0:\n        k1 ^= len > i ? key.charCodeAt(i++) & 0xffff : 0;\n      case 1:\n        k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n      case 2:\n        k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n      case 3:\n        k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n        k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n    }\n    this.rem = len + this.rem & 3; // & 3 is same as % 4\n    len -= this.rem;\n    if (len > 0) {\n      h1 = this.h1;\n      while (1) {\n        k1 = k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000 & 0xffffffff;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000 & 0xffffffff;\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1 = h1 * 5 + 0xe6546b64 & 0xffffffff;\n        if (i >= len) {\n          break;\n        }\n        k1 = key.charCodeAt(i++) & 0xffff ^ (key.charCodeAt(i++) & 0xffff) << 8 ^ (key.charCodeAt(i++) & 0xffff) << 16;\n        top = key.charCodeAt(i++);\n        k1 ^= (top & 0xff) << 24 ^ (top & 0xff00) >> 8;\n      }\n      k1 = 0;\n      switch (this.rem) {\n        case 3:\n          k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n        case 2:\n          k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n        case 1:\n          k1 ^= key.charCodeAt(i) & 0xffff;\n      }\n      this.h1 = h1;\n    }\n    this.k1 = k1;\n    return this;\n  };\n\n  // Get the result of this hash\n  //\n  // @return {number} The 32-bit hash\n  MurmurHash3.prototype.result = function () {\n    var k1, h1;\n    k1 = this.k1;\n    h1 = this.h1;\n    if (k1 > 0) {\n      k1 = k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000 & 0xffffffff;\n      k1 = k1 << 15 | k1 >>> 17;\n      k1 = k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000 & 0xffffffff;\n      h1 ^= k1;\n    }\n    h1 ^= this.len;\n    h1 ^= h1 >>> 16;\n    h1 = h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000 & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000 & 0xffffffff;\n    h1 ^= h1 >>> 16;\n    return h1 >>> 0;\n  };\n\n  // Reset the hash object for reuse\n  //\n  // @param {number} seed An optional positive integer\n  MurmurHash3.prototype.reset = function (seed) {\n    this.h1 = typeof seed === 'number' ? seed : 0;\n    this.rem = this.k1 = this.len = 0;\n    return this;\n  };\n\n  // A cached object to use. This can be safely used if you're in a single-\n  // threaded environment, otherwise you need to create new hashes to use.\n  cache = new MurmurHash3();\n  if (typeof module != 'undefined') {\n    module.exports = MurmurHash3;\n  } else {\n    this.MurmurHash3 = MurmurHash3;\n  }\n})();","map":{"version":3,"names":["cache","MurmurHash3","key","seed","m","reset","length","hash","prototype","h1","k1","i","top","len","rem","charCodeAt","result","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/imurmurhash/imurmurhash.js"],"sourcesContent":["/**\n * @preserve\n * JS Implementation of incremental MurmurHash3 (r150) (as of May 10, 2013)\n *\n * @author <a href=\"mailto:jensyt@gmail.com\">Jens Taylor</a>\n * @see http://github.com/homebrewing/brauhaus-diff\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n */\n(function(){\n    var cache;\n\n    // Call this function without `new` to use the cached object (good for\n    // single-threaded environments), or with `new` to create a new object.\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @param {number} seed An optional positive integer\n    // @return {object} A MurmurHash3 object for incremental hashing\n    function MurmurHash3(key, seed) {\n        var m = this instanceof MurmurHash3 ? this : cache;\n        m.reset(seed)\n        if (typeof key === 'string' && key.length > 0) {\n            m.hash(key);\n        }\n\n        if (m !== this) {\n            return m;\n        }\n    };\n\n    // Incrementally add a string to this hash\n    //\n    // @param {string} key A UTF-16 or ASCII string\n    // @return {object} this\n    MurmurHash3.prototype.hash = function(key) {\n        var h1, k1, i, top, len;\n\n        len = key.length;\n        this.len += len;\n\n        k1 = this.k1;\n        i = 0;\n        switch (this.rem) {\n            case 0: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) : 0;\n            case 1: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 8 : 0;\n            case 2: k1 ^= len > i ? (key.charCodeAt(i++) & 0xffff) << 16 : 0;\n            case 3:\n                k1 ^= len > i ? (key.charCodeAt(i) & 0xff) << 24 : 0;\n                k1 ^= len > i ? (key.charCodeAt(i++) & 0xff00) >> 8 : 0;\n        }\n\n        this.rem = (len + this.rem) & 3; // & 3 is same as % 4\n        len -= this.rem;\n        if (len > 0) {\n            h1 = this.h1;\n            while (1) {\n                k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n                k1 = (k1 << 15) | (k1 >>> 17);\n                k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n\n                h1 ^= k1;\n                h1 = (h1 << 13) | (h1 >>> 19);\n                h1 = (h1 * 5 + 0xe6546b64) & 0xffffffff;\n\n                if (i >= len) {\n                    break;\n                }\n\n                k1 = ((key.charCodeAt(i++) & 0xffff)) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 8) ^\n                     ((key.charCodeAt(i++) & 0xffff) << 16);\n                top = key.charCodeAt(i++);\n                k1 ^= ((top & 0xff) << 24) ^\n                      ((top & 0xff00) >> 8);\n            }\n\n            k1 = 0;\n            switch (this.rem) {\n                case 3: k1 ^= (key.charCodeAt(i + 2) & 0xffff) << 16;\n                case 2: k1 ^= (key.charCodeAt(i + 1) & 0xffff) << 8;\n                case 1: k1 ^= (key.charCodeAt(i) & 0xffff);\n            }\n\n            this.h1 = h1;\n        }\n\n        this.k1 = k1;\n        return this;\n    };\n\n    // Get the result of this hash\n    //\n    // @return {number} The 32-bit hash\n    MurmurHash3.prototype.result = function() {\n        var k1, h1;\n        \n        k1 = this.k1;\n        h1 = this.h1;\n\n        if (k1 > 0) {\n            k1 = (k1 * 0x2d51 + (k1 & 0xffff) * 0xcc9e0000) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (k1 * 0x3593 + (k1 & 0xffff) * 0x1b870000) & 0xffffffff;\n            h1 ^= k1;\n        }\n\n        h1 ^= this.len;\n\n        h1 ^= h1 >>> 16;\n        h1 = (h1 * 0xca6b + (h1 & 0xffff) * 0x85eb0000) & 0xffffffff;\n        h1 ^= h1 >>> 13;\n        h1 = (h1 * 0xae35 + (h1 & 0xffff) * 0xc2b20000) & 0xffffffff;\n        h1 ^= h1 >>> 16;\n\n        return h1 >>> 0;\n    };\n\n    // Reset the hash object for reuse\n    //\n    // @param {number} seed An optional positive integer\n    MurmurHash3.prototype.reset = function(seed) {\n        this.h1 = typeof seed === 'number' ? seed : 0;\n        this.rem = this.k1 = this.len = 0;\n        return this;\n    };\n\n    // A cached object to use. This can be safely used if you're in a single-\n    // threaded environment, otherwise you need to create new hashes to use.\n    cache = new MurmurHash3();\n\n    if (typeof(module) != 'undefined') {\n        module.exports = MurmurHash3;\n    } else {\n        this.MurmurHash3 = MurmurHash3;\n    }\n}());\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}