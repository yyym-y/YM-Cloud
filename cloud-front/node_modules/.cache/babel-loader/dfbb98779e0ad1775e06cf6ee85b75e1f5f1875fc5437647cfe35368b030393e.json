{"ast":null,"code":"/**\n * @fileoverview The rule should warn against code that tries to compare against -0.\n * @author Aladdin-ADD <hh_2013@foxmail.com>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow comparing against -0\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-compare-neg-zero\"\n    },\n    fixable: null,\n    schema: [],\n    messages: {\n      unexpected: \"Do not use the '{{operator}}' operator to compare against -0.\"\n    }\n  },\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks a given node is -0\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} `true` if the node is -0.\n     */\n    function isNegZero(node) {\n      return node.type === \"UnaryExpression\" && node.operator === \"-\" && node.argument.type === \"Literal\" && node.argument.value === 0;\n    }\n    const OPERATORS_TO_CHECK = new Set([\">\", \">=\", \"<\", \"<=\", \"==\", \"===\", \"!=\", \"!==\"]);\n    return {\n      BinaryExpression(node) {\n        if (OPERATORS_TO_CHECK.has(node.operator)) {\n          if (isNegZero(node.left) || isNegZero(node.right)) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                operator: node.operator\n              }\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","unexpected","create","context","isNegZero","node","operator","argument","value","OPERATORS_TO_CHECK","Set","BinaryExpression","has","left","right","report","messageId","data"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-compare-neg-zero.js"],"sourcesContent":["/**\n * @fileoverview The rule should warn against code that tries to compare against -0.\n * @author Aladdin-ADD <hh_2013@foxmail.com>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow comparing against -0\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-compare-neg-zero\"\n        },\n\n        fixable: null,\n        schema: [],\n\n        messages: {\n            unexpected: \"Do not use the '{{operator}}' operator to compare against -0.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks a given node is -0\n         * @param {ASTNode} node A node to check.\n         * @returns {boolean} `true` if the node is -0.\n         */\n        function isNegZero(node) {\n            return node.type === \"UnaryExpression\" && node.operator === \"-\" && node.argument.type === \"Literal\" && node.argument.value === 0;\n        }\n        const OPERATORS_TO_CHECK = new Set([\">\", \">=\", \"<\", \"<=\", \"==\", \"===\", \"!=\", \"!==\"]);\n\n        return {\n            BinaryExpression(node) {\n                if (OPERATORS_TO_CHECK.has(node.operator)) {\n                    if (isNegZero(node.left) || isNegZero(node.right)) {\n                        context.report({\n                            node,\n                            messageId: \"unexpected\",\n                            data: { operator: node.operator }\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,+BAA+B;MAC5CC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,SAASA,CAACC,IAAI,EAAE;MACrB,OAAOA,IAAI,CAACb,IAAI,KAAK,iBAAiB,IAAIa,IAAI,CAACC,QAAQ,KAAK,GAAG,IAAID,IAAI,CAACE,QAAQ,CAACf,IAAI,KAAK,SAAS,IAAIa,IAAI,CAACE,QAAQ,CAACC,KAAK,KAAK,CAAC;IACpI;IACA,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAEpF,OAAO;MACHC,gBAAgBA,CAACN,IAAI,EAAE;QACnB,IAAII,kBAAkB,CAACG,GAAG,CAACP,IAAI,CAACC,QAAQ,CAAC,EAAE;UACvC,IAAIF,SAAS,CAACC,IAAI,CAACQ,IAAI,CAAC,IAAIT,SAAS,CAACC,IAAI,CAACS,KAAK,CAAC,EAAE;YAC/CX,OAAO,CAACY,MAAM,CAAC;cACXV,IAAI;cACJW,SAAS,EAAE,YAAY;cACvBC,IAAI,EAAE;gBAAEX,QAAQ,EAAED,IAAI,CAACC;cAAS;YACpC,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}