{"ast":null,"code":"/**\n * @fileoverview Rule to forbid control characters from regular expressions.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst RegExpValidator = require(\"regexpp\").RegExpValidator;\nconst collector = new class {\n  constructor() {\n    this._source = \"\";\n    this._controlChars = [];\n    this._validator = new RegExpValidator(this);\n  }\n  onPatternEnter() {\n    this._controlChars = [];\n  }\n  onCharacter(start, end, cp) {\n    if (cp >= 0x00 && cp <= 0x1F && (this._source.codePointAt(start) === cp || this._source.slice(start, end).startsWith(\"\\\\x\") || this._source.slice(start, end).startsWith(\"\\\\u\"))) {\n      this._controlChars.push(`\\\\x${`0${cp.toString(16)}`.slice(-2)}`);\n    }\n  }\n  collectControlChars(regexpStr) {\n    try {\n      this._source = regexpStr;\n      this._validator.validatePattern(regexpStr); // Call onCharacter hook\n    } catch {\n\n      // Ignore syntax errors in RegExp.\n    }\n    return this._controlChars;\n  }\n}();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow control characters in regular expressions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-control-regex\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected control character(s) in regular expression: {{controlChars}}.\"\n    }\n  },\n  create(context) {\n    /**\n     * Get the regex expression\n     * @param {ASTNode} node node to evaluate\n     * @returns {RegExp|null} Regex if found else null\n     * @private\n     */\n    function getRegExpPattern(node) {\n      if (node.regex) {\n        return node.regex.pattern;\n      }\n      if (typeof node.value === \"string\" && (node.parent.type === \"NewExpression\" || node.parent.type === \"CallExpression\") && node.parent.callee.type === \"Identifier\" && node.parent.callee.name === \"RegExp\" && node.parent.arguments[0] === node) {\n        return node.value;\n      }\n      return null;\n    }\n    return {\n      Literal(node) {\n        const pattern = getRegExpPattern(node);\n        if (pattern) {\n          const controlCharacters = collector.collectControlChars(pattern);\n          if (controlCharacters.length > 0) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                controlChars: controlCharacters.join(\", \")\n              }\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","RegExpValidator","collector","constructor","_source","_controlChars","_validator","onPatternEnter","onCharacter","start","end","cp","codePointAt","slice","startsWith","push","toString","collectControlChars","regexpStr","validatePattern","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","getRegExpPattern","node","regex","pattern","value","parent","callee","name","arguments","Literal","controlCharacters","length","report","messageId","data","controlChars","join"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-control-regex.js"],"sourcesContent":["/**\n * @fileoverview Rule to forbid control characters from regular expressions.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\nconst RegExpValidator = require(\"regexpp\").RegExpValidator;\nconst collector = new (class {\n    constructor() {\n        this._source = \"\";\n        this._controlChars = [];\n        this._validator = new RegExpValidator(this);\n    }\n\n    onPatternEnter() {\n        this._controlChars = [];\n    }\n\n    onCharacter(start, end, cp) {\n        if (cp >= 0x00 &&\n            cp <= 0x1F &&\n            (\n                this._source.codePointAt(start) === cp ||\n                this._source.slice(start, end).startsWith(\"\\\\x\") ||\n                this._source.slice(start, end).startsWith(\"\\\\u\")\n            )\n        ) {\n            this._controlChars.push(`\\\\x${`0${cp.toString(16)}`.slice(-2)}`);\n        }\n    }\n\n    collectControlChars(regexpStr) {\n        try {\n            this._source = regexpStr;\n            this._validator.validatePattern(regexpStr); // Call onCharacter hook\n        } catch {\n\n            // Ignore syntax errors in RegExp.\n        }\n        return this._controlChars;\n    }\n})();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow control characters in regular expressions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-control-regex\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Unexpected control character(s) in regular expression: {{controlChars}}.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Get the regex expression\n         * @param {ASTNode} node node to evaluate\n         * @returns {RegExp|null} Regex if found else null\n         * @private\n         */\n        function getRegExpPattern(node) {\n            if (node.regex) {\n                return node.regex.pattern;\n            }\n            if (typeof node.value === \"string\" &&\n                (node.parent.type === \"NewExpression\" || node.parent.type === \"CallExpression\") &&\n                node.parent.callee.type === \"Identifier\" &&\n                node.parent.callee.name === \"RegExp\" &&\n                node.parent.arguments[0] === node\n            ) {\n                return node.value;\n            }\n\n            return null;\n        }\n\n        return {\n            Literal(node) {\n                const pattern = getRegExpPattern(node);\n\n                if (pattern) {\n                    const controlCharacters = collector.collectControlChars(pattern);\n\n                    if (controlCharacters.length > 0) {\n                        context.report({\n                            node,\n                            messageId: \"unexpected\",\n                            data: {\n                                controlChars: controlCharacters.join(\", \")\n                            }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}