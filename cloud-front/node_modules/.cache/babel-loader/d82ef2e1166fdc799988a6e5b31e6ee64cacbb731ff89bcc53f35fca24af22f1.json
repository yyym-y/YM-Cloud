{"ast":null,"code":"/**\n * @fileoverview Rule to check for tabs inside a file\n * @author Gyandeep Singh\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nconst tabRegex = /\\t+/gu;\nconst anyNonWhitespaceRegex = /\\S/u;\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow all tabs\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-tabs\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowIndentationTabs: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedTab: \"Unexpected tab character.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;\n    return {\n      Program(node) {\n        sourceCode.getLines().forEach((line, index) => {\n          let match;\n          while ((match = tabRegex.exec(line)) !== null) {\n            if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {\n              continue;\n            }\n            context.report({\n              node,\n              loc: {\n                start: {\n                  line: index + 1,\n                  column: match.index\n                },\n                end: {\n                  line: index + 1,\n                  column: match.index + match[0].length\n                }\n              },\n              messageId: \"unexpectedTab\"\n            });\n          }\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["tabRegex","anyNonWhitespaceRegex","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allowIndentationTabs","default","additionalProperties","messages","unexpectedTab","create","context","sourceCode","getSourceCode","options","Program","node","getLines","forEach","line","index","match","exec","test","slice","report","loc","start","column","end","length","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-tabs.js"],"sourcesContent":["/**\n * @fileoverview Rule to check for tabs inside a file\n * @author Gyandeep Singh\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst tabRegex = /\\t+/gu;\nconst anyNonWhitespaceRegex = /\\S/u;\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow all tabs\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-tabs\"\n        },\n        schema: [{\n            type: \"object\",\n            properties: {\n                allowIndentationTabs: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            unexpectedTab: \"Unexpected tab character.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;\n\n        return {\n            Program(node) {\n                sourceCode.getLines().forEach((line, index) => {\n                    let match;\n\n                    while ((match = tabRegex.exec(line)) !== null) {\n                        if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {\n                            continue;\n                        }\n\n                        context.report({\n                            node,\n                            loc: {\n                                start: {\n                                    line: index + 1,\n                                    column: match.index\n                                },\n                                end: {\n                                    line: index + 1,\n                                    column: match.index + match[0].length\n                                }\n                            },\n                            messageId: \"unexpectedTab\"\n                        });\n                    }\n                });\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAG,OAAO;AACxB,MAAMC,qBAAqB,GAAG,KAAK;;AAEnC;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,mBAAmB;MAChCC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IACDC,MAAM,EAAE,CAAC;MACLN,IAAI,EAAE,QAAQ;MACdO,UAAU,EAAE;QACRC,oBAAoB,EAAE;UAClBR,IAAI,EAAE,SAAS;UACfS,OAAO,EAAE;QACb;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CAAC;IAEFC,QAAQ,EAAE;MACNC,aAAa,EAAE;IACnB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAC1C,MAAMR,oBAAoB,GAAGM,OAAO,CAACG,OAAO,IAAIH,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,IAAIH,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,CAACT,oBAAoB;IAE7G,OAAO;MACHU,OAAOA,CAACC,IAAI,EAAE;QACVJ,UAAU,CAACK,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;UAC3C,IAAIC,KAAK;UAET,OAAO,CAACA,KAAK,GAAG7B,QAAQ,CAAC8B,IAAI,CAACH,IAAI,CAAC,MAAM,IAAI,EAAE;YAC3C,IAAId,oBAAoB,IAAI,CAACZ,qBAAqB,CAAC8B,IAAI,CAACJ,IAAI,CAACK,KAAK,CAAC,CAAC,EAAEH,KAAK,CAACD,KAAK,CAAC,CAAC,EAAE;cACjF;YACJ;YAEAT,OAAO,CAACc,MAAM,CAAC;cACXT,IAAI;cACJU,GAAG,EAAE;gBACDC,KAAK,EAAE;kBACHR,IAAI,EAAEC,KAAK,GAAG,CAAC;kBACfQ,MAAM,EAAEP,KAAK,CAACD;gBAClB,CAAC;gBACDS,GAAG,EAAE;kBACDV,IAAI,EAAEC,KAAK,GAAG,CAAC;kBACfQ,MAAM,EAAEP,KAAK,CAACD,KAAK,GAAGC,KAAK,CAAC,CAAC,CAAC,CAACS;gBACnC;cACJ,CAAC;cACDC,SAAS,EAAE;YACf,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MACN;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}