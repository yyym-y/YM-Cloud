{"ast":null,"code":"/**\n * @fileoverview Rule to flag on declaring variables already declared in the outer scope\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow variable declarations from shadowing variables declared in the outer scope\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-shadow\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        builtinGlobals: {\n          type: \"boolean\",\n          default: false\n        },\n        hoist: {\n          enum: [\"all\", \"functions\", \"never\"],\n          default: \"functions\"\n        },\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      noShadow: \"'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.\",\n      noShadowGlobal: \"'{{name}}' is already a global variable.\"\n    }\n  },\n  create(context) {\n    const options = {\n      builtinGlobals: context.options[0] && context.options[0].builtinGlobals,\n      hoist: context.options[0] && context.options[0].hoist || \"functions\",\n      allow: context.options[0] && context.options[0].allow || []\n    };\n\n    /**\n     * Check if variable name is allowed.\n     * @param  {ASTNode} variable The variable to check.\n     * @returns {boolean} Whether or not the variable name is allowed.\n     */\n    function isAllowed(variable) {\n      return options.allow.indexOf(variable.name) !== -1;\n    }\n\n    /**\n     * Checks if a variable of the class name in the class scope of ClassDeclaration.\n     *\n     * ClassDeclaration creates two variables of its name into its outer scope and its class scope.\n     * So we should ignore the variable in the class scope.\n     * @param {Object} variable The variable to check.\n     * @returns {boolean} Whether or not the variable of the class name in the class scope of ClassDeclaration.\n     */\n    function isDuplicatedClassNameVariable(variable) {\n      const block = variable.scope.block;\n      return block.type === \"ClassDeclaration\" && block.id === variable.identifiers[0];\n    }\n\n    /**\n     * Checks if a variable is inside the initializer of scopeVar.\n     *\n     * To avoid reporting at declarations such as `var a = function a() {};`.\n     * But it should report `var a = function(a) {};` or `var a = function() { function a() {} };`.\n     * @param {Object} variable The variable to check.\n     * @param {Object} scopeVar The scope variable to look for.\n     * @returns {boolean} Whether or not the variable is inside initializer of scopeVar.\n     */\n    function isOnInitializer(variable, scopeVar) {\n      const outerScope = scopeVar.scope;\n      const outerDef = scopeVar.defs[0];\n      const outer = outerDef && outerDef.parent && outerDef.parent.range;\n      const innerScope = variable.scope;\n      const innerDef = variable.defs[0];\n      const inner = innerDef && innerDef.name.range;\n      return outer && inner && outer[0] < inner[0] && inner[1] < outer[1] && (innerDef.type === \"FunctionName\" && innerDef.node.type === \"FunctionExpression\" || innerDef.node.type === \"ClassExpression\") && outerScope === innerScope.upper;\n    }\n\n    /**\n     * Get a range of a variable's identifier node.\n     * @param {Object} variable The variable to get.\n     * @returns {Array|undefined} The range of the variable's identifier node.\n     */\n    function getNameRange(variable) {\n      const def = variable.defs[0];\n      return def && def.name.range;\n    }\n\n    /**\n     * Get declared line and column of a variable.\n     * @param {eslint-scope.Variable} variable The variable to get.\n     * @returns {Object} The declared line and column of the variable.\n     */\n    function getDeclaredLocation(variable) {\n      const identifier = variable.identifiers[0];\n      let obj;\n      if (identifier) {\n        obj = {\n          global: false,\n          line: identifier.loc.start.line,\n          column: identifier.loc.start.column + 1\n        };\n      } else {\n        obj = {\n          global: true\n        };\n      }\n      return obj;\n    }\n\n    /**\n     * Checks if a variable is in TDZ of scopeVar.\n     * @param {Object} variable The variable to check.\n     * @param {Object} scopeVar The variable of TDZ.\n     * @returns {boolean} Whether or not the variable is in TDZ of scopeVar.\n     */\n    function isInTdz(variable, scopeVar) {\n      const outerDef = scopeVar.defs[0];\n      const inner = getNameRange(variable);\n      const outer = getNameRange(scopeVar);\n      return inner && outer && inner[1] < outer[0] && (\n      // Excepts FunctionDeclaration if is {\"hoist\":\"function\"}.\n      options.hoist !== \"functions\" || !outerDef || outerDef.node.type !== \"FunctionDeclaration\");\n    }\n\n    /**\n     * Checks the current context for shadowed variables.\n     * @param {Scope} scope Fixme\n     * @returns {void}\n     */\n    function checkForShadows(scope) {\n      const variables = scope.variables;\n      for (let i = 0; i < variables.length; ++i) {\n        const variable = variables[i];\n\n        // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.\n        if (variable.identifiers.length === 0 || isDuplicatedClassNameVariable(variable) || isAllowed(variable)) {\n          continue;\n        }\n\n        // Gets shadowed variable.\n        const shadowed = astUtils.getVariableByName(scope.upper, variable.name);\n        if (shadowed && (shadowed.identifiers.length > 0 || options.builtinGlobals && \"writeable\" in shadowed) && !isOnInitializer(variable, shadowed) && !(options.hoist !== \"all\" && isInTdz(variable, shadowed))) {\n          const location = getDeclaredLocation(shadowed);\n          const messageId = location.global ? \"noShadowGlobal\" : \"noShadow\";\n          const data = {\n            name: variable.name\n          };\n          if (!location.global) {\n            data.shadowedLine = location.line;\n            data.shadowedColumn = location.column;\n          }\n          context.report({\n            node: variable.identifiers[0],\n            messageId,\n            data\n          });\n        }\n      }\n    }\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        const stack = globalScope.childScopes.slice();\n        while (stack.length) {\n          const scope = stack.pop();\n          stack.push(...scope.childScopes);\n          checkForShadows(scope);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","builtinGlobals","default","hoist","enum","allow","items","additionalProperties","messages","noShadow","noShadowGlobal","create","context","options","isAllowed","variable","indexOf","name","isDuplicatedClassNameVariable","block","scope","id","identifiers","isOnInitializer","scopeVar","outerScope","outerDef","defs","outer","parent","range","innerScope","innerDef","inner","node","upper","getNameRange","def","getDeclaredLocation","identifier","obj","global","line","loc","start","column","isInTdz","checkForShadows","variables","i","length","shadowed","getVariableByName","location","messageId","data","shadowedLine","shadowedColumn","report","Program:exit","globalScope","getScope","stack","childScopes","slice","pop","push"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-shadow.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag on declaring variables already declared in the outer scope\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow variable declarations from shadowing variables declared in the outer scope\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-shadow\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    builtinGlobals: { type: \"boolean\", default: false },\n                    hoist: { enum: [\"all\", \"functions\", \"never\"], default: \"functions\" },\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            noShadow: \"'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.\",\n            noShadowGlobal: \"'{{name}}' is already a global variable.\"\n        }\n    },\n\n    create(context) {\n\n        const options = {\n            builtinGlobals: context.options[0] && context.options[0].builtinGlobals,\n            hoist: (context.options[0] && context.options[0].hoist) || \"functions\",\n            allow: (context.options[0] && context.options[0].allow) || []\n        };\n\n        /**\n         * Check if variable name is allowed.\n         * @param  {ASTNode} variable The variable to check.\n         * @returns {boolean} Whether or not the variable name is allowed.\n         */\n        function isAllowed(variable) {\n            return options.allow.indexOf(variable.name) !== -1;\n        }\n\n        /**\n         * Checks if a variable of the class name in the class scope of ClassDeclaration.\n         *\n         * ClassDeclaration creates two variables of its name into its outer scope and its class scope.\n         * So we should ignore the variable in the class scope.\n         * @param {Object} variable The variable to check.\n         * @returns {boolean} Whether or not the variable of the class name in the class scope of ClassDeclaration.\n         */\n        function isDuplicatedClassNameVariable(variable) {\n            const block = variable.scope.block;\n\n            return block.type === \"ClassDeclaration\" && block.id === variable.identifiers[0];\n        }\n\n        /**\n         * Checks if a variable is inside the initializer of scopeVar.\n         *\n         * To avoid reporting at declarations such as `var a = function a() {};`.\n         * But it should report `var a = function(a) {};` or `var a = function() { function a() {} };`.\n         * @param {Object} variable The variable to check.\n         * @param {Object} scopeVar The scope variable to look for.\n         * @returns {boolean} Whether or not the variable is inside initializer of scopeVar.\n         */\n        function isOnInitializer(variable, scopeVar) {\n            const outerScope = scopeVar.scope;\n            const outerDef = scopeVar.defs[0];\n            const outer = outerDef && outerDef.parent && outerDef.parent.range;\n            const innerScope = variable.scope;\n            const innerDef = variable.defs[0];\n            const inner = innerDef && innerDef.name.range;\n\n            return (\n                outer &&\n                inner &&\n                outer[0] < inner[0] &&\n                inner[1] < outer[1] &&\n                ((innerDef.type === \"FunctionName\" && innerDef.node.type === \"FunctionExpression\") || innerDef.node.type === \"ClassExpression\") &&\n                outerScope === innerScope.upper\n            );\n        }\n\n        /**\n         * Get a range of a variable's identifier node.\n         * @param {Object} variable The variable to get.\n         * @returns {Array|undefined} The range of the variable's identifier node.\n         */\n        function getNameRange(variable) {\n            const def = variable.defs[0];\n\n            return def && def.name.range;\n        }\n\n        /**\n         * Get declared line and column of a variable.\n         * @param {eslint-scope.Variable} variable The variable to get.\n         * @returns {Object} The declared line and column of the variable.\n         */\n        function getDeclaredLocation(variable) {\n            const identifier = variable.identifiers[0];\n            let obj;\n\n            if (identifier) {\n                obj = {\n                    global: false,\n                    line: identifier.loc.start.line,\n                    column: identifier.loc.start.column + 1\n                };\n            } else {\n                obj = {\n                    global: true\n                };\n            }\n            return obj;\n        }\n\n        /**\n         * Checks if a variable is in TDZ of scopeVar.\n         * @param {Object} variable The variable to check.\n         * @param {Object} scopeVar The variable of TDZ.\n         * @returns {boolean} Whether or not the variable is in TDZ of scopeVar.\n         */\n        function isInTdz(variable, scopeVar) {\n            const outerDef = scopeVar.defs[0];\n            const inner = getNameRange(variable);\n            const outer = getNameRange(scopeVar);\n\n            return (\n                inner &&\n                outer &&\n                inner[1] < outer[0] &&\n\n                // Excepts FunctionDeclaration if is {\"hoist\":\"function\"}.\n                (options.hoist !== \"functions\" || !outerDef || outerDef.node.type !== \"FunctionDeclaration\")\n            );\n        }\n\n        /**\n         * Checks the current context for shadowed variables.\n         * @param {Scope} scope Fixme\n         * @returns {void}\n         */\n        function checkForShadows(scope) {\n            const variables = scope.variables;\n\n            for (let i = 0; i < variables.length; ++i) {\n                const variable = variables[i];\n\n                // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.\n                if (variable.identifiers.length === 0 ||\n                    isDuplicatedClassNameVariable(variable) ||\n                    isAllowed(variable)\n                ) {\n                    continue;\n                }\n\n                // Gets shadowed variable.\n                const shadowed = astUtils.getVariableByName(scope.upper, variable.name);\n\n                if (shadowed &&\n                    (shadowed.identifiers.length > 0 || (options.builtinGlobals && \"writeable\" in shadowed)) &&\n                    !isOnInitializer(variable, shadowed) &&\n                    !(options.hoist !== \"all\" && isInTdz(variable, shadowed))\n                ) {\n                    const location = getDeclaredLocation(shadowed);\n                    const messageId = location.global ? \"noShadowGlobal\" : \"noShadow\";\n                    const data = { name: variable.name };\n\n                    if (!location.global) {\n                        data.shadowedLine = location.line;\n                        data.shadowedColumn = location.column;\n                    }\n                    context.report({\n                        node: variable.identifiers[0],\n                        messageId,\n                        data\n                    });\n                }\n            }\n        }\n\n        return {\n            \"Program:exit\"() {\n                const globalScope = context.getScope();\n                const stack = globalScope.childScopes.slice();\n\n                while (stack.length) {\n                    const scope = stack.pop();\n\n                    stack.push(...scope.childScopes);\n                    checkForShadows(scope);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}