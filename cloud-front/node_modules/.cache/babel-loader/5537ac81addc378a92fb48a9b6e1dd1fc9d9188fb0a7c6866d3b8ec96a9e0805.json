{"ast":null,"code":"/**\n * @fileoverview Rule to flag the use of empty character classes in regular expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/*\n * plain-English description of the following regexp:\n * 0. `^` fix the match at the beginning of the string\n * 1. `\\/`: the `/` that begins the regexp\n * 2. `([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*`: regexp contents; 0 or more of the following\n * 2.0. `[^\\\\[]`: any character that's not a `\\` or a `[` (anything but escape sequences and character classes)\n * 2.1. `\\\\.`: an escape sequence\n * 2.2. `\\[([^\\\\\\]]|\\\\.)+\\]`: a character class that isn't empty\n * 3. `\\/` the `/` that ends the regexp\n * 4. `[gimuy]*`: optional regexp flags\n * 5. `$`: fix the match at the end of the string\n */\nconst regex = /^\\/([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*\\/[gimuys]*$/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow empty character classes in regular expressions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-empty-character-class\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Empty class.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      Literal(node) {\n        const token = sourceCode.getFirstToken(node);\n        if (token.type === \"RegularExpression\" && !regex.test(token.value)) {\n          context.report({\n            node,\n            messageId: \"unexpected\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["regex","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","sourceCode","getSourceCode","Literal","node","token","getFirstToken","test","value","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-empty-character-class.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag the use of empty character classes in regular expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/*\n * plain-English description of the following regexp:\n * 0. `^` fix the match at the beginning of the string\n * 1. `\\/`: the `/` that begins the regexp\n * 2. `([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*`: regexp contents; 0 or more of the following\n * 2.0. `[^\\\\[]`: any character that's not a `\\` or a `[` (anything but escape sequences and character classes)\n * 2.1. `\\\\.`: an escape sequence\n * 2.2. `\\[([^\\\\\\]]|\\\\.)+\\]`: a character class that isn't empty\n * 3. `\\/` the `/` that ends the regexp\n * 4. `[gimuy]*`: optional regexp flags\n * 5. `$`: fix the match at the end of the string\n */\nconst regex = /^\\/([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*\\/[gimuys]*$/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow empty character classes in regular expressions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-empty-character-class\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Empty class.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n\n            Literal(node) {\n                const token = sourceCode.getFirstToken(node);\n\n                if (token.type === \"RegularExpression\" && !regex.test(token.value)) {\n                    context.report({ node, messageId: \"unexpected\" });\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,KAAK,GAAG,kDAAkD;;AAEhE;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,yDAAyD;MACtEC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAE1C,OAAO;MAEHC,OAAOA,CAACC,IAAI,EAAE;QACV,MAAMC,KAAK,GAAGJ,UAAU,CAACK,aAAa,CAACF,IAAI,CAAC;QAE5C,IAAIC,KAAK,CAACf,IAAI,KAAK,mBAAmB,IAAI,CAACJ,KAAK,CAACqB,IAAI,CAACF,KAAK,CAACG,KAAK,CAAC,EAAE;UAChER,OAAO,CAACS,MAAM,CAAC;YAAEL,IAAI;YAAEM,SAAS,EAAE;UAAa,CAAC,CAAC;QACrD;MACJ;IAEJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}