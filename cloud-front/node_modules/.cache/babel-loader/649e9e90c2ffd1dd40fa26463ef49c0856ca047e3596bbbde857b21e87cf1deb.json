{"ast":null,"code":"/**\n * @fileoverview A class of the code path.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst CodePathState = require(\"./code-path-state\");\nconst IdGenerator = require(\"./id-generator\");\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A code path.\n */\nclass CodePath {\n  // eslint-disable-next-line jsdoc/require-description\n  /**\n   * @param {string} id An identifier.\n   * @param {CodePath|null} upper The code path of the upper function scope.\n   * @param {Function} onLooped A callback function to notify looping.\n   */\n  constructor(id, upper, onLooped) {\n    /**\n     * The identifier of this code path.\n     * Rules use it to store additional information of each rule.\n     * @type {string}\n     */\n    this.id = id;\n\n    /**\n     * The code path of the upper function scope.\n     * @type {CodePath|null}\n     */\n    this.upper = upper;\n\n    /**\n     * The code paths of nested function scopes.\n     * @type {CodePath[]}\n     */\n    this.childCodePaths = [];\n\n    // Initializes internal state.\n    Object.defineProperty(this, \"internal\", {\n      value: new CodePathState(new IdGenerator(`${id}_`), onLooped)\n    });\n\n    // Adds this into `childCodePaths` of `upper`.\n    if (upper) {\n      upper.childCodePaths.push(this);\n    }\n  }\n\n  /**\n   * Gets the state of a given code path.\n   * @param {CodePath} codePath A code path to get.\n   * @returns {CodePathState} The state of the code path.\n   */\n  static getState(codePath) {\n    return codePath.internal;\n  }\n\n  /**\n   * The initial code path segment.\n   * @type {CodePathSegment}\n   */\n  get initialSegment() {\n    return this.internal.initialSegment;\n  }\n\n  /**\n   * Final code path segments.\n   * This array is a mix of `returnedSegments` and `thrownSegments`.\n   * @type {CodePathSegment[]}\n   */\n  get finalSegments() {\n    return this.internal.finalSegments;\n  }\n\n  /**\n   * Final code path segments which is with `return` statements.\n   * This array contains the last path segment if it's reachable.\n   * Since the reachable last path returns `undefined`.\n   * @type {CodePathSegment[]}\n   */\n  get returnedSegments() {\n    return this.internal.returnedForkContext;\n  }\n\n  /**\n   * Final code path segments which is with `throw` statements.\n   * @type {CodePathSegment[]}\n   */\n  get thrownSegments() {\n    return this.internal.thrownForkContext;\n  }\n\n  /**\n   * Current code path segments.\n   * @type {CodePathSegment[]}\n   */\n  get currentSegments() {\n    return this.internal.currentSegments;\n  }\n\n  /**\n   * Traverses all segments in this code path.\n   *\n   *     codePath.traverseSegments(function(segment, controller) {\n   *         // do something.\n   *     });\n   *\n   * This method enumerates segments in order from the head.\n   *\n   * The `controller` object has two methods.\n   *\n   * - `controller.skip()` - Skip the following segments in this branch.\n   * - `controller.break()` - Skip all following segments.\n   * @param {Object} [options] Omittable.\n   * @param {CodePathSegment} [options.first] The first segment to traverse.\n   * @param {CodePathSegment} [options.last] The last segment to traverse.\n   * @param {Function} callback A callback function.\n   * @returns {void}\n   */\n  traverseSegments(options, callback) {\n    let resolvedOptions;\n    let resolvedCallback;\n    if (typeof options === \"function\") {\n      resolvedCallback = options;\n      resolvedOptions = {};\n    } else {\n      resolvedOptions = options || {};\n      resolvedCallback = callback;\n    }\n    const startSegment = resolvedOptions.first || this.internal.initialSegment;\n    const lastSegment = resolvedOptions.last;\n    let item = null;\n    let index = 0;\n    let end = 0;\n    let segment = null;\n    const visited = Object.create(null);\n    const stack = [[startSegment, 0]];\n    let skippedSegment = null;\n    let broken = false;\n    const controller = {\n      skip() {\n        if (stack.length <= 1) {\n          broken = true;\n        } else {\n          skippedSegment = stack[stack.length - 2][0];\n        }\n      },\n      break() {\n        broken = true;\n      }\n    };\n\n    /**\n     * Checks a given previous segment has been visited.\n     * @param {CodePathSegment} prevSegment A previous segment to check.\n     * @returns {boolean} `true` if the segment has been visited.\n     */\n    function isVisited(prevSegment) {\n      return visited[prevSegment.id] || segment.isLoopedPrevSegment(prevSegment);\n    }\n    while (stack.length > 0) {\n      item = stack[stack.length - 1];\n      segment = item[0];\n      index = item[1];\n      if (index === 0) {\n        // Skip if this segment has been visited already.\n        if (visited[segment.id]) {\n          stack.pop();\n          continue;\n        }\n\n        // Skip if all previous segments have not been visited.\n        if (segment !== startSegment && segment.prevSegments.length > 0 && !segment.prevSegments.every(isVisited)) {\n          stack.pop();\n          continue;\n        }\n\n        // Reset the flag of skipping if all branches have been skipped.\n        if (skippedSegment && segment.prevSegments.indexOf(skippedSegment) !== -1) {\n          skippedSegment = null;\n        }\n        visited[segment.id] = true;\n\n        // Call the callback when the first time.\n        if (!skippedSegment) {\n          resolvedCallback.call(this, segment, controller);\n          if (segment === lastSegment) {\n            controller.skip();\n          }\n          if (broken) {\n            break;\n          }\n        }\n      }\n\n      // Update the stack.\n      end = segment.nextSegments.length - 1;\n      if (index < end) {\n        item[1] += 1;\n        stack.push([segment.nextSegments[index], 0]);\n      } else if (index === end) {\n        item[0] = segment.nextSegments[index];\n        item[1] = 0;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n}\nmodule.exports = CodePath;","map":{"version":3,"names":["require","CodePathState","IdGenerator","CodePath","constructor","id","upper","onLooped","childCodePaths","Object","defineProperty","value","push","getState","codePath","internal","initialSegment","finalSegments","returnedSegments","returnedForkContext","thrownSegments","thrownForkContext","currentSegments","traverseSegments","options","callback","resolvedOptions","resolvedCallback","startSegment","first","lastSegment","last","item","index","end","segment","visited","create","stack","skippedSegment","broken","controller","skip","length","break","isVisited","prevSegment","isLoopedPrevSegment","pop","prevSegments","every","indexOf","call","nextSegments","module","exports"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/linter/code-path-analysis/code-path.js"],"sourcesContent":["/**\n * @fileoverview A class of the code path.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst CodePathState = require(\"./code-path-state\");\nconst IdGenerator = require(\"./id-generator\");\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A code path.\n */\nclass CodePath {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {string} id An identifier.\n     * @param {CodePath|null} upper The code path of the upper function scope.\n     * @param {Function} onLooped A callback function to notify looping.\n     */\n    constructor(id, upper, onLooped) {\n\n        /**\n         * The identifier of this code path.\n         * Rules use it to store additional information of each rule.\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * The code path of the upper function scope.\n         * @type {CodePath|null}\n         */\n        this.upper = upper;\n\n        /**\n         * The code paths of nested function scopes.\n         * @type {CodePath[]}\n         */\n        this.childCodePaths = [];\n\n        // Initializes internal state.\n        Object.defineProperty(\n            this,\n            \"internal\",\n            { value: new CodePathState(new IdGenerator(`${id}_`), onLooped) }\n        );\n\n        // Adds this into `childCodePaths` of `upper`.\n        if (upper) {\n            upper.childCodePaths.push(this);\n        }\n    }\n\n    /**\n     * Gets the state of a given code path.\n     * @param {CodePath} codePath A code path to get.\n     * @returns {CodePathState} The state of the code path.\n     */\n    static getState(codePath) {\n        return codePath.internal;\n    }\n\n    /**\n     * The initial code path segment.\n     * @type {CodePathSegment}\n     */\n    get initialSegment() {\n        return this.internal.initialSegment;\n    }\n\n    /**\n     * Final code path segments.\n     * This array is a mix of `returnedSegments` and `thrownSegments`.\n     * @type {CodePathSegment[]}\n     */\n    get finalSegments() {\n        return this.internal.finalSegments;\n    }\n\n    /**\n     * Final code path segments which is with `return` statements.\n     * This array contains the last path segment if it's reachable.\n     * Since the reachable last path returns `undefined`.\n     * @type {CodePathSegment[]}\n     */\n    get returnedSegments() {\n        return this.internal.returnedForkContext;\n    }\n\n    /**\n     * Final code path segments which is with `throw` statements.\n     * @type {CodePathSegment[]}\n     */\n    get thrownSegments() {\n        return this.internal.thrownForkContext;\n    }\n\n    /**\n     * Current code path segments.\n     * @type {CodePathSegment[]}\n     */\n    get currentSegments() {\n        return this.internal.currentSegments;\n    }\n\n    /**\n     * Traverses all segments in this code path.\n     *\n     *     codePath.traverseSegments(function(segment, controller) {\n     *         // do something.\n     *     });\n     *\n     * This method enumerates segments in order from the head.\n     *\n     * The `controller` object has two methods.\n     *\n     * - `controller.skip()` - Skip the following segments in this branch.\n     * - `controller.break()` - Skip all following segments.\n     * @param {Object} [options] Omittable.\n     * @param {CodePathSegment} [options.first] The first segment to traverse.\n     * @param {CodePathSegment} [options.last] The last segment to traverse.\n     * @param {Function} callback A callback function.\n     * @returns {void}\n     */\n    traverseSegments(options, callback) {\n        let resolvedOptions;\n        let resolvedCallback;\n\n        if (typeof options === \"function\") {\n            resolvedCallback = options;\n            resolvedOptions = {};\n        } else {\n            resolvedOptions = options || {};\n            resolvedCallback = callback;\n        }\n\n        const startSegment = resolvedOptions.first || this.internal.initialSegment;\n        const lastSegment = resolvedOptions.last;\n\n        let item = null;\n        let index = 0;\n        let end = 0;\n        let segment = null;\n        const visited = Object.create(null);\n        const stack = [[startSegment, 0]];\n        let skippedSegment = null;\n        let broken = false;\n        const controller = {\n            skip() {\n                if (stack.length <= 1) {\n                    broken = true;\n                } else {\n                    skippedSegment = stack[stack.length - 2][0];\n                }\n            },\n            break() {\n                broken = true;\n            }\n        };\n\n        /**\n         * Checks a given previous segment has been visited.\n         * @param {CodePathSegment} prevSegment A previous segment to check.\n         * @returns {boolean} `true` if the segment has been visited.\n         */\n        function isVisited(prevSegment) {\n            return (\n                visited[prevSegment.id] ||\n                segment.isLoopedPrevSegment(prevSegment)\n            );\n        }\n\n        while (stack.length > 0) {\n            item = stack[stack.length - 1];\n            segment = item[0];\n            index = item[1];\n\n            if (index === 0) {\n\n                // Skip if this segment has been visited already.\n                if (visited[segment.id]) {\n                    stack.pop();\n                    continue;\n                }\n\n                // Skip if all previous segments have not been visited.\n                if (segment !== startSegment &&\n                    segment.prevSegments.length > 0 &&\n                    !segment.prevSegments.every(isVisited)\n                ) {\n                    stack.pop();\n                    continue;\n                }\n\n                // Reset the flag of skipping if all branches have been skipped.\n                if (skippedSegment && segment.prevSegments.indexOf(skippedSegment) !== -1) {\n                    skippedSegment = null;\n                }\n                visited[segment.id] = true;\n\n                // Call the callback when the first time.\n                if (!skippedSegment) {\n                    resolvedCallback.call(this, segment, controller);\n                    if (segment === lastSegment) {\n                        controller.skip();\n                    }\n                    if (broken) {\n                        break;\n                    }\n                }\n            }\n\n            // Update the stack.\n            end = segment.nextSegments.length - 1;\n            if (index < end) {\n                item[1] += 1;\n                stack.push([segment.nextSegments[index], 0]);\n            } else if (index === end) {\n                item[0] = segment.nextSegments[index];\n                item[1] = 0;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n}\n\nmodule.exports = CodePath;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}