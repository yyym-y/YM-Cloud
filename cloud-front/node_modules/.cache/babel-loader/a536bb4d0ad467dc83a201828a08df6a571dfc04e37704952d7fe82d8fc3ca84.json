{"ast":null,"code":"/**\n * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.call()`/`.apply()`.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`.\n */\nfunction isCallOrNonVariadicApply(node) {\n  const callee = astUtils.skipChainExpression(node.callee);\n  return callee.type === \"MemberExpression\" && callee.property.type === \"Identifier\" && callee.computed === false && (callee.property.name === \"call\" && node.arguments.length >= 1 || callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\");\n}\n\n/**\n * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.call()`/`.apply()`.\n * @param {SourceCode} sourceCode The ESLint source code object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n */\nfunction isValidThisArg(expectedThis, thisArg, sourceCode) {\n  if (!expectedThis) {\n    return astUtils.isNullOrUndefined(thisArg);\n  }\n  return astUtils.equalTokens(expectedThis, thisArg, sourceCode);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary calls to `.call()` and `.apply()`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-useless-call\"\n    },\n    schema: [],\n    messages: {\n      unnecessaryCall: \"Unnecessary '.{{name}}()'.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      CallExpression(node) {\n        if (!isCallOrNonVariadicApply(node)) {\n          return;\n        }\n        const callee = astUtils.skipChainExpression(node.callee);\n        const applied = astUtils.skipChainExpression(callee.object);\n        const expectedThis = applied.type === \"MemberExpression\" ? applied.object : null;\n        const thisArg = node.arguments[0];\n        if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n          context.report({\n            node,\n            messageId: \"unnecessaryCall\",\n            data: {\n              name: callee.property.name\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","isCallOrNonVariadicApply","node","callee","skipChainExpression","type","property","computed","name","arguments","length","isValidThisArg","expectedThis","thisArg","sourceCode","isNullOrUndefined","equalTokens","module","exports","meta","docs","description","category","recommended","url","schema","messages","unnecessaryCall","create","context","getSourceCode","CallExpression","applied","object","report","messageId","data"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-useless-call.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.call()`/`.apply()`.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`.\n */\nfunction isCallOrNonVariadicApply(node) {\n    const callee = astUtils.skipChainExpression(node.callee);\n\n    return (\n        callee.type === \"MemberExpression\" &&\n        callee.property.type === \"Identifier\" &&\n        callee.computed === false &&\n        (\n            (callee.property.name === \"call\" && node.arguments.length >= 1) ||\n            (callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\")\n        )\n    );\n}\n\n\n/**\n * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.call()`/`.apply()`.\n * @param {SourceCode} sourceCode The ESLint source code object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n */\nfunction isValidThisArg(expectedThis, thisArg, sourceCode) {\n    if (!expectedThis) {\n        return astUtils.isNullOrUndefined(thisArg);\n    }\n    return astUtils.equalTokens(expectedThis, thisArg, sourceCode);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary calls to `.call()` and `.apply()`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-useless-call\"\n        },\n\n        schema: [],\n\n        messages: {\n            unnecessaryCall: \"Unnecessary '.{{name}}()'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n            CallExpression(node) {\n                if (!isCallOrNonVariadicApply(node)) {\n                    return;\n                }\n\n                const callee = astUtils.skipChainExpression(node.callee);\n                const applied = astUtils.skipChainExpression(callee.object);\n                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;\n                const thisArg = node.arguments[0];\n\n                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n                    context.report({ node, messageId: \"unnecessaryCall\", data: { name: callee.property.name } });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACC,IAAI,EAAE;EACpC,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,mBAAmB,CAACF,IAAI,CAACC,MAAM,CAAC;EAExD,OACIA,MAAM,CAACE,IAAI,KAAK,kBAAkB,IAClCF,MAAM,CAACG,QAAQ,CAACD,IAAI,KAAK,YAAY,IACrCF,MAAM,CAACI,QAAQ,KAAK,KAAK,KAEpBJ,MAAM,CAACG,QAAQ,CAACE,IAAI,KAAK,MAAM,IAAIN,IAAI,CAACO,SAAS,CAACC,MAAM,IAAI,CAAC,IAC7DP,MAAM,CAACG,QAAQ,CAACE,IAAI,KAAK,OAAO,IAAIN,IAAI,CAACO,SAAS,CAACC,MAAM,KAAK,CAAC,IAAIR,IAAI,CAACO,SAAS,CAAC,CAAC,CAAC,CAACJ,IAAI,KAAK,iBAAkB,CACpH;AAET;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,cAAcA,CAACC,YAAY,EAAEC,OAAO,EAAEC,UAAU,EAAE;EACvD,IAAI,CAACF,YAAY,EAAE;IACf,OAAOb,QAAQ,CAACgB,iBAAiB,CAACF,OAAO,CAAC;EAC9C;EACA,OAAOd,QAAQ,CAACiB,WAAW,CAACJ,YAAY,EAAEC,OAAO,EAAEC,UAAU,CAAC;AAClE;;AAEA;AACA;AACA;;AAEAG,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFd,IAAI,EAAE,YAAY;IAElBe,IAAI,EAAE;MACFC,WAAW,EAAE,wDAAwD;MACrEC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,eAAe,EAAE;IACrB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMf,UAAU,GAAGe,OAAO,CAACC,aAAa,CAAC,CAAC;IAE1C,OAAO;MACHC,cAAcA,CAAC7B,IAAI,EAAE;QACjB,IAAI,CAACD,wBAAwB,CAACC,IAAI,CAAC,EAAE;UACjC;QACJ;QAEA,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,mBAAmB,CAACF,IAAI,CAACC,MAAM,CAAC;QACxD,MAAM6B,OAAO,GAAGjC,QAAQ,CAACK,mBAAmB,CAACD,MAAM,CAAC8B,MAAM,CAAC;QAC3D,MAAMrB,YAAY,GAAIoB,OAAO,CAAC3B,IAAI,KAAK,kBAAkB,GAAI2B,OAAO,CAACC,MAAM,GAAG,IAAI;QAClF,MAAMpB,OAAO,GAAGX,IAAI,CAACO,SAAS,CAAC,CAAC,CAAC;QAEjC,IAAIE,cAAc,CAACC,YAAY,EAAEC,OAAO,EAAEC,UAAU,CAAC,EAAE;UACnDe,OAAO,CAACK,MAAM,CAAC;YAAEhC,IAAI;YAAEiC,SAAS,EAAE,iBAAiB;YAAEC,IAAI,EAAE;cAAE5B,IAAI,EAAEL,MAAM,CAACG,QAAQ,CAACE;YAAK;UAAE,CAAC,CAAC;QAChG;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}