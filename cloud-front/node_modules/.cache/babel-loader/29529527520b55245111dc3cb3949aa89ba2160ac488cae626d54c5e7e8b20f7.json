{"ast":null,"code":"/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified names in exports\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-exports\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        restrictedNamedExports: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\"\n    }\n  },\n  create(context) {\n    const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n\n    /**\n     * Checks and reports given exported identifier.\n     * @param {ASTNode} node exported `Identifier` node to check.\n     * @returns {void}\n     */\n    function checkExportedName(node) {\n      const name = node.name;\n      if (restrictedNames.has(name)) {\n        context.report({\n          node,\n          messageId: \"restrictedNamed\",\n          data: {\n            name\n          }\n        });\n      }\n    }\n    return {\n      ExportAllDeclaration(node) {\n        if (node.exported) {\n          checkExportedName(node.exported);\n        }\n      },\n      ExportNamedDeclaration(node) {\n        const declaration = node.declaration;\n        if (declaration) {\n          if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n            checkExportedName(declaration.id);\n          } else if (declaration.type === \"VariableDeclaration\") {\n            context.getDeclaredVariables(declaration).map(v => v.defs.find(d => d.parent === declaration)).map(d => d.name) // Identifier nodes\n            .forEach(checkExportedName);\n          }\n        } else {\n          node.specifiers.map(s => s.exported).forEach(checkExportedName);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","restrictedNamedExports","items","uniqueItems","additionalProperties","messages","restrictedNamed","create","context","restrictedNames","Set","options","checkExportedName","node","name","has","report","messageId","data","ExportAllDeclaration","exported","ExportNamedDeclaration","declaration","id","getDeclaredVariables","map","v","defs","find","d","parent","forEach","specifiers","s"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-restricted-exports.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified names in exports\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-exports\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                restrictedNamedExports: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    },\n                    uniqueItems: true\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\"\n        }\n    },\n\n    create(context) {\n\n        const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n\n        /**\n         * Checks and reports given exported identifier.\n         * @param {ASTNode} node exported `Identifier` node to check.\n         * @returns {void}\n         */\n        function checkExportedName(node) {\n            const name = node.name;\n\n            if (restrictedNames.has(name)) {\n                context.report({\n                    node,\n                    messageId: \"restrictedNamed\",\n                    data: { name }\n                });\n            }\n        }\n\n        return {\n            ExportAllDeclaration(node) {\n                if (node.exported) {\n                    checkExportedName(node.exported);\n                }\n            },\n\n            ExportNamedDeclaration(node) {\n                const declaration = node.declaration;\n\n                if (declaration) {\n                    if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n                        checkExportedName(declaration.id);\n                    } else if (declaration.type === \"VariableDeclaration\") {\n                        context.getDeclaredVariables(declaration)\n                            .map(v => v.defs.find(d => d.parent === declaration))\n                            .map(d => d.name) // Identifier nodes\n                            .forEach(checkExportedName);\n                    }\n                } else {\n                    node.specifiers\n                        .map(s => s.exported)\n                        .forEach(checkExportedName);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,qCAAqC;MAClDC,QAAQ,EAAE,cAAc;MACxBC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CAAC;MACLN,IAAI,EAAE,QAAQ;MACdO,UAAU,EAAE;QACRC,sBAAsB,EAAE;UACpBR,IAAI,EAAE,OAAO;UACbS,KAAK,EAAE;YACHT,IAAI,EAAE;UACV,CAAC;UACDU,WAAW,EAAE;QACjB;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CAAC;IAEFC,QAAQ,EAAE;MACNC,eAAe,EAAE;IACrB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,IAAIH,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,CAACV,sBAAsB,CAAC;;IAEhG;AACR;AACA;AACA;AACA;IACQ,SAASW,iBAAiBA,CAACC,IAAI,EAAE;MAC7B,MAAMC,IAAI,GAAGD,IAAI,CAACC,IAAI;MAEtB,IAAIL,eAAe,CAACM,GAAG,CAACD,IAAI,CAAC,EAAE;QAC3BN,OAAO,CAACQ,MAAM,CAAC;UACXH,IAAI;UACJI,SAAS,EAAE,iBAAiB;UAC5BC,IAAI,EAAE;YAAEJ;UAAK;QACjB,CAAC,CAAC;MACN;IACJ;IAEA,OAAO;MACHK,oBAAoBA,CAACN,IAAI,EAAE;QACvB,IAAIA,IAAI,CAACO,QAAQ,EAAE;UACfR,iBAAiB,CAACC,IAAI,CAACO,QAAQ,CAAC;QACpC;MACJ,CAAC;MAEDC,sBAAsBA,CAACR,IAAI,EAAE;QACzB,MAAMS,WAAW,GAAGT,IAAI,CAACS,WAAW;QAEpC,IAAIA,WAAW,EAAE;UACb,IAAIA,WAAW,CAAC7B,IAAI,KAAK,qBAAqB,IAAI6B,WAAW,CAAC7B,IAAI,KAAK,kBAAkB,EAAE;YACvFmB,iBAAiB,CAACU,WAAW,CAACC,EAAE,CAAC;UACrC,CAAC,MAAM,IAAID,WAAW,CAAC7B,IAAI,KAAK,qBAAqB,EAAE;YACnDe,OAAO,CAACgB,oBAAoB,CAACF,WAAW,CAAC,CACpCG,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKR,WAAW,CAAC,CAAC,CACpDG,GAAG,CAACI,CAAC,IAAIA,CAAC,CAACf,IAAI,CAAC,CAAC;YAAA,CACjBiB,OAAO,CAACnB,iBAAiB,CAAC;UACnC;QACJ,CAAC,MAAM;UACHC,IAAI,CAACmB,UAAU,CACVP,GAAG,CAACQ,CAAC,IAAIA,CAAC,CAACb,QAAQ,CAAC,CACpBW,OAAO,CAACnB,iBAAiB,CAAC;QACnC;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}