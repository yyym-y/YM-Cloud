{"ast":null,"code":"/**\n * @fileoverview Rule to enforce the use of `u` flag on RegExp.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.regexp.flags.js\");\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker,\n  getStringIfConstant\n} = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce the use of `u` flag on RegExp\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-unicode-regexp\"\n    },\n    messages: {\n      requireUFlag: \"Use the 'u' flag.\"\n    },\n    schema: []\n  },\n  create(context) {\n    return {\n      \"Literal[regex]\"(node) {\n        const flags = node.regex.flags || \"\";\n        if (!flags.includes(\"u\")) {\n          context.report({\n            node,\n            messageId: \"requireUFlag\"\n          });\n        }\n      },\n      Program() {\n        const scope = context.getScope();\n        const tracker = new ReferenceTracker(scope);\n        const trackMap = {\n          RegExp: {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          }\n        };\n        for (const {\n          node\n        } of tracker.iterateGlobalReferences(trackMap)) {\n          const flagsNode = node.arguments[1];\n          const flags = getStringIfConstant(flagsNode, scope);\n          if (!flagsNode || typeof flags === \"string\" && !flags.includes(\"u\")) {\n            context.report({\n              node,\n              messageId: \"requireUFlag\"\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","CALL","CONSTRUCT","ReferenceTracker","getStringIfConstant","module","exports","meta","type","docs","description","category","recommended","url","messages","requireUFlag","schema","create","context","Literal[regex]","node","flags","regex","includes","report","messageId","Program","scope","getScope","tracker","trackMap","RegExp","iterateGlobalReferences","flagsNode","arguments"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/require-unicode-regexp.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce the use of `u` flag on RegExp.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    CALL,\n    CONSTRUCT,\n    ReferenceTracker,\n    getStringIfConstant\n} = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce the use of `u` flag on RegExp\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/require-unicode-regexp\"\n        },\n\n        messages: {\n            requireUFlag: \"Use the 'u' flag.\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n        return {\n            \"Literal[regex]\"(node) {\n                const flags = node.regex.flags || \"\";\n\n                if (!flags.includes(\"u\")) {\n                    context.report({ node, messageId: \"requireUFlag\" });\n                }\n            },\n\n            Program() {\n                const scope = context.getScope();\n                const tracker = new ReferenceTracker(scope);\n                const trackMap = {\n                    RegExp: { [CALL]: true, [CONSTRUCT]: true }\n                };\n\n                for (const { node } of tracker.iterateGlobalReferences(trackMap)) {\n                    const flagsNode = node.arguments[1];\n                    const flags = getStringIfConstant(flagsNode, scope);\n\n                    if (!flagsNode || (typeof flags === \"string\" && !flags.includes(\"u\"))) {\n                        context.report({ node, messageId: \"requireUFlag\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAAAA,OAAA;AAEA,MAAM;EACFC,IAAI;EACJC,SAAS;EACTC,gBAAgB;EAChBC;AACJ,CAAC,GAAGJ,OAAO,CAAC,cAAc,CAAC;;AAE3B;AACA;AACA;;AAEAK,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,uCAAuC;MACpDC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,QAAQ,EAAE;MACNC,YAAY,EAAE;IAClB,CAAC;IAEDC,MAAM,EAAE;EACZ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,OAAO;MACH,gBAAgBC,CAACC,IAAI,EAAE;QACnB,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAACD,KAAK,IAAI,EAAE;QAEpC,IAAI,CAACA,KAAK,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;UACtBL,OAAO,CAACM,MAAM,CAAC;YAAEJ,IAAI;YAAEK,SAAS,EAAE;UAAe,CAAC,CAAC;QACvD;MACJ,CAAC;MAEDC,OAAOA,CAAA,EAAG;QACN,MAAMC,KAAK,GAAGT,OAAO,CAACU,QAAQ,CAAC,CAAC;QAChC,MAAMC,OAAO,GAAG,IAAI1B,gBAAgB,CAACwB,KAAK,CAAC;QAC3C,MAAMG,QAAQ,GAAG;UACbC,MAAM,EAAE;YAAE,CAAC9B,IAAI,GAAG,IAAI;YAAE,CAACC,SAAS,GAAG;UAAK;QAC9C,CAAC;QAED,KAAK,MAAM;UAAEkB;QAAK,CAAC,IAAIS,OAAO,CAACG,uBAAuB,CAACF,QAAQ,CAAC,EAAE;UAC9D,MAAMG,SAAS,GAAGb,IAAI,CAACc,SAAS,CAAC,CAAC,CAAC;UACnC,MAAMb,KAAK,GAAGjB,mBAAmB,CAAC6B,SAAS,EAAEN,KAAK,CAAC;UAEnD,IAAI,CAACM,SAAS,IAAK,OAAOZ,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACE,QAAQ,CAAC,GAAG,CAAE,EAAE;YACnEL,OAAO,CAACM,MAAM,CAAC;cAAEJ,IAAI;cAAEK,SAAS,EAAE;YAAe,CAAC,CAAC;UACvD;QACJ;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}