{"ast":null,"code":"/**\n * @fileoverview Rule to flag when a function has too many parameters\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum number of parameters in function definitions\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-params\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      exceed: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const option = context.options[0];\n    let numParams = 3;\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      numParams = option.maximum || option.max;\n    }\n    if (typeof option === \"number\") {\n      numParams = option;\n    }\n\n    /**\n     * Checks a function to see if it has too many parameters.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     * @private\n     */\n    function checkFunction(node) {\n      if (node.params.length > numParams) {\n        context.report({\n          loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n          node,\n          messageId: \"exceed\",\n          data: {\n            name: upperCaseFirst(astUtils.getFunctionNameWithKind(node)),\n            count: node.params.length,\n            max: numParams\n          }\n        });\n      }\n    }\n    return {\n      FunctionDeclaration: checkFunction,\n      ArrowFunctionExpression: checkFunction,\n      FunctionExpression: checkFunction\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","upperCaseFirst","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","exceed","create","context","sourceCode","getSourceCode","option","options","numParams","Object","prototype","hasOwnProperty","call","checkFunction","node","params","length","report","loc","getFunctionHeadLoc","messageId","data","name","getFunctionNameWithKind","count","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/max-params.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when a function has too many parameters\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum number of parameters in function definitions\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-params\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            exceed: \"{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const option = context.options[0];\n        let numParams = 3;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            numParams = option.maximum || option.max;\n        }\n        if (typeof option === \"number\") {\n            numParams = option;\n        }\n\n        /**\n         * Checks a function to see if it has too many parameters.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkFunction(node) {\n            if (node.params.length > numParams) {\n                context.report({\n                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n                    node,\n                    messageId: \"exceed\",\n                    data: {\n                        name: upperCaseFirst(astUtils.getFunctionNameWithKind(node)),\n                        count: node.params.length,\n                        max: numParams\n                    }\n                });\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkFunction,\n            ArrowFunctionExpression: checkFunction,\n            FunctionExpression: checkFunction\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC7C,MAAM;EAAEC;AAAe,CAAC,GAAGD,OAAO,CAAC,wBAAwB,CAAC;;AAE5D;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,gEAAgE;MAC7EC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIC,KAAK,EAAE,CACH;QACIP,IAAI,EAAE,SAAS;QACfQ,OAAO,EAAE;MACb,CAAC,EACD;QACIR,IAAI,EAAE,QAAQ;QACdS,UAAU,EAAE;UACRC,OAAO,EAAE;YACLV,IAAI,EAAE,SAAS;YACfQ,OAAO,EAAE;UACb,CAAC;UACDG,GAAG,EAAE;YACDX,IAAI,EAAE,SAAS;YACfQ,OAAO,EAAE;UACb;QACJ,CAAC;QACDI,oBAAoB,EAAE;MAC1B,CAAC;IAET,CAAC,CACJ;IACDC,QAAQ,EAAE;MACNC,MAAM,EAAE;IACZ;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAC1C,MAAMC,MAAM,GAAGH,OAAO,CAACI,OAAO,CAAC,CAAC,CAAC;IACjC,IAAIC,SAAS,GAAG,CAAC;IAEjB,IACI,OAAOF,MAAM,KAAK,QAAQ,KACzBG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,MAAM,EAAE,SAAS,CAAC,IAAIG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,MAAM,EAAE,KAAK,CAAC,CAAC,EAClH;MACEE,SAAS,GAAGF,MAAM,CAACT,OAAO,IAAIS,MAAM,CAACR,GAAG;IAC5C;IACA,IAAI,OAAOQ,MAAM,KAAK,QAAQ,EAAE;MAC5BE,SAAS,GAAGF,MAAM;IACtB;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASO,aAAaA,CAACC,IAAI,EAAE;MACzB,IAAIA,IAAI,CAACC,MAAM,CAACC,MAAM,GAAGR,SAAS,EAAE;QAChCL,OAAO,CAACc,MAAM,CAAC;UACXC,GAAG,EAAErC,QAAQ,CAACsC,kBAAkB,CAACL,IAAI,EAAEV,UAAU,CAAC;UAClDU,IAAI;UACJM,SAAS,EAAE,QAAQ;UACnBC,IAAI,EAAE;YACFC,IAAI,EAAEvC,cAAc,CAACF,QAAQ,CAAC0C,uBAAuB,CAACT,IAAI,CAAC,CAAC;YAC5DU,KAAK,EAAEV,IAAI,CAACC,MAAM,CAACC,MAAM;YACzBlB,GAAG,EAAEU;UACT;QACJ,CAAC,CAAC;MACN;IACJ;IAEA,OAAO;MACHiB,mBAAmB,EAAEZ,aAAa;MAClCa,uBAAuB,EAAEb,aAAa;MACtCc,kBAAkB,EAAEd;IACxB,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}