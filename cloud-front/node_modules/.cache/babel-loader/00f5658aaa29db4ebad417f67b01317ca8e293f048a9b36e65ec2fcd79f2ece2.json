{"ast":null,"code":"/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require parenthesis around regex literals\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/wrap-regex\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      Literal(node) {\n        const token = sourceCode.getFirstToken(node),\n          nodeType = token.type;\n        if (nodeType === \"RegularExpression\") {\n          const beforeToken = sourceCode.getTokenBefore(node);\n          const afterToken = sourceCode.getTokenAfter(node);\n          const ancestors = context.getAncestors();\n          const grandparent = ancestors[ancestors.length - 1];\n          if (grandparent.type === \"MemberExpression\" && grandparent.object === node && !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\n            context.report({\n              node,\n              messageId: \"requireParens\",\n              fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\n            });\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","requireParens","create","context","sourceCode","getSourceCode","Literal","node","token","getFirstToken","nodeType","beforeToken","getTokenBefore","afterToken","getTokenAfter","ancestors","getAncestors","grandparent","length","object","value","report","messageId","fix","fixer","replaceText","getText"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/wrap-regex.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require parenthesis around regex literals\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/wrap-regex\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n\n            Literal(node) {\n                const token = sourceCode.getFirstToken(node),\n                    nodeType = token.type;\n\n                if (nodeType === \"RegularExpression\") {\n                    const beforeToken = sourceCode.getTokenBefore(node);\n                    const afterToken = sourceCode.getTokenAfter(node);\n                    const ancestors = context.getAncestors();\n                    const grandparent = ancestors[ancestors.length - 1];\n\n                    if (grandparent.type === \"MemberExpression\" && grandparent.object === node &&\n                        !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\n                        context.report({\n                            node,\n                            messageId: \"requireParens\",\n                            fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,2CAA2C;MACxDC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IACVC,OAAO,EAAE,MAAM;IAEfC,QAAQ,EAAE;MACNC,aAAa,EAAE;IACnB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAE1C,OAAO;MAEHC,OAAOA,CAACC,IAAI,EAAE;QACV,MAAMC,KAAK,GAAGJ,UAAU,CAACK,aAAa,CAACF,IAAI,CAAC;UACxCG,QAAQ,GAAGF,KAAK,CAAChB,IAAI;QAEzB,IAAIkB,QAAQ,KAAK,mBAAmB,EAAE;UAClC,MAAMC,WAAW,GAAGP,UAAU,CAACQ,cAAc,CAACL,IAAI,CAAC;UACnD,MAAMM,UAAU,GAAGT,UAAU,CAACU,aAAa,CAACP,IAAI,CAAC;UACjD,MAAMQ,SAAS,GAAGZ,OAAO,CAACa,YAAY,CAAC,CAAC;UACxC,MAAMC,WAAW,GAAGF,SAAS,CAACA,SAAS,CAACG,MAAM,GAAG,CAAC,CAAC;UAEnD,IAAID,WAAW,CAACzB,IAAI,KAAK,kBAAkB,IAAIyB,WAAW,CAACE,MAAM,KAAKZ,IAAI,IACtE,EAAEI,WAAW,IAAIA,WAAW,CAACS,KAAK,KAAK,GAAG,IAAIP,UAAU,IAAIA,UAAU,CAACO,KAAK,KAAK,GAAG,CAAC,EAAE;YACvFjB,OAAO,CAACkB,MAAM,CAAC;cACXd,IAAI;cACJe,SAAS,EAAE,eAAe;cAC1BC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,WAAW,CAAClB,IAAI,EAAG,IAAGH,UAAU,CAACsB,OAAO,CAACnB,IAAI,CAAE,GAAE;YACzE,CAAC,CAAC;UACN;QACJ;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}