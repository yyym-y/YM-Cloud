{"ast":null,"code":"/**\n * @fileoverview Main Linter Class\n * @author Gyandeep Singh\n * @author aladdin-add\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst path = require(\"path\"),\n  eslintScope = require(\"eslint-scope\"),\n  evk = require(\"eslint-visitor-keys\"),\n  espree = require(\"espree\"),\n  merge = require(\"lodash.merge\"),\n  BuiltInEnvironments = require(\"@eslint/eslintrc/conf/environments\"),\n  pkg = require(\"../../package.json\"),\n  astUtils = require(\"../shared/ast-utils\"),\n  ConfigOps = require(\"@eslint/eslintrc/lib/shared/config-ops\"),\n  ConfigValidator = require(\"@eslint/eslintrc/lib/shared/config-validator\"),\n  Traverser = require(\"../shared/traverser\"),\n  {\n    SourceCode\n  } = require(\"../source-code\"),\n  CodePathAnalyzer = require(\"./code-path-analysis/code-path-analyzer\"),\n  applyDisableDirectives = require(\"./apply-disable-directives\"),\n  ConfigCommentParser = require(\"./config-comment-parser\"),\n  NodeEventGenerator = require(\"./node-event-generator\"),\n  createReportTranslator = require(\"./report-translator\"),\n  Rules = require(\"./rules\"),\n  createEmitter = require(\"./safe-emitter\"),\n  SourceCodeFixer = require(\"./source-code-fixer\"),\n  timing = require(\"./timing\"),\n  ruleReplacements = require(\"../../conf/replacements.json\");\nconst debug = require(\"debug\")(\"eslint:linter\");\nconst MAX_AUTOFIX_PASSES = 10;\nconst DEFAULT_PARSER_NAME = \"espree\";\nconst DEFAULT_ECMA_VERSION = 5;\nconst commentParser = new ConfigCommentParser();\nconst DEFAULT_ERROR_LOC = {\n  start: {\n    line: 1,\n    column: 0\n  },\n  end: {\n    line: 1,\n    column: 1\n  }\n};\nconst parserSymbol = Symbol.for(\"eslint.RuleTester.parser\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {InstanceType<import(\"../cli-engine/config-array\")[\"ConfigArray\"]>} ConfigArray */\n/** @typedef {InstanceType<import(\"../cli-engine/config-array\")[\"ExtractedConfig\"]>} ExtractedConfig */\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../shared/types\").Environment} Environment */\n/** @typedef {import(\"../shared/types\").GlobalConf} GlobalConf */\n/** @typedef {import(\"../shared/types\").LintMessage} LintMessage */\n/** @typedef {import(\"../shared/types\").ParserOptions} ParserOptions */\n/** @typedef {import(\"../shared/types\").Processor} Processor */\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n\n/**\n * @template T\n * @typedef {{ [P in keyof T]-?: T[P] }} Required\n */\n\n/**\n * @typedef {Object} DisableDirective\n * @property {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} type\n * @property {number} line\n * @property {number} column\n * @property {(string|null)} ruleId\n */\n\n/**\n * The private data for `Linter` instance.\n * @typedef {Object} LinterInternalSlots\n * @property {ConfigArray|null} lastConfigArray The `ConfigArray` instance that the last `verify()` call used.\n * @property {SourceCode|null} lastSourceCode The `SourceCode` instance that the last `verify()` call used.\n * @property {Map<string, Parser>} parserMap The loaded parsers.\n * @property {Rules} ruleMap The loaded rules.\n */\n\n/**\n * @typedef {Object} VerifyOptions\n * @property {boolean} [allowInlineConfig] Allow/disallow inline comments' ability\n *      to change config once it is set. Defaults to true if not supplied.\n *      Useful if you want to validate JS without comments overriding rules.\n * @property {boolean} [disableFixes] if `true` then the linter doesn't make `fix`\n *      properties into the lint result.\n * @property {string} [filename] the filename of the source code.\n * @property {boolean | \"off\" | \"warn\" | \"error\"} [reportUnusedDisableDirectives] Adds reported errors for\n *      unused `eslint-disable` directives.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {(filename:string, text:string) => boolean} [filterCodeBlock] the\n *      predicate function that selects adopt code blocks.\n * @property {Processor[\"postprocess\"]} [postprocess] postprocessor for report\n *      messages. If provided, this should accept an array of the message lists\n *      for each code block returned from the preprocessor, apply a mapping to\n *      the messages as appropriate, and return a one-dimensional array of\n *      messages.\n * @property {Processor[\"preprocess\"]} [preprocess] preprocessor for source text.\n *      If provided, this should accept a string of source text, and return an\n *      array of code blocks to lint.\n */\n\n/**\n * @typedef {Object} FixOptions\n * @property {boolean | ((message: LintMessage) => boolean)} [fix] Determines\n *      whether fixes should be applied.\n */\n\n/**\n * @typedef {Object} InternalOptions\n * @property {string | null} warnInlineConfig The config name what `noInlineConfig` setting came from. If `noInlineConfig` setting didn't exist, this is null. If this is a config name, then the linter warns directive comments.\n * @property {\"off\" | \"warn\" | \"error\"} reportUnusedDisableDirectives (boolean values were normalized)\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Ensures that variables representing built-in properties of the Global Object,\n * and any globals declared by special block comments, are present in the global\n * scope.\n * @param {Scope} globalScope The global scope.\n * @param {Object} configGlobals The globals declared in configuration\n * @param {{exportedVariables: Object, enabledGlobals: Object}} commentDirectives Directives from comment configuration\n * @returns {void}\n */\nfunction addDeclaredGlobals(globalScope, configGlobals, {\n  exportedVariables,\n  enabledGlobals\n}) {\n  // Define configured global variables.\n  for (const id of new Set([...Object.keys(configGlobals), ...Object.keys(enabledGlobals)])) {\n    /*\n     * `ConfigOps.normalizeConfigGlobal` will throw an error if a configured global value is invalid. However, these errors would\n     * typically be caught when validating a config anyway (validity for inline global comments is checked separately).\n     */\n    const configValue = configGlobals[id] === void 0 ? void 0 : ConfigOps.normalizeConfigGlobal(configGlobals[id]);\n    const commentValue = enabledGlobals[id] && enabledGlobals[id].value;\n    const value = commentValue || configValue;\n    const sourceComments = enabledGlobals[id] && enabledGlobals[id].comments;\n    if (value === \"off\") {\n      continue;\n    }\n    let variable = globalScope.set.get(id);\n    if (!variable) {\n      variable = new eslintScope.Variable(id, globalScope);\n      globalScope.variables.push(variable);\n      globalScope.set.set(id, variable);\n    }\n    variable.eslintImplicitGlobalSetting = configValue;\n    variable.eslintExplicitGlobal = sourceComments !== void 0;\n    variable.eslintExplicitGlobalComments = sourceComments;\n    variable.writeable = value === \"writable\";\n  }\n\n  // mark all exported variables as such\n  Object.keys(exportedVariables).forEach(name => {\n    const variable = globalScope.set.get(name);\n    if (variable) {\n      variable.eslintUsed = true;\n    }\n  });\n\n  /*\n   * \"through\" contains all references which definitions cannot be found.\n   * Since we augment the global scope using configuration, we need to update\n   * references and remove the ones that were added by configuration.\n   */\n  globalScope.through = globalScope.through.filter(reference => {\n    const name = reference.identifier.name;\n    const variable = globalScope.set.get(name);\n    if (variable) {\n      /*\n       * Links the variable and the reference.\n       * And this reference is removed from `Scope#through`.\n       */\n      reference.resolved = variable;\n      variable.references.push(reference);\n      return false;\n    }\n    return true;\n  });\n}\n\n/**\n * creates a missing-rule message.\n * @param {string} ruleId the ruleId to create\n * @returns {string} created error message\n * @private\n */\nfunction createMissingRuleMessage(ruleId) {\n  return Object.prototype.hasOwnProperty.call(ruleReplacements.rules, ruleId) ? `Rule '${ruleId}' was removed and replaced by: ${ruleReplacements.rules[ruleId].join(\", \")}` : `Definition for rule '${ruleId}' was not found.`;\n}\n\n/**\n * creates a linting problem\n * @param {Object} options to create linting error\n * @param {string} [options.ruleId] the ruleId to report\n * @param {Object} [options.loc] the loc to report\n * @param {string} [options.message] the error message to report\n * @param {string} [options.severity] the error message to report\n * @returns {LintMessage} created problem, returns a missing-rule problem if only provided ruleId.\n * @private\n */\nfunction createLintingProblem(options) {\n  const {\n    ruleId = null,\n    loc = DEFAULT_ERROR_LOC,\n    message = createMissingRuleMessage(options.ruleId),\n    severity = 2\n  } = options;\n  return {\n    ruleId,\n    message,\n    line: loc.start.line,\n    column: loc.start.column + 1,\n    endLine: loc.end.line,\n    endColumn: loc.end.column + 1,\n    severity,\n    nodeType: null\n  };\n}\n\n/**\n * Creates a collection of disable directives from a comment\n * @param {Object} options to create disable directives\n * @param {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} options.type The type of directive comment\n * @param {{line: number, column: number}} options.loc The 0-based location of the comment token\n * @param {string} options.value The value after the directive in the comment\n * comment specified no specific rules, so it applies to all rules (e.g. `eslint-disable`)\n * @param {function(string): {create: Function}} options.ruleMapper A map from rule IDs to defined rules\n * @returns {Object} Directives and problems from the comment\n */\nfunction createDisableDirectives(options) {\n  const {\n    type,\n    loc,\n    value,\n    ruleMapper\n  } = options;\n  const ruleIds = Object.keys(commentParser.parseListConfig(value));\n  const directiveRules = ruleIds.length ? ruleIds : [null];\n  const result = {\n    directives: [],\n    // valid disable directives\n    directiveProblems: [] // problems in directives\n  };\n\n  for (const ruleId of directiveRules) {\n    // push to directives, if the rule is defined(including null, e.g. /*eslint enable*/)\n    if (ruleId === null || ruleMapper(ruleId) !== null) {\n      result.directives.push({\n        type,\n        line: loc.start.line,\n        column: loc.start.column + 1,\n        ruleId\n      });\n    } else {\n      result.directiveProblems.push(createLintingProblem({\n        ruleId,\n        loc\n      }));\n    }\n  }\n  return result;\n}\n\n/**\n * Remove the ignored part from a given directive comment and trim it.\n * @param {string} value The comment text to strip.\n * @returns {string} The stripped text.\n */\nfunction stripDirectiveComment(value) {\n  return value.split(/\\s-{2,}\\s/u)[0].trim();\n}\n\n/**\n * Parses comments in file to extract file-specific config of rules, globals\n * and environments and merges them with global config; also code blocks\n * where reporting is disabled or enabled and merges them with reporting config.\n * @param {string} filename The file being checked.\n * @param {ASTNode} ast The top node of the AST.\n * @param {function(string): {create: Function}} ruleMapper A map from rule IDs to defined rules\n * @param {string|null} warnInlineConfig If a string then it should warn directive comments as disabled. The string value is the config name what the setting came from.\n * @returns {{configuredRules: Object, enabledGlobals: {value:string,comment:Token}[], exportedVariables: Object, problems: Problem[], disableDirectives: DisableDirective[]}}\n * A collection of the directive comments that were found, along with any problems that occurred when parsing\n */\nfunction getDirectiveComments(filename, ast, ruleMapper, warnInlineConfig) {\n  const configuredRules = {};\n  const enabledGlobals = Object.create(null);\n  const exportedVariables = {};\n  const problems = [];\n  const disableDirectives = [];\n  const validator = new ConfigValidator({\n    builtInRules: Rules\n  });\n  ast.comments.filter(token => token.type !== \"Shebang\").forEach(comment => {\n    const trimmedCommentText = stripDirectiveComment(comment.value);\n    const match = /^(eslint(?:-env|-enable|-disable(?:(?:-next)?-line)?)?|exported|globals?)(?:\\s|$)/u.exec(trimmedCommentText);\n    if (!match) {\n      return;\n    }\n    const directiveText = match[1];\n    const lineCommentSupported = /^eslint-disable-(next-)?line$/u.test(directiveText);\n    if (comment.type === \"Line\" && !lineCommentSupported) {\n      return;\n    }\n    if (warnInlineConfig) {\n      const kind = comment.type === \"Block\" ? `/*${directiveText}*/` : `//${directiveText}`;\n      problems.push(createLintingProblem({\n        ruleId: null,\n        message: `'${kind}' has no effect because you have 'noInlineConfig' setting in ${warnInlineConfig}.`,\n        loc: comment.loc,\n        severity: 1\n      }));\n      return;\n    }\n    if (lineCommentSupported && comment.loc.start.line !== comment.loc.end.line) {\n      const message = `${directiveText} comment should not span multiple lines.`;\n      problems.push(createLintingProblem({\n        ruleId: null,\n        message,\n        loc: comment.loc\n      }));\n      return;\n    }\n    const directiveValue = trimmedCommentText.slice(match.index + directiveText.length);\n    switch (directiveText) {\n      case \"eslint-disable\":\n      case \"eslint-enable\":\n      case \"eslint-disable-next-line\":\n      case \"eslint-disable-line\":\n        {\n          const directiveType = directiveText.slice(\"eslint-\".length);\n          const options = {\n            type: directiveType,\n            loc: comment.loc,\n            value: directiveValue,\n            ruleMapper\n          };\n          const {\n            directives,\n            directiveProblems\n          } = createDisableDirectives(options);\n          disableDirectives.push(...directives);\n          problems.push(...directiveProblems);\n          break;\n        }\n      case \"exported\":\n        Object.assign(exportedVariables, commentParser.parseStringConfig(directiveValue, comment));\n        break;\n      case \"globals\":\n      case \"global\":\n        for (const [id, {\n          value\n        }] of Object.entries(commentParser.parseStringConfig(directiveValue, comment))) {\n          let normalizedValue;\n          try {\n            normalizedValue = ConfigOps.normalizeConfigGlobal(value);\n          } catch (err) {\n            problems.push(createLintingProblem({\n              ruleId: null,\n              loc: comment.loc,\n              message: err.message\n            }));\n            continue;\n          }\n          if (enabledGlobals[id]) {\n            enabledGlobals[id].comments.push(comment);\n            enabledGlobals[id].value = normalizedValue;\n          } else {\n            enabledGlobals[id] = {\n              comments: [comment],\n              value: normalizedValue\n            };\n          }\n        }\n        break;\n      case \"eslint\":\n        {\n          const parseResult = commentParser.parseJsonConfig(directiveValue, comment.loc);\n          if (parseResult.success) {\n            Object.keys(parseResult.config).forEach(name => {\n              const rule = ruleMapper(name);\n              const ruleValue = parseResult.config[name];\n              if (rule === null) {\n                problems.push(createLintingProblem({\n                  ruleId: name,\n                  loc: comment.loc\n                }));\n                return;\n              }\n              try {\n                validator.validateRuleOptions(rule, name, ruleValue);\n              } catch (err) {\n                problems.push(createLintingProblem({\n                  ruleId: name,\n                  message: err.message,\n                  loc: comment.loc\n                }));\n\n                // do not apply the config, if found invalid options.\n                return;\n              }\n              configuredRules[name] = ruleValue;\n            });\n          } else {\n            problems.push(parseResult.error);\n          }\n          break;\n        }\n\n      // no default\n    }\n  });\n\n  return {\n    configuredRules,\n    enabledGlobals,\n    exportedVariables,\n    problems,\n    disableDirectives\n  };\n}\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {Parser} parser The parser which uses this options.\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(parser, ecmaVersion) {\n  if ((parser[parserSymbol] || parser) === espree) {\n    if (ecmaVersion === \"latest\") {\n      return espree.latestEcmaVersion;\n    }\n  }\n\n  /*\n   * Calculate ECMAScript edition number from official year version starting with\n   * ES2015, which corresponds with ES6 (or a difference of 2009).\n   */\n  return ecmaVersion >= 2015 ? ecmaVersion - 2009 : ecmaVersion;\n}\nconst eslintEnvPattern = /\\/\\*\\s*eslint-env\\s(.+?)\\*\\//gsu;\n\n/**\n * Checks whether or not there is a comment which has \"eslint-env *\" in a given text.\n * @param {string} text A source code text to check.\n * @returns {Object|null} A result of parseListConfig() with \"eslint-env *\" comment.\n */\nfunction findEslintEnv(text) {\n  let match, retv;\n  eslintEnvPattern.lastIndex = 0;\n  while ((match = eslintEnvPattern.exec(text)) !== null) {\n    retv = Object.assign(retv || {}, commentParser.parseListConfig(stripDirectiveComment(match[1])));\n  }\n  return retv;\n}\n\n/**\n * Convert \"/path/to/<text>\" to \"<text>\".\n * `CLIEngine#executeOnText()` method gives \"/path/to/<text>\" if the filename\n * was omitted because `configArray.extractConfig()` requires an absolute path.\n * But the linter should pass `<text>` to `RuleContext#getFilename()` in that\n * case.\n * Also, code blocks can have their virtual filename. If the parent filename was\n * `<text>`, the virtual filename is `<text>/0_foo.js` or something like (i.e.,\n * it's not an absolute path).\n * @param {string} filename The filename to normalize.\n * @returns {string} The normalized filename.\n */\nfunction normalizeFilename(filename) {\n  const parts = filename.split(path.sep);\n  const index = parts.lastIndexOf(\"<text>\");\n  return index === -1 ? filename : parts.slice(index).join(path.sep);\n}\n\n/**\n * Normalizes the possible options for `linter.verify` and `linter.verifyAndFix` to a\n * consistent shape.\n * @param {VerifyOptions} providedOptions Options\n * @param {ConfigData} config Config.\n * @returns {Required<VerifyOptions> & InternalOptions} Normalized options\n */\nfunction normalizeVerifyOptions(providedOptions, config) {\n  const disableInlineConfig = config.noInlineConfig === true;\n  const ignoreInlineConfig = providedOptions.allowInlineConfig === false;\n  const configNameOfNoInlineConfig = config.configNameOfNoInlineConfig ? ` (${config.configNameOfNoInlineConfig})` : \"\";\n  let reportUnusedDisableDirectives = providedOptions.reportUnusedDisableDirectives;\n  if (typeof reportUnusedDisableDirectives === \"boolean\") {\n    reportUnusedDisableDirectives = reportUnusedDisableDirectives ? \"error\" : \"off\";\n  }\n  if (typeof reportUnusedDisableDirectives !== \"string\") {\n    reportUnusedDisableDirectives = config.reportUnusedDisableDirectives ? \"warn\" : \"off\";\n  }\n  return {\n    filename: normalizeFilename(providedOptions.filename || \"<input>\"),\n    allowInlineConfig: !ignoreInlineConfig,\n    warnInlineConfig: disableInlineConfig && !ignoreInlineConfig ? `your config${configNameOfNoInlineConfig}` : null,\n    reportUnusedDisableDirectives,\n    disableFixes: Boolean(providedOptions.disableFixes)\n  };\n}\n\n/**\n * Combines the provided parserOptions with the options from environments\n * @param {Parser} parser The parser which uses this options.\n * @param {ParserOptions} providedOptions The provided 'parserOptions' key in a config\n * @param {Environment[]} enabledEnvironments The environments enabled in configuration and with inline comments\n * @returns {ParserOptions} Resulting parser options after merge\n */\nfunction resolveParserOptions(parser, providedOptions, enabledEnvironments) {\n  const parserOptionsFromEnv = enabledEnvironments.filter(env => env.parserOptions).reduce((parserOptions, env) => merge(parserOptions, env.parserOptions), {});\n  const mergedParserOptions = merge(parserOptionsFromEnv, providedOptions || {});\n  const isModule = mergedParserOptions.sourceType === \"module\";\n  if (isModule) {\n    /*\n     * can't have global return inside of modules\n     * TODO: espree validate parserOptions.globalReturn when sourceType is setting to module.(@aladdin-add)\n     */\n    mergedParserOptions.ecmaFeatures = Object.assign({}, mergedParserOptions.ecmaFeatures, {\n      globalReturn: false\n    });\n  }\n  mergedParserOptions.ecmaVersion = normalizeEcmaVersion(parser, mergedParserOptions.ecmaVersion);\n  return mergedParserOptions;\n}\n\n/**\n * Combines the provided globals object with the globals from environments\n * @param {Record<string, GlobalConf>} providedGlobals The 'globals' key in a config\n * @param {Environment[]} enabledEnvironments The environments enabled in configuration and with inline comments\n * @returns {Record<string, GlobalConf>} The resolved globals object\n */\nfunction resolveGlobals(providedGlobals, enabledEnvironments) {\n  return Object.assign({}, ...enabledEnvironments.filter(env => env.globals).map(env => env.globals), providedGlobals);\n}\n\n/**\n * Strips Unicode BOM from a given text.\n * @param {string} text A text to strip.\n * @returns {string} The stripped text.\n */\nfunction stripUnicodeBOM(text) {\n  /*\n   * Check Unicode BOM.\n   * In JavaScript, string data is stored as UTF-16, so BOM is 0xFEFF.\n   * http://www.ecma-international.org/ecma-262/6.0/#sec-unicode-format-control-characters\n   */\n  if (text.charCodeAt(0) === 0xFEFF) {\n    return text.slice(1);\n  }\n  return text;\n}\n\n/**\n * Get the options for a rule (not including severity), if any\n * @param {Array|number} ruleConfig rule configuration\n * @returns {Array} of rule options, empty Array if none\n */\nfunction getRuleOptions(ruleConfig) {\n  if (Array.isArray(ruleConfig)) {\n    return ruleConfig.slice(1);\n  }\n  return [];\n}\n\n/**\n * Analyze scope of the given AST.\n * @param {ASTNode} ast The `Program` node to analyze.\n * @param {ParserOptions} parserOptions The parser options.\n * @param {Record<string, string[]>} visitorKeys The visitor keys.\n * @returns {ScopeManager} The analysis result.\n */\nfunction analyzeScope(ast, parserOptions, visitorKeys) {\n  const ecmaFeatures = parserOptions.ecmaFeatures || {};\n  const ecmaVersion = parserOptions.ecmaVersion || DEFAULT_ECMA_VERSION;\n  return eslintScope.analyze(ast, {\n    ignoreEval: true,\n    nodejsScope: ecmaFeatures.globalReturn,\n    impliedStrict: ecmaFeatures.impliedStrict,\n    ecmaVersion,\n    sourceType: parserOptions.sourceType || \"script\",\n    childVisitorKeys: visitorKeys || evk.KEYS,\n    fallback: Traverser.getKeys\n  });\n}\n\n/**\n * Parses text into an AST. Moved out here because the try-catch prevents\n * optimization of functions, so it's best to keep the try-catch as isolated\n * as possible\n * @param {string} text The text to parse.\n * @param {Parser} parser The parser to parse.\n * @param {ParserOptions} providedParserOptions Options to pass to the parser\n * @param {string} filePath The path to the file being parsed.\n * @returns {{success: false, error: Problem}|{success: true, sourceCode: SourceCode}}\n * An object containing the AST and parser services if parsing was successful, or the error if parsing failed\n * @private\n */\nfunction parse(text, parser, providedParserOptions, filePath) {\n  const textToParse = stripUnicodeBOM(text).replace(astUtils.shebangPattern, (match, captured) => `//${captured}`);\n  const parserOptions = Object.assign({}, providedParserOptions, {\n    loc: true,\n    range: true,\n    raw: true,\n    tokens: true,\n    comment: true,\n    eslintVisitorKeys: true,\n    eslintScopeManager: true,\n    filePath\n  });\n\n  /*\n   * Check for parsing errors first. If there's a parsing error, nothing\n   * else can happen. However, a parsing error does not throw an error\n   * from this method - it's just considered a fatal error message, a\n   * problem that ESLint identified just like any other.\n   */\n  try {\n    const parseResult = typeof parser.parseForESLint === \"function\" ? parser.parseForESLint(textToParse, parserOptions) : {\n      ast: parser.parse(textToParse, parserOptions)\n    };\n    const ast = parseResult.ast;\n    const parserServices = parseResult.services || {};\n    const visitorKeys = parseResult.visitorKeys || evk.KEYS;\n    const scopeManager = parseResult.scopeManager || analyzeScope(ast, parserOptions, visitorKeys);\n    return {\n      success: true,\n      /*\n       * Save all values that `parseForESLint()` returned.\n       * If a `SourceCode` object is given as the first parameter instead of source code text,\n       * linter skips the parsing process and reuses the source code object.\n       * In that case, linter needs all the values that `parseForESLint()` returned.\n       */\n      sourceCode: new SourceCode({\n        text,\n        ast,\n        parserServices,\n        scopeManager,\n        visitorKeys\n      })\n    };\n  } catch (ex) {\n    // If the message includes a leading line number, strip it:\n    const message = `Parsing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n    debug(\"%s\\n%s\", message, ex.stack);\n    return {\n      success: false,\n      error: {\n        ruleId: null,\n        fatal: true,\n        severity: 2,\n        message,\n        line: ex.lineNumber,\n        column: ex.column\n      }\n    };\n  }\n}\n\n/**\n * Gets the scope for the current node\n * @param {ScopeManager} scopeManager The scope manager for this AST\n * @param {ASTNode} currentNode The node to get the scope of\n * @returns {eslint-scope.Scope} The scope information for this node\n */\nfunction getScope(scopeManager, currentNode) {\n  // On Program node, get the outermost scope to avoid return Node.js special function scope or ES modules scope.\n  const inner = currentNode.type !== \"Program\";\n  for (let node = currentNode; node; node = node.parent) {\n    const scope = scopeManager.acquire(node, inner);\n    if (scope) {\n      if (scope.type === \"function-expression-name\") {\n        return scope.childScopes[0];\n      }\n      return scope;\n    }\n  }\n  return scopeManager.scopes[0];\n}\n\n/**\n * Marks a variable as used in the current scope\n * @param {ScopeManager} scopeManager The scope manager for this AST. The scope may be mutated by this function.\n * @param {ASTNode} currentNode The node currently being traversed\n * @param {Object} parserOptions The options used to parse this text\n * @param {string} name The name of the variable that should be marked as used.\n * @returns {boolean} True if the variable was found and marked as used, false if not.\n */\nfunction markVariableAsUsed(scopeManager, currentNode, parserOptions, name) {\n  const hasGlobalReturn = parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.globalReturn;\n  const specialScope = hasGlobalReturn || parserOptions.sourceType === \"module\";\n  const currentScope = getScope(scopeManager, currentNode);\n\n  // Special Node.js scope means we need to start one level deeper\n  const initialScope = currentScope.type === \"global\" && specialScope ? currentScope.childScopes[0] : currentScope;\n  for (let scope = initialScope; scope; scope = scope.upper) {\n    const variable = scope.variables.find(scopeVar => scopeVar.name === name);\n    if (variable) {\n      variable.eslintUsed = true;\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Runs a rule, and gets its listeners\n * @param {Rule} rule A normalized rule with a `create` method\n * @param {Context} ruleContext The context that should be passed to the rule\n * @returns {Object} A map of selector listeners provided by the rule\n */\nfunction createRuleListeners(rule, ruleContext) {\n  try {\n    return rule.create(ruleContext);\n  } catch (ex) {\n    ex.message = `Error while loading rule '${ruleContext.id}': ${ex.message}`;\n    throw ex;\n  }\n}\n\n/**\n * Gets all the ancestors of a given node\n * @param {ASTNode} node The node\n * @returns {ASTNode[]} All the ancestor nodes in the AST, not including the provided node, starting\n * from the root node and going inwards to the parent node.\n */\nfunction getAncestors(node) {\n  const ancestorsStartingAtParent = [];\n  for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n    ancestorsStartingAtParent.push(ancestor);\n  }\n  return ancestorsStartingAtParent.reverse();\n}\n\n// methods that exist on SourceCode object\nconst DEPRECATED_SOURCECODE_PASSTHROUGHS = {\n  getSource: \"getText\",\n  getSourceLines: \"getLines\",\n  getAllComments: \"getAllComments\",\n  getNodeByRangeIndex: \"getNodeByRangeIndex\",\n  getComments: \"getComments\",\n  getCommentsBefore: \"getCommentsBefore\",\n  getCommentsAfter: \"getCommentsAfter\",\n  getCommentsInside: \"getCommentsInside\",\n  getJSDocComment: \"getJSDocComment\",\n  getFirstToken: \"getFirstToken\",\n  getFirstTokens: \"getFirstTokens\",\n  getLastToken: \"getLastToken\",\n  getLastTokens: \"getLastTokens\",\n  getTokenAfter: \"getTokenAfter\",\n  getTokenBefore: \"getTokenBefore\",\n  getTokenByRangeStart: \"getTokenByRangeStart\",\n  getTokens: \"getTokens\",\n  getTokensAfter: \"getTokensAfter\",\n  getTokensBefore: \"getTokensBefore\",\n  getTokensBetween: \"getTokensBetween\"\n};\nconst BASE_TRAVERSAL_CONTEXT = Object.freeze(Object.keys(DEPRECATED_SOURCECODE_PASSTHROUGHS).reduce((contextInfo, methodName) => Object.assign(contextInfo, {\n  [methodName](...args) {\n    return this.getSourceCode()[DEPRECATED_SOURCECODE_PASSTHROUGHS[methodName]](...args);\n  }\n}), {}));\n\n/**\n * Runs the given rules on the given SourceCode object\n * @param {SourceCode} sourceCode A SourceCode object for the given text\n * @param {Object} configuredRules The rules configuration\n * @param {function(string): Rule} ruleMapper A mapper function from rule names to rules\n * @param {Object} parserOptions The options that were passed to the parser\n * @param {string} parserName The name of the parser in the config\n * @param {Object} settings The settings that were enabled in the config\n * @param {string} filename The reported filename of the code\n * @param {boolean} disableFixes If true, it doesn't make `fix` properties.\n * @param {string | undefined} cwd cwd of the cli\n * @param {string} physicalFilename The full path of the file on disk without any code block information\n * @returns {Problem[]} An array of reported problems\n */\nfunction runRules(sourceCode, configuredRules, ruleMapper, parserOptions, parserName, settings, filename, disableFixes, cwd, physicalFilename) {\n  const emitter = createEmitter();\n  const nodeQueue = [];\n  let currentNode = sourceCode.ast;\n  Traverser.traverse(sourceCode.ast, {\n    enter(node, parent) {\n      node.parent = parent;\n      nodeQueue.push({\n        isEntering: true,\n        node\n      });\n    },\n    leave(node) {\n      nodeQueue.push({\n        isEntering: false,\n        node\n      });\n    },\n    visitorKeys: sourceCode.visitorKeys\n  });\n\n  /*\n   * Create a frozen object with the ruleContext properties and methods that are shared by all rules.\n   * All rule contexts will inherit from this object. This avoids the performance penalty of copying all the\n   * properties once for each rule.\n   */\n  const sharedTraversalContext = Object.freeze(Object.assign(Object.create(BASE_TRAVERSAL_CONTEXT), {\n    getAncestors: () => getAncestors(currentNode),\n    getDeclaredVariables: sourceCode.scopeManager.getDeclaredVariables.bind(sourceCode.scopeManager),\n    getCwd: () => cwd,\n    getFilename: () => filename,\n    getPhysicalFilename: () => physicalFilename || filename,\n    getScope: () => getScope(sourceCode.scopeManager, currentNode),\n    getSourceCode: () => sourceCode,\n    markVariableAsUsed: name => markVariableAsUsed(sourceCode.scopeManager, currentNode, parserOptions, name),\n    parserOptions,\n    parserPath: parserName,\n    parserServices: sourceCode.parserServices,\n    settings\n  }));\n  const lintingProblems = [];\n  Object.keys(configuredRules).forEach(ruleId => {\n    const severity = ConfigOps.getRuleSeverity(configuredRules[ruleId]);\n\n    // not load disabled rules\n    if (severity === 0) {\n      return;\n    }\n    const rule = ruleMapper(ruleId);\n    if (rule === null) {\n      lintingProblems.push(createLintingProblem({\n        ruleId\n      }));\n      return;\n    }\n    const messageIds = rule.meta && rule.meta.messages;\n    let reportTranslator = null;\n    const ruleContext = Object.freeze(Object.assign(Object.create(sharedTraversalContext), {\n      id: ruleId,\n      options: getRuleOptions(configuredRules[ruleId]),\n      report(...args) {\n        /*\n         * Create a report translator lazily.\n         * In a vast majority of cases, any given rule reports zero errors on a given\n         * piece of code. Creating a translator lazily avoids the performance cost of\n         * creating a new translator function for each rule that usually doesn't get\n         * called.\n         *\n         * Using lazy report translators improves end-to-end performance by about 3%\n         * with Node 8.4.0.\n         */\n        if (reportTranslator === null) {\n          reportTranslator = createReportTranslator({\n            ruleId,\n            severity,\n            sourceCode,\n            messageIds,\n            disableFixes\n          });\n        }\n        const problem = reportTranslator(...args);\n        if (problem.fix && rule.meta && !rule.meta.fixable) {\n          throw new Error(\"Fixable rules should export a `meta.fixable` property.\");\n        }\n        lintingProblems.push(problem);\n      }\n    }));\n    const ruleListeners = createRuleListeners(rule, ruleContext);\n\n    // add all the selectors from the rule as listeners\n    Object.keys(ruleListeners).forEach(selector => {\n      emitter.on(selector, timing.enabled ? timing.time(ruleId, ruleListeners[selector]) : ruleListeners[selector]);\n    });\n  });\n\n  // only run code path analyzer if the top level node is \"Program\", skip otherwise\n  const eventGenerator = nodeQueue[0].node.type === \"Program\" ? new CodePathAnalyzer(new NodeEventGenerator(emitter, {\n    visitorKeys: sourceCode.visitorKeys,\n    fallback: Traverser.getKeys\n  })) : new NodeEventGenerator(emitter, {\n    visitorKeys: sourceCode.visitorKeys,\n    fallback: Traverser.getKeys\n  });\n  nodeQueue.forEach(traversalInfo => {\n    currentNode = traversalInfo.node;\n    try {\n      if (traversalInfo.isEntering) {\n        eventGenerator.enterNode(currentNode);\n      } else {\n        eventGenerator.leaveNode(currentNode);\n      }\n    } catch (err) {\n      err.currentNode = currentNode;\n      throw err;\n    }\n  });\n  return lintingProblems;\n}\n\n/**\n * Ensure the source code to be a string.\n * @param {string|SourceCode} textOrSourceCode The text or source code object.\n * @returns {string} The source code text.\n */\nfunction ensureText(textOrSourceCode) {\n  if (typeof textOrSourceCode === \"object\") {\n    const {\n      hasBOM,\n      text\n    } = textOrSourceCode;\n    const bom = hasBOM ? \"\\uFEFF\" : \"\";\n    return bom + text;\n  }\n  return String(textOrSourceCode);\n}\n\n/**\n * Get an environment.\n * @param {LinterInternalSlots} slots The internal slots of Linter.\n * @param {string} envId The environment ID to get.\n * @returns {Environment|null} The environment.\n */\nfunction getEnv(slots, envId) {\n  return slots.lastConfigArray && slots.lastConfigArray.pluginEnvironments.get(envId) || BuiltInEnvironments.get(envId) || null;\n}\n\n/**\n * Get a rule.\n * @param {LinterInternalSlots} slots The internal slots of Linter.\n * @param {string} ruleId The rule ID to get.\n * @returns {Rule|null} The rule.\n */\nfunction getRule(slots, ruleId) {\n  return slots.lastConfigArray && slots.lastConfigArray.pluginRules.get(ruleId) || slots.ruleMap.get(ruleId);\n}\n\n/**\n * Normalize the value of the cwd\n * @param {string | undefined} cwd raw value of the cwd, path to a directory that should be considered as the current working directory, can be undefined.\n * @returns {string | undefined} normalized cwd\n */\nfunction normalizeCwd(cwd) {\n  if (cwd) {\n    return cwd;\n  }\n  if (typeof process === \"object\") {\n    return process.cwd();\n  }\n\n  // It's more explicit to assign the undefined\n  // eslint-disable-next-line no-undefined\n  return undefined;\n}\n\n/**\n * The map to store private data.\n * @type {WeakMap<Linter, LinterInternalSlots>}\n */\nconst internalSlotsMap = new WeakMap();\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Object that is responsible for verifying JavaScript text\n * @name eslint\n */\nclass Linter {\n  /**\n   * Initialize the Linter.\n   * @param {Object} [config] the config object\n   * @param {string} [config.cwd]  path to a directory that should be considered as the current working directory, can be undefined.\n   */\n  constructor({\n    cwd\n  } = {}) {\n    internalSlotsMap.set(this, {\n      cwd: normalizeCwd(cwd),\n      lastConfigArray: null,\n      lastSourceCode: null,\n      parserMap: new Map([[\"espree\", espree]]),\n      ruleMap: new Rules()\n    });\n    this.version = pkg.version;\n  }\n\n  /**\n   * Getter for package version.\n   * @static\n   * @returns {string} The version from package.json.\n   */\n  static get version() {\n    return pkg.version;\n  }\n\n  /**\n   * Same as linter.verify, except without support for processors.\n   * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n   * @param {ConfigData} providedConfig An ESLintConfig instance to configure everything.\n   * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.\n   * @returns {LintMessage[]} The results as an array of messages or an empty array if no messages.\n   */\n  _verifyWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {\n    const slots = internalSlotsMap.get(this);\n    const config = providedConfig || {};\n    const options = normalizeVerifyOptions(providedOptions, config);\n    let text;\n\n    // evaluate arguments\n    if (typeof textOrSourceCode === \"string\") {\n      slots.lastSourceCode = null;\n      text = textOrSourceCode;\n    } else {\n      slots.lastSourceCode = textOrSourceCode;\n      text = textOrSourceCode.text;\n    }\n\n    // Resolve parser.\n    let parserName = DEFAULT_PARSER_NAME;\n    let parser = espree;\n    if (typeof config.parser === \"object\" && config.parser !== null) {\n      parserName = config.parser.filePath;\n      parser = config.parser.definition;\n    } else if (typeof config.parser === \"string\") {\n      if (!slots.parserMap.has(config.parser)) {\n        return [{\n          ruleId: null,\n          fatal: true,\n          severity: 2,\n          message: `Configured parser '${config.parser}' was not found.`,\n          line: 0,\n          column: 0\n        }];\n      }\n      parserName = config.parser;\n      parser = slots.parserMap.get(config.parser);\n    }\n\n    // search and apply \"eslint-env *\".\n    const envInFile = options.allowInlineConfig && !options.warnInlineConfig ? findEslintEnv(text) : {};\n    const resolvedEnvConfig = Object.assign({\n      builtin: true\n    }, config.env, envInFile);\n    const enabledEnvs = Object.keys(resolvedEnvConfig).filter(envName => resolvedEnvConfig[envName]).map(envName => getEnv(slots, envName)).filter(env => env);\n    const parserOptions = resolveParserOptions(parser, config.parserOptions || {}, enabledEnvs);\n    const configuredGlobals = resolveGlobals(config.globals || {}, enabledEnvs);\n    const settings = config.settings || {};\n    if (!slots.lastSourceCode) {\n      const parseResult = parse(text, parser, parserOptions, options.filename);\n      if (!parseResult.success) {\n        return [parseResult.error];\n      }\n      slots.lastSourceCode = parseResult.sourceCode;\n    } else {\n      /*\n       * If the given source code object as the first argument does not have scopeManager, analyze the scope.\n       * This is for backward compatibility (SourceCode is frozen so it cannot rebind).\n       */\n      if (!slots.lastSourceCode.scopeManager) {\n        slots.lastSourceCode = new SourceCode({\n          text: slots.lastSourceCode.text,\n          ast: slots.lastSourceCode.ast,\n          parserServices: slots.lastSourceCode.parserServices,\n          visitorKeys: slots.lastSourceCode.visitorKeys,\n          scopeManager: analyzeScope(slots.lastSourceCode.ast, parserOptions)\n        });\n      }\n    }\n    const sourceCode = slots.lastSourceCode;\n    const commentDirectives = options.allowInlineConfig ? getDirectiveComments(options.filename, sourceCode.ast, ruleId => getRule(slots, ruleId), options.warnInlineConfig) : {\n      configuredRules: {},\n      enabledGlobals: {},\n      exportedVariables: {},\n      problems: [],\n      disableDirectives: []\n    };\n\n    // augment global scope with declared global variables\n    addDeclaredGlobals(sourceCode.scopeManager.scopes[0], configuredGlobals, {\n      exportedVariables: commentDirectives.exportedVariables,\n      enabledGlobals: commentDirectives.enabledGlobals\n    });\n    const configuredRules = Object.assign({}, config.rules, commentDirectives.configuredRules);\n    let lintingProblems;\n    try {\n      lintingProblems = runRules(sourceCode, configuredRules, ruleId => getRule(slots, ruleId), parserOptions, parserName, settings, options.filename, options.disableFixes, slots.cwd, providedOptions.physicalFilename);\n    } catch (err) {\n      err.message += `\\nOccurred while linting ${options.filename}`;\n      debug(\"An error occurred while traversing\");\n      debug(\"Filename:\", options.filename);\n      if (err.currentNode) {\n        const {\n          line\n        } = err.currentNode.loc.start;\n        debug(\"Line:\", line);\n        err.message += `:${line}`;\n      }\n      debug(\"Parser Options:\", parserOptions);\n      debug(\"Parser Path:\", parserName);\n      debug(\"Settings:\", settings);\n      throw err;\n    }\n    return applyDisableDirectives({\n      directives: commentDirectives.disableDirectives,\n      problems: lintingProblems.concat(commentDirectives.problems).sort((problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column),\n      reportUnusedDisableDirectives: options.reportUnusedDisableDirectives\n    });\n  }\n\n  /**\n   * Verifies the text against the rules specified by the second argument.\n   * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n   * @param {ConfigData|ConfigArray} config An ESLintConfig instance to configure everything.\n   * @param {(string|(VerifyOptions&ProcessorOptions))} [filenameOrOptions] The optional filename of the file being checked.\n   *      If this is not set, the filename will default to '<input>' in the rule context. If\n   *      an object, then it has \"filename\", \"allowInlineConfig\", and some properties.\n   * @returns {LintMessage[]} The results as an array of messages or an empty array if no messages.\n   */\n  verify(textOrSourceCode, config, filenameOrOptions) {\n    debug(\"Verify\");\n    const options = typeof filenameOrOptions === \"string\" ? {\n      filename: filenameOrOptions\n    } : filenameOrOptions || {};\n\n    // CLIEngine passes a `ConfigArray` object.\n    if (config && typeof config.extractConfig === \"function\") {\n      return this._verifyWithConfigArray(textOrSourceCode, config, options);\n    }\n\n    /*\n     * `Linter` doesn't support `overrides` property in configuration.\n     * So we cannot apply multiple processors.\n     */\n    if (options.preprocess || options.postprocess) {\n      return this._verifyWithProcessor(textOrSourceCode, config, options);\n    }\n    return this._verifyWithoutProcessors(textOrSourceCode, config, options);\n  }\n\n  /**\n   * Verify a given code with `ConfigArray`.\n   * @param {string|SourceCode} textOrSourceCode The source code.\n   * @param {ConfigArray} configArray The config array.\n   * @param {VerifyOptions&ProcessorOptions} options The options.\n   * @returns {LintMessage[]} The found problems.\n   */\n  _verifyWithConfigArray(textOrSourceCode, configArray, options) {\n    debug(\"With ConfigArray: %s\", options.filename);\n\n    // Store the config array in order to get plugin envs and rules later.\n    internalSlotsMap.get(this).lastConfigArray = configArray;\n\n    // Extract the final config for this file.\n    const config = configArray.extractConfig(options.filename);\n    const processor = config.processor && configArray.pluginProcessors.get(config.processor);\n\n    // Verify.\n    if (processor) {\n      debug(\"Apply the processor: %o\", config.processor);\n      const {\n        preprocess,\n        postprocess,\n        supportsAutofix\n      } = processor;\n      const disableFixes = options.disableFixes || !supportsAutofix;\n      return this._verifyWithProcessor(textOrSourceCode, config, {\n        ...options,\n        disableFixes,\n        postprocess,\n        preprocess\n      }, configArray);\n    }\n    return this._verifyWithoutProcessors(textOrSourceCode, config, options);\n  }\n\n  /**\n   * Verify with a processor.\n   * @param {string|SourceCode} textOrSourceCode The source code.\n   * @param {ConfigData|ExtractedConfig} config The config array.\n   * @param {VerifyOptions&ProcessorOptions} options The options.\n   * @param {ConfigArray} [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.\n   * @returns {LintMessage[]} The found problems.\n   */\n  _verifyWithProcessor(textOrSourceCode, config, options, configForRecursive) {\n    const filename = options.filename || \"<input>\";\n    const filenameToExpose = normalizeFilename(filename);\n    const physicalFilename = options.physicalFilename || filenameToExpose;\n    const text = ensureText(textOrSourceCode);\n    const preprocess = options.preprocess || (rawText => [rawText]);\n\n    // TODO(stephenwade): Replace this with array.flat() when we drop support for Node v10\n    const postprocess = options.postprocess || (array => [].concat(...array));\n    const filterCodeBlock = options.filterCodeBlock || (blockFilename => blockFilename.endsWith(\".js\"));\n    const originalExtname = path.extname(filename);\n    const messageLists = preprocess(text, filenameToExpose).map((block, i) => {\n      debug(\"A code block was found: %o\", block.filename || \"(unnamed)\");\n\n      // Keep the legacy behavior.\n      if (typeof block === \"string\") {\n        return this._verifyWithoutProcessors(block, config, options);\n      }\n      const blockText = block.text;\n      const blockName = path.join(filename, `${i}_${block.filename}`);\n\n      // Skip this block if filtered.\n      if (!filterCodeBlock(blockName, blockText)) {\n        debug(\"This code block was skipped.\");\n        return [];\n      }\n\n      // Resolve configuration again if the file content or extension was changed.\n      if (configForRecursive && (text !== blockText || path.extname(blockName) !== originalExtname)) {\n        debug(\"Resolving configuration again because the file content or extension was changed.\");\n        return this._verifyWithConfigArray(blockText, configForRecursive, {\n          ...options,\n          filename: blockName,\n          physicalFilename\n        });\n      }\n\n      // Does lint.\n      return this._verifyWithoutProcessors(blockText, config, {\n        ...options,\n        filename: blockName,\n        physicalFilename\n      });\n    });\n    return postprocess(messageLists, filenameToExpose);\n  }\n\n  /**\n   * Gets the SourceCode object representing the parsed source.\n   * @returns {SourceCode} The SourceCode object.\n   */\n  getSourceCode() {\n    return internalSlotsMap.get(this).lastSourceCode;\n  }\n\n  /**\n   * Defines a new linting rule.\n   * @param {string} ruleId A unique rule identifier\n   * @param {Function | Rule} ruleModule Function from context to object mapping AST node types to event handlers\n   * @returns {void}\n   */\n  defineRule(ruleId, ruleModule) {\n    internalSlotsMap.get(this).ruleMap.define(ruleId, ruleModule);\n  }\n\n  /**\n   * Defines many new linting rules.\n   * @param {Record<string, Function | Rule>} rulesToDefine map from unique rule identifier to rule\n   * @returns {void}\n   */\n  defineRules(rulesToDefine) {\n    Object.getOwnPropertyNames(rulesToDefine).forEach(ruleId => {\n      this.defineRule(ruleId, rulesToDefine[ruleId]);\n    });\n  }\n\n  /**\n   * Gets an object with all loaded rules.\n   * @returns {Map<string, Rule>} All loaded rules\n   */\n  getRules() {\n    const {\n      lastConfigArray,\n      ruleMap\n    } = internalSlotsMap.get(this);\n    return new Map(function* () {\n      yield* ruleMap;\n      if (lastConfigArray) {\n        yield* lastConfigArray.pluginRules;\n      }\n    }());\n  }\n\n  /**\n   * Define a new parser module\n   * @param {string} parserId Name of the parser\n   * @param {Parser} parserModule The parser object\n   * @returns {void}\n   */\n  defineParser(parserId, parserModule) {\n    internalSlotsMap.get(this).parserMap.set(parserId, parserModule);\n  }\n\n  /**\n   * Performs multiple autofix passes over the text until as many fixes as possible\n   * have been applied.\n   * @param {string} text The source text to apply fixes to.\n   * @param {ConfigData|ConfigArray} config The ESLint config object to use.\n   * @param {VerifyOptions&ProcessorOptions&FixOptions} options The ESLint options object to use.\n   * @returns {{fixed:boolean,messages:LintMessage[],output:string}} The result of the fix operation as returned from the\n   *      SourceCodeFixer.\n   */\n  verifyAndFix(text, config, options) {\n    let messages = [],\n      fixedResult,\n      fixed = false,\n      passNumber = 0,\n      currentText = text;\n    const debugTextDescription = options && options.filename || `${text.slice(0, 10)}...`;\n    const shouldFix = options && typeof options.fix !== \"undefined\" ? options.fix : true;\n\n    /**\n     * This loop continues until one of the following is true:\n     *\n     * 1. No more fixes have been applied.\n     * 2. Ten passes have been made.\n     *\n     * That means anytime a fix is successfully applied, there will be another pass.\n     * Essentially, guaranteeing a minimum of two passes.\n     */\n    do {\n      passNumber++;\n      debug(`Linting code for ${debugTextDescription} (pass ${passNumber})`);\n      messages = this.verify(currentText, config, options);\n      debug(`Generating fixed text for ${debugTextDescription} (pass ${passNumber})`);\n      fixedResult = SourceCodeFixer.applyFixes(currentText, messages, shouldFix);\n\n      /*\n       * stop if there are any syntax errors.\n       * 'fixedResult.output' is a empty string.\n       */\n      if (messages.length === 1 && messages[0].fatal) {\n        break;\n      }\n\n      // keep track if any fixes were ever applied - important for return value\n      fixed = fixed || fixedResult.fixed;\n\n      // update to use the fixed output instead of the original text\n      currentText = fixedResult.output;\n    } while (fixedResult.fixed && passNumber < MAX_AUTOFIX_PASSES);\n\n    /*\n     * If the last result had fixes, we need to lint again to be sure we have\n     * the most up-to-date information.\n     */\n    if (fixedResult.fixed) {\n      fixedResult.messages = this.verify(currentText, config, options);\n    }\n\n    // ensure the last result properly reflects if fixes were done\n    fixedResult.fixed = fixed;\n    fixedResult.output = currentText;\n    return fixedResult;\n  }\n}\nmodule.exports = {\n  Linter,\n  /**\n   * Get the internal slots of a given Linter instance for tests.\n   * @param {Linter} instance The Linter instance to get.\n   * @returns {LinterInternalSlots} The internal slots.\n   */\n  getLinterInternalSlots(instance) {\n    return internalSlotsMap.get(instance);\n  }\n};","map":{"version":3,"names":["require","path","eslintScope","evk","espree","merge","BuiltInEnvironments","pkg","astUtils","ConfigOps","ConfigValidator","Traverser","SourceCode","CodePathAnalyzer","applyDisableDirectives","ConfigCommentParser","NodeEventGenerator","createReportTranslator","Rules","createEmitter","SourceCodeFixer","timing","ruleReplacements","debug","MAX_AUTOFIX_PASSES","DEFAULT_PARSER_NAME","DEFAULT_ECMA_VERSION","commentParser","DEFAULT_ERROR_LOC","start","line","column","end","parserSymbol","Symbol","for","addDeclaredGlobals","globalScope","configGlobals","exportedVariables","enabledGlobals","id","Set","Object","keys","configValue","normalizeConfigGlobal","commentValue","value","sourceComments","comments","variable","set","get","Variable","variables","push","eslintImplicitGlobalSetting","eslintExplicitGlobal","eslintExplicitGlobalComments","writeable","forEach","name","eslintUsed","through","filter","reference","identifier","resolved","references","createMissingRuleMessage","ruleId","prototype","hasOwnProperty","call","rules","join","createLintingProblem","options","loc","message","severity","endLine","endColumn","nodeType","createDisableDirectives","type","ruleMapper","ruleIds","parseListConfig","directiveRules","length","result","directives","directiveProblems","stripDirectiveComment","split","trim","getDirectiveComments","filename","ast","warnInlineConfig","configuredRules","create","problems","disableDirectives","validator","builtInRules","token","comment","trimmedCommentText","match","exec","directiveText","lineCommentSupported","test","kind","directiveValue","slice","index","directiveType","assign","parseStringConfig","entries","normalizedValue","err","parseResult","parseJsonConfig","success","config","rule","ruleValue","validateRuleOptions","error","normalizeEcmaVersion","parser","ecmaVersion","latestEcmaVersion","eslintEnvPattern","findEslintEnv","text","retv","lastIndex","normalizeFilename","parts","sep","lastIndexOf","normalizeVerifyOptions","providedOptions","disableInlineConfig","noInlineConfig","ignoreInlineConfig","allowInlineConfig","configNameOfNoInlineConfig","reportUnusedDisableDirectives","disableFixes","Boolean","resolveParserOptions","enabledEnvironments","parserOptionsFromEnv","env","parserOptions","reduce","mergedParserOptions","isModule","sourceType","ecmaFeatures","globalReturn","resolveGlobals","providedGlobals","globals","map","stripUnicodeBOM","charCodeAt","getRuleOptions","ruleConfig","Array","isArray","analyzeScope","visitorKeys","analyze","ignoreEval","nodejsScope","impliedStrict","childVisitorKeys","KEYS","fallback","getKeys","parse","providedParserOptions","filePath","textToParse","replace","shebangPattern","captured","range","raw","tokens","eslintVisitorKeys","eslintScopeManager","parseForESLint","parserServices","services","scopeManager","sourceCode","ex","stack","fatal","lineNumber","getScope","currentNode","inner","node","parent","scope","acquire","childScopes","scopes","markVariableAsUsed","hasGlobalReturn","specialScope","currentScope","initialScope","upper","find","scopeVar","createRuleListeners","ruleContext","getAncestors","ancestorsStartingAtParent","ancestor","reverse","DEPRECATED_SOURCECODE_PASSTHROUGHS","getSource","getSourceLines","getAllComments","getNodeByRangeIndex","getComments","getCommentsBefore","getCommentsAfter","getCommentsInside","getJSDocComment","getFirstToken","getFirstTokens","getLastToken","getLastTokens","getTokenAfter","getTokenBefore","getTokenByRangeStart","getTokens","getTokensAfter","getTokensBefore","getTokensBetween","BASE_TRAVERSAL_CONTEXT","freeze","contextInfo","methodName","args","getSourceCode","runRules","parserName","settings","cwd","physicalFilename","emitter","nodeQueue","traverse","enter","isEntering","leave","sharedTraversalContext","getDeclaredVariables","bind","getCwd","getFilename","getPhysicalFilename","parserPath","lintingProblems","getRuleSeverity","messageIds","meta","messages","reportTranslator","report","problem","fix","fixable","Error","ruleListeners","selector","on","enabled","time","eventGenerator","traversalInfo","enterNode","leaveNode","ensureText","textOrSourceCode","hasBOM","bom","String","getEnv","slots","envId","lastConfigArray","pluginEnvironments","getRule","pluginRules","ruleMap","normalizeCwd","process","undefined","internalSlotsMap","WeakMap","Linter","constructor","lastSourceCode","parserMap","Map","version","_verifyWithoutProcessors","providedConfig","definition","has","envInFile","resolvedEnvConfig","builtin","enabledEnvs","envName","configuredGlobals","commentDirectives","concat","sort","problemA","problemB","verify","filenameOrOptions","extractConfig","_verifyWithConfigArray","preprocess","postprocess","_verifyWithProcessor","configArray","processor","pluginProcessors","supportsAutofix","configForRecursive","filenameToExpose","rawText","array","filterCodeBlock","blockFilename","endsWith","originalExtname","extname","messageLists","block","i","blockText","blockName","defineRule","ruleModule","define","defineRules","rulesToDefine","getOwnPropertyNames","getRules","defineParser","parserId","parserModule","verifyAndFix","fixedResult","fixed","passNumber","currentText","debugTextDescription","shouldFix","applyFixes","output","module","exports","getLinterInternalSlots","instance"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/linter/linter.js"],"sourcesContent":["/**\n * @fileoverview Main Linter Class\n * @author Gyandeep Singh\n * @author aladdin-add\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst\n    path = require(\"path\"),\n    eslintScope = require(\"eslint-scope\"),\n    evk = require(\"eslint-visitor-keys\"),\n    espree = require(\"espree\"),\n    merge = require(\"lodash.merge\"),\n    BuiltInEnvironments = require(\"@eslint/eslintrc/conf/environments\"),\n    pkg = require(\"../../package.json\"),\n    astUtils = require(\"../shared/ast-utils\"),\n    ConfigOps = require(\"@eslint/eslintrc/lib/shared/config-ops\"),\n    ConfigValidator = require(\"@eslint/eslintrc/lib/shared/config-validator\"),\n    Traverser = require(\"../shared/traverser\"),\n    { SourceCode } = require(\"../source-code\"),\n    CodePathAnalyzer = require(\"./code-path-analysis/code-path-analyzer\"),\n    applyDisableDirectives = require(\"./apply-disable-directives\"),\n    ConfigCommentParser = require(\"./config-comment-parser\"),\n    NodeEventGenerator = require(\"./node-event-generator\"),\n    createReportTranslator = require(\"./report-translator\"),\n    Rules = require(\"./rules\"),\n    createEmitter = require(\"./safe-emitter\"),\n    SourceCodeFixer = require(\"./source-code-fixer\"),\n    timing = require(\"./timing\"),\n    ruleReplacements = require(\"../../conf/replacements.json\");\n\nconst debug = require(\"debug\")(\"eslint:linter\");\nconst MAX_AUTOFIX_PASSES = 10;\nconst DEFAULT_PARSER_NAME = \"espree\";\nconst DEFAULT_ECMA_VERSION = 5;\nconst commentParser = new ConfigCommentParser();\nconst DEFAULT_ERROR_LOC = { start: { line: 1, column: 0 }, end: { line: 1, column: 1 } };\nconst parserSymbol = Symbol.for(\"eslint.RuleTester.parser\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {InstanceType<import(\"../cli-engine/config-array\")[\"ConfigArray\"]>} ConfigArray */\n/** @typedef {InstanceType<import(\"../cli-engine/config-array\")[\"ExtractedConfig\"]>} ExtractedConfig */\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../shared/types\").Environment} Environment */\n/** @typedef {import(\"../shared/types\").GlobalConf} GlobalConf */\n/** @typedef {import(\"../shared/types\").LintMessage} LintMessage */\n/** @typedef {import(\"../shared/types\").ParserOptions} ParserOptions */\n/** @typedef {import(\"../shared/types\").Processor} Processor */\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n\n/**\n * @template T\n * @typedef {{ [P in keyof T]-?: T[P] }} Required\n */\n\n/**\n * @typedef {Object} DisableDirective\n * @property {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} type\n * @property {number} line\n * @property {number} column\n * @property {(string|null)} ruleId\n */\n\n/**\n * The private data for `Linter` instance.\n * @typedef {Object} LinterInternalSlots\n * @property {ConfigArray|null} lastConfigArray The `ConfigArray` instance that the last `verify()` call used.\n * @property {SourceCode|null} lastSourceCode The `SourceCode` instance that the last `verify()` call used.\n * @property {Map<string, Parser>} parserMap The loaded parsers.\n * @property {Rules} ruleMap The loaded rules.\n */\n\n/**\n * @typedef {Object} VerifyOptions\n * @property {boolean} [allowInlineConfig] Allow/disallow inline comments' ability\n *      to change config once it is set. Defaults to true if not supplied.\n *      Useful if you want to validate JS without comments overriding rules.\n * @property {boolean} [disableFixes] if `true` then the linter doesn't make `fix`\n *      properties into the lint result.\n * @property {string} [filename] the filename of the source code.\n * @property {boolean | \"off\" | \"warn\" | \"error\"} [reportUnusedDisableDirectives] Adds reported errors for\n *      unused `eslint-disable` directives.\n */\n\n/**\n * @typedef {Object} ProcessorOptions\n * @property {(filename:string, text:string) => boolean} [filterCodeBlock] the\n *      predicate function that selects adopt code blocks.\n * @property {Processor[\"postprocess\"]} [postprocess] postprocessor for report\n *      messages. If provided, this should accept an array of the message lists\n *      for each code block returned from the preprocessor, apply a mapping to\n *      the messages as appropriate, and return a one-dimensional array of\n *      messages.\n * @property {Processor[\"preprocess\"]} [preprocess] preprocessor for source text.\n *      If provided, this should accept a string of source text, and return an\n *      array of code blocks to lint.\n */\n\n/**\n * @typedef {Object} FixOptions\n * @property {boolean | ((message: LintMessage) => boolean)} [fix] Determines\n *      whether fixes should be applied.\n */\n\n/**\n * @typedef {Object} InternalOptions\n * @property {string | null} warnInlineConfig The config name what `noInlineConfig` setting came from. If `noInlineConfig` setting didn't exist, this is null. If this is a config name, then the linter warns directive comments.\n * @property {\"off\" | \"warn\" | \"error\"} reportUnusedDisableDirectives (boolean values were normalized)\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Ensures that variables representing built-in properties of the Global Object,\n * and any globals declared by special block comments, are present in the global\n * scope.\n * @param {Scope} globalScope The global scope.\n * @param {Object} configGlobals The globals declared in configuration\n * @param {{exportedVariables: Object, enabledGlobals: Object}} commentDirectives Directives from comment configuration\n * @returns {void}\n */\nfunction addDeclaredGlobals(globalScope, configGlobals, { exportedVariables, enabledGlobals }) {\n\n    // Define configured global variables.\n    for (const id of new Set([...Object.keys(configGlobals), ...Object.keys(enabledGlobals)])) {\n\n        /*\n         * `ConfigOps.normalizeConfigGlobal` will throw an error if a configured global value is invalid. However, these errors would\n         * typically be caught when validating a config anyway (validity for inline global comments is checked separately).\n         */\n        const configValue = configGlobals[id] === void 0 ? void 0 : ConfigOps.normalizeConfigGlobal(configGlobals[id]);\n        const commentValue = enabledGlobals[id] && enabledGlobals[id].value;\n        const value = commentValue || configValue;\n        const sourceComments = enabledGlobals[id] && enabledGlobals[id].comments;\n\n        if (value === \"off\") {\n            continue;\n        }\n\n        let variable = globalScope.set.get(id);\n\n        if (!variable) {\n            variable = new eslintScope.Variable(id, globalScope);\n\n            globalScope.variables.push(variable);\n            globalScope.set.set(id, variable);\n        }\n\n        variable.eslintImplicitGlobalSetting = configValue;\n        variable.eslintExplicitGlobal = sourceComments !== void 0;\n        variable.eslintExplicitGlobalComments = sourceComments;\n        variable.writeable = (value === \"writable\");\n    }\n\n    // mark all exported variables as such\n    Object.keys(exportedVariables).forEach(name => {\n        const variable = globalScope.set.get(name);\n\n        if (variable) {\n            variable.eslintUsed = true;\n        }\n    });\n\n    /*\n     * \"through\" contains all references which definitions cannot be found.\n     * Since we augment the global scope using configuration, we need to update\n     * references and remove the ones that were added by configuration.\n     */\n    globalScope.through = globalScope.through.filter(reference => {\n        const name = reference.identifier.name;\n        const variable = globalScope.set.get(name);\n\n        if (variable) {\n\n            /*\n             * Links the variable and the reference.\n             * And this reference is removed from `Scope#through`.\n             */\n            reference.resolved = variable;\n            variable.references.push(reference);\n\n            return false;\n        }\n\n        return true;\n    });\n}\n\n/**\n * creates a missing-rule message.\n * @param {string} ruleId the ruleId to create\n * @returns {string} created error message\n * @private\n */\nfunction createMissingRuleMessage(ruleId) {\n    return Object.prototype.hasOwnProperty.call(ruleReplacements.rules, ruleId)\n        ? `Rule '${ruleId}' was removed and replaced by: ${ruleReplacements.rules[ruleId].join(\", \")}`\n        : `Definition for rule '${ruleId}' was not found.`;\n}\n\n/**\n * creates a linting problem\n * @param {Object} options to create linting error\n * @param {string} [options.ruleId] the ruleId to report\n * @param {Object} [options.loc] the loc to report\n * @param {string} [options.message] the error message to report\n * @param {string} [options.severity] the error message to report\n * @returns {LintMessage} created problem, returns a missing-rule problem if only provided ruleId.\n * @private\n */\nfunction createLintingProblem(options) {\n    const {\n        ruleId = null,\n        loc = DEFAULT_ERROR_LOC,\n        message = createMissingRuleMessage(options.ruleId),\n        severity = 2\n    } = options;\n\n    return {\n        ruleId,\n        message,\n        line: loc.start.line,\n        column: loc.start.column + 1,\n        endLine: loc.end.line,\n        endColumn: loc.end.column + 1,\n        severity,\n        nodeType: null\n    };\n}\n\n/**\n * Creates a collection of disable directives from a comment\n * @param {Object} options to create disable directives\n * @param {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} options.type The type of directive comment\n * @param {{line: number, column: number}} options.loc The 0-based location of the comment token\n * @param {string} options.value The value after the directive in the comment\n * comment specified no specific rules, so it applies to all rules (e.g. `eslint-disable`)\n * @param {function(string): {create: Function}} options.ruleMapper A map from rule IDs to defined rules\n * @returns {Object} Directives and problems from the comment\n */\nfunction createDisableDirectives(options) {\n    const { type, loc, value, ruleMapper } = options;\n    const ruleIds = Object.keys(commentParser.parseListConfig(value));\n    const directiveRules = ruleIds.length ? ruleIds : [null];\n    const result = {\n        directives: [], // valid disable directives\n        directiveProblems: [] // problems in directives\n    };\n\n    for (const ruleId of directiveRules) {\n\n        // push to directives, if the rule is defined(including null, e.g. /*eslint enable*/)\n        if (ruleId === null || ruleMapper(ruleId) !== null) {\n            result.directives.push({ type, line: loc.start.line, column: loc.start.column + 1, ruleId });\n        } else {\n            result.directiveProblems.push(createLintingProblem({ ruleId, loc }));\n        }\n    }\n    return result;\n}\n\n/**\n * Remove the ignored part from a given directive comment and trim it.\n * @param {string} value The comment text to strip.\n * @returns {string} The stripped text.\n */\nfunction stripDirectiveComment(value) {\n    return value.split(/\\s-{2,}\\s/u)[0].trim();\n}\n\n/**\n * Parses comments in file to extract file-specific config of rules, globals\n * and environments and merges them with global config; also code blocks\n * where reporting is disabled or enabled and merges them with reporting config.\n * @param {string} filename The file being checked.\n * @param {ASTNode} ast The top node of the AST.\n * @param {function(string): {create: Function}} ruleMapper A map from rule IDs to defined rules\n * @param {string|null} warnInlineConfig If a string then it should warn directive comments as disabled. The string value is the config name what the setting came from.\n * @returns {{configuredRules: Object, enabledGlobals: {value:string,comment:Token}[], exportedVariables: Object, problems: Problem[], disableDirectives: DisableDirective[]}}\n * A collection of the directive comments that were found, along with any problems that occurred when parsing\n */\nfunction getDirectiveComments(filename, ast, ruleMapper, warnInlineConfig) {\n    const configuredRules = {};\n    const enabledGlobals = Object.create(null);\n    const exportedVariables = {};\n    const problems = [];\n    const disableDirectives = [];\n    const validator = new ConfigValidator({\n        builtInRules: Rules\n    });\n\n    ast.comments.filter(token => token.type !== \"Shebang\").forEach(comment => {\n        const trimmedCommentText = stripDirectiveComment(comment.value);\n        const match = /^(eslint(?:-env|-enable|-disable(?:(?:-next)?-line)?)?|exported|globals?)(?:\\s|$)/u.exec(trimmedCommentText);\n\n        if (!match) {\n            return;\n        }\n        const directiveText = match[1];\n        const lineCommentSupported = /^eslint-disable-(next-)?line$/u.test(directiveText);\n\n        if (comment.type === \"Line\" && !lineCommentSupported) {\n            return;\n        }\n\n        if (warnInlineConfig) {\n            const kind = comment.type === \"Block\" ? `/*${directiveText}*/` : `//${directiveText}`;\n\n            problems.push(createLintingProblem({\n                ruleId: null,\n                message: `'${kind}' has no effect because you have 'noInlineConfig' setting in ${warnInlineConfig}.`,\n                loc: comment.loc,\n                severity: 1\n            }));\n            return;\n        }\n\n        if (lineCommentSupported && comment.loc.start.line !== comment.loc.end.line) {\n            const message = `${directiveText} comment should not span multiple lines.`;\n\n            problems.push(createLintingProblem({\n                ruleId: null,\n                message,\n                loc: comment.loc\n            }));\n            return;\n        }\n\n        const directiveValue = trimmedCommentText.slice(match.index + directiveText.length);\n\n        switch (directiveText) {\n            case \"eslint-disable\":\n            case \"eslint-enable\":\n            case \"eslint-disable-next-line\":\n            case \"eslint-disable-line\": {\n                const directiveType = directiveText.slice(\"eslint-\".length);\n                const options = { type: directiveType, loc: comment.loc, value: directiveValue, ruleMapper };\n                const { directives, directiveProblems } = createDisableDirectives(options);\n\n                disableDirectives.push(...directives);\n                problems.push(...directiveProblems);\n                break;\n            }\n\n            case \"exported\":\n                Object.assign(exportedVariables, commentParser.parseStringConfig(directiveValue, comment));\n                break;\n\n            case \"globals\":\n            case \"global\":\n                for (const [id, { value }] of Object.entries(commentParser.parseStringConfig(directiveValue, comment))) {\n                    let normalizedValue;\n\n                    try {\n                        normalizedValue = ConfigOps.normalizeConfigGlobal(value);\n                    } catch (err) {\n                        problems.push(createLintingProblem({\n                            ruleId: null,\n                            loc: comment.loc,\n                            message: err.message\n                        }));\n                        continue;\n                    }\n\n                    if (enabledGlobals[id]) {\n                        enabledGlobals[id].comments.push(comment);\n                        enabledGlobals[id].value = normalizedValue;\n                    } else {\n                        enabledGlobals[id] = {\n                            comments: [comment],\n                            value: normalizedValue\n                        };\n                    }\n                }\n                break;\n\n            case \"eslint\": {\n                const parseResult = commentParser.parseJsonConfig(directiveValue, comment.loc);\n\n                if (parseResult.success) {\n                    Object.keys(parseResult.config).forEach(name => {\n                        const rule = ruleMapper(name);\n                        const ruleValue = parseResult.config[name];\n\n                        if (rule === null) {\n                            problems.push(createLintingProblem({ ruleId: name, loc: comment.loc }));\n                            return;\n                        }\n\n                        try {\n                            validator.validateRuleOptions(rule, name, ruleValue);\n                        } catch (err) {\n                            problems.push(createLintingProblem({\n                                ruleId: name,\n                                message: err.message,\n                                loc: comment.loc\n                            }));\n\n                            // do not apply the config, if found invalid options.\n                            return;\n                        }\n\n                        configuredRules[name] = ruleValue;\n                    });\n                } else {\n                    problems.push(parseResult.error);\n                }\n\n                break;\n            }\n\n            // no default\n        }\n    });\n\n    return {\n        configuredRules,\n        enabledGlobals,\n        exportedVariables,\n        problems,\n        disableDirectives\n    };\n}\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {Parser} parser The parser which uses this options.\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(parser, ecmaVersion) {\n    if ((parser[parserSymbol] || parser) === espree) {\n        if (ecmaVersion === \"latest\") {\n            return espree.latestEcmaVersion;\n        }\n    }\n\n    /*\n     * Calculate ECMAScript edition number from official year version starting with\n     * ES2015, which corresponds with ES6 (or a difference of 2009).\n     */\n    return ecmaVersion >= 2015 ? ecmaVersion - 2009 : ecmaVersion;\n}\n\nconst eslintEnvPattern = /\\/\\*\\s*eslint-env\\s(.+?)\\*\\//gsu;\n\n/**\n * Checks whether or not there is a comment which has \"eslint-env *\" in a given text.\n * @param {string} text A source code text to check.\n * @returns {Object|null} A result of parseListConfig() with \"eslint-env *\" comment.\n */\nfunction findEslintEnv(text) {\n    let match, retv;\n\n    eslintEnvPattern.lastIndex = 0;\n\n    while ((match = eslintEnvPattern.exec(text)) !== null) {\n        retv = Object.assign(\n            retv || {},\n            commentParser.parseListConfig(stripDirectiveComment(match[1]))\n        );\n    }\n\n    return retv;\n}\n\n/**\n * Convert \"/path/to/<text>\" to \"<text>\".\n * `CLIEngine#executeOnText()` method gives \"/path/to/<text>\" if the filename\n * was omitted because `configArray.extractConfig()` requires an absolute path.\n * But the linter should pass `<text>` to `RuleContext#getFilename()` in that\n * case.\n * Also, code blocks can have their virtual filename. If the parent filename was\n * `<text>`, the virtual filename is `<text>/0_foo.js` or something like (i.e.,\n * it's not an absolute path).\n * @param {string} filename The filename to normalize.\n * @returns {string} The normalized filename.\n */\nfunction normalizeFilename(filename) {\n    const parts = filename.split(path.sep);\n    const index = parts.lastIndexOf(\"<text>\");\n\n    return index === -1 ? filename : parts.slice(index).join(path.sep);\n}\n\n/**\n * Normalizes the possible options for `linter.verify` and `linter.verifyAndFix` to a\n * consistent shape.\n * @param {VerifyOptions} providedOptions Options\n * @param {ConfigData} config Config.\n * @returns {Required<VerifyOptions> & InternalOptions} Normalized options\n */\nfunction normalizeVerifyOptions(providedOptions, config) {\n    const disableInlineConfig = config.noInlineConfig === true;\n    const ignoreInlineConfig = providedOptions.allowInlineConfig === false;\n    const configNameOfNoInlineConfig = config.configNameOfNoInlineConfig\n        ? ` (${config.configNameOfNoInlineConfig})`\n        : \"\";\n\n    let reportUnusedDisableDirectives = providedOptions.reportUnusedDisableDirectives;\n\n    if (typeof reportUnusedDisableDirectives === \"boolean\") {\n        reportUnusedDisableDirectives = reportUnusedDisableDirectives ? \"error\" : \"off\";\n    }\n    if (typeof reportUnusedDisableDirectives !== \"string\") {\n        reportUnusedDisableDirectives = config.reportUnusedDisableDirectives ? \"warn\" : \"off\";\n    }\n\n    return {\n        filename: normalizeFilename(providedOptions.filename || \"<input>\"),\n        allowInlineConfig: !ignoreInlineConfig,\n        warnInlineConfig: disableInlineConfig && !ignoreInlineConfig\n            ? `your config${configNameOfNoInlineConfig}`\n            : null,\n        reportUnusedDisableDirectives,\n        disableFixes: Boolean(providedOptions.disableFixes)\n    };\n}\n\n/**\n * Combines the provided parserOptions with the options from environments\n * @param {Parser} parser The parser which uses this options.\n * @param {ParserOptions} providedOptions The provided 'parserOptions' key in a config\n * @param {Environment[]} enabledEnvironments The environments enabled in configuration and with inline comments\n * @returns {ParserOptions} Resulting parser options after merge\n */\nfunction resolveParserOptions(parser, providedOptions, enabledEnvironments) {\n\n    const parserOptionsFromEnv = enabledEnvironments\n        .filter(env => env.parserOptions)\n        .reduce((parserOptions, env) => merge(parserOptions, env.parserOptions), {});\n    const mergedParserOptions = merge(parserOptionsFromEnv, providedOptions || {});\n    const isModule = mergedParserOptions.sourceType === \"module\";\n\n    if (isModule) {\n\n        /*\n         * can't have global return inside of modules\n         * TODO: espree validate parserOptions.globalReturn when sourceType is setting to module.(@aladdin-add)\n         */\n        mergedParserOptions.ecmaFeatures = Object.assign({}, mergedParserOptions.ecmaFeatures, { globalReturn: false });\n    }\n\n    mergedParserOptions.ecmaVersion = normalizeEcmaVersion(parser, mergedParserOptions.ecmaVersion);\n\n    return mergedParserOptions;\n}\n\n/**\n * Combines the provided globals object with the globals from environments\n * @param {Record<string, GlobalConf>} providedGlobals The 'globals' key in a config\n * @param {Environment[]} enabledEnvironments The environments enabled in configuration and with inline comments\n * @returns {Record<string, GlobalConf>} The resolved globals object\n */\nfunction resolveGlobals(providedGlobals, enabledEnvironments) {\n    return Object.assign(\n        {},\n        ...enabledEnvironments.filter(env => env.globals).map(env => env.globals),\n        providedGlobals\n    );\n}\n\n/**\n * Strips Unicode BOM from a given text.\n * @param {string} text A text to strip.\n * @returns {string} The stripped text.\n */\nfunction stripUnicodeBOM(text) {\n\n    /*\n     * Check Unicode BOM.\n     * In JavaScript, string data is stored as UTF-16, so BOM is 0xFEFF.\n     * http://www.ecma-international.org/ecma-262/6.0/#sec-unicode-format-control-characters\n     */\n    if (text.charCodeAt(0) === 0xFEFF) {\n        return text.slice(1);\n    }\n    return text;\n}\n\n/**\n * Get the options for a rule (not including severity), if any\n * @param {Array|number} ruleConfig rule configuration\n * @returns {Array} of rule options, empty Array if none\n */\nfunction getRuleOptions(ruleConfig) {\n    if (Array.isArray(ruleConfig)) {\n        return ruleConfig.slice(1);\n    }\n    return [];\n\n}\n\n/**\n * Analyze scope of the given AST.\n * @param {ASTNode} ast The `Program` node to analyze.\n * @param {ParserOptions} parserOptions The parser options.\n * @param {Record<string, string[]>} visitorKeys The visitor keys.\n * @returns {ScopeManager} The analysis result.\n */\nfunction analyzeScope(ast, parserOptions, visitorKeys) {\n    const ecmaFeatures = parserOptions.ecmaFeatures || {};\n    const ecmaVersion = parserOptions.ecmaVersion || DEFAULT_ECMA_VERSION;\n\n    return eslintScope.analyze(ast, {\n        ignoreEval: true,\n        nodejsScope: ecmaFeatures.globalReturn,\n        impliedStrict: ecmaFeatures.impliedStrict,\n        ecmaVersion,\n        sourceType: parserOptions.sourceType || \"script\",\n        childVisitorKeys: visitorKeys || evk.KEYS,\n        fallback: Traverser.getKeys\n    });\n}\n\n/**\n * Parses text into an AST. Moved out here because the try-catch prevents\n * optimization of functions, so it's best to keep the try-catch as isolated\n * as possible\n * @param {string} text The text to parse.\n * @param {Parser} parser The parser to parse.\n * @param {ParserOptions} providedParserOptions Options to pass to the parser\n * @param {string} filePath The path to the file being parsed.\n * @returns {{success: false, error: Problem}|{success: true, sourceCode: SourceCode}}\n * An object containing the AST and parser services if parsing was successful, or the error if parsing failed\n * @private\n */\nfunction parse(text, parser, providedParserOptions, filePath) {\n    const textToParse = stripUnicodeBOM(text).replace(astUtils.shebangPattern, (match, captured) => `//${captured}`);\n    const parserOptions = Object.assign({}, providedParserOptions, {\n        loc: true,\n        range: true,\n        raw: true,\n        tokens: true,\n        comment: true,\n        eslintVisitorKeys: true,\n        eslintScopeManager: true,\n        filePath\n    });\n\n    /*\n     * Check for parsing errors first. If there's a parsing error, nothing\n     * else can happen. However, a parsing error does not throw an error\n     * from this method - it's just considered a fatal error message, a\n     * problem that ESLint identified just like any other.\n     */\n    try {\n        const parseResult = (typeof parser.parseForESLint === \"function\")\n            ? parser.parseForESLint(textToParse, parserOptions)\n            : { ast: parser.parse(textToParse, parserOptions) };\n        const ast = parseResult.ast;\n        const parserServices = parseResult.services || {};\n        const visitorKeys = parseResult.visitorKeys || evk.KEYS;\n        const scopeManager = parseResult.scopeManager || analyzeScope(ast, parserOptions, visitorKeys);\n\n        return {\n            success: true,\n\n            /*\n             * Save all values that `parseForESLint()` returned.\n             * If a `SourceCode` object is given as the first parameter instead of source code text,\n             * linter skips the parsing process and reuses the source code object.\n             * In that case, linter needs all the values that `parseForESLint()` returned.\n             */\n            sourceCode: new SourceCode({\n                text,\n                ast,\n                parserServices,\n                scopeManager,\n                visitorKeys\n            })\n        };\n    } catch (ex) {\n\n        // If the message includes a leading line number, strip it:\n        const message = `Parsing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n\n        debug(\"%s\\n%s\", message, ex.stack);\n\n        return {\n            success: false,\n            error: {\n                ruleId: null,\n                fatal: true,\n                severity: 2,\n                message,\n                line: ex.lineNumber,\n                column: ex.column\n            }\n        };\n    }\n}\n\n/**\n * Gets the scope for the current node\n * @param {ScopeManager} scopeManager The scope manager for this AST\n * @param {ASTNode} currentNode The node to get the scope of\n * @returns {eslint-scope.Scope} The scope information for this node\n */\nfunction getScope(scopeManager, currentNode) {\n\n    // On Program node, get the outermost scope to avoid return Node.js special function scope or ES modules scope.\n    const inner = currentNode.type !== \"Program\";\n\n    for (let node = currentNode; node; node = node.parent) {\n        const scope = scopeManager.acquire(node, inner);\n\n        if (scope) {\n            if (scope.type === \"function-expression-name\") {\n                return scope.childScopes[0];\n            }\n            return scope;\n        }\n    }\n\n    return scopeManager.scopes[0];\n}\n\n/**\n * Marks a variable as used in the current scope\n * @param {ScopeManager} scopeManager The scope manager for this AST. The scope may be mutated by this function.\n * @param {ASTNode} currentNode The node currently being traversed\n * @param {Object} parserOptions The options used to parse this text\n * @param {string} name The name of the variable that should be marked as used.\n * @returns {boolean} True if the variable was found and marked as used, false if not.\n */\nfunction markVariableAsUsed(scopeManager, currentNode, parserOptions, name) {\n    const hasGlobalReturn = parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.globalReturn;\n    const specialScope = hasGlobalReturn || parserOptions.sourceType === \"module\";\n    const currentScope = getScope(scopeManager, currentNode);\n\n    // Special Node.js scope means we need to start one level deeper\n    const initialScope = currentScope.type === \"global\" && specialScope ? currentScope.childScopes[0] : currentScope;\n\n    for (let scope = initialScope; scope; scope = scope.upper) {\n        const variable = scope.variables.find(scopeVar => scopeVar.name === name);\n\n        if (variable) {\n            variable.eslintUsed = true;\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Runs a rule, and gets its listeners\n * @param {Rule} rule A normalized rule with a `create` method\n * @param {Context} ruleContext The context that should be passed to the rule\n * @returns {Object} A map of selector listeners provided by the rule\n */\nfunction createRuleListeners(rule, ruleContext) {\n    try {\n        return rule.create(ruleContext);\n    } catch (ex) {\n        ex.message = `Error while loading rule '${ruleContext.id}': ${ex.message}`;\n        throw ex;\n    }\n}\n\n/**\n * Gets all the ancestors of a given node\n * @param {ASTNode} node The node\n * @returns {ASTNode[]} All the ancestor nodes in the AST, not including the provided node, starting\n * from the root node and going inwards to the parent node.\n */\nfunction getAncestors(node) {\n    const ancestorsStartingAtParent = [];\n\n    for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {\n        ancestorsStartingAtParent.push(ancestor);\n    }\n\n    return ancestorsStartingAtParent.reverse();\n}\n\n// methods that exist on SourceCode object\nconst DEPRECATED_SOURCECODE_PASSTHROUGHS = {\n    getSource: \"getText\",\n    getSourceLines: \"getLines\",\n    getAllComments: \"getAllComments\",\n    getNodeByRangeIndex: \"getNodeByRangeIndex\",\n    getComments: \"getComments\",\n    getCommentsBefore: \"getCommentsBefore\",\n    getCommentsAfter: \"getCommentsAfter\",\n    getCommentsInside: \"getCommentsInside\",\n    getJSDocComment: \"getJSDocComment\",\n    getFirstToken: \"getFirstToken\",\n    getFirstTokens: \"getFirstTokens\",\n    getLastToken: \"getLastToken\",\n    getLastTokens: \"getLastTokens\",\n    getTokenAfter: \"getTokenAfter\",\n    getTokenBefore: \"getTokenBefore\",\n    getTokenByRangeStart: \"getTokenByRangeStart\",\n    getTokens: \"getTokens\",\n    getTokensAfter: \"getTokensAfter\",\n    getTokensBefore: \"getTokensBefore\",\n    getTokensBetween: \"getTokensBetween\"\n};\n\nconst BASE_TRAVERSAL_CONTEXT = Object.freeze(\n    Object.keys(DEPRECATED_SOURCECODE_PASSTHROUGHS).reduce(\n        (contextInfo, methodName) =>\n            Object.assign(contextInfo, {\n                [methodName](...args) {\n                    return this.getSourceCode()[DEPRECATED_SOURCECODE_PASSTHROUGHS[methodName]](...args);\n                }\n            }),\n        {}\n    )\n);\n\n/**\n * Runs the given rules on the given SourceCode object\n * @param {SourceCode} sourceCode A SourceCode object for the given text\n * @param {Object} configuredRules The rules configuration\n * @param {function(string): Rule} ruleMapper A mapper function from rule names to rules\n * @param {Object} parserOptions The options that were passed to the parser\n * @param {string} parserName The name of the parser in the config\n * @param {Object} settings The settings that were enabled in the config\n * @param {string} filename The reported filename of the code\n * @param {boolean} disableFixes If true, it doesn't make `fix` properties.\n * @param {string | undefined} cwd cwd of the cli\n * @param {string} physicalFilename The full path of the file on disk without any code block information\n * @returns {Problem[]} An array of reported problems\n */\nfunction runRules(sourceCode, configuredRules, ruleMapper, parserOptions, parserName, settings, filename, disableFixes, cwd, physicalFilename) {\n    const emitter = createEmitter();\n    const nodeQueue = [];\n    let currentNode = sourceCode.ast;\n\n    Traverser.traverse(sourceCode.ast, {\n        enter(node, parent) {\n            node.parent = parent;\n            nodeQueue.push({ isEntering: true, node });\n        },\n        leave(node) {\n            nodeQueue.push({ isEntering: false, node });\n        },\n        visitorKeys: sourceCode.visitorKeys\n    });\n\n    /*\n     * Create a frozen object with the ruleContext properties and methods that are shared by all rules.\n     * All rule contexts will inherit from this object. This avoids the performance penalty of copying all the\n     * properties once for each rule.\n     */\n    const sharedTraversalContext = Object.freeze(\n        Object.assign(\n            Object.create(BASE_TRAVERSAL_CONTEXT),\n            {\n                getAncestors: () => getAncestors(currentNode),\n                getDeclaredVariables: sourceCode.scopeManager.getDeclaredVariables.bind(sourceCode.scopeManager),\n                getCwd: () => cwd,\n                getFilename: () => filename,\n                getPhysicalFilename: () => physicalFilename || filename,\n                getScope: () => getScope(sourceCode.scopeManager, currentNode),\n                getSourceCode: () => sourceCode,\n                markVariableAsUsed: name => markVariableAsUsed(sourceCode.scopeManager, currentNode, parserOptions, name),\n                parserOptions,\n                parserPath: parserName,\n                parserServices: sourceCode.parserServices,\n                settings\n            }\n        )\n    );\n\n\n    const lintingProblems = [];\n\n    Object.keys(configuredRules).forEach(ruleId => {\n        const severity = ConfigOps.getRuleSeverity(configuredRules[ruleId]);\n\n        // not load disabled rules\n        if (severity === 0) {\n            return;\n        }\n\n        const rule = ruleMapper(ruleId);\n\n        if (rule === null) {\n            lintingProblems.push(createLintingProblem({ ruleId }));\n            return;\n        }\n\n        const messageIds = rule.meta && rule.meta.messages;\n        let reportTranslator = null;\n        const ruleContext = Object.freeze(\n            Object.assign(\n                Object.create(sharedTraversalContext),\n                {\n                    id: ruleId,\n                    options: getRuleOptions(configuredRules[ruleId]),\n                    report(...args) {\n\n                        /*\n                         * Create a report translator lazily.\n                         * In a vast majority of cases, any given rule reports zero errors on a given\n                         * piece of code. Creating a translator lazily avoids the performance cost of\n                         * creating a new translator function for each rule that usually doesn't get\n                         * called.\n                         *\n                         * Using lazy report translators improves end-to-end performance by about 3%\n                         * with Node 8.4.0.\n                         */\n                        if (reportTranslator === null) {\n                            reportTranslator = createReportTranslator({\n                                ruleId,\n                                severity,\n                                sourceCode,\n                                messageIds,\n                                disableFixes\n                            });\n                        }\n                        const problem = reportTranslator(...args);\n\n                        if (problem.fix && rule.meta && !rule.meta.fixable) {\n                            throw new Error(\"Fixable rules should export a `meta.fixable` property.\");\n                        }\n                        lintingProblems.push(problem);\n                    }\n                }\n            )\n        );\n\n        const ruleListeners = createRuleListeners(rule, ruleContext);\n\n        // add all the selectors from the rule as listeners\n        Object.keys(ruleListeners).forEach(selector => {\n            emitter.on(\n                selector,\n                timing.enabled\n                    ? timing.time(ruleId, ruleListeners[selector])\n                    : ruleListeners[selector]\n            );\n        });\n    });\n\n    // only run code path analyzer if the top level node is \"Program\", skip otherwise\n    const eventGenerator = nodeQueue[0].node.type === \"Program\"\n        ? new CodePathAnalyzer(new NodeEventGenerator(emitter, { visitorKeys: sourceCode.visitorKeys, fallback: Traverser.getKeys }))\n        : new NodeEventGenerator(emitter, { visitorKeys: sourceCode.visitorKeys, fallback: Traverser.getKeys });\n\n    nodeQueue.forEach(traversalInfo => {\n        currentNode = traversalInfo.node;\n\n        try {\n            if (traversalInfo.isEntering) {\n                eventGenerator.enterNode(currentNode);\n            } else {\n                eventGenerator.leaveNode(currentNode);\n            }\n        } catch (err) {\n            err.currentNode = currentNode;\n            throw err;\n        }\n    });\n\n    return lintingProblems;\n}\n\n/**\n * Ensure the source code to be a string.\n * @param {string|SourceCode} textOrSourceCode The text or source code object.\n * @returns {string} The source code text.\n */\nfunction ensureText(textOrSourceCode) {\n    if (typeof textOrSourceCode === \"object\") {\n        const { hasBOM, text } = textOrSourceCode;\n        const bom = hasBOM ? \"\\uFEFF\" : \"\";\n\n        return bom + text;\n    }\n\n    return String(textOrSourceCode);\n}\n\n/**\n * Get an environment.\n * @param {LinterInternalSlots} slots The internal slots of Linter.\n * @param {string} envId The environment ID to get.\n * @returns {Environment|null} The environment.\n */\nfunction getEnv(slots, envId) {\n    return (\n        (slots.lastConfigArray && slots.lastConfigArray.pluginEnvironments.get(envId)) ||\n        BuiltInEnvironments.get(envId) ||\n        null\n    );\n}\n\n/**\n * Get a rule.\n * @param {LinterInternalSlots} slots The internal slots of Linter.\n * @param {string} ruleId The rule ID to get.\n * @returns {Rule|null} The rule.\n */\nfunction getRule(slots, ruleId) {\n    return (\n        (slots.lastConfigArray && slots.lastConfigArray.pluginRules.get(ruleId)) ||\n        slots.ruleMap.get(ruleId)\n    );\n}\n\n/**\n * Normalize the value of the cwd\n * @param {string | undefined} cwd raw value of the cwd, path to a directory that should be considered as the current working directory, can be undefined.\n * @returns {string | undefined} normalized cwd\n */\nfunction normalizeCwd(cwd) {\n    if (cwd) {\n        return cwd;\n    }\n    if (typeof process === \"object\") {\n        return process.cwd();\n    }\n\n    // It's more explicit to assign the undefined\n    // eslint-disable-next-line no-undefined\n    return undefined;\n}\n\n/**\n * The map to store private data.\n * @type {WeakMap<Linter, LinterInternalSlots>}\n */\nconst internalSlotsMap = new WeakMap();\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Object that is responsible for verifying JavaScript text\n * @name eslint\n */\nclass Linter {\n\n    /**\n     * Initialize the Linter.\n     * @param {Object} [config] the config object\n     * @param {string} [config.cwd]  path to a directory that should be considered as the current working directory, can be undefined.\n     */\n    constructor({ cwd } = {}) {\n        internalSlotsMap.set(this, {\n            cwd: normalizeCwd(cwd),\n            lastConfigArray: null,\n            lastSourceCode: null,\n            parserMap: new Map([[\"espree\", espree]]),\n            ruleMap: new Rules()\n        });\n\n        this.version = pkg.version;\n    }\n\n    /**\n     * Getter for package version.\n     * @static\n     * @returns {string} The version from package.json.\n     */\n    static get version() {\n        return pkg.version;\n    }\n\n    /**\n     * Same as linter.verify, except without support for processors.\n     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n     * @param {ConfigData} providedConfig An ESLintConfig instance to configure everything.\n     * @param {VerifyOptions} [providedOptions] The optional filename of the file being checked.\n     * @returns {LintMessage[]} The results as an array of messages or an empty array if no messages.\n     */\n    _verifyWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {\n        const slots = internalSlotsMap.get(this);\n        const config = providedConfig || {};\n        const options = normalizeVerifyOptions(providedOptions, config);\n        let text;\n\n        // evaluate arguments\n        if (typeof textOrSourceCode === \"string\") {\n            slots.lastSourceCode = null;\n            text = textOrSourceCode;\n        } else {\n            slots.lastSourceCode = textOrSourceCode;\n            text = textOrSourceCode.text;\n        }\n\n        // Resolve parser.\n        let parserName = DEFAULT_PARSER_NAME;\n        let parser = espree;\n\n        if (typeof config.parser === \"object\" && config.parser !== null) {\n            parserName = config.parser.filePath;\n            parser = config.parser.definition;\n        } else if (typeof config.parser === \"string\") {\n            if (!slots.parserMap.has(config.parser)) {\n                return [{\n                    ruleId: null,\n                    fatal: true,\n                    severity: 2,\n                    message: `Configured parser '${config.parser}' was not found.`,\n                    line: 0,\n                    column: 0\n                }];\n            }\n            parserName = config.parser;\n            parser = slots.parserMap.get(config.parser);\n        }\n\n        // search and apply \"eslint-env *\".\n        const envInFile = options.allowInlineConfig && !options.warnInlineConfig\n            ? findEslintEnv(text)\n            : {};\n        const resolvedEnvConfig = Object.assign({ builtin: true }, config.env, envInFile);\n        const enabledEnvs = Object.keys(resolvedEnvConfig)\n            .filter(envName => resolvedEnvConfig[envName])\n            .map(envName => getEnv(slots, envName))\n            .filter(env => env);\n\n        const parserOptions = resolveParserOptions(parser, config.parserOptions || {}, enabledEnvs);\n        const configuredGlobals = resolveGlobals(config.globals || {}, enabledEnvs);\n        const settings = config.settings || {};\n\n        if (!slots.lastSourceCode) {\n            const parseResult = parse(\n                text,\n                parser,\n                parserOptions,\n                options.filename\n            );\n\n            if (!parseResult.success) {\n                return [parseResult.error];\n            }\n\n            slots.lastSourceCode = parseResult.sourceCode;\n        } else {\n\n            /*\n             * If the given source code object as the first argument does not have scopeManager, analyze the scope.\n             * This is for backward compatibility (SourceCode is frozen so it cannot rebind).\n             */\n            if (!slots.lastSourceCode.scopeManager) {\n                slots.lastSourceCode = new SourceCode({\n                    text: slots.lastSourceCode.text,\n                    ast: slots.lastSourceCode.ast,\n                    parserServices: slots.lastSourceCode.parserServices,\n                    visitorKeys: slots.lastSourceCode.visitorKeys,\n                    scopeManager: analyzeScope(slots.lastSourceCode.ast, parserOptions)\n                });\n            }\n        }\n\n        const sourceCode = slots.lastSourceCode;\n        const commentDirectives = options.allowInlineConfig\n            ? getDirectiveComments(options.filename, sourceCode.ast, ruleId => getRule(slots, ruleId), options.warnInlineConfig)\n            : { configuredRules: {}, enabledGlobals: {}, exportedVariables: {}, problems: [], disableDirectives: [] };\n\n        // augment global scope with declared global variables\n        addDeclaredGlobals(\n            sourceCode.scopeManager.scopes[0],\n            configuredGlobals,\n            { exportedVariables: commentDirectives.exportedVariables, enabledGlobals: commentDirectives.enabledGlobals }\n        );\n\n        const configuredRules = Object.assign({}, config.rules, commentDirectives.configuredRules);\n\n        let lintingProblems;\n\n        try {\n            lintingProblems = runRules(\n                sourceCode,\n                configuredRules,\n                ruleId => getRule(slots, ruleId),\n                parserOptions,\n                parserName,\n                settings,\n                options.filename,\n                options.disableFixes,\n                slots.cwd,\n                providedOptions.physicalFilename\n            );\n        } catch (err) {\n            err.message += `\\nOccurred while linting ${options.filename}`;\n            debug(\"An error occurred while traversing\");\n            debug(\"Filename:\", options.filename);\n            if (err.currentNode) {\n                const { line } = err.currentNode.loc.start;\n\n                debug(\"Line:\", line);\n                err.message += `:${line}`;\n            }\n            debug(\"Parser Options:\", parserOptions);\n            debug(\"Parser Path:\", parserName);\n            debug(\"Settings:\", settings);\n            throw err;\n        }\n\n        return applyDisableDirectives({\n            directives: commentDirectives.disableDirectives,\n            problems: lintingProblems\n                .concat(commentDirectives.problems)\n                .sort((problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column),\n            reportUnusedDisableDirectives: options.reportUnusedDisableDirectives\n        });\n    }\n\n    /**\n     * Verifies the text against the rules specified by the second argument.\n     * @param {string|SourceCode} textOrSourceCode The text to parse or a SourceCode object.\n     * @param {ConfigData|ConfigArray} config An ESLintConfig instance to configure everything.\n     * @param {(string|(VerifyOptions&ProcessorOptions))} [filenameOrOptions] The optional filename of the file being checked.\n     *      If this is not set, the filename will default to '<input>' in the rule context. If\n     *      an object, then it has \"filename\", \"allowInlineConfig\", and some properties.\n     * @returns {LintMessage[]} The results as an array of messages or an empty array if no messages.\n     */\n    verify(textOrSourceCode, config, filenameOrOptions) {\n        debug(\"Verify\");\n        const options = typeof filenameOrOptions === \"string\"\n            ? { filename: filenameOrOptions }\n            : filenameOrOptions || {};\n\n        // CLIEngine passes a `ConfigArray` object.\n        if (config && typeof config.extractConfig === \"function\") {\n            return this._verifyWithConfigArray(textOrSourceCode, config, options);\n        }\n\n        /*\n         * `Linter` doesn't support `overrides` property in configuration.\n         * So we cannot apply multiple processors.\n         */\n        if (options.preprocess || options.postprocess) {\n            return this._verifyWithProcessor(textOrSourceCode, config, options);\n        }\n        return this._verifyWithoutProcessors(textOrSourceCode, config, options);\n    }\n\n    /**\n     * Verify a given code with `ConfigArray`.\n     * @param {string|SourceCode} textOrSourceCode The source code.\n     * @param {ConfigArray} configArray The config array.\n     * @param {VerifyOptions&ProcessorOptions} options The options.\n     * @returns {LintMessage[]} The found problems.\n     */\n    _verifyWithConfigArray(textOrSourceCode, configArray, options) {\n        debug(\"With ConfigArray: %s\", options.filename);\n\n        // Store the config array in order to get plugin envs and rules later.\n        internalSlotsMap.get(this).lastConfigArray = configArray;\n\n        // Extract the final config for this file.\n        const config = configArray.extractConfig(options.filename);\n        const processor =\n            config.processor &&\n            configArray.pluginProcessors.get(config.processor);\n\n        // Verify.\n        if (processor) {\n            debug(\"Apply the processor: %o\", config.processor);\n            const { preprocess, postprocess, supportsAutofix } = processor;\n            const disableFixes = options.disableFixes || !supportsAutofix;\n\n            return this._verifyWithProcessor(\n                textOrSourceCode,\n                config,\n                { ...options, disableFixes, postprocess, preprocess },\n                configArray\n            );\n        }\n        return this._verifyWithoutProcessors(textOrSourceCode, config, options);\n    }\n\n    /**\n     * Verify with a processor.\n     * @param {string|SourceCode} textOrSourceCode The source code.\n     * @param {ConfigData|ExtractedConfig} config The config array.\n     * @param {VerifyOptions&ProcessorOptions} options The options.\n     * @param {ConfigArray} [configForRecursive] The `ConfigArray` object to apply multiple processors recursively.\n     * @returns {LintMessage[]} The found problems.\n     */\n    _verifyWithProcessor(textOrSourceCode, config, options, configForRecursive) {\n        const filename = options.filename || \"<input>\";\n        const filenameToExpose = normalizeFilename(filename);\n        const physicalFilename = options.physicalFilename || filenameToExpose;\n        const text = ensureText(textOrSourceCode);\n        const preprocess = options.preprocess || (rawText => [rawText]);\n\n        // TODO(stephenwade): Replace this with array.flat() when we drop support for Node v10\n        const postprocess = options.postprocess || (array => [].concat(...array));\n        const filterCodeBlock =\n            options.filterCodeBlock ||\n            (blockFilename => blockFilename.endsWith(\".js\"));\n        const originalExtname = path.extname(filename);\n        const messageLists = preprocess(text, filenameToExpose).map((block, i) => {\n            debug(\"A code block was found: %o\", block.filename || \"(unnamed)\");\n\n            // Keep the legacy behavior.\n            if (typeof block === \"string\") {\n                return this._verifyWithoutProcessors(block, config, options);\n            }\n\n            const blockText = block.text;\n            const blockName = path.join(filename, `${i}_${block.filename}`);\n\n            // Skip this block if filtered.\n            if (!filterCodeBlock(blockName, blockText)) {\n                debug(\"This code block was skipped.\");\n                return [];\n            }\n\n            // Resolve configuration again if the file content or extension was changed.\n            if (configForRecursive && (text !== blockText || path.extname(blockName) !== originalExtname)) {\n                debug(\"Resolving configuration again because the file content or extension was changed.\");\n                return this._verifyWithConfigArray(\n                    blockText,\n                    configForRecursive,\n                    { ...options, filename: blockName, physicalFilename }\n                );\n            }\n\n            // Does lint.\n            return this._verifyWithoutProcessors(\n                blockText,\n                config,\n                { ...options, filename: blockName, physicalFilename }\n            );\n        });\n\n        return postprocess(messageLists, filenameToExpose);\n    }\n\n    /**\n     * Gets the SourceCode object representing the parsed source.\n     * @returns {SourceCode} The SourceCode object.\n     */\n    getSourceCode() {\n        return internalSlotsMap.get(this).lastSourceCode;\n    }\n\n    /**\n     * Defines a new linting rule.\n     * @param {string} ruleId A unique rule identifier\n     * @param {Function | Rule} ruleModule Function from context to object mapping AST node types to event handlers\n     * @returns {void}\n     */\n    defineRule(ruleId, ruleModule) {\n        internalSlotsMap.get(this).ruleMap.define(ruleId, ruleModule);\n    }\n\n    /**\n     * Defines many new linting rules.\n     * @param {Record<string, Function | Rule>} rulesToDefine map from unique rule identifier to rule\n     * @returns {void}\n     */\n    defineRules(rulesToDefine) {\n        Object.getOwnPropertyNames(rulesToDefine).forEach(ruleId => {\n            this.defineRule(ruleId, rulesToDefine[ruleId]);\n        });\n    }\n\n    /**\n     * Gets an object with all loaded rules.\n     * @returns {Map<string, Rule>} All loaded rules\n     */\n    getRules() {\n        const { lastConfigArray, ruleMap } = internalSlotsMap.get(this);\n\n        return new Map(function *() {\n            yield* ruleMap;\n\n            if (lastConfigArray) {\n                yield* lastConfigArray.pluginRules;\n            }\n        }());\n    }\n\n    /**\n     * Define a new parser module\n     * @param {string} parserId Name of the parser\n     * @param {Parser} parserModule The parser object\n     * @returns {void}\n     */\n    defineParser(parserId, parserModule) {\n        internalSlotsMap.get(this).parserMap.set(parserId, parserModule);\n    }\n\n    /**\n     * Performs multiple autofix passes over the text until as many fixes as possible\n     * have been applied.\n     * @param {string} text The source text to apply fixes to.\n     * @param {ConfigData|ConfigArray} config The ESLint config object to use.\n     * @param {VerifyOptions&ProcessorOptions&FixOptions} options The ESLint options object to use.\n     * @returns {{fixed:boolean,messages:LintMessage[],output:string}} The result of the fix operation as returned from the\n     *      SourceCodeFixer.\n     */\n    verifyAndFix(text, config, options) {\n        let messages = [],\n            fixedResult,\n            fixed = false,\n            passNumber = 0,\n            currentText = text;\n        const debugTextDescription = options && options.filename || `${text.slice(0, 10)}...`;\n        const shouldFix = options && typeof options.fix !== \"undefined\" ? options.fix : true;\n\n        /**\n         * This loop continues until one of the following is true:\n         *\n         * 1. No more fixes have been applied.\n         * 2. Ten passes have been made.\n         *\n         * That means anytime a fix is successfully applied, there will be another pass.\n         * Essentially, guaranteeing a minimum of two passes.\n         */\n        do {\n            passNumber++;\n\n            debug(`Linting code for ${debugTextDescription} (pass ${passNumber})`);\n            messages = this.verify(currentText, config, options);\n\n            debug(`Generating fixed text for ${debugTextDescription} (pass ${passNumber})`);\n            fixedResult = SourceCodeFixer.applyFixes(currentText, messages, shouldFix);\n\n            /*\n             * stop if there are any syntax errors.\n             * 'fixedResult.output' is a empty string.\n             */\n            if (messages.length === 1 && messages[0].fatal) {\n                break;\n            }\n\n            // keep track if any fixes were ever applied - important for return value\n            fixed = fixed || fixedResult.fixed;\n\n            // update to use the fixed output instead of the original text\n            currentText = fixedResult.output;\n\n        } while (\n            fixedResult.fixed &&\n            passNumber < MAX_AUTOFIX_PASSES\n        );\n\n        /*\n         * If the last result had fixes, we need to lint again to be sure we have\n         * the most up-to-date information.\n         */\n        if (fixedResult.fixed) {\n            fixedResult.messages = this.verify(currentText, config, options);\n        }\n\n        // ensure the last result properly reflects if fixes were done\n        fixedResult.fixed = fixed;\n        fixedResult.output = currentText;\n\n        return fixedResult;\n    }\n}\n\nmodule.exports = {\n    Linter,\n\n    /**\n     * Get the internal slots of a given Linter instance for tests.\n     * @param {Linter} instance The Linter instance to get.\n     * @returns {LinterInternalSlots} The internal slots.\n     */\n    getLinterInternalSlots(instance) {\n        return internalSlotsMap.get(instance);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}