{"ast":null,"code":"/**\n * @fileoverview Rule to flag consistent return values\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given code path segment is unreachable.\n * @param {CodePathSegment} segment A CodePathSegment to check.\n * @returns {boolean} `true` if the segment is unreachable.\n */\nfunction isUnreachable(segment) {\n  return !segment.reachable;\n}\n\n/**\n * Checks whether a given node is a `constructor` method in an ES6 class\n * @param {ASTNode} node A node to check\n * @returns {boolean} `true` if the node is a `constructor` method\n */\nfunction isClassConstructor(node) {\n  return node.type === \"FunctionExpression\" && node.parent && node.parent.type === \"MethodDefinition\" && node.parent.kind === \"constructor\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `return` statements to either always or never specify values\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/consistent-return\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        treatUndefinedAsUnspecified: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingReturn: \"Expected to return a value at the end of {{name}}.\",\n      missingReturnValue: \"{{name}} expected a return value.\",\n      unexpectedReturnValue: \"{{name}} expected no return value.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {};\n    const treatUndefinedAsUnspecified = options.treatUndefinedAsUnspecified === true;\n    let funcInfo = null;\n\n    /**\n     * Checks whether of not the implicit returning is consistent if the last\n     * code path segment is reachable.\n     * @param {ASTNode} node A program/function node to check.\n     * @returns {void}\n     */\n    function checkLastSegment(node) {\n      let loc, name;\n\n      /*\n       * Skip if it expected no return value or unreachable.\n       * When unreachable, all paths are returned or thrown.\n       */\n      if (!funcInfo.hasReturnValue || funcInfo.codePath.currentSegments.every(isUnreachable) || astUtils.isES5Constructor(node) || isClassConstructor(node)) {\n        return;\n      }\n\n      // Adjust a location and a message.\n      if (node.type === \"Program\") {\n        // The head of program.\n        loc = {\n          line: 1,\n          column: 0\n        };\n        name = \"program\";\n      } else if (node.type === \"ArrowFunctionExpression\") {\n        // `=>` token\n        loc = context.getSourceCode().getTokenBefore(node.body, astUtils.isArrowToken).loc;\n      } else if (node.parent.type === \"MethodDefinition\" || node.parent.type === \"Property\" && node.parent.method) {\n        // Method name.\n        loc = node.parent.key.loc;\n      } else {\n        // Function name or `function` keyword.\n        loc = (node.id || context.getSourceCode().getFirstToken(node)).loc;\n      }\n      if (!name) {\n        name = astUtils.getFunctionNameWithKind(node);\n      }\n\n      // Reports.\n      context.report({\n        node,\n        loc,\n        messageId: \"missingReturn\",\n        data: {\n          name\n        }\n      });\n    }\n    return {\n      // Initializes/Disposes state of each code path.\n      onCodePathStart(codePath, node) {\n        funcInfo = {\n          upper: funcInfo,\n          codePath,\n          hasReturn: false,\n          hasReturnValue: false,\n          messageId: \"\",\n          node\n        };\n      },\n      onCodePathEnd() {\n        funcInfo = funcInfo.upper;\n      },\n      // Reports a given return statement if it's inconsistent.\n      ReturnStatement(node) {\n        const argument = node.argument;\n        let hasReturnValue = Boolean(argument);\n        if (treatUndefinedAsUnspecified && hasReturnValue) {\n          hasReturnValue = !astUtils.isSpecificId(argument, \"undefined\") && argument.operator !== \"void\";\n        }\n        if (!funcInfo.hasReturn) {\n          funcInfo.hasReturn = true;\n          funcInfo.hasReturnValue = hasReturnValue;\n          funcInfo.messageId = hasReturnValue ? \"missingReturnValue\" : \"unexpectedReturnValue\";\n          funcInfo.data = {\n            name: funcInfo.node.type === \"Program\" ? \"Program\" : upperCaseFirst(astUtils.getFunctionNameWithKind(funcInfo.node))\n          };\n        } else if (funcInfo.hasReturnValue !== hasReturnValue) {\n          context.report({\n            node,\n            messageId: funcInfo.messageId,\n            data: funcInfo.data\n          });\n        }\n      },\n      // Reports a given program/function if the implicit returning is not consistent.\n      \"Program:exit\": checkLastSegment,\n      \"FunctionDeclaration:exit\": checkLastSegment,\n      \"FunctionExpression:exit\": checkLastSegment,\n      \"ArrowFunctionExpression:exit\": checkLastSegment\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","upperCaseFirst","isUnreachable","segment","reachable","isClassConstructor","node","type","parent","kind","module","exports","meta","docs","description","category","recommended","url","schema","properties","treatUndefinedAsUnspecified","default","additionalProperties","messages","missingReturn","missingReturnValue","unexpectedReturnValue","create","context","options","funcInfo","checkLastSegment","loc","name","hasReturnValue","codePath","currentSegments","every","isES5Constructor","line","column","getSourceCode","getTokenBefore","body","isArrowToken","method","key","id","getFirstToken","getFunctionNameWithKind","report","messageId","data","onCodePathStart","upper","hasReturn","onCodePathEnd","ReturnStatement","argument","Boolean","isSpecificId","operator"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/consistent-return.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag consistent return values\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given code path segment is unreachable.\n * @param {CodePathSegment} segment A CodePathSegment to check.\n * @returns {boolean} `true` if the segment is unreachable.\n */\nfunction isUnreachable(segment) {\n    return !segment.reachable;\n}\n\n/**\n * Checks whether a given node is a `constructor` method in an ES6 class\n * @param {ASTNode} node A node to check\n * @returns {boolean} `true` if the node is a `constructor` method\n */\nfunction isClassConstructor(node) {\n    return node.type === \"FunctionExpression\" &&\n        node.parent &&\n        node.parent.type === \"MethodDefinition\" &&\n        node.parent.kind === \"constructor\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `return` statements to either always or never specify values\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/consistent-return\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                treatUndefinedAsUnspecified: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingReturn: \"Expected to return a value at the end of {{name}}.\",\n            missingReturnValue: \"{{name}} expected a return value.\",\n            unexpectedReturnValue: \"{{name}} expected no return value.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const treatUndefinedAsUnspecified = options.treatUndefinedAsUnspecified === true;\n        let funcInfo = null;\n\n        /**\n         * Checks whether of not the implicit returning is consistent if the last\n         * code path segment is reachable.\n         * @param {ASTNode} node A program/function node to check.\n         * @returns {void}\n         */\n        function checkLastSegment(node) {\n            let loc, name;\n\n            /*\n             * Skip if it expected no return value or unreachable.\n             * When unreachable, all paths are returned or thrown.\n             */\n            if (!funcInfo.hasReturnValue ||\n                funcInfo.codePath.currentSegments.every(isUnreachable) ||\n                astUtils.isES5Constructor(node) ||\n                isClassConstructor(node)\n            ) {\n                return;\n            }\n\n            // Adjust a location and a message.\n            if (node.type === \"Program\") {\n\n                // The head of program.\n                loc = { line: 1, column: 0 };\n                name = \"program\";\n            } else if (node.type === \"ArrowFunctionExpression\") {\n\n                // `=>` token\n                loc = context.getSourceCode().getTokenBefore(node.body, astUtils.isArrowToken).loc;\n            } else if (\n                node.parent.type === \"MethodDefinition\" ||\n                (node.parent.type === \"Property\" && node.parent.method)\n            ) {\n\n                // Method name.\n                loc = node.parent.key.loc;\n            } else {\n\n                // Function name or `function` keyword.\n                loc = (node.id || context.getSourceCode().getFirstToken(node)).loc;\n            }\n\n            if (!name) {\n                name = astUtils.getFunctionNameWithKind(node);\n            }\n\n            // Reports.\n            context.report({\n                node,\n                loc,\n                messageId: \"missingReturn\",\n                data: { name }\n            });\n        }\n\n        return {\n\n            // Initializes/Disposes state of each code path.\n            onCodePathStart(codePath, node) {\n                funcInfo = {\n                    upper: funcInfo,\n                    codePath,\n                    hasReturn: false,\n                    hasReturnValue: false,\n                    messageId: \"\",\n                    node\n                };\n            },\n            onCodePathEnd() {\n                funcInfo = funcInfo.upper;\n            },\n\n            // Reports a given return statement if it's inconsistent.\n            ReturnStatement(node) {\n                const argument = node.argument;\n                let hasReturnValue = Boolean(argument);\n\n                if (treatUndefinedAsUnspecified && hasReturnValue) {\n                    hasReturnValue = !astUtils.isSpecificId(argument, \"undefined\") && argument.operator !== \"void\";\n                }\n\n                if (!funcInfo.hasReturn) {\n                    funcInfo.hasReturn = true;\n                    funcInfo.hasReturnValue = hasReturnValue;\n                    funcInfo.messageId = hasReturnValue ? \"missingReturnValue\" : \"unexpectedReturnValue\";\n                    funcInfo.data = {\n                        name: funcInfo.node.type === \"Program\"\n                            ? \"Program\"\n                            : upperCaseFirst(astUtils.getFunctionNameWithKind(funcInfo.node))\n                    };\n                } else if (funcInfo.hasReturnValue !== hasReturnValue) {\n                    context.report({\n                        node,\n                        messageId: funcInfo.messageId,\n                        data: funcInfo.data\n                    });\n                }\n            },\n\n            // Reports a given program/function if the implicit returning is not consistent.\n            \"Program:exit\": checkLastSegment,\n            \"FunctionDeclaration:exit\": checkLastSegment,\n            \"FunctionExpression:exit\": checkLastSegment,\n            \"ArrowFunctionExpression:exit\": checkLastSegment\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC7C,MAAM;EAAEC;AAAe,CAAC,GAAGD,OAAO,CAAC,wBAAwB,CAAC;;AAE5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,aAAaA,CAACC,OAAO,EAAE;EAC5B,OAAO,CAACA,OAAO,CAACC,SAAS;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAC9B,OAAOA,IAAI,CAACC,IAAI,KAAK,oBAAoB,IACrCD,IAAI,CAACE,MAAM,IACXF,IAAI,CAACE,MAAM,CAACD,IAAI,KAAK,kBAAkB,IACvCD,IAAI,CAACE,MAAM,CAACC,IAAI,KAAK,aAAa;AAC1C;;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFL,IAAI,EAAE,YAAY;IAElBM,IAAI,EAAE;MACFC,WAAW,EAAE,sEAAsE;MACnFC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CAAC;MACLX,IAAI,EAAE,QAAQ;MACdY,UAAU,EAAE;QACRC,2BAA2B,EAAE;UACzBb,IAAI,EAAE,SAAS;UACfc,OAAO,EAAE;QACb;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CAAC;IAEFC,QAAQ,EAAE;MACNC,aAAa,EAAE,oDAAoD;MACnEC,kBAAkB,EAAE,mCAAmC;MACvDC,qBAAqB,EAAE;IAC3B;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACxC,MAAMT,2BAA2B,GAAGS,OAAO,CAACT,2BAA2B,KAAK,IAAI;IAChF,IAAIU,QAAQ,GAAG,IAAI;;IAEnB;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,gBAAgBA,CAACzB,IAAI,EAAE;MAC5B,IAAI0B,GAAG,EAAEC,IAAI;;MAEb;AACZ;AACA;AACA;MACY,IAAI,CAACH,QAAQ,CAACI,cAAc,IACxBJ,QAAQ,CAACK,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACnC,aAAa,CAAC,IACtDH,QAAQ,CAACuC,gBAAgB,CAAChC,IAAI,CAAC,IAC/BD,kBAAkB,CAACC,IAAI,CAAC,EAC1B;QACE;MACJ;;MAEA;MACA,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS,EAAE;QAEzB;QACAyB,GAAG,GAAG;UAAEO,IAAI,EAAE,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC;QAC5BP,IAAI,GAAG,SAAS;MACpB,CAAC,MAAM,IAAI3B,IAAI,CAACC,IAAI,KAAK,yBAAyB,EAAE;QAEhD;QACAyB,GAAG,GAAGJ,OAAO,CAACa,aAAa,CAAC,CAAC,CAACC,cAAc,CAACpC,IAAI,CAACqC,IAAI,EAAE5C,QAAQ,CAAC6C,YAAY,CAAC,CAACZ,GAAG;MACtF,CAAC,MAAM,IACH1B,IAAI,CAACE,MAAM,CAACD,IAAI,KAAK,kBAAkB,IACtCD,IAAI,CAACE,MAAM,CAACD,IAAI,KAAK,UAAU,IAAID,IAAI,CAACE,MAAM,CAACqC,MAAO,EACzD;QAEE;QACAb,GAAG,GAAG1B,IAAI,CAACE,MAAM,CAACsC,GAAG,CAACd,GAAG;MAC7B,CAAC,MAAM;QAEH;QACAA,GAAG,GAAG,CAAC1B,IAAI,CAACyC,EAAE,IAAInB,OAAO,CAACa,aAAa,CAAC,CAAC,CAACO,aAAa,CAAC1C,IAAI,CAAC,EAAE0B,GAAG;MACtE;MAEA,IAAI,CAACC,IAAI,EAAE;QACPA,IAAI,GAAGlC,QAAQ,CAACkD,uBAAuB,CAAC3C,IAAI,CAAC;MACjD;;MAEA;MACAsB,OAAO,CAACsB,MAAM,CAAC;QACX5C,IAAI;QACJ0B,GAAG;QACHmB,SAAS,EAAE,eAAe;QAC1BC,IAAI,EAAE;UAAEnB;QAAK;MACjB,CAAC,CAAC;IACN;IAEA,OAAO;MAEH;MACAoB,eAAeA,CAAClB,QAAQ,EAAE7B,IAAI,EAAE;QAC5BwB,QAAQ,GAAG;UACPwB,KAAK,EAAExB,QAAQ;UACfK,QAAQ;UACRoB,SAAS,EAAE,KAAK;UAChBrB,cAAc,EAAE,KAAK;UACrBiB,SAAS,EAAE,EAAE;UACb7C;QACJ,CAAC;MACL,CAAC;MACDkD,aAAaA,CAAA,EAAG;QACZ1B,QAAQ,GAAGA,QAAQ,CAACwB,KAAK;MAC7B,CAAC;MAED;MACAG,eAAeA,CAACnD,IAAI,EAAE;QAClB,MAAMoD,QAAQ,GAAGpD,IAAI,CAACoD,QAAQ;QAC9B,IAAIxB,cAAc,GAAGyB,OAAO,CAACD,QAAQ,CAAC;QAEtC,IAAItC,2BAA2B,IAAIc,cAAc,EAAE;UAC/CA,cAAc,GAAG,CAACnC,QAAQ,CAAC6D,YAAY,CAACF,QAAQ,EAAE,WAAW,CAAC,IAAIA,QAAQ,CAACG,QAAQ,KAAK,MAAM;QAClG;QAEA,IAAI,CAAC/B,QAAQ,CAACyB,SAAS,EAAE;UACrBzB,QAAQ,CAACyB,SAAS,GAAG,IAAI;UACzBzB,QAAQ,CAACI,cAAc,GAAGA,cAAc;UACxCJ,QAAQ,CAACqB,SAAS,GAAGjB,cAAc,GAAG,oBAAoB,GAAG,uBAAuB;UACpFJ,QAAQ,CAACsB,IAAI,GAAG;YACZnB,IAAI,EAAEH,QAAQ,CAACxB,IAAI,CAACC,IAAI,KAAK,SAAS,GAChC,SAAS,GACTN,cAAc,CAACF,QAAQ,CAACkD,uBAAuB,CAACnB,QAAQ,CAACxB,IAAI,CAAC;UACxE,CAAC;QACL,CAAC,MAAM,IAAIwB,QAAQ,CAACI,cAAc,KAAKA,cAAc,EAAE;UACnDN,OAAO,CAACsB,MAAM,CAAC;YACX5C,IAAI;YACJ6C,SAAS,EAAErB,QAAQ,CAACqB,SAAS;YAC7BC,IAAI,EAAEtB,QAAQ,CAACsB;UACnB,CAAC,CAAC;QACN;MACJ,CAAC;MAED;MACA,cAAc,EAAErB,gBAAgB;MAChC,0BAA0B,EAAEA,gBAAgB;MAC5C,yBAAyB,EAAEA,gBAAgB;MAC3C,8BAA8B,EAAEA;IACpC,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}