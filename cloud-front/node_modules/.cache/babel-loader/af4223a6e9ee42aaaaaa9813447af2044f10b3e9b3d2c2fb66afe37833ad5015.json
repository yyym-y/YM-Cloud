{"ast":null,"code":"/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, while, try, switch/case,\n * @author Patrick Brosset\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum cyclomatic complexity allowed in a program\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/complexity\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n    }\n  },\n  create(context) {\n    const option = context.options[0];\n    let THRESHOLD = 20;\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      THRESHOLD = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      THRESHOLD = option;\n    }\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // Using a stack to store complexity (handling nested functions)\n    const fns = [];\n\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n    function startFunction() {\n      fns.push(1);\n    }\n\n    /**\n     * Evaluate the node at the end of function\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function endFunction(node) {\n      const name = upperCaseFirst(astUtils.getFunctionNameWithKind(node));\n      const complexity = fns.pop();\n      if (complexity > THRESHOLD) {\n        context.report({\n          node,\n          messageId: \"complex\",\n          data: {\n            name,\n            complexity,\n            max: THRESHOLD\n          }\n        });\n      }\n    }\n\n    /**\n     * Increase the complexity of the function in context\n     * @returns {void}\n     * @private\n     */\n    function increaseComplexity() {\n      if (fns.length) {\n        fns[fns.length - 1]++;\n      }\n    }\n\n    /**\n     * Increase the switch complexity in context\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function increaseSwitchComplexity(node) {\n      // Avoiding `default`\n      if (node.test) {\n        increaseComplexity();\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      FunctionDeclaration: startFunction,\n      FunctionExpression: startFunction,\n      ArrowFunctionExpression: startFunction,\n      \"FunctionDeclaration:exit\": endFunction,\n      \"FunctionExpression:exit\": endFunction,\n      \"ArrowFunctionExpression:exit\": endFunction,\n      CatchClause: increaseComplexity,\n      ConditionalExpression: increaseComplexity,\n      LogicalExpression: increaseComplexity,\n      ForStatement: increaseComplexity,\n      ForInStatement: increaseComplexity,\n      ForOfStatement: increaseComplexity,\n      IfStatement: increaseComplexity,\n      SwitchCase: increaseSwitchComplexity,\n      WhileStatement: increaseComplexity,\n      DoWhileStatement: increaseComplexity,\n      AssignmentExpression(node) {\n        if (astUtils.isLogicalAssignmentOperator(node.operator)) {\n          increaseComplexity();\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","upperCaseFirst","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","complex","create","context","option","options","THRESHOLD","Object","prototype","hasOwnProperty","call","fns","startFunction","push","endFunction","node","name","getFunctionNameWithKind","complexity","pop","report","messageId","data","increaseComplexity","length","increaseSwitchComplexity","test","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","CatchClause","ConditionalExpression","LogicalExpression","ForStatement","ForInStatement","ForOfStatement","IfStatement","SwitchCase","WhileStatement","DoWhileStatement","AssignmentExpression","isLogicalAssignmentOperator","operator"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/complexity.js"],"sourcesContent":["/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, while, try, switch/case,\n * @author Patrick Brosset\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum cyclomatic complexity allowed in a program\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/complexity\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const option = context.options[0];\n        let THRESHOLD = 20;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            THRESHOLD = option.maximum || option.max;\n        } else if (typeof option === \"number\") {\n            THRESHOLD = option;\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // Using a stack to store complexity (handling nested functions)\n        const fns = [];\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            fns.push(1);\n        }\n\n        /**\n         * Evaluate the node at the end of function\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function endFunction(node) {\n            const name = upperCaseFirst(astUtils.getFunctionNameWithKind(node));\n            const complexity = fns.pop();\n\n            if (complexity > THRESHOLD) {\n                context.report({\n                    node,\n                    messageId: \"complex\",\n                    data: { name, complexity, max: THRESHOLD }\n                });\n            }\n        }\n\n        /**\n         * Increase the complexity of the function in context\n         * @returns {void}\n         * @private\n         */\n        function increaseComplexity() {\n            if (fns.length) {\n                fns[fns.length - 1]++;\n            }\n        }\n\n        /**\n         * Increase the switch complexity in context\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function increaseSwitchComplexity(node) {\n\n            // Avoiding `default`\n            if (node.test) {\n                increaseComplexity();\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n\n            CatchClause: increaseComplexity,\n            ConditionalExpression: increaseComplexity,\n            LogicalExpression: increaseComplexity,\n            ForStatement: increaseComplexity,\n            ForInStatement: increaseComplexity,\n            ForOfStatement: increaseComplexity,\n            IfStatement: increaseComplexity,\n            SwitchCase: increaseSwitchComplexity,\n            WhileStatement: increaseComplexity,\n            DoWhileStatement: increaseComplexity,\n\n            AssignmentExpression(node) {\n                if (astUtils.isLogicalAssignmentOperator(node.operator)) {\n                    increaseComplexity();\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}