{"ast":null,"code":"/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst validParent = new Set([\"Program\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow variable or `function` declarations in nested blocks\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-inner-declarations\"\n    },\n    schema: [{\n      enum: [\"functions\", \"both\"]\n    }],\n    messages: {\n      moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n    }\n  },\n  create(context) {\n    /**\n     * Ensure that a given node is at a program or function body's root.\n     * @param {ASTNode} node Declaration node to check.\n     * @returns {void}\n     */\n    function check(node) {\n      const parent = node.parent;\n      if (parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)) {\n        return;\n      }\n      if (validParent.has(parent.type)) {\n        return;\n      }\n      const upperFunction = astUtils.getUpperFunction(parent);\n      context.report({\n        node,\n        messageId: \"moveDeclToRoot\",\n        data: {\n          type: node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\",\n          body: upperFunction === null ? \"program\" : \"function body\"\n        }\n      });\n    }\n    return {\n      FunctionDeclaration: check,\n      VariableDeclaration(node) {\n        if (context.options[0] === \"both\" && node.kind === \"var\") {\n          check(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","validParent","Set","validBlockStatementParent","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","messages","moveDeclToRoot","create","context","check","node","parent","has","upperFunction","getUpperFunction","report","messageId","data","body","FunctionDeclaration","VariableDeclaration","options","kind"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-inner-declarations.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst validParent = new Set([\"Program\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow variable or `function` declarations in nested blocks\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-inner-declarations\"\n        },\n\n        schema: [\n            {\n                enum: [\"functions\", \"both\"]\n            }\n        ],\n\n        messages: {\n            moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Ensure that a given node is at a program or function body's root.\n         * @param {ASTNode} node Declaration node to check.\n         * @returns {void}\n         */\n        function check(node) {\n            const parent = node.parent;\n\n            if (\n                parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)\n            ) {\n                return;\n            }\n\n            if (validParent.has(parent.type)) {\n                return;\n            }\n\n            const upperFunction = astUtils.getUpperFunction(parent);\n\n            context.report({\n                node,\n                messageId: \"moveDeclToRoot\",\n                data: {\n                    type: (node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\"),\n                    body: (upperFunction === null ? \"program\" : \"function body\")\n                }\n            });\n        }\n\n\n        return {\n\n            FunctionDeclaration: check,\n            VariableDeclaration(node) {\n                if (context.options[0] === \"both\" && node.kind === \"var\") {\n                    check(node);\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC,SAAS,EAAE,wBAAwB,EAAE,0BAA0B,CAAC,CAAC;AAC9F,MAAMC,yBAAyB,GAAG,IAAID,GAAG,CAAC,CAAC,qBAAqB,EAAE,oBAAoB,EAAE,yBAAyB,CAAC,CAAC;AAEnHE,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,+DAA+D;MAC5EC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,WAAW,EAAE,MAAM;IAC9B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,cAAc,EAAE;IACpB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,KAAKA,CAACC,IAAI,EAAE;MACjB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;MAE1B,IACIA,MAAM,CAACd,IAAI,KAAK,gBAAgB,IAAIJ,yBAAyB,CAACmB,GAAG,CAACD,MAAM,CAACA,MAAM,CAACd,IAAI,CAAC,EACvF;QACE;MACJ;MAEA,IAAIN,WAAW,CAACqB,GAAG,CAACD,MAAM,CAACd,IAAI,CAAC,EAAE;QAC9B;MACJ;MAEA,MAAMgB,aAAa,GAAGxB,QAAQ,CAACyB,gBAAgB,CAACH,MAAM,CAAC;MAEvDH,OAAO,CAACO,MAAM,CAAC;QACXL,IAAI;QACJM,SAAS,EAAE,gBAAgB;QAC3BC,IAAI,EAAE;UACFpB,IAAI,EAAGa,IAAI,CAACb,IAAI,KAAK,qBAAqB,GAAG,UAAU,GAAG,UAAW;UACrEqB,IAAI,EAAGL,aAAa,KAAK,IAAI,GAAG,SAAS,GAAG;QAChD;MACJ,CAAC,CAAC;IACN;IAGA,OAAO;MAEHM,mBAAmB,EAAEV,KAAK;MAC1BW,mBAAmBA,CAACV,IAAI,EAAE;QACtB,IAAIF,OAAO,CAACa,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIX,IAAI,CAACY,IAAI,KAAK,KAAK,EAAE;UACtDb,KAAK,CAACC,IAAI,CAAC;QACf;MACJ;IAEJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}