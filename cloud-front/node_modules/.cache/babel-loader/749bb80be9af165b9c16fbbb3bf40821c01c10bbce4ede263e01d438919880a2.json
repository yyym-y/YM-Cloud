{"ast":null,"code":"/*! @author Toru Nagashima <https://github.com/mysticatea> */\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.regexp.flags.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar ast = /*#__PURE__*/Object.freeze({});\nlet largeIdStartRanges = undefined;\nlet largeIdContinueRanges = undefined;\nfunction isIdStart(cp) {\n  if (cp < 0x41) return false;\n  if (cp < 0x5b) return true;\n  if (cp < 0x61) return false;\n  if (cp < 0x7b) return true;\n  return isLargeIdStart(cp);\n}\nfunction isIdContinue(cp) {\n  if (cp < 0x30) return false;\n  if (cp < 0x3a) return true;\n  if (cp < 0x41) return false;\n  if (cp < 0x5b) return true;\n  if (cp === 0x5f) return true;\n  if (cp < 0x61) return false;\n  if (cp < 0x7b) return true;\n  return isLargeIdStart(cp) || isLargeIdContinue(cp);\n}\nfunction isLargeIdStart(cp) {\n  return isInRange(cp, largeIdStartRanges || (largeIdStartRanges = initLargeIdStartRanges()));\n}\nfunction isLargeIdContinue(cp) {\n  return isInRange(cp, largeIdContinueRanges || (largeIdContinueRanges = initLargeIdContinueRanges()));\n}\nfunction initLargeIdStartRanges() {\n  return restoreRanges(\"4q 0 b 0 5 0 6 m 2 u 2 cp 5 b f 4 8 0 2 0 3m 4 2 1 3 3 2 0 7 0 2 2 2 0 2 j 2 2a 2 3u 9 4l 2 11 3 0 7 14 20 q 5 3 1a 16 10 1 2 2q 2 0 g 1 8 1 b 2 3 0 h 0 2 t u 2g c 0 p w a 1 5 0 6 l 5 0 a 0 4 0 o o 8 a 1i k 2 h 1p 1h 4 0 j 0 8 9 g f 5 7 3 1 3 l 2 6 2 0 4 3 4 0 h 0 e 1 2 2 f 1 b 0 9 5 5 1 3 l 2 6 2 1 2 1 2 1 w 3 2 0 k 2 h 8 2 2 2 l 2 6 2 1 2 4 4 0 j 0 g 1 o 0 c 7 3 1 3 l 2 6 2 1 2 4 4 0 v 1 2 2 g 0 i 0 2 5 4 2 2 3 4 1 2 0 2 1 4 1 4 2 4 b n 0 1h 7 2 2 2 m 2 f 4 0 r 2 6 1 v 0 5 7 2 2 2 m 2 9 2 4 4 0 x 0 2 1 g 1 i 8 2 2 2 14 3 0 h 0 6 2 9 2 p 5 6 h 4 n 2 8 2 0 3 6 1n 1b 2 1 d 6 1n 1 2 0 2 4 2 n 2 0 2 9 2 1 a 0 3 4 2 0 m 3 x 0 1s 7 2 z s 4 38 16 l 0 h 5 5 3 4 0 4 1 8 2 5 c d 0 i 11 2 0 6 0 3 16 2 98 2 3 3 6 2 0 2 3 3 14 2 3 3 w 2 3 3 6 2 0 2 3 3 e 2 1k 2 3 3 1u 12 f h 2d 3 5 4 h7 3 g 2 p 6 22 4 a 8 c 2 3 f h f h f c 2 2 g 1f 10 0 5 0 1w 2g 8 14 2 0 6 1x b u 1e t 3 4 c 17 5 p 1j m a 1g 2b 0 2m 1a i 6 1k t e 1 b 17 r z 16 2 b z 3 8 8 16 3 2 16 3 2 5 2 1 4 0 6 5b 1t 7p 3 5 3 11 3 5 3 7 2 0 2 0 2 0 2 u 3 1g 2 6 2 0 4 2 2 6 4 3 3 5 5 c 6 2 2 6 39 0 e 0 h c 2u 0 5 0 3 9 2 0 3 5 7 0 2 0 2 0 2 f 3 3 6 4 5 0 i 14 22g 1a 2 1a 2 3o 7 3 4 1 d 11 2 0 6 0 3 1j 8 0 h m a 6 2 6 2 6 2 6 2 6 2 6 2 6 2 6 fb 2 q 8 8 4 3 4 5 2d 5 4 2 2h 2 3 6 16 2 2l i v 1d f e9 533 1t g70 4 wc 1w 19 3 7g 4 f b 1 l 1a h u 3 27 14 8 3 2u 3 1g 3 8 17 c 2 2 2 3 2 m u 1f f 1d 1r 5 4 0 2 1 c r b m q s 8 1a t 0 h 4 2 9 b 4 2 14 o 2 2 7 l m 4 0 4 1d 2 0 4 1 3 4 3 0 2 0 p 2 3 a 8 2 d 5 3 5 3 5 a 6 2 6 2 16 2 d 7 36 u 8mb d m 5 1c 6it a5 3 2x 13 6 d 4 6 0 2 9 2 c 2 4 2 0 2 1 2 1 2 2z y a2 j 1r 3 1h 15 b 39 4 2 3q 11 p 7 p c 2g 4 5 3 5 3 5 3 2 10 b 2 p 2 i 2 1 2 e 3 d z 3e 1y 1g 7g s 4 1c 1c v e t 6 11 b t 3 z 5 7 2 4 17 4d j z 5 z 5 13 9 1f 4d 8m a l b 7 49 5 3 0 2 17 2 1 4 0 3 m b m a u 1u i 2 1 b l b p 1z 1j 7 1 1t 0 g 3 2 2 2 s 17 s 4 s 10 7 2 r s 1h b l b i e h 33 20 1k 1e e 1e e z 9p 15 7 1 27 s b 0 9 l 2z k s m d 1g 24 18 x o r z u 0 3 0 9 y 4 0 d 1b f 3 m 0 2 0 10 h 2 o 2d 6 2 0 2 3 2 e 2 9 8 1a 13 7 3 1 3 l 2 6 2 1 2 4 4 0 j 0 d 4 4f 1g j 3 l 2 v 1b l 1 2 0 55 1a 16 3 11 1b l 0 1o 16 e 0 20 q 6e 17 39 1r w 7 3 0 3 7 2 1 2 n g 0 2 0 2n 7 3 12 h 0 2 0 t 0 b 13 8 0 m 0 c 19 k 0 z 1k 7c 8 2 10 i 0 1e t 35 6 2 1 2 11 m 0 q 5 2 1 2 v f 0 94 i 5a 0 28 pl 2v 32 i 5f 24d tq 34i g6 6nu fs 8 u 36 t j 1b h 3 w k 6 i j5 1r 3l 22 6 0 1v c 1t 1 2 0 t 4qf 9 yd 17 8 6wo 7y 1e 2 i 3 9 az 1s5 2y 6 c 4 8 8 9 4mf 2c 2 1y 2 1 3 0 3 1 3 3 2 b 2 0 2 6 2 1s 2 3 3 7 2 6 2 r 2 3 2 4 2 0 4 6 2 9f 3 o 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 7 1th 18 b 6 h 0 aa 17 105 5g 1o 1v 8 0 xh 3 2 q 2 1 2 0 3 0 2 9 2 3 2 0 2 0 7 0 5 0 2 0 2 0 2 2 2 1 2 0 3 0 2 0 2 0 2 0 2 0 2 1 2 0 3 3 2 6 2 3 2 3 2 0 2 9 2 g 6 2 2 4 2 g 3et wyl z 378 c 65 3 4g1 f 5rk 2e8 f1 15v 3t6\");\n}\nfunction initLargeIdContinueRanges() {\n  return restoreRanges(\"53 0 g9 33 o 0 70 4 7e 18 2 0 2 1 2 1 2 0 21 a 1d u 7 0 2u 6 3 5 3 1 2 3 3 9 o 0 v q 2k a g 9 y 8 a 0 p 3 2 8 2 2 2 4 18 2 3c e 2 w 1j 2 2 h 2 6 b 1 3 9 i 2 1l 0 2 6 3 1 3 2 a 0 b 1 3 9 f 0 3 2 1l 0 2 4 5 1 3 2 4 0 l b 4 0 c 2 1l 0 2 7 2 2 2 2 l 1 3 9 b 5 2 2 1l 0 2 6 3 1 3 2 8 2 b 1 3 9 j 0 1o 4 4 2 2 3 a 0 f 9 h 4 1m 6 2 2 2 3 8 1 c 1 3 9 i 2 1l 0 2 6 2 2 2 3 8 1 c 1 3 9 h 3 1k 1 2 6 2 2 2 3 a 0 b 1 3 9 i 2 1z 0 5 5 2 0 2 7 7 9 3 1 1q 0 3 6 d 7 2 9 2g 0 3 8 c 5 3 9 1r 1 7 9 c 0 2 0 2 0 5 1 1e j 2 1 6 a 2 z a 0 2t j 2 9 d 3 5 2 2 2 3 6 4 3 e b 2 e jk 2 a 8 pt 2 u 2 u 1 v 1 1t v a 0 3 9 y 2 3 9 40 0 3b b 5 b b 9 3l a 1p 4 1m 9 2 s 3 a 7 9 n d 2 1 1s 4 1c g c 9 i 8 d 2 v c 3 9 19 d 1d j 9 9 7 9 3b 2 2 k 5 0 7 0 3 2 5j 1l 2 4 g0 1 k 0 3g c 5 0 4 b 2db 2 3y 0 2p v ff 5 2y 1 n7q 9 1y 0 5 9 x 1 29 1 7l 0 4 0 5 0 o 4 5 0 2c 1 1f h b 9 7 h e a t 7 q c 19 3 1c d g 9 c 0 b 9 1c d d 0 9 1 3 9 y 2 1f 0 2 2 3 1 6 1 2 0 16 4 6 1 6l 7 2 1 3 9 fmt 0 ki f h f 4 1 p 2 5d 9 12 0 ji 0 6b 0 46 4 86 9 120 2 2 1 6 3 15 2 5 0 4m 1 fy 3 9 9 aa 1 4a a 4w 2 1i e w 9 g 3 1a a 1i 9 7 2 11 d 2 9 6 1 19 0 d 2 1d d 9 3 2 b 2b b 7 0 4h b 6 9 7 3 1k 1 2 6 3 1 3 2 a 0 b 1 3 6 4 4 5d h a 9 5 0 2a j d 9 5y 6 3 8 s 1 2b g g 9 2a c 9 9 2c e 5 9 6r e 4m 9 1z 5 2 1 3 3 2 0 2 1 d 9 3c 6 3 6 4 0 t 9 15 6 2 3 9 0 a a 1b f ba 7 2 7 h 9 1l l 2 d 3f 5 4 0 2 1 2 6 2 0 9 9 1d 4 2 1 2 4 9 9 96 3 ewa 9 3r 4 1o 6 q 9 s6 0 2 1i 8 3 2a 0 c 1 f58 1 43r 4 4 5 9 7 3 6 v 3 45 2 13e 1d e9 1i 5 1d 9 0 f 0 n 4 2 e 11t 6 2 g 3 6 2 1 2 4 7a 6 a 9 bn d 15j 6 32 6 6 9 3o7 9 gvt3 6n\");\n}\nfunction isInRange(cp, ranges) {\n  let l = 0,\n    r = ranges.length / 2 | 0,\n    i = 0,\n    min = 0,\n    max = 0;\n  while (l < r) {\n    i = (l + r) / 2 | 0;\n    min = ranges[2 * i];\n    max = ranges[2 * i + 1];\n    if (cp < min) {\n      r = i;\n    } else if (cp > max) {\n      l = i + 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\nfunction restoreRanges(data) {\n  let last = 0;\n  return data.split(\" \").map(s => last += parseInt(s, 36) | 0);\n}\nclass DataSet {\n  constructor(raw2018, raw2019, raw2020, raw2021) {\n    this._raw2018 = raw2018;\n    this._raw2019 = raw2019;\n    this._raw2020 = raw2020;\n    this._raw2021 = raw2021;\n  }\n  get es2018() {\n    return this._set2018 || (this._set2018 = new Set(this._raw2018.split(\" \")));\n  }\n  get es2019() {\n    return this._set2019 || (this._set2019 = new Set(this._raw2019.split(\" \")));\n  }\n  get es2020() {\n    return this._set2020 || (this._set2020 = new Set(this._raw2020.split(\" \")));\n  }\n  get es2021() {\n    return this._set2021 || (this._set2021 = new Set(this._raw2021.split(\" \")));\n  }\n}\nconst gcNameSet = new Set([\"General_Category\", \"gc\"]);\nconst scNameSet = new Set([\"Script\", \"Script_Extensions\", \"sc\", \"scx\"]);\nconst gcValueSets = new DataSet(\"C Cased_Letter Cc Cf Close_Punctuation Cn Co Combining_Mark Connector_Punctuation Control Cs Currency_Symbol Dash_Punctuation Decimal_Number Enclosing_Mark Final_Punctuation Format Initial_Punctuation L LC Letter Letter_Number Line_Separator Ll Lm Lo Lowercase_Letter Lt Lu M Mark Math_Symbol Mc Me Mn Modifier_Letter Modifier_Symbol N Nd Nl No Nonspacing_Mark Number Open_Punctuation Other Other_Letter Other_Number Other_Punctuation Other_Symbol P Paragraph_Separator Pc Pd Pe Pf Pi Po Private_Use Ps Punctuation S Sc Separator Sk Sm So Space_Separator Spacing_Mark Surrogate Symbol Titlecase_Letter Unassigned Uppercase_Letter Z Zl Zp Zs cntrl digit punct\", \"\", \"\", \"\");\nconst scValueSets = new DataSet(\"Adlam Adlm Aghb Ahom Anatolian_Hieroglyphs Arab Arabic Armenian Armi Armn Avestan Avst Bali Balinese Bamu Bamum Bass Bassa_Vah Batak Batk Beng Bengali Bhaiksuki Bhks Bopo Bopomofo Brah Brahmi Brai Braille Bugi Buginese Buhd Buhid Cakm Canadian_Aboriginal Cans Cari Carian Caucasian_Albanian Chakma Cham Cher Cherokee Common Copt Coptic Cprt Cuneiform Cypriot Cyrillic Cyrl Deseret Deva Devanagari Dsrt Dupl Duployan Egyp Egyptian_Hieroglyphs Elba Elbasan Ethi Ethiopic Geor Georgian Glag Glagolitic Gonm Goth Gothic Gran Grantha Greek Grek Gujarati Gujr Gurmukhi Guru Han Hang Hangul Hani Hano Hanunoo Hatr Hatran Hebr Hebrew Hira Hiragana Hluw Hmng Hung Imperial_Aramaic Inherited Inscriptional_Pahlavi Inscriptional_Parthian Ital Java Javanese Kaithi Kali Kana Kannada Katakana Kayah_Li Khar Kharoshthi Khmer Khmr Khoj Khojki Khudawadi Knda Kthi Lana Lao Laoo Latin Latn Lepc Lepcha Limb Limbu Lina Linb Linear_A Linear_B Lisu Lyci Lycian Lydi Lydian Mahajani Mahj Malayalam Mand Mandaic Mani Manichaean Marc Marchen Masaram_Gondi Meetei_Mayek Mend Mende_Kikakui Merc Mero Meroitic_Cursive Meroitic_Hieroglyphs Miao Mlym Modi Mong Mongolian Mro Mroo Mtei Mult Multani Myanmar Mymr Nabataean Narb Nbat New_Tai_Lue Newa Nko Nkoo Nshu Nushu Ogam Ogham Ol_Chiki Olck Old_Hungarian Old_Italic Old_North_Arabian Old_Permic Old_Persian Old_South_Arabian Old_Turkic Oriya Orkh Orya Osage Osge Osma Osmanya Pahawh_Hmong Palm Palmyrene Pau_Cin_Hau Pauc Perm Phag Phags_Pa Phli Phlp Phnx Phoenician Plrd Prti Psalter_Pahlavi Qaac Qaai Rejang Rjng Runic Runr Samaritan Samr Sarb Saur Saurashtra Sgnw Sharada Shavian Shaw Shrd Sidd Siddham SignWriting Sind Sinh Sinhala Sora Sora_Sompeng Soyo Soyombo Sund Sundanese Sylo Syloti_Nagri Syrc Syriac Tagalog Tagb Tagbanwa Tai_Le Tai_Tham Tai_Viet Takr Takri Tale Talu Tamil Taml Tang Tangut Tavt Telu Telugu Tfng Tglg Thaa Thaana Thai Tibetan Tibt Tifinagh Tirh Tirhuta Ugar Ugaritic Vai Vaii Wara Warang_Citi Xpeo Xsux Yi Yiii Zanabazar_Square Zanb Zinh Zyyy\", \"Dogr Dogra Gong Gunjala_Gondi Hanifi_Rohingya Maka Makasar Medefaidrin Medf Old_Sogdian Rohg Sogd Sogdian Sogo\", \"Elym Elymaic Hmnp Nand Nandinagari Nyiakeng_Puachue_Hmong Wancho Wcho\", \"Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi\");\nconst binPropertySets = new DataSet(\"AHex ASCII ASCII_Hex_Digit Alpha Alphabetic Any Assigned Bidi_C Bidi_Control Bidi_M Bidi_Mirrored CI CWCF CWCM CWKCF CWL CWT CWU Case_Ignorable Cased Changes_When_Casefolded Changes_When_Casemapped Changes_When_Lowercased Changes_When_NFKC_Casefolded Changes_When_Titlecased Changes_When_Uppercased DI Dash Default_Ignorable_Code_Point Dep Deprecated Dia Diacritic Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Ext Extender Gr_Base Gr_Ext Grapheme_Base Grapheme_Extend Hex Hex_Digit IDC IDS IDSB IDST IDS_Binary_Operator IDS_Trinary_Operator ID_Continue ID_Start Ideo Ideographic Join_C Join_Control LOE Logical_Order_Exception Lower Lowercase Math NChar Noncharacter_Code_Point Pat_Syn Pat_WS Pattern_Syntax Pattern_White_Space QMark Quotation_Mark RI Radical Regional_Indicator SD STerm Sentence_Terminal Soft_Dotted Term Terminal_Punctuation UIdeo Unified_Ideograph Upper Uppercase VS Variation_Selector White_Space XIDC XIDS XID_Continue XID_Start space\", \"Extended_Pictographic\", \"\", \"EBase EComp EMod EPres ExtPict\");\nfunction isValidUnicodeProperty(version, name, value) {\n  if (gcNameSet.has(name)) {\n    return version >= 2018 && gcValueSets.es2018.has(value);\n  }\n  if (scNameSet.has(name)) {\n    return version >= 2018 && scValueSets.es2018.has(value) || version >= 2019 && scValueSets.es2019.has(value) || version >= 2020 && scValueSets.es2020.has(value) || version >= 2021 && scValueSets.es2021.has(value);\n  }\n  return false;\n}\nfunction isValidLoneUnicodeProperty(version, value) {\n  return version >= 2018 && binPropertySets.es2018.has(value) || version >= 2019 && binPropertySets.es2019.has(value) || version >= 2021 && binPropertySets.es2021.has(value);\n}\nconst Backspace = 0x08;\nconst CharacterTabulation = 0x09;\nconst LineFeed = 0x0a;\nconst LineTabulation = 0x0b;\nconst FormFeed = 0x0c;\nconst CarriageReturn = 0x0d;\nconst ExclamationMark = 0x21;\nconst DollarSign = 0x24;\nconst LeftParenthesis = 0x28;\nconst RightParenthesis = 0x29;\nconst Asterisk = 0x2a;\nconst PlusSign = 0x2b;\nconst Comma = 0x2c;\nconst HyphenMinus = 0x2d;\nconst FullStop = 0x2e;\nconst Solidus = 0x2f;\nconst DigitZero = 0x30;\nconst DigitOne = 0x31;\nconst DigitSeven = 0x37;\nconst DigitNine = 0x39;\nconst Colon = 0x3a;\nconst LessThanSign = 0x3c;\nconst EqualsSign = 0x3d;\nconst GreaterThanSign = 0x3e;\nconst QuestionMark = 0x3f;\nconst LatinCapitalLetterA = 0x41;\nconst LatinCapitalLetterB = 0x42;\nconst LatinCapitalLetterD = 0x44;\nconst LatinCapitalLetterF = 0x46;\nconst LatinCapitalLetterP = 0x50;\nconst LatinCapitalLetterS = 0x53;\nconst LatinCapitalLetterW = 0x57;\nconst LatinCapitalLetterZ = 0x5a;\nconst LowLine = 0x5f;\nconst LatinSmallLetterA = 0x61;\nconst LatinSmallLetterB = 0x62;\nconst LatinSmallLetterC = 0x63;\nconst LatinSmallLetterD = 0x64;\nconst LatinSmallLetterF = 0x66;\nconst LatinSmallLetterG = 0x67;\nconst LatinSmallLetterI = 0x69;\nconst LatinSmallLetterK = 0x6b;\nconst LatinSmallLetterM = 0x6d;\nconst LatinSmallLetterN = 0x6e;\nconst LatinSmallLetterP = 0x70;\nconst LatinSmallLetterR = 0x72;\nconst LatinSmallLetterS = 0x73;\nconst LatinSmallLetterT = 0x74;\nconst LatinSmallLetterU = 0x75;\nconst LatinSmallLetterV = 0x76;\nconst LatinSmallLetterW = 0x77;\nconst LatinSmallLetterX = 0x78;\nconst LatinSmallLetterY = 0x79;\nconst LatinSmallLetterZ = 0x7a;\nconst LeftSquareBracket = 0x5b;\nconst ReverseSolidus = 0x5c;\nconst RightSquareBracket = 0x5d;\nconst CircumflexAccent = 0x5e;\nconst LeftCurlyBracket = 0x7b;\nconst VerticalLine = 0x7c;\nconst RightCurlyBracket = 0x7d;\nconst ZeroWidthNonJoiner = 0x200c;\nconst ZeroWidthJoiner = 0x200d;\nconst LineSeparator = 0x2028;\nconst ParagraphSeparator = 0x2029;\nconst MinCodePoint = 0x00;\nconst MaxCodePoint = 0x10ffff;\nfunction isLatinLetter(code) {\n  return code >= LatinCapitalLetterA && code <= LatinCapitalLetterZ || code >= LatinSmallLetterA && code <= LatinSmallLetterZ;\n}\nfunction isDecimalDigit(code) {\n  return code >= DigitZero && code <= DigitNine;\n}\nfunction isOctalDigit(code) {\n  return code >= DigitZero && code <= DigitSeven;\n}\nfunction isHexDigit(code) {\n  return code >= DigitZero && code <= DigitNine || code >= LatinCapitalLetterA && code <= LatinCapitalLetterF || code >= LatinSmallLetterA && code <= LatinSmallLetterF;\n}\nfunction isLineTerminator(code) {\n  return code === LineFeed || code === CarriageReturn || code === LineSeparator || code === ParagraphSeparator;\n}\nfunction isValidUnicode(code) {\n  return code >= MinCodePoint && code <= MaxCodePoint;\n}\nfunction digitToInt(code) {\n  if (code >= LatinSmallLetterA && code <= LatinSmallLetterF) {\n    return code - LatinSmallLetterA + 10;\n  }\n  if (code >= LatinCapitalLetterA && code <= LatinCapitalLetterF) {\n    return code - LatinCapitalLetterA + 10;\n  }\n  return code - DigitZero;\n}\nfunction isLeadSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\nfunction isTrailSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\nfunction combineSurrogatePair(lead, trail) {\n  return (lead - 0xd800) * 0x400 + (trail - 0xdc00) + 0x10000;\n}\nconst legacyImpl = {\n  at(s, end, i) {\n    return i < end ? s.charCodeAt(i) : -1;\n  },\n  width(c) {\n    return 1;\n  }\n};\nconst unicodeImpl = {\n  at(s, end, i) {\n    return i < end ? s.codePointAt(i) : -1;\n  },\n  width(c) {\n    return c > 0xffff ? 2 : 1;\n  }\n};\nclass Reader {\n  constructor() {\n    this._impl = legacyImpl;\n    this._s = \"\";\n    this._i = 0;\n    this._end = 0;\n    this._cp1 = -1;\n    this._w1 = 1;\n    this._cp2 = -1;\n    this._w2 = 1;\n    this._cp3 = -1;\n    this._w3 = 1;\n    this._cp4 = -1;\n  }\n  get source() {\n    return this._s;\n  }\n  get index() {\n    return this._i;\n  }\n  get currentCodePoint() {\n    return this._cp1;\n  }\n  get nextCodePoint() {\n    return this._cp2;\n  }\n  get nextCodePoint2() {\n    return this._cp3;\n  }\n  get nextCodePoint3() {\n    return this._cp4;\n  }\n  reset(source, start, end, uFlag) {\n    this._impl = uFlag ? unicodeImpl : legacyImpl;\n    this._s = source;\n    this._end = end;\n    this.rewind(start);\n  }\n  rewind(index) {\n    const impl = this._impl;\n    this._i = index;\n    this._cp1 = impl.at(this._s, this._end, index);\n    this._w1 = impl.width(this._cp1);\n    this._cp2 = impl.at(this._s, this._end, index + this._w1);\n    this._w2 = impl.width(this._cp2);\n    this._cp3 = impl.at(this._s, this._end, index + this._w1 + this._w2);\n    this._w3 = impl.width(this._cp3);\n    this._cp4 = impl.at(this._s, this._end, index + this._w1 + this._w2 + this._w3);\n  }\n  advance() {\n    if (this._cp1 !== -1) {\n      const impl = this._impl;\n      this._i += this._w1;\n      this._cp1 = this._cp2;\n      this._w1 = this._w2;\n      this._cp2 = this._cp3;\n      this._w2 = impl.width(this._cp2);\n      this._cp3 = this._cp4;\n      this._w3 = impl.width(this._cp3);\n      this._cp4 = impl.at(this._s, this._end, this._i + this._w1 + this._w2 + this._w3);\n    }\n  }\n  eat(cp) {\n    if (this._cp1 === cp) {\n      this.advance();\n      return true;\n    }\n    return false;\n  }\n  eat2(cp1, cp2) {\n    if (this._cp1 === cp1 && this._cp2 === cp2) {\n      this.advance();\n      this.advance();\n      return true;\n    }\n    return false;\n  }\n  eat3(cp1, cp2, cp3) {\n    if (this._cp1 === cp1 && this._cp2 === cp2 && this._cp3 === cp3) {\n      this.advance();\n      this.advance();\n      this.advance();\n      return true;\n    }\n    return false;\n  }\n}\nclass RegExpSyntaxError extends SyntaxError {\n  constructor(source, uFlag, index, message) {\n    if (source) {\n      if (!source.startsWith(\"/\")) {\n        source = `/${source}/${uFlag ? \"u\" : \"\"}`;\n      }\n      source = `: ${source}`;\n    }\n    super(`Invalid regular expression${source}: ${message}`);\n    this.index = index;\n  }\n}\nfunction isSyntaxCharacter(cp) {\n  return cp === CircumflexAccent || cp === DollarSign || cp === ReverseSolidus || cp === FullStop || cp === Asterisk || cp === PlusSign || cp === QuestionMark || cp === LeftParenthesis || cp === RightParenthesis || cp === LeftSquareBracket || cp === RightSquareBracket || cp === LeftCurlyBracket || cp === RightCurlyBracket || cp === VerticalLine;\n}\nfunction isRegExpIdentifierStart(cp) {\n  return isIdStart(cp) || cp === DollarSign || cp === LowLine;\n}\nfunction isRegExpIdentifierPart(cp) {\n  return isIdContinue(cp) || cp === DollarSign || cp === LowLine || cp === ZeroWidthNonJoiner || cp === ZeroWidthJoiner;\n}\nfunction isUnicodePropertyNameCharacter(cp) {\n  return isLatinLetter(cp) || cp === LowLine;\n}\nfunction isUnicodePropertyValueCharacter(cp) {\n  return isUnicodePropertyNameCharacter(cp) || isDecimalDigit(cp);\n}\nclass RegExpValidator {\n  constructor(options) {\n    this._reader = new Reader();\n    this._uFlag = false;\n    this._nFlag = false;\n    this._lastIntValue = 0;\n    this._lastMinValue = 0;\n    this._lastMaxValue = 0;\n    this._lastStrValue = \"\";\n    this._lastKeyValue = \"\";\n    this._lastValValue = \"\";\n    this._lastAssertionIsQuantifiable = false;\n    this._numCapturingParens = 0;\n    this._groupNames = new Set();\n    this._backreferenceNames = new Set();\n    this._options = options || {};\n  }\n  validateLiteral(source, start = 0, end = source.length) {\n    this._uFlag = this._nFlag = false;\n    this.reset(source, start, end);\n    this.onLiteralEnter(start);\n    if (this.eat(Solidus) && this.eatRegExpBody() && this.eat(Solidus)) {\n      const flagStart = this.index;\n      const uFlag = source.includes(\"u\", flagStart);\n      this.validateFlags(source, flagStart, end);\n      this.validatePattern(source, start + 1, flagStart - 1, uFlag);\n    } else if (start >= end) {\n      this.raise(\"Empty\");\n    } else {\n      const c = String.fromCodePoint(this.currentCodePoint);\n      this.raise(`Unexpected character '${c}'`);\n    }\n    this.onLiteralLeave(start, end);\n  }\n  validateFlags(source, start = 0, end = source.length) {\n    const existingFlags = new Set();\n    let global = false;\n    let ignoreCase = false;\n    let multiline = false;\n    let sticky = false;\n    let unicode = false;\n    let dotAll = false;\n    let hasIndices = false;\n    for (let i = start; i < end; ++i) {\n      const flag = source.charCodeAt(i);\n      if (existingFlags.has(flag)) {\n        this.raise(`Duplicated flag '${source[i]}'`);\n      }\n      existingFlags.add(flag);\n      if (flag === LatinSmallLetterG) {\n        global = true;\n      } else if (flag === LatinSmallLetterI) {\n        ignoreCase = true;\n      } else if (flag === LatinSmallLetterM) {\n        multiline = true;\n      } else if (flag === LatinSmallLetterU && this.ecmaVersion >= 2015) {\n        unicode = true;\n      } else if (flag === LatinSmallLetterY && this.ecmaVersion >= 2015) {\n        sticky = true;\n      } else if (flag === LatinSmallLetterS && this.ecmaVersion >= 2018) {\n        dotAll = true;\n      } else if (flag === LatinSmallLetterD && this.ecmaVersion >= 2022) {\n        hasIndices = true;\n      } else {\n        this.raise(`Invalid flag '${source[i]}'`);\n      }\n    }\n    this.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices);\n  }\n  validatePattern(source, start = 0, end = source.length, uFlag = false) {\n    this._uFlag = uFlag && this.ecmaVersion >= 2015;\n    this._nFlag = uFlag && this.ecmaVersion >= 2018;\n    this.reset(source, start, end);\n    this.consumePattern();\n    if (!this._nFlag && this.ecmaVersion >= 2018 && this._groupNames.size > 0) {\n      this._nFlag = true;\n      this.rewind(start);\n      this.consumePattern();\n    }\n  }\n  get strict() {\n    return Boolean(this._options.strict || this._uFlag);\n  }\n  get ecmaVersion() {\n    return this._options.ecmaVersion || 2022;\n  }\n  onLiteralEnter(start) {\n    if (this._options.onLiteralEnter) {\n      this._options.onLiteralEnter(start);\n    }\n  }\n  onLiteralLeave(start, end) {\n    if (this._options.onLiteralLeave) {\n      this._options.onLiteralLeave(start, end);\n    }\n  }\n  onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices) {\n    if (this._options.onFlags) {\n      this._options.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices);\n    }\n  }\n  onPatternEnter(start) {\n    if (this._options.onPatternEnter) {\n      this._options.onPatternEnter(start);\n    }\n  }\n  onPatternLeave(start, end) {\n    if (this._options.onPatternLeave) {\n      this._options.onPatternLeave(start, end);\n    }\n  }\n  onDisjunctionEnter(start) {\n    if (this._options.onDisjunctionEnter) {\n      this._options.onDisjunctionEnter(start);\n    }\n  }\n  onDisjunctionLeave(start, end) {\n    if (this._options.onDisjunctionLeave) {\n      this._options.onDisjunctionLeave(start, end);\n    }\n  }\n  onAlternativeEnter(start, index) {\n    if (this._options.onAlternativeEnter) {\n      this._options.onAlternativeEnter(start, index);\n    }\n  }\n  onAlternativeLeave(start, end, index) {\n    if (this._options.onAlternativeLeave) {\n      this._options.onAlternativeLeave(start, end, index);\n    }\n  }\n  onGroupEnter(start) {\n    if (this._options.onGroupEnter) {\n      this._options.onGroupEnter(start);\n    }\n  }\n  onGroupLeave(start, end) {\n    if (this._options.onGroupLeave) {\n      this._options.onGroupLeave(start, end);\n    }\n  }\n  onCapturingGroupEnter(start, name) {\n    if (this._options.onCapturingGroupEnter) {\n      this._options.onCapturingGroupEnter(start, name);\n    }\n  }\n  onCapturingGroupLeave(start, end, name) {\n    if (this._options.onCapturingGroupLeave) {\n      this._options.onCapturingGroupLeave(start, end, name);\n    }\n  }\n  onQuantifier(start, end, min, max, greedy) {\n    if (this._options.onQuantifier) {\n      this._options.onQuantifier(start, end, min, max, greedy);\n    }\n  }\n  onLookaroundAssertionEnter(start, kind, negate) {\n    if (this._options.onLookaroundAssertionEnter) {\n      this._options.onLookaroundAssertionEnter(start, kind, negate);\n    }\n  }\n  onLookaroundAssertionLeave(start, end, kind, negate) {\n    if (this._options.onLookaroundAssertionLeave) {\n      this._options.onLookaroundAssertionLeave(start, end, kind, negate);\n    }\n  }\n  onEdgeAssertion(start, end, kind) {\n    if (this._options.onEdgeAssertion) {\n      this._options.onEdgeAssertion(start, end, kind);\n    }\n  }\n  onWordBoundaryAssertion(start, end, kind, negate) {\n    if (this._options.onWordBoundaryAssertion) {\n      this._options.onWordBoundaryAssertion(start, end, kind, negate);\n    }\n  }\n  onAnyCharacterSet(start, end, kind) {\n    if (this._options.onAnyCharacterSet) {\n      this._options.onAnyCharacterSet(start, end, kind);\n    }\n  }\n  onEscapeCharacterSet(start, end, kind, negate) {\n    if (this._options.onEscapeCharacterSet) {\n      this._options.onEscapeCharacterSet(start, end, kind, negate);\n    }\n  }\n  onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {\n    if (this._options.onUnicodePropertyCharacterSet) {\n      this._options.onUnicodePropertyCharacterSet(start, end, kind, key, value, negate);\n    }\n  }\n  onCharacter(start, end, value) {\n    if (this._options.onCharacter) {\n      this._options.onCharacter(start, end, value);\n    }\n  }\n  onBackreference(start, end, ref) {\n    if (this._options.onBackreference) {\n      this._options.onBackreference(start, end, ref);\n    }\n  }\n  onCharacterClassEnter(start, negate) {\n    if (this._options.onCharacterClassEnter) {\n      this._options.onCharacterClassEnter(start, negate);\n    }\n  }\n  onCharacterClassLeave(start, end, negate) {\n    if (this._options.onCharacterClassLeave) {\n      this._options.onCharacterClassLeave(start, end, negate);\n    }\n  }\n  onCharacterClassRange(start, end, min, max) {\n    if (this._options.onCharacterClassRange) {\n      this._options.onCharacterClassRange(start, end, min, max);\n    }\n  }\n  get source() {\n    return this._reader.source;\n  }\n  get index() {\n    return this._reader.index;\n  }\n  get currentCodePoint() {\n    return this._reader.currentCodePoint;\n  }\n  get nextCodePoint() {\n    return this._reader.nextCodePoint;\n  }\n  get nextCodePoint2() {\n    return this._reader.nextCodePoint2;\n  }\n  get nextCodePoint3() {\n    return this._reader.nextCodePoint3;\n  }\n  reset(source, start, end) {\n    this._reader.reset(source, start, end, this._uFlag);\n  }\n  rewind(index) {\n    this._reader.rewind(index);\n  }\n  advance() {\n    this._reader.advance();\n  }\n  eat(cp) {\n    return this._reader.eat(cp);\n  }\n  eat2(cp1, cp2) {\n    return this._reader.eat2(cp1, cp2);\n  }\n  eat3(cp1, cp2, cp3) {\n    return this._reader.eat3(cp1, cp2, cp3);\n  }\n  raise(message) {\n    throw new RegExpSyntaxError(this.source, this._uFlag, this.index, message);\n  }\n  eatRegExpBody() {\n    const start = this.index;\n    let inClass = false;\n    let escaped = false;\n    for (;;) {\n      const cp = this.currentCodePoint;\n      if (cp === -1 || isLineTerminator(cp)) {\n        const kind = inClass ? \"character class\" : \"regular expression\";\n        this.raise(`Unterminated ${kind}`);\n      }\n      if (escaped) {\n        escaped = false;\n      } else if (cp === ReverseSolidus) {\n        escaped = true;\n      } else if (cp === LeftSquareBracket) {\n        inClass = true;\n      } else if (cp === RightSquareBracket) {\n        inClass = false;\n      } else if (cp === Solidus && !inClass || cp === Asterisk && this.index === start) {\n        break;\n      }\n      this.advance();\n    }\n    return this.index !== start;\n  }\n  consumePattern() {\n    const start = this.index;\n    this._numCapturingParens = this.countCapturingParens();\n    this._groupNames.clear();\n    this._backreferenceNames.clear();\n    this.onPatternEnter(start);\n    this.consumeDisjunction();\n    const cp = this.currentCodePoint;\n    if (this.currentCodePoint !== -1) {\n      if (cp === RightParenthesis) {\n        this.raise(\"Unmatched ')'\");\n      }\n      if (cp === ReverseSolidus) {\n        this.raise(\"\\\\ at end of pattern\");\n      }\n      if (cp === RightSquareBracket || cp === RightCurlyBracket) {\n        this.raise(\"Lone quantifier brackets\");\n      }\n      const c = String.fromCodePoint(cp);\n      this.raise(`Unexpected character '${c}'`);\n    }\n    for (const name of this._backreferenceNames) {\n      if (!this._groupNames.has(name)) {\n        this.raise(\"Invalid named capture referenced\");\n      }\n    }\n    this.onPatternLeave(start, this.index);\n  }\n  countCapturingParens() {\n    const start = this.index;\n    let inClass = false;\n    let escaped = false;\n    let count = 0;\n    let cp = 0;\n    while ((cp = this.currentCodePoint) !== -1) {\n      if (escaped) {\n        escaped = false;\n      } else if (cp === ReverseSolidus) {\n        escaped = true;\n      } else if (cp === LeftSquareBracket) {\n        inClass = true;\n      } else if (cp === RightSquareBracket) {\n        inClass = false;\n      } else if (cp === LeftParenthesis && !inClass && (this.nextCodePoint !== QuestionMark || this.nextCodePoint2 === LessThanSign && this.nextCodePoint3 !== EqualsSign && this.nextCodePoint3 !== ExclamationMark)) {\n        count += 1;\n      }\n      this.advance();\n    }\n    this.rewind(start);\n    return count;\n  }\n  consumeDisjunction() {\n    const start = this.index;\n    let i = 0;\n    this.onDisjunctionEnter(start);\n    do {\n      this.consumeAlternative(i++);\n    } while (this.eat(VerticalLine));\n    if (this.consumeQuantifier(true)) {\n      this.raise(\"Nothing to repeat\");\n    }\n    if (this.eat(LeftCurlyBracket)) {\n      this.raise(\"Lone quantifier brackets\");\n    }\n    this.onDisjunctionLeave(start, this.index);\n  }\n  consumeAlternative(i) {\n    const start = this.index;\n    this.onAlternativeEnter(start, i);\n    while (this.currentCodePoint !== -1 && this.consumeTerm()) {}\n    this.onAlternativeLeave(start, this.index, i);\n  }\n  consumeTerm() {\n    if (this._uFlag || this.strict) {\n      return this.consumeAssertion() || this.consumeAtom() && this.consumeOptionalQuantifier();\n    }\n    return this.consumeAssertion() && (!this._lastAssertionIsQuantifiable || this.consumeOptionalQuantifier()) || this.consumeExtendedAtom() && this.consumeOptionalQuantifier();\n  }\n  consumeOptionalQuantifier() {\n    this.consumeQuantifier();\n    return true;\n  }\n  consumeAssertion() {\n    const start = this.index;\n    this._lastAssertionIsQuantifiable = false;\n    if (this.eat(CircumflexAccent)) {\n      this.onEdgeAssertion(start, this.index, \"start\");\n      return true;\n    }\n    if (this.eat(DollarSign)) {\n      this.onEdgeAssertion(start, this.index, \"end\");\n      return true;\n    }\n    if (this.eat2(ReverseSolidus, LatinCapitalLetterB)) {\n      this.onWordBoundaryAssertion(start, this.index, \"word\", true);\n      return true;\n    }\n    if (this.eat2(ReverseSolidus, LatinSmallLetterB)) {\n      this.onWordBoundaryAssertion(start, this.index, \"word\", false);\n      return true;\n    }\n    if (this.eat2(LeftParenthesis, QuestionMark)) {\n      const lookbehind = this.ecmaVersion >= 2018 && this.eat(LessThanSign);\n      let negate = false;\n      if (this.eat(EqualsSign) || (negate = this.eat(ExclamationMark))) {\n        const kind = lookbehind ? \"lookbehind\" : \"lookahead\";\n        this.onLookaroundAssertionEnter(start, kind, negate);\n        this.consumeDisjunction();\n        if (!this.eat(RightParenthesis)) {\n          this.raise(\"Unterminated group\");\n        }\n        this._lastAssertionIsQuantifiable = !lookbehind && !this.strict;\n        this.onLookaroundAssertionLeave(start, this.index, kind, negate);\n        return true;\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  consumeQuantifier(noConsume = false) {\n    const start = this.index;\n    let min = 0;\n    let max = 0;\n    let greedy = false;\n    if (this.eat(Asterisk)) {\n      min = 0;\n      max = Number.POSITIVE_INFINITY;\n    } else if (this.eat(PlusSign)) {\n      min = 1;\n      max = Number.POSITIVE_INFINITY;\n    } else if (this.eat(QuestionMark)) {\n      min = 0;\n      max = 1;\n    } else if (this.eatBracedQuantifier(noConsume)) {\n      min = this._lastMinValue;\n      max = this._lastMaxValue;\n    } else {\n      return false;\n    }\n    greedy = !this.eat(QuestionMark);\n    if (!noConsume) {\n      this.onQuantifier(start, this.index, min, max, greedy);\n    }\n    return true;\n  }\n  eatBracedQuantifier(noError) {\n    const start = this.index;\n    if (this.eat(LeftCurlyBracket)) {\n      this._lastMinValue = 0;\n      this._lastMaxValue = Number.POSITIVE_INFINITY;\n      if (this.eatDecimalDigits()) {\n        this._lastMinValue = this._lastMaxValue = this._lastIntValue;\n        if (this.eat(Comma)) {\n          this._lastMaxValue = this.eatDecimalDigits() ? this._lastIntValue : Number.POSITIVE_INFINITY;\n        }\n        if (this.eat(RightCurlyBracket)) {\n          if (!noError && this._lastMaxValue < this._lastMinValue) {\n            this.raise(\"numbers out of order in {} quantifier\");\n          }\n          return true;\n        }\n      }\n      if (!noError && (this._uFlag || this.strict)) {\n        this.raise(\"Incomplete quantifier\");\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  consumeAtom() {\n    return this.consumePatternCharacter() || this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeCharacterClass() || this.consumeUncapturingGroup() || this.consumeCapturingGroup();\n  }\n  consumeDot() {\n    if (this.eat(FullStop)) {\n      this.onAnyCharacterSet(this.index - 1, this.index, \"any\");\n      return true;\n    }\n    return false;\n  }\n  consumeReverseSolidusAtomEscape() {\n    const start = this.index;\n    if (this.eat(ReverseSolidus)) {\n      if (this.consumeAtomEscape()) {\n        return true;\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  consumeUncapturingGroup() {\n    const start = this.index;\n    if (this.eat3(LeftParenthesis, QuestionMark, Colon)) {\n      this.onGroupEnter(start);\n      this.consumeDisjunction();\n      if (!this.eat(RightParenthesis)) {\n        this.raise(\"Unterminated group\");\n      }\n      this.onGroupLeave(start, this.index);\n      return true;\n    }\n    return false;\n  }\n  consumeCapturingGroup() {\n    const start = this.index;\n    if (this.eat(LeftParenthesis)) {\n      let name = null;\n      if (this.ecmaVersion >= 2018) {\n        if (this.consumeGroupSpecifier()) {\n          name = this._lastStrValue;\n        }\n      } else if (this.currentCodePoint === QuestionMark) {\n        this.raise(\"Invalid group\");\n      }\n      this.onCapturingGroupEnter(start, name);\n      this.consumeDisjunction();\n      if (!this.eat(RightParenthesis)) {\n        this.raise(\"Unterminated group\");\n      }\n      this.onCapturingGroupLeave(start, this.index, name);\n      return true;\n    }\n    return false;\n  }\n  consumeExtendedAtom() {\n    return this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeReverseSolidusFollowedByC() || this.consumeCharacterClass() || this.consumeUncapturingGroup() || this.consumeCapturingGroup() || this.consumeInvalidBracedQuantifier() || this.consumeExtendedPatternCharacter();\n  }\n  consumeReverseSolidusFollowedByC() {\n    const start = this.index;\n    if (this.currentCodePoint === ReverseSolidus && this.nextCodePoint === LatinSmallLetterC) {\n      this._lastIntValue = this.currentCodePoint;\n      this.advance();\n      this.onCharacter(start, this.index, ReverseSolidus);\n      return true;\n    }\n    return false;\n  }\n  consumeInvalidBracedQuantifier() {\n    if (this.eatBracedQuantifier(true)) {\n      this.raise(\"Nothing to repeat\");\n    }\n    return false;\n  }\n  consumePatternCharacter() {\n    const start = this.index;\n    const cp = this.currentCodePoint;\n    if (cp !== -1 && !isSyntaxCharacter(cp)) {\n      this.advance();\n      this.onCharacter(start, this.index, cp);\n      return true;\n    }\n    return false;\n  }\n  consumeExtendedPatternCharacter() {\n    const start = this.index;\n    const cp = this.currentCodePoint;\n    if (cp !== -1 && cp !== CircumflexAccent && cp !== DollarSign && cp !== ReverseSolidus && cp !== FullStop && cp !== Asterisk && cp !== PlusSign && cp !== QuestionMark && cp !== LeftParenthesis && cp !== RightParenthesis && cp !== LeftSquareBracket && cp !== VerticalLine) {\n      this.advance();\n      this.onCharacter(start, this.index, cp);\n      return true;\n    }\n    return false;\n  }\n  consumeGroupSpecifier() {\n    if (this.eat(QuestionMark)) {\n      if (this.eatGroupName()) {\n        if (!this._groupNames.has(this._lastStrValue)) {\n          this._groupNames.add(this._lastStrValue);\n          return true;\n        }\n        this.raise(\"Duplicate capture group name\");\n      }\n      this.raise(\"Invalid group\");\n    }\n    return false;\n  }\n  consumeAtomEscape() {\n    if (this.consumeBackreference() || this.consumeCharacterClassEscape() || this.consumeCharacterEscape() || this._nFlag && this.consumeKGroupName()) {\n      return true;\n    }\n    if (this.strict || this._uFlag) {\n      this.raise(\"Invalid escape\");\n    }\n    return false;\n  }\n  consumeBackreference() {\n    const start = this.index;\n    if (this.eatDecimalEscape()) {\n      const n = this._lastIntValue;\n      if (n <= this._numCapturingParens) {\n        this.onBackreference(start - 1, this.index, n);\n        return true;\n      }\n      if (this.strict || this._uFlag) {\n        this.raise(\"Invalid escape\");\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  consumeCharacterClassEscape() {\n    const start = this.index;\n    if (this.eat(LatinSmallLetterD)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"digit\", false);\n      return true;\n    }\n    if (this.eat(LatinCapitalLetterD)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"digit\", true);\n      return true;\n    }\n    if (this.eat(LatinSmallLetterS)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"space\", false);\n      return true;\n    }\n    if (this.eat(LatinCapitalLetterS)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"space\", true);\n      return true;\n    }\n    if (this.eat(LatinSmallLetterW)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"word\", false);\n      return true;\n    }\n    if (this.eat(LatinCapitalLetterW)) {\n      this._lastIntValue = -1;\n      this.onEscapeCharacterSet(start - 1, this.index, \"word\", true);\n      return true;\n    }\n    let negate = false;\n    if (this._uFlag && this.ecmaVersion >= 2018 && (this.eat(LatinSmallLetterP) || (negate = this.eat(LatinCapitalLetterP)))) {\n      this._lastIntValue = -1;\n      if (this.eat(LeftCurlyBracket) && this.eatUnicodePropertyValueExpression() && this.eat(RightCurlyBracket)) {\n        this.onUnicodePropertyCharacterSet(start - 1, this.index, \"property\", this._lastKeyValue, this._lastValValue || null, negate);\n        return true;\n      }\n      this.raise(\"Invalid property name\");\n    }\n    return false;\n  }\n  consumeCharacterEscape() {\n    const start = this.index;\n    if (this.eatControlEscape() || this.eatCControlLetter() || this.eatZero() || this.eatHexEscapeSequence() || this.eatRegExpUnicodeEscapeSequence() || !this.strict && !this._uFlag && this.eatLegacyOctalEscapeSequence() || this.eatIdentityEscape()) {\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n    return false;\n  }\n  consumeKGroupName() {\n    const start = this.index;\n    if (this.eat(LatinSmallLetterK)) {\n      if (this.eatGroupName()) {\n        const groupName = this._lastStrValue;\n        this._backreferenceNames.add(groupName);\n        this.onBackreference(start - 1, this.index, groupName);\n        return true;\n      }\n      this.raise(\"Invalid named reference\");\n    }\n    return false;\n  }\n  consumeCharacterClass() {\n    const start = this.index;\n    if (this.eat(LeftSquareBracket)) {\n      const negate = this.eat(CircumflexAccent);\n      this.onCharacterClassEnter(start, negate);\n      this.consumeClassRanges();\n      if (!this.eat(RightSquareBracket)) {\n        this.raise(\"Unterminated character class\");\n      }\n      this.onCharacterClassLeave(start, this.index, negate);\n      return true;\n    }\n    return false;\n  }\n  consumeClassRanges() {\n    const strict = this.strict || this._uFlag;\n    for (;;) {\n      const rangeStart = this.index;\n      if (!this.consumeClassAtom()) {\n        break;\n      }\n      const min = this._lastIntValue;\n      if (!this.eat(HyphenMinus)) {\n        continue;\n      }\n      this.onCharacter(this.index - 1, this.index, HyphenMinus);\n      if (!this.consumeClassAtom()) {\n        break;\n      }\n      const max = this._lastIntValue;\n      if (min === -1 || max === -1) {\n        if (strict) {\n          this.raise(\"Invalid character class\");\n        }\n        continue;\n      }\n      if (min > max) {\n        this.raise(\"Range out of order in character class\");\n      }\n      this.onCharacterClassRange(rangeStart, this.index, min, max);\n    }\n  }\n  consumeClassAtom() {\n    const start = this.index;\n    const cp = this.currentCodePoint;\n    if (cp !== -1 && cp !== ReverseSolidus && cp !== RightSquareBracket) {\n      this.advance();\n      this._lastIntValue = cp;\n      this.onCharacter(start, this.index, this._lastIntValue);\n      return true;\n    }\n    if (this.eat(ReverseSolidus)) {\n      if (this.consumeClassEscape()) {\n        return true;\n      }\n      if (!this.strict && this.currentCodePoint === LatinSmallLetterC) {\n        this._lastIntValue = ReverseSolidus;\n        this.onCharacter(start, this.index, this._lastIntValue);\n        return true;\n      }\n      if (this.strict || this._uFlag) {\n        this.raise(\"Invalid escape\");\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  consumeClassEscape() {\n    const start = this.index;\n    if (this.eat(LatinSmallLetterB)) {\n      this._lastIntValue = Backspace;\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n    if (this._uFlag && this.eat(HyphenMinus)) {\n      this._lastIntValue = HyphenMinus;\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n    let cp = 0;\n    if (!this.strict && !this._uFlag && this.currentCodePoint === LatinSmallLetterC && (isDecimalDigit(cp = this.nextCodePoint) || cp === LowLine)) {\n      this.advance();\n      this.advance();\n      this._lastIntValue = cp % 0x20;\n      this.onCharacter(start - 1, this.index, this._lastIntValue);\n      return true;\n    }\n    return this.consumeCharacterClassEscape() || this.consumeCharacterEscape();\n  }\n  eatGroupName() {\n    if (this.eat(LessThanSign)) {\n      if (this.eatRegExpIdentifierName() && this.eat(GreaterThanSign)) {\n        return true;\n      }\n      this.raise(\"Invalid capture group name\");\n    }\n    return false;\n  }\n  eatRegExpIdentifierName() {\n    if (this.eatRegExpIdentifierStart()) {\n      this._lastStrValue = String.fromCodePoint(this._lastIntValue);\n      while (this.eatRegExpIdentifierPart()) {\n        this._lastStrValue += String.fromCodePoint(this._lastIntValue);\n      }\n      return true;\n    }\n    return false;\n  }\n  eatRegExpIdentifierStart() {\n    const start = this.index;\n    const forceUFlag = !this._uFlag && this.ecmaVersion >= 2020;\n    let cp = this.currentCodePoint;\n    this.advance();\n    if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence(forceUFlag)) {\n      cp = this._lastIntValue;\n    } else if (forceUFlag && isLeadSurrogate(cp) && isTrailSurrogate(this.currentCodePoint)) {\n      cp = combineSurrogatePair(cp, this.currentCodePoint);\n      this.advance();\n    }\n    if (isRegExpIdentifierStart(cp)) {\n      this._lastIntValue = cp;\n      return true;\n    }\n    if (this.index !== start) {\n      this.rewind(start);\n    }\n    return false;\n  }\n  eatRegExpIdentifierPart() {\n    const start = this.index;\n    const forceUFlag = !this._uFlag && this.ecmaVersion >= 2020;\n    let cp = this.currentCodePoint;\n    this.advance();\n    if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence(forceUFlag)) {\n      cp = this._lastIntValue;\n    } else if (forceUFlag && isLeadSurrogate(cp) && isTrailSurrogate(this.currentCodePoint)) {\n      cp = combineSurrogatePair(cp, this.currentCodePoint);\n      this.advance();\n    }\n    if (isRegExpIdentifierPart(cp)) {\n      this._lastIntValue = cp;\n      return true;\n    }\n    if (this.index !== start) {\n      this.rewind(start);\n    }\n    return false;\n  }\n  eatCControlLetter() {\n    const start = this.index;\n    if (this.eat(LatinSmallLetterC)) {\n      if (this.eatControlLetter()) {\n        return true;\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  eatZero() {\n    if (this.currentCodePoint === DigitZero && !isDecimalDigit(this.nextCodePoint)) {\n      this._lastIntValue = 0;\n      this.advance();\n      return true;\n    }\n    return false;\n  }\n  eatControlEscape() {\n    if (this.eat(LatinSmallLetterF)) {\n      this._lastIntValue = FormFeed;\n      return true;\n    }\n    if (this.eat(LatinSmallLetterN)) {\n      this._lastIntValue = LineFeed;\n      return true;\n    }\n    if (this.eat(LatinSmallLetterR)) {\n      this._lastIntValue = CarriageReturn;\n      return true;\n    }\n    if (this.eat(LatinSmallLetterT)) {\n      this._lastIntValue = CharacterTabulation;\n      return true;\n    }\n    if (this.eat(LatinSmallLetterV)) {\n      this._lastIntValue = LineTabulation;\n      return true;\n    }\n    return false;\n  }\n  eatControlLetter() {\n    const cp = this.currentCodePoint;\n    if (isLatinLetter(cp)) {\n      this.advance();\n      this._lastIntValue = cp % 0x20;\n      return true;\n    }\n    return false;\n  }\n  eatRegExpUnicodeEscapeSequence(forceUFlag = false) {\n    const start = this.index;\n    const uFlag = forceUFlag || this._uFlag;\n    if (this.eat(LatinSmallLetterU)) {\n      if (uFlag && this.eatRegExpUnicodeSurrogatePairEscape() || this.eatFixedHexDigits(4) || uFlag && this.eatRegExpUnicodeCodePointEscape()) {\n        return true;\n      }\n      if (this.strict || uFlag) {\n        this.raise(\"Invalid unicode escape\");\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  eatRegExpUnicodeSurrogatePairEscape() {\n    const start = this.index;\n    if (this.eatFixedHexDigits(4)) {\n      const lead = this._lastIntValue;\n      if (isLeadSurrogate(lead) && this.eat(ReverseSolidus) && this.eat(LatinSmallLetterU) && this.eatFixedHexDigits(4)) {\n        const trail = this._lastIntValue;\n        if (isTrailSurrogate(trail)) {\n          this._lastIntValue = combineSurrogatePair(lead, trail);\n          return true;\n        }\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  eatRegExpUnicodeCodePointEscape() {\n    const start = this.index;\n    if (this.eat(LeftCurlyBracket) && this.eatHexDigits() && this.eat(RightCurlyBracket) && isValidUnicode(this._lastIntValue)) {\n      return true;\n    }\n    this.rewind(start);\n    return false;\n  }\n  eatIdentityEscape() {\n    const cp = this.currentCodePoint;\n    if (this.isValidIdentityEscape(cp)) {\n      this._lastIntValue = cp;\n      this.advance();\n      return true;\n    }\n    return false;\n  }\n  isValidIdentityEscape(cp) {\n    if (cp === -1) {\n      return false;\n    }\n    if (this._uFlag) {\n      return isSyntaxCharacter(cp) || cp === Solidus;\n    }\n    if (this.strict) {\n      return !isIdContinue(cp);\n    }\n    if (this._nFlag) {\n      return !(cp === LatinSmallLetterC || cp === LatinSmallLetterK);\n    }\n    return cp !== LatinSmallLetterC;\n  }\n  eatDecimalEscape() {\n    this._lastIntValue = 0;\n    let cp = this.currentCodePoint;\n    if (cp >= DigitOne && cp <= DigitNine) {\n      do {\n        this._lastIntValue = 10 * this._lastIntValue + (cp - DigitZero);\n        this.advance();\n      } while ((cp = this.currentCodePoint) >= DigitZero && cp <= DigitNine);\n      return true;\n    }\n    return false;\n  }\n  eatUnicodePropertyValueExpression() {\n    const start = this.index;\n    if (this.eatUnicodePropertyName() && this.eat(EqualsSign)) {\n      this._lastKeyValue = this._lastStrValue;\n      if (this.eatUnicodePropertyValue()) {\n        this._lastValValue = this._lastStrValue;\n        if (isValidUnicodeProperty(this.ecmaVersion, this._lastKeyValue, this._lastValValue)) {\n          return true;\n        }\n        this.raise(\"Invalid property name\");\n      }\n    }\n    this.rewind(start);\n    if (this.eatLoneUnicodePropertyNameOrValue()) {\n      const nameOrValue = this._lastStrValue;\n      if (isValidUnicodeProperty(this.ecmaVersion, \"General_Category\", nameOrValue)) {\n        this._lastKeyValue = \"General_Category\";\n        this._lastValValue = nameOrValue;\n        return true;\n      }\n      if (isValidLoneUnicodeProperty(this.ecmaVersion, nameOrValue)) {\n        this._lastKeyValue = nameOrValue;\n        this._lastValValue = \"\";\n        return true;\n      }\n      this.raise(\"Invalid property name\");\n    }\n    return false;\n  }\n  eatUnicodePropertyName() {\n    this._lastStrValue = \"\";\n    while (isUnicodePropertyNameCharacter(this.currentCodePoint)) {\n      this._lastStrValue += String.fromCodePoint(this.currentCodePoint);\n      this.advance();\n    }\n    return this._lastStrValue !== \"\";\n  }\n  eatUnicodePropertyValue() {\n    this._lastStrValue = \"\";\n    while (isUnicodePropertyValueCharacter(this.currentCodePoint)) {\n      this._lastStrValue += String.fromCodePoint(this.currentCodePoint);\n      this.advance();\n    }\n    return this._lastStrValue !== \"\";\n  }\n  eatLoneUnicodePropertyNameOrValue() {\n    return this.eatUnicodePropertyValue();\n  }\n  eatHexEscapeSequence() {\n    const start = this.index;\n    if (this.eat(LatinSmallLetterX)) {\n      if (this.eatFixedHexDigits(2)) {\n        return true;\n      }\n      if (this._uFlag || this.strict) {\n        this.raise(\"Invalid escape\");\n      }\n      this.rewind(start);\n    }\n    return false;\n  }\n  eatDecimalDigits() {\n    const start = this.index;\n    this._lastIntValue = 0;\n    while (isDecimalDigit(this.currentCodePoint)) {\n      this._lastIntValue = 10 * this._lastIntValue + digitToInt(this.currentCodePoint);\n      this.advance();\n    }\n    return this.index !== start;\n  }\n  eatHexDigits() {\n    const start = this.index;\n    this._lastIntValue = 0;\n    while (isHexDigit(this.currentCodePoint)) {\n      this._lastIntValue = 16 * this._lastIntValue + digitToInt(this.currentCodePoint);\n      this.advance();\n    }\n    return this.index !== start;\n  }\n  eatLegacyOctalEscapeSequence() {\n    if (this.eatOctalDigit()) {\n      const n1 = this._lastIntValue;\n      if (this.eatOctalDigit()) {\n        const n2 = this._lastIntValue;\n        if (n1 <= 3 && this.eatOctalDigit()) {\n          this._lastIntValue = n1 * 64 + n2 * 8 + this._lastIntValue;\n        } else {\n          this._lastIntValue = n1 * 8 + n2;\n        }\n      } else {\n        this._lastIntValue = n1;\n      }\n      return true;\n    }\n    return false;\n  }\n  eatOctalDigit() {\n    const cp = this.currentCodePoint;\n    if (isOctalDigit(cp)) {\n      this.advance();\n      this._lastIntValue = cp - DigitZero;\n      return true;\n    }\n    this._lastIntValue = 0;\n    return false;\n  }\n  eatFixedHexDigits(length) {\n    const start = this.index;\n    this._lastIntValue = 0;\n    for (let i = 0; i < length; ++i) {\n      const cp = this.currentCodePoint;\n      if (!isHexDigit(cp)) {\n        this.rewind(start);\n        return false;\n      }\n      this._lastIntValue = 16 * this._lastIntValue + digitToInt(cp);\n      this.advance();\n    }\n    return true;\n  }\n}\nconst DummyPattern = {};\nconst DummyFlags = {};\nconst DummyCapturingGroup = {};\nclass RegExpParserState {\n  constructor(options) {\n    this._node = DummyPattern;\n    this._flags = DummyFlags;\n    this._backreferences = [];\n    this._capturingGroups = [];\n    this.source = \"\";\n    this.strict = Boolean(options && options.strict);\n    this.ecmaVersion = options && options.ecmaVersion || 2022;\n  }\n  get pattern() {\n    if (this._node.type !== \"Pattern\") {\n      throw new Error(\"UnknownError\");\n    }\n    return this._node;\n  }\n  get flags() {\n    if (this._flags.type !== \"Flags\") {\n      throw new Error(\"UnknownError\");\n    }\n    return this._flags;\n  }\n  onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices) {\n    this._flags = {\n      type: \"Flags\",\n      parent: null,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      global,\n      ignoreCase,\n      multiline,\n      unicode,\n      sticky,\n      dotAll,\n      hasIndices\n    };\n  }\n  onPatternEnter(start) {\n    this._node = {\n      type: \"Pattern\",\n      parent: null,\n      start,\n      end: start,\n      raw: \"\",\n      alternatives: []\n    };\n    this._backreferences.length = 0;\n    this._capturingGroups.length = 0;\n  }\n  onPatternLeave(start, end) {\n    this._node.end = end;\n    this._node.raw = this.source.slice(start, end);\n    for (const reference of this._backreferences) {\n      const ref = reference.ref;\n      const group = typeof ref === \"number\" ? this._capturingGroups[ref - 1] : this._capturingGroups.find(g => g.name === ref);\n      reference.resolved = group;\n      group.references.push(reference);\n    }\n  }\n  onAlternativeEnter(start) {\n    const parent = this._node;\n    if (parent.type !== \"Assertion\" && parent.type !== \"CapturingGroup\" && parent.type !== \"Group\" && parent.type !== \"Pattern\") {\n      throw new Error(\"UnknownError\");\n    }\n    this._node = {\n      type: \"Alternative\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      elements: []\n    };\n    parent.alternatives.push(this._node);\n  }\n  onAlternativeLeave(start, end) {\n    const node = this._node;\n    if (node.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n  onGroupEnter(start) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    this._node = {\n      type: \"Group\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      alternatives: []\n    };\n    parent.elements.push(this._node);\n  }\n  onGroupLeave(start, end) {\n    const node = this._node;\n    if (node.type !== \"Group\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n  onCapturingGroupEnter(start, name) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    this._node = {\n      type: \"CapturingGroup\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      name,\n      alternatives: [],\n      references: []\n    };\n    parent.elements.push(this._node);\n    this._capturingGroups.push(this._node);\n  }\n  onCapturingGroupLeave(start, end) {\n    const node = this._node;\n    if (node.type !== \"CapturingGroup\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n  onQuantifier(start, end, min, max, greedy) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    const element = parent.elements.pop();\n    if (element == null || element.type === \"Quantifier\" || element.type === \"Assertion\" && element.kind !== \"lookahead\") {\n      throw new Error(\"UnknownError\");\n    }\n    const node = {\n      type: \"Quantifier\",\n      parent,\n      start: element.start,\n      end,\n      raw: this.source.slice(element.start, end),\n      min,\n      max,\n      greedy,\n      element\n    };\n    parent.elements.push(node);\n    element.parent = node;\n  }\n  onLookaroundAssertionEnter(start, kind, negate) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    const node = this._node = {\n      type: \"Assertion\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      kind,\n      negate,\n      alternatives: []\n    };\n    parent.elements.push(node);\n  }\n  onLookaroundAssertionLeave(start, end) {\n    const node = this._node;\n    if (node.type !== \"Assertion\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n  onEdgeAssertion(start, end, kind) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    parent.elements.push({\n      type: \"Assertion\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind\n    });\n  }\n  onWordBoundaryAssertion(start, end, kind, negate) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    parent.elements.push({\n      type: \"Assertion\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      negate\n    });\n  }\n  onAnyCharacterSet(start, end, kind) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind\n    });\n  }\n  onEscapeCharacterSet(start, end, kind, negate) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      negate\n    });\n  }\n  onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n    parent.elements.push({\n      type: \"CharacterSet\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      kind,\n      key,\n      value,\n      negate\n    });\n  }\n  onCharacter(start, end, value) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\" && parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n    parent.elements.push({\n      type: \"Character\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      value\n    });\n  }\n  onBackreference(start, end, ref) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    const node = {\n      type: \"Backreference\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      ref,\n      resolved: DummyCapturingGroup\n    };\n    parent.elements.push(node);\n    this._backreferences.push(node);\n  }\n  onCharacterClassEnter(start, negate) {\n    const parent = this._node;\n    if (parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    this._node = {\n      type: \"CharacterClass\",\n      parent,\n      start,\n      end: start,\n      raw: \"\",\n      negate,\n      elements: []\n    };\n    parent.elements.push(this._node);\n  }\n  onCharacterClassLeave(start, end) {\n    const node = this._node;\n    if (node.type !== \"CharacterClass\" || node.parent.type !== \"Alternative\") {\n      throw new Error(\"UnknownError\");\n    }\n    node.end = end;\n    node.raw = this.source.slice(start, end);\n    this._node = node.parent;\n  }\n  onCharacterClassRange(start, end) {\n    const parent = this._node;\n    if (parent.type !== \"CharacterClass\") {\n      throw new Error(\"UnknownError\");\n    }\n    const elements = parent.elements;\n    const max = elements.pop();\n    const hyphen = elements.pop();\n    const min = elements.pop();\n    if (!min || !max || !hyphen || min.type !== \"Character\" || max.type !== \"Character\" || hyphen.type !== \"Character\" || hyphen.value !== HyphenMinus) {\n      throw new Error(\"UnknownError\");\n    }\n    const node = {\n      type: \"CharacterClassRange\",\n      parent,\n      start,\n      end,\n      raw: this.source.slice(start, end),\n      min,\n      max\n    };\n    min.parent = node;\n    max.parent = node;\n    elements.push(node);\n  }\n}\nclass RegExpParser {\n  constructor(options) {\n    this._state = new RegExpParserState(options);\n    this._validator = new RegExpValidator(this._state);\n  }\n  parseLiteral(source, start = 0, end = source.length) {\n    this._state.source = source;\n    this._validator.validateLiteral(source, start, end);\n    const pattern = this._state.pattern;\n    const flags = this._state.flags;\n    const literal = {\n      type: \"RegExpLiteral\",\n      parent: null,\n      start,\n      end,\n      raw: source,\n      pattern,\n      flags\n    };\n    pattern.parent = literal;\n    flags.parent = literal;\n    return literal;\n  }\n  parseFlags(source, start = 0, end = source.length) {\n    this._state.source = source;\n    this._validator.validateFlags(source, start, end);\n    return this._state.flags;\n  }\n  parsePattern(source, start = 0, end = source.length, uFlag = false) {\n    this._state.source = source;\n    this._validator.validatePattern(source, start, end, uFlag);\n    return this._state.pattern;\n  }\n}\nclass RegExpVisitor {\n  constructor(handlers) {\n    this._handlers = handlers;\n  }\n  visit(node) {\n    switch (node.type) {\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"Assertion\":\n        this.visitAssertion(node);\n        break;\n      case \"Backreference\":\n        this.visitBackreference(node);\n        break;\n      case \"CapturingGroup\":\n        this.visitCapturingGroup(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"CharacterClass\":\n        this.visitCharacterClass(node);\n        break;\n      case \"CharacterClassRange\":\n        this.visitCharacterClassRange(node);\n        break;\n      case \"CharacterSet\":\n        this.visitCharacterSet(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n      case \"RegExpLiteral\":\n        this.visitRegExpLiteral(node);\n        break;\n      default:\n        throw new Error(`Unknown type: ${node.type}`);\n    }\n  }\n  visitAlternative(node) {\n    if (this._handlers.onAlternativeEnter) {\n      this._handlers.onAlternativeEnter(node);\n    }\n    node.elements.forEach(this.visit, this);\n    if (this._handlers.onAlternativeLeave) {\n      this._handlers.onAlternativeLeave(node);\n    }\n  }\n  visitAssertion(node) {\n    if (this._handlers.onAssertionEnter) {\n      this._handlers.onAssertionEnter(node);\n    }\n    if (node.kind === \"lookahead\" || node.kind === \"lookbehind\") {\n      node.alternatives.forEach(this.visit, this);\n    }\n    if (this._handlers.onAssertionLeave) {\n      this._handlers.onAssertionLeave(node);\n    }\n  }\n  visitBackreference(node) {\n    if (this._handlers.onBackreferenceEnter) {\n      this._handlers.onBackreferenceEnter(node);\n    }\n    if (this._handlers.onBackreferenceLeave) {\n      this._handlers.onBackreferenceLeave(node);\n    }\n  }\n  visitCapturingGroup(node) {\n    if (this._handlers.onCapturingGroupEnter) {\n      this._handlers.onCapturingGroupEnter(node);\n    }\n    node.alternatives.forEach(this.visit, this);\n    if (this._handlers.onCapturingGroupLeave) {\n      this._handlers.onCapturingGroupLeave(node);\n    }\n  }\n  visitCharacter(node) {\n    if (this._handlers.onCharacterEnter) {\n      this._handlers.onCharacterEnter(node);\n    }\n    if (this._handlers.onCharacterLeave) {\n      this._handlers.onCharacterLeave(node);\n    }\n  }\n  visitCharacterClass(node) {\n    if (this._handlers.onCharacterClassEnter) {\n      this._handlers.onCharacterClassEnter(node);\n    }\n    node.elements.forEach(this.visit, this);\n    if (this._handlers.onCharacterClassLeave) {\n      this._handlers.onCharacterClassLeave(node);\n    }\n  }\n  visitCharacterClassRange(node) {\n    if (this._handlers.onCharacterClassRangeEnter) {\n      this._handlers.onCharacterClassRangeEnter(node);\n    }\n    this.visitCharacter(node.min);\n    this.visitCharacter(node.max);\n    if (this._handlers.onCharacterClassRangeLeave) {\n      this._handlers.onCharacterClassRangeLeave(node);\n    }\n  }\n  visitCharacterSet(node) {\n    if (this._handlers.onCharacterSetEnter) {\n      this._handlers.onCharacterSetEnter(node);\n    }\n    if (this._handlers.onCharacterSetLeave) {\n      this._handlers.onCharacterSetLeave(node);\n    }\n  }\n  visitFlags(node) {\n    if (this._handlers.onFlagsEnter) {\n      this._handlers.onFlagsEnter(node);\n    }\n    if (this._handlers.onFlagsLeave) {\n      this._handlers.onFlagsLeave(node);\n    }\n  }\n  visitGroup(node) {\n    if (this._handlers.onGroupEnter) {\n      this._handlers.onGroupEnter(node);\n    }\n    node.alternatives.forEach(this.visit, this);\n    if (this._handlers.onGroupLeave) {\n      this._handlers.onGroupLeave(node);\n    }\n  }\n  visitPattern(node) {\n    if (this._handlers.onPatternEnter) {\n      this._handlers.onPatternEnter(node);\n    }\n    node.alternatives.forEach(this.visit, this);\n    if (this._handlers.onPatternLeave) {\n      this._handlers.onPatternLeave(node);\n    }\n  }\n  visitQuantifier(node) {\n    if (this._handlers.onQuantifierEnter) {\n      this._handlers.onQuantifierEnter(node);\n    }\n    this.visit(node.element);\n    if (this._handlers.onQuantifierLeave) {\n      this._handlers.onQuantifierLeave(node);\n    }\n  }\n  visitRegExpLiteral(node) {\n    if (this._handlers.onRegExpLiteralEnter) {\n      this._handlers.onRegExpLiteralEnter(node);\n    }\n    this.visitPattern(node.pattern);\n    this.visitFlags(node.flags);\n    if (this._handlers.onRegExpLiteralLeave) {\n      this._handlers.onRegExpLiteralLeave(node);\n    }\n  }\n}\nfunction parseRegExpLiteral(source, options) {\n  return new RegExpParser(options).parseLiteral(String(source));\n}\nfunction validateRegExpLiteral(source, options) {\n  return new RegExpValidator(options).validateLiteral(source);\n}\nfunction visitRegExpAST(node, handlers) {\n  new RegExpVisitor(handlers).visit(node);\n}\nexports.AST = ast;\nexports.RegExpParser = RegExpParser;\nexports.RegExpValidator = RegExpValidator;\nexports.parseRegExpLiteral = parseRegExpLiteral;\nexports.validateRegExpLiteral = validateRegExpLiteral;\nexports.visitRegExpAST = visitRegExpAST;","map":{"version":3,"names":["largeIdStartRanges","undefined","largeIdContinueRanges","isIdStart","cp","isLargeIdStart","isIdContinue","isLargeIdContinue","isInRange","initLargeIdStartRanges","initLargeIdContinueRanges","restoreRanges","ranges","l","r","length","i","min","max","data","last","split","map","s","parseInt","DataSet","constructor","raw2018","raw2019","raw2020","raw2021","_raw2018","_raw2019","_raw2020","_raw2021","es2018","_set2018","Set","es2019","_set2019","es2020","_set2020","es2021","_set2021","gcNameSet","scNameSet","gcValueSets","scValueSets","binPropertySets","isValidUnicodeProperty","version","name","value","has","isValidLoneUnicodeProperty","Backspace","CharacterTabulation","LineFeed","LineTabulation","FormFeed","CarriageReturn","ExclamationMark","DollarSign","LeftParenthesis","RightParenthesis","Asterisk","PlusSign","Comma","HyphenMinus","FullStop","Solidus","DigitZero","DigitOne","DigitSeven","DigitNine","Colon","LessThanSign","EqualsSign","GreaterThanSign","QuestionMark","LatinCapitalLetterA","LatinCapitalLetterB","LatinCapitalLetterD","LatinCapitalLetterF","LatinCapitalLetterP","LatinCapitalLetterS","LatinCapitalLetterW","LatinCapitalLetterZ","LowLine","LatinSmallLetterA","LatinSmallLetterB","LatinSmallLetterC","LatinSmallLetterD","LatinSmallLetterF","LatinSmallLetterG","LatinSmallLetterI","LatinSmallLetterK","LatinSmallLetterM","LatinSmallLetterN","LatinSmallLetterP","LatinSmallLetterR","LatinSmallLetterS","LatinSmallLetterT","LatinSmallLetterU","LatinSmallLetterV","LatinSmallLetterW","LatinSmallLetterX","LatinSmallLetterY","LatinSmallLetterZ","LeftSquareBracket","ReverseSolidus","RightSquareBracket","CircumflexAccent","LeftCurlyBracket","VerticalLine","RightCurlyBracket","ZeroWidthNonJoiner","ZeroWidthJoiner","LineSeparator","ParagraphSeparator","MinCodePoint","MaxCodePoint","isLatinLetter","code","isDecimalDigit","isOctalDigit","isHexDigit","isLineTerminator","isValidUnicode","digitToInt","isLeadSurrogate","isTrailSurrogate","combineSurrogatePair","lead","trail","legacyImpl","at","end","charCodeAt","width","c","unicodeImpl","codePointAt","Reader","_impl","_s","_i","_end","_cp1","_w1","_cp2","_w2","_cp3","_w3","_cp4","source","index","currentCodePoint","nextCodePoint","nextCodePoint2","nextCodePoint3","reset","start","uFlag","rewind","impl","advance","eat","eat2","cp1","cp2","eat3","cp3","RegExpSyntaxError","SyntaxError","message","startsWith","isSyntaxCharacter","isRegExpIdentifierStart","isRegExpIdentifierPart","isUnicodePropertyNameCharacter","isUnicodePropertyValueCharacter","RegExpValidator","options","_reader","_uFlag","_nFlag","_lastIntValue","_lastMinValue","_lastMaxValue","_lastStrValue","_lastKeyValue","_lastValValue","_lastAssertionIsQuantifiable","_numCapturingParens","_groupNames","_backreferenceNames","_options","validateLiteral","onLiteralEnter","eatRegExpBody","flagStart","includes","validateFlags","validatePattern","raise","String","fromCodePoint","onLiteralLeave","existingFlags","global","ignoreCase","multiline","sticky","unicode","dotAll","hasIndices","flag","add","ecmaVersion","onFlags","consumePattern","size","strict","Boolean","onPatternEnter","onPatternLeave","onDisjunctionEnter","onDisjunctionLeave","onAlternativeEnter","onAlternativeLeave","onGroupEnter","onGroupLeave","onCapturingGroupEnter","onCapturingGroupLeave","onQuantifier","greedy","onLookaroundAssertionEnter","kind","negate","onLookaroundAssertionLeave","onEdgeAssertion","onWordBoundaryAssertion","onAnyCharacterSet","onEscapeCharacterSet","onUnicodePropertyCharacterSet","key","onCharacter","onBackreference","ref","onCharacterClassEnter","onCharacterClassLeave","onCharacterClassRange","inClass","escaped","countCapturingParens","clear","consumeDisjunction","count","consumeAlternative","consumeQuantifier","consumeTerm","consumeAssertion","consumeAtom","consumeOptionalQuantifier","consumeExtendedAtom","lookbehind","noConsume","Number","POSITIVE_INFINITY","eatBracedQuantifier","noError","eatDecimalDigits","consumePatternCharacter","consumeDot","consumeReverseSolidusAtomEscape","consumeCharacterClass","consumeUncapturingGroup","consumeCapturingGroup","consumeAtomEscape","consumeGroupSpecifier","consumeReverseSolidusFollowedByC","consumeInvalidBracedQuantifier","consumeExtendedPatternCharacter","eatGroupName","consumeBackreference","consumeCharacterClassEscape","consumeCharacterEscape","consumeKGroupName","eatDecimalEscape","n","eatUnicodePropertyValueExpression","eatControlEscape","eatCControlLetter","eatZero","eatHexEscapeSequence","eatRegExpUnicodeEscapeSequence","eatLegacyOctalEscapeSequence","eatIdentityEscape","groupName","consumeClassRanges","rangeStart","consumeClassAtom","consumeClassEscape","eatRegExpIdentifierName","eatRegExpIdentifierStart","eatRegExpIdentifierPart","forceUFlag","eatControlLetter","eatRegExpUnicodeSurrogatePairEscape","eatFixedHexDigits","eatRegExpUnicodeCodePointEscape","eatHexDigits","isValidIdentityEscape","eatUnicodePropertyName","eatUnicodePropertyValue","eatLoneUnicodePropertyNameOrValue","nameOrValue","eatOctalDigit","n1","n2","DummyPattern","DummyFlags","DummyCapturingGroup","RegExpParserState","_node","_flags","_backreferences","_capturingGroups","pattern","type","Error","flags","parent","raw","slice","alternatives","reference","group","find","g","resolved","references","push","elements","node","element","pop","hyphen","RegExpParser","_state","_validator","parseLiteral","literal","parseFlags","parsePattern","RegExpVisitor","handlers","_handlers","visit","visitAlternative","visitAssertion","visitBackreference","visitCapturingGroup","visitCharacter","visitCharacterClass","visitCharacterClassRange","visitCharacterSet","visitFlags","visitGroup","visitPattern","visitQuantifier","visitRegExpLiteral","forEach","onAssertionEnter","onAssertionLeave","onBackreferenceEnter","onBackreferenceLeave","onCharacterEnter","onCharacterLeave","onCharacterClassRangeEnter","onCharacterClassRangeLeave","onCharacterSetEnter","onCharacterSetLeave","onFlagsEnter","onFlagsLeave","onQuantifierEnter","onQuantifierLeave","onRegExpLiteralEnter","onRegExpLiteralLeave","parseRegExpLiteral","validateRegExpLiteral","visitRegExpAST"],"sources":[".temp/unicode/src/unicode/ids.ts",".temp/unicode/src/unicode/properties.ts",".temp/unicode/src/unicode/index.ts",".temp/src/reader.ts",".temp/src/regexp-syntax-error.ts",".temp/src/validator.ts",".temp/src/parser.ts",".temp/src/visitor.ts",".temp/src/index.ts"],"sourcesContent":[{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\unicode\\src\\unicode\\ids.ts"},{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\unicode\\src\\unicode\\properties.ts"},{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\unicode\\src\\unicode\\index.ts"},{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\src\\reader.ts"},{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\src\\regexp-syntax-error.ts"},{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\src\\validator.ts"},{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\src\\parser.ts"},{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\src\\visitor.ts"},{"errno":-4058,"code":"ENOENT","syscall":"open","path":"C:\\Users\\t-nagashima.MSS\\dev\\regexpp\\.temp\\src\\index.ts"}],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}