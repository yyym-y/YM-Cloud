{"ast":null,"code":"/**\n * @fileoverview Enforce spacing between rest and spread operators and their expressions.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce spacing between rest and spread operators and their expressions\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/rest-spread-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace after {{type}} operator.\",\n      expectedWhitespace: \"Expected whitespace after {{type}} operator.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode(),\n      alwaysSpace = context.options[0] === \"always\";\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks whitespace between rest/spread operators and their expressions\n     * @param {ASTNode} node The node to check\n     * @returns {void}\n     */\n    function checkWhiteSpace(node) {\n      const operator = sourceCode.getFirstToken(node),\n        nextToken = sourceCode.getTokenAfter(operator),\n        hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);\n      let type;\n      switch (node.type) {\n        case \"SpreadElement\":\n          type = \"spread\";\n          if (node.parent.type === \"ObjectExpression\") {\n            type += \" property\";\n          }\n          break;\n        case \"RestElement\":\n          type = \"rest\";\n          if (node.parent.type === \"ObjectPattern\") {\n            type += \" property\";\n          }\n          break;\n        case \"ExperimentalSpreadProperty\":\n          type = \"spread property\";\n          break;\n        case \"ExperimentalRestProperty\":\n          type = \"rest property\";\n          break;\n        default:\n          return;\n      }\n      if (alwaysSpace && !hasWhitespace) {\n        context.report({\n          node,\n          loc: operator.loc,\n          messageId: \"expectedWhitespace\",\n          data: {\n            type\n          },\n          fix(fixer) {\n            return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");\n          }\n        });\n      } else if (!alwaysSpace && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: operator.loc.end,\n            end: nextToken.loc.start\n          },\n          messageId: \"unexpectedWhitespace\",\n          data: {\n            type\n          },\n          fix(fixer) {\n            return fixer.removeRange([operator.range[1], nextToken.range[0]]);\n          }\n        });\n      }\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      SpreadElement: checkWhiteSpace,\n      RestElement: checkWhiteSpace,\n      ExperimentalSpreadProperty: checkWhiteSpace,\n      ExperimentalRestProperty: checkWhiteSpace\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","unexpectedWhitespace","expectedWhitespace","create","context","sourceCode","getSourceCode","alwaysSpace","options","checkWhiteSpace","node","operator","getFirstToken","nextToken","getTokenAfter","hasWhitespace","isSpaceBetweenTokens","parent","report","loc","messageId","data","fix","fixer","replaceTextRange","range","start","end","removeRange","SpreadElement","RestElement","ExperimentalSpreadProperty","ExperimentalRestProperty"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/rest-spread-spacing.js"],"sourcesContent":["/**\n * @fileoverview Enforce spacing between rest and spread operators and their expressions.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce spacing between rest and spread operators and their expressions\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/rest-spread-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            }\n        ],\n\n        messages: {\n            unexpectedWhitespace: \"Unexpected whitespace after {{type}} operator.\",\n            expectedWhitespace: \"Expected whitespace after {{type}} operator.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode(),\n            alwaysSpace = context.options[0] === \"always\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks whitespace between rest/spread operators and their expressions\n         * @param {ASTNode} node The node to check\n         * @returns {void}\n         */\n        function checkWhiteSpace(node) {\n            const operator = sourceCode.getFirstToken(node),\n                nextToken = sourceCode.getTokenAfter(operator),\n                hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);\n            let type;\n\n            switch (node.type) {\n                case \"SpreadElement\":\n                    type = \"spread\";\n                    if (node.parent.type === \"ObjectExpression\") {\n                        type += \" property\";\n                    }\n                    break;\n                case \"RestElement\":\n                    type = \"rest\";\n                    if (node.parent.type === \"ObjectPattern\") {\n                        type += \" property\";\n                    }\n                    break;\n                case \"ExperimentalSpreadProperty\":\n                    type = \"spread property\";\n                    break;\n                case \"ExperimentalRestProperty\":\n                    type = \"rest property\";\n                    break;\n                default:\n                    return;\n            }\n\n            if (alwaysSpace && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: operator.loc,\n                    messageId: \"expectedWhitespace\",\n                    data: {\n                        type\n                    },\n                    fix(fixer) {\n                        return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");\n                    }\n                });\n            } else if (!alwaysSpace && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: operator.loc.end,\n                        end: nextToken.loc.start\n                    },\n                    messageId: \"unexpectedWhitespace\",\n                    data: {\n                        type\n                    },\n                    fix(fixer) {\n                        return fixer.removeRange([operator.range[1], nextToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            SpreadElement: checkWhiteSpace,\n            RestElement: checkWhiteSpace,\n            ExperimentalSpreadProperty: checkWhiteSpace,\n            ExperimentalRestProperty: checkWhiteSpace\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}