{"ast":null,"code":"/**\n * @fileoverview Rule to disallow async functions which have no `await` expression.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Capitalize the 1st letter of the given text.\n * @param {string} text The text to capitalize.\n * @returns {string} The text that the 1st letter was capitalized.\n */\nfunction capitalizeFirstLetter(text) {\n  return text[0].toUpperCase() + text.slice(1);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow async functions which have no `await` expression\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-await\"\n    },\n    schema: [],\n    messages: {\n      missingAwait: \"{{name}} has no 'await' expression.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n\n    /**\n     * Push the scope info object to the stack.\n     * @returns {void}\n     */\n    function enterFunction() {\n      scopeInfo = {\n        upper: scopeInfo,\n        hasAwait: false\n      };\n    }\n\n    /**\n     * Pop the top scope info object from the stack.\n     * Also, it reports the function if needed.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     */\n    function exitFunction(node) {\n      if (!node.generator && node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) {\n        context.report({\n          node,\n          loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n          messageId: \"missingAwait\",\n          data: {\n            name: capitalizeFirstLetter(astUtils.getFunctionNameWithKind(node))\n          }\n        });\n      }\n      scopeInfo = scopeInfo.upper;\n    }\n    return {\n      FunctionDeclaration: enterFunction,\n      FunctionExpression: enterFunction,\n      ArrowFunctionExpression: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      \"ArrowFunctionExpression:exit\": exitFunction,\n      AwaitExpression() {\n        if (!scopeInfo) {\n          return;\n        }\n        scopeInfo.hasAwait = true;\n      },\n      ForOfStatement(node) {\n        if (!scopeInfo) {\n          return;\n        }\n        if (node.await) {\n          scopeInfo.hasAwait = true;\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","capitalizeFirstLetter","text","toUpperCase","slice","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","missingAwait","create","context","sourceCode","getSourceCode","scopeInfo","enterFunction","upper","hasAwait","exitFunction","node","generator","async","isEmptyFunction","report","loc","getFunctionHeadLoc","messageId","data","name","getFunctionNameWithKind","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","AwaitExpression","ForOfStatement","await"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/require-await.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow async functions which have no `await` expression.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Capitalize the 1st letter of the given text.\n * @param {string} text The text to capitalize.\n * @returns {string} The text that the 1st letter was capitalized.\n */\nfunction capitalizeFirstLetter(text) {\n    return text[0].toUpperCase() + text.slice(1);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow async functions which have no `await` expression\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/require-await\"\n        },\n\n        schema: [],\n\n        messages: {\n            missingAwait: \"{{name}} has no 'await' expression.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let scopeInfo = null;\n\n        /**\n         * Push the scope info object to the stack.\n         * @returns {void}\n         */\n        function enterFunction() {\n            scopeInfo = {\n                upper: scopeInfo,\n                hasAwait: false\n            };\n        }\n\n        /**\n         * Pop the top scope info object from the stack.\n         * Also, it reports the function if needed.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         */\n        function exitFunction(node) {\n            if (!node.generator && node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) {\n                context.report({\n                    node,\n                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n                    messageId: \"missingAwait\",\n                    data: {\n                        name: capitalizeFirstLetter(\n                            astUtils.getFunctionNameWithKind(node)\n                        )\n                    }\n                });\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        return {\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            \"ArrowFunctionExpression:exit\": exitFunction,\n\n            AwaitExpression() {\n                if (!scopeInfo) {\n                    return;\n                }\n\n                scopeInfo.hasAwait = true;\n            },\n            ForOfStatement(node) {\n                if (!scopeInfo) {\n                    return;\n                }\n\n                if (node.await) {\n                    scopeInfo.hasAwait = true;\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,IAAI,EAAE;EACjC,OAAOA,IAAI,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGD,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;AAChD;;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,2DAA2D;MACxEC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,YAAY,EAAE;IAClB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;IAC1C,IAAIC,SAAS,GAAG,IAAI;;IAEpB;AACR;AACA;AACA;IACQ,SAASC,aAAaA,CAAA,EAAG;MACrBD,SAAS,GAAG;QACRE,KAAK,EAAEF,SAAS;QAChBG,QAAQ,EAAE;MACd,CAAC;IACL;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,YAAYA,CAACC,IAAI,EAAE;MACxB,IAAI,CAACA,IAAI,CAACC,SAAS,IAAID,IAAI,CAACE,KAAK,IAAI,CAACP,SAAS,CAACG,QAAQ,IAAI,CAACzB,QAAQ,CAAC8B,eAAe,CAACH,IAAI,CAAC,EAAE;QACzFR,OAAO,CAACY,MAAM,CAAC;UACXJ,IAAI;UACJK,GAAG,EAAEhC,QAAQ,CAACiC,kBAAkB,CAACN,IAAI,EAAEP,UAAU,CAAC;UAClDc,SAAS,EAAE,cAAc;UACzBC,IAAI,EAAE;YACFC,IAAI,EAAElC,qBAAqB,CACvBF,QAAQ,CAACqC,uBAAuB,CAACV,IAAI,CACzC;UACJ;QACJ,CAAC,CAAC;MACN;MAEAL,SAAS,GAAGA,SAAS,CAACE,KAAK;IAC/B;IAEA,OAAO;MACHc,mBAAmB,EAAEf,aAAa;MAClCgB,kBAAkB,EAAEhB,aAAa;MACjCiB,uBAAuB,EAAEjB,aAAa;MACtC,0BAA0B,EAAEG,YAAY;MACxC,yBAAyB,EAAEA,YAAY;MACvC,8BAA8B,EAAEA,YAAY;MAE5Ce,eAAeA,CAAA,EAAG;QACd,IAAI,CAACnB,SAAS,EAAE;UACZ;QACJ;QAEAA,SAAS,CAACG,QAAQ,GAAG,IAAI;MAC7B,CAAC;MACDiB,cAAcA,CAACf,IAAI,EAAE;QACjB,IAAI,CAACL,SAAS,EAAE;UACZ;QACJ;QAEA,IAAIK,IAAI,CAACgB,KAAK,EAAE;UACZrB,SAAS,CAACG,QAAQ,GAAG,IAAI;QAC7B;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}