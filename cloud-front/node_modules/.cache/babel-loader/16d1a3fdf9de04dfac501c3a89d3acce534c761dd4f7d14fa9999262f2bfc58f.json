{"ast":null,"code":"/**\n * @fileoverview The AST node types produced by the parser.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// None!\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\nmodule.exports = {\n  AssignmentExpression: \"AssignmentExpression\",\n  AssignmentPattern: \"AssignmentPattern\",\n  ArrayExpression: \"ArrayExpression\",\n  ArrayPattern: \"ArrayPattern\",\n  ArrowFunctionExpression: \"ArrowFunctionExpression\",\n  AwaitExpression: \"AwaitExpression\",\n  BlockStatement: \"BlockStatement\",\n  BinaryExpression: \"BinaryExpression\",\n  BreakStatement: \"BreakStatement\",\n  CallExpression: \"CallExpression\",\n  CatchClause: \"CatchClause\",\n  ClassBody: \"ClassBody\",\n  ClassDeclaration: \"ClassDeclaration\",\n  ClassExpression: \"ClassExpression\",\n  ConditionalExpression: \"ConditionalExpression\",\n  ContinueStatement: \"ContinueStatement\",\n  DoWhileStatement: \"DoWhileStatement\",\n  DebuggerStatement: \"DebuggerStatement\",\n  EmptyStatement: \"EmptyStatement\",\n  ExpressionStatement: \"ExpressionStatement\",\n  ForStatement: \"ForStatement\",\n  ForInStatement: \"ForInStatement\",\n  ForOfStatement: \"ForOfStatement\",\n  FunctionDeclaration: \"FunctionDeclaration\",\n  FunctionExpression: \"FunctionExpression\",\n  Identifier: \"Identifier\",\n  IfStatement: \"IfStatement\",\n  Literal: \"Literal\",\n  LabeledStatement: \"LabeledStatement\",\n  LogicalExpression: \"LogicalExpression\",\n  MemberExpression: \"MemberExpression\",\n  MetaProperty: \"MetaProperty\",\n  MethodDefinition: \"MethodDefinition\",\n  NewExpression: \"NewExpression\",\n  ObjectExpression: \"ObjectExpression\",\n  ObjectPattern: \"ObjectPattern\",\n  Program: \"Program\",\n  Property: \"Property\",\n  RestElement: \"RestElement\",\n  ReturnStatement: \"ReturnStatement\",\n  SequenceExpression: \"SequenceExpression\",\n  SpreadElement: \"SpreadElement\",\n  Super: \"Super\",\n  SwitchCase: \"SwitchCase\",\n  SwitchStatement: \"SwitchStatement\",\n  TaggedTemplateExpression: \"TaggedTemplateExpression\",\n  TemplateElement: \"TemplateElement\",\n  TemplateLiteral: \"TemplateLiteral\",\n  ThisExpression: \"ThisExpression\",\n  ThrowStatement: \"ThrowStatement\",\n  TryStatement: \"TryStatement\",\n  UnaryExpression: \"UnaryExpression\",\n  UpdateExpression: \"UpdateExpression\",\n  VariableDeclaration: \"VariableDeclaration\",\n  VariableDeclarator: \"VariableDeclarator\",\n  WhileStatement: \"WhileStatement\",\n  WithStatement: \"WithStatement\",\n  YieldExpression: \"YieldExpression\",\n  JSXIdentifier: \"JSXIdentifier\",\n  JSXNamespacedName: \"JSXNamespacedName\",\n  JSXMemberExpression: \"JSXMemberExpression\",\n  JSXEmptyExpression: \"JSXEmptyExpression\",\n  JSXExpressionContainer: \"JSXExpressionContainer\",\n  JSXElement: \"JSXElement\",\n  JSXClosingElement: \"JSXClosingElement\",\n  JSXOpeningElement: \"JSXOpeningElement\",\n  JSXAttribute: \"JSXAttribute\",\n  JSXSpreadAttribute: \"JSXSpreadAttribute\",\n  JSXText: \"JSXText\",\n  ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n  ExportNamedDeclaration: \"ExportNamedDeclaration\",\n  ExportAllDeclaration: \"ExportAllDeclaration\",\n  ExportSpecifier: \"ExportSpecifier\",\n  ImportDeclaration: \"ImportDeclaration\",\n  ImportSpecifier: \"ImportSpecifier\",\n  ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n  ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\"\n};","map":{"version":3,"names":["module","exports","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExpressionStatement","ForStatement","ForInStatement","ForOfStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","Program","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","JSXIdentifier","JSXNamespacedName","JSXMemberExpression","JSXEmptyExpression","JSXExpressionContainer","JSXElement","JSXClosingElement","JSXOpeningElement","JSXAttribute","JSXSpreadAttribute","JSXText","ExportDefaultDeclaration","ExportNamedDeclaration","ExportAllDeclaration","ExportSpecifier","ImportDeclaration","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/espree/lib/ast-node-types.js"],"sourcesContent":["/**\n * @fileoverview The AST node types produced by the parser.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// None!\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    AssignmentExpression: \"AssignmentExpression\",\n    AssignmentPattern: \"AssignmentPattern\",\n    ArrayExpression: \"ArrayExpression\",\n    ArrayPattern: \"ArrayPattern\",\n    ArrowFunctionExpression: \"ArrowFunctionExpression\",\n    AwaitExpression: \"AwaitExpression\",\n    BlockStatement: \"BlockStatement\",\n    BinaryExpression: \"BinaryExpression\",\n    BreakStatement: \"BreakStatement\",\n    CallExpression: \"CallExpression\",\n    CatchClause: \"CatchClause\",\n    ClassBody: \"ClassBody\",\n    ClassDeclaration: \"ClassDeclaration\",\n    ClassExpression: \"ClassExpression\",\n    ConditionalExpression: \"ConditionalExpression\",\n    ContinueStatement: \"ContinueStatement\",\n    DoWhileStatement: \"DoWhileStatement\",\n    DebuggerStatement: \"DebuggerStatement\",\n    EmptyStatement: \"EmptyStatement\",\n    ExpressionStatement: \"ExpressionStatement\",\n    ForStatement: \"ForStatement\",\n    ForInStatement: \"ForInStatement\",\n    ForOfStatement: \"ForOfStatement\",\n    FunctionDeclaration: \"FunctionDeclaration\",\n    FunctionExpression: \"FunctionExpression\",\n    Identifier: \"Identifier\",\n    IfStatement: \"IfStatement\",\n    Literal: \"Literal\",\n    LabeledStatement: \"LabeledStatement\",\n    LogicalExpression: \"LogicalExpression\",\n    MemberExpression: \"MemberExpression\",\n    MetaProperty: \"MetaProperty\",\n    MethodDefinition: \"MethodDefinition\",\n    NewExpression: \"NewExpression\",\n    ObjectExpression: \"ObjectExpression\",\n    ObjectPattern: \"ObjectPattern\",\n    Program: \"Program\",\n    Property: \"Property\",\n    RestElement: \"RestElement\",\n    ReturnStatement: \"ReturnStatement\",\n    SequenceExpression: \"SequenceExpression\",\n    SpreadElement: \"SpreadElement\",\n    Super: \"Super\",\n    SwitchCase: \"SwitchCase\",\n    SwitchStatement: \"SwitchStatement\",\n    TaggedTemplateExpression: \"TaggedTemplateExpression\",\n    TemplateElement: \"TemplateElement\",\n    TemplateLiteral: \"TemplateLiteral\",\n    ThisExpression: \"ThisExpression\",\n    ThrowStatement: \"ThrowStatement\",\n    TryStatement: \"TryStatement\",\n    UnaryExpression: \"UnaryExpression\",\n    UpdateExpression: \"UpdateExpression\",\n    VariableDeclaration: \"VariableDeclaration\",\n    VariableDeclarator: \"VariableDeclarator\",\n    WhileStatement: \"WhileStatement\",\n    WithStatement: \"WithStatement\",\n    YieldExpression: \"YieldExpression\",\n    JSXIdentifier: \"JSXIdentifier\",\n    JSXNamespacedName: \"JSXNamespacedName\",\n    JSXMemberExpression: \"JSXMemberExpression\",\n    JSXEmptyExpression: \"JSXEmptyExpression\",\n    JSXExpressionContainer: \"JSXExpressionContainer\",\n    JSXElement: \"JSXElement\",\n    JSXClosingElement: \"JSXClosingElement\",\n    JSXOpeningElement: \"JSXOpeningElement\",\n    JSXAttribute: \"JSXAttribute\",\n    JSXSpreadAttribute: \"JSXSpreadAttribute\",\n    JSXText: \"JSXText\",\n    ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n    ExportNamedDeclaration: \"ExportNamedDeclaration\",\n    ExportAllDeclaration: \"ExportAllDeclaration\",\n    ExportSpecifier: \"ExportSpecifier\",\n    ImportDeclaration: \"ImportDeclaration\",\n    ImportSpecifier: \"ImportSpecifier\",\n    ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n    ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\"\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,oBAAoB,EAAE,sBAAsB;EAC5CC,iBAAiB,EAAE,mBAAmB;EACtCC,eAAe,EAAE,iBAAiB;EAClCC,YAAY,EAAE,cAAc;EAC5BC,uBAAuB,EAAE,yBAAyB;EAClDC,eAAe,EAAE,iBAAiB;EAClCC,cAAc,EAAE,gBAAgB;EAChCC,gBAAgB,EAAE,kBAAkB;EACpCC,cAAc,EAAE,gBAAgB;EAChCC,cAAc,EAAE,gBAAgB;EAChCC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,gBAAgB,EAAE,kBAAkB;EACpCC,eAAe,EAAE,iBAAiB;EAClCC,qBAAqB,EAAE,uBAAuB;EAC9CC,iBAAiB,EAAE,mBAAmB;EACtCC,gBAAgB,EAAE,kBAAkB;EACpCC,iBAAiB,EAAE,mBAAmB;EACtCC,cAAc,EAAE,gBAAgB;EAChCC,mBAAmB,EAAE,qBAAqB;EAC1CC,YAAY,EAAE,cAAc;EAC5BC,cAAc,EAAE,gBAAgB;EAChCC,cAAc,EAAE,gBAAgB;EAChCC,mBAAmB,EAAE,qBAAqB;EAC1CC,kBAAkB,EAAE,oBAAoB;EACxCC,UAAU,EAAE,YAAY;EACxBC,WAAW,EAAE,aAAa;EAC1BC,OAAO,EAAE,SAAS;EAClBC,gBAAgB,EAAE,kBAAkB;EACpCC,iBAAiB,EAAE,mBAAmB;EACtCC,gBAAgB,EAAE,kBAAkB;EACpCC,YAAY,EAAE,cAAc;EAC5BC,gBAAgB,EAAE,kBAAkB;EACpCC,aAAa,EAAE,eAAe;EAC9BC,gBAAgB,EAAE,kBAAkB;EACpCC,aAAa,EAAE,eAAe;EAC9BC,OAAO,EAAE,SAAS;EAClBC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,aAAa;EAC1BC,eAAe,EAAE,iBAAiB;EAClCC,kBAAkB,EAAE,oBAAoB;EACxCC,aAAa,EAAE,eAAe;EAC9BC,KAAK,EAAE,OAAO;EACdC,UAAU,EAAE,YAAY;EACxBC,eAAe,EAAE,iBAAiB;EAClCC,wBAAwB,EAAE,0BAA0B;EACpDC,eAAe,EAAE,iBAAiB;EAClCC,eAAe,EAAE,iBAAiB;EAClCC,cAAc,EAAE,gBAAgB;EAChCC,cAAc,EAAE,gBAAgB;EAChCC,YAAY,EAAE,cAAc;EAC5BC,eAAe,EAAE,iBAAiB;EAClCC,gBAAgB,EAAE,kBAAkB;EACpCC,mBAAmB,EAAE,qBAAqB;EAC1CC,kBAAkB,EAAE,oBAAoB;EACxCC,cAAc,EAAE,gBAAgB;EAChCC,aAAa,EAAE,eAAe;EAC9BC,eAAe,EAAE,iBAAiB;EAClCC,aAAa,EAAE,eAAe;EAC9BC,iBAAiB,EAAE,mBAAmB;EACtCC,mBAAmB,EAAE,qBAAqB;EAC1CC,kBAAkB,EAAE,oBAAoB;EACxCC,sBAAsB,EAAE,wBAAwB;EAChDC,UAAU,EAAE,YAAY;EACxBC,iBAAiB,EAAE,mBAAmB;EACtCC,iBAAiB,EAAE,mBAAmB;EACtCC,YAAY,EAAE,cAAc;EAC5BC,kBAAkB,EAAE,oBAAoB;EACxCC,OAAO,EAAE,SAAS;EAClBC,wBAAwB,EAAE,0BAA0B;EACpDC,sBAAsB,EAAE,wBAAwB;EAChDC,oBAAoB,EAAE,sBAAsB;EAC5CC,eAAe,EAAE,iBAAiB;EAClCC,iBAAiB,EAAE,mBAAmB;EACtCC,eAAe,EAAE,iBAAiB;EAClCC,sBAAsB,EAAE,wBAAwB;EAChDC,wBAAwB,EAAE;AAC9B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}