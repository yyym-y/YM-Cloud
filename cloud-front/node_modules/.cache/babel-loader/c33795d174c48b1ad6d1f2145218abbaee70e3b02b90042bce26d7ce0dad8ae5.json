{"ast":null,"code":"/**\n * @fileoverview Rule to check that spaced function application\n * @author Matt DuVall <http://www.mattduvall.com>\n * @deprecated in ESLint v3.3.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow spacing between function identifiers and their applications (deprecated)\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-spaced-func\"\n    },\n    deprecated: true,\n    replacedBy: [\"func-call-spacing\"],\n    fixable: \"whitespace\",\n    schema: [],\n    messages: {\n      noSpacedFunction: \"Unexpected space between function name and paren.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    /**\n     * Check if open space is present in a function name\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n    function detectOpenSpaces(node) {\n      const lastCalleeToken = sourceCode.getLastToken(node.callee);\n      let prevToken = lastCalleeToken,\n        parenToken = sourceCode.getTokenAfter(lastCalleeToken);\n\n      // advances to an open parenthesis.\n      while (parenToken && parenToken.range[1] < node.range[1] && parenToken.value !== \"(\") {\n        prevToken = parenToken;\n        parenToken = sourceCode.getTokenAfter(parenToken);\n      }\n\n      // look for a space between the callee and the open paren\n      if (parenToken && parenToken.range[1] < node.range[1] && sourceCode.isSpaceBetweenTokens(prevToken, parenToken)) {\n        context.report({\n          node,\n          loc: lastCalleeToken.loc.start,\n          messageId: \"noSpacedFunction\",\n          fix(fixer) {\n            return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);\n          }\n        });\n      }\n    }\n    return {\n      CallExpression: detectOpenSpaces,\n      NewExpression: detectOpenSpaces\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","deprecated","replacedBy","fixable","schema","messages","noSpacedFunction","create","context","sourceCode","getSourceCode","detectOpenSpaces","node","lastCalleeToken","getLastToken","callee","prevToken","parenToken","getTokenAfter","range","value","isSpaceBetweenTokens","report","loc","start","messageId","fix","fixer","removeRange","CallExpression","NewExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-spaced-func.js"],"sourcesContent":["/**\n * @fileoverview Rule to check that spaced function application\n * @author Matt DuVall <http://www.mattduvall.com>\n * @deprecated in ESLint v3.3.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow spacing between function identifiers and their applications (deprecated)\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-spaced-func\"\n        },\n\n        deprecated: true,\n\n        replacedBy: [\"func-call-spacing\"],\n\n        fixable: \"whitespace\",\n        schema: [],\n\n        messages: {\n            noSpacedFunction: \"Unexpected space between function name and paren.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Check if open space is present in a function name\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function detectOpenSpaces(node) {\n            const lastCalleeToken = sourceCode.getLastToken(node.callee);\n            let prevToken = lastCalleeToken,\n                parenToken = sourceCode.getTokenAfter(lastCalleeToken);\n\n            // advances to an open parenthesis.\n            while (\n                parenToken &&\n                parenToken.range[1] < node.range[1] &&\n                parenToken.value !== \"(\"\n            ) {\n                prevToken = parenToken;\n                parenToken = sourceCode.getTokenAfter(parenToken);\n            }\n\n            // look for a space between the callee and the open paren\n            if (parenToken &&\n                parenToken.range[1] < node.range[1] &&\n                sourceCode.isSpaceBetweenTokens(prevToken, parenToken)\n            ) {\n                context.report({\n                    node,\n                    loc: lastCalleeToken.loc.start,\n                    messageId: \"noSpacedFunction\",\n                    fix(fixer) {\n                        return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        return {\n            CallExpression: detectOpenSpaces,\n            NewExpression: detectOpenSpaces\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,mFAAmF;MAChGC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,UAAU,EAAE,IAAI;IAEhBC,UAAU,EAAE,CAAC,mBAAmB,CAAC;IAEjCC,OAAO,EAAE,YAAY;IACrBC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,gBAAgB,EAAE;IACtB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;;IAE1C;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,gBAAgBA,CAACC,IAAI,EAAE;MAC5B,MAAMC,eAAe,GAAGJ,UAAU,CAACK,YAAY,CAACF,IAAI,CAACG,MAAM,CAAC;MAC5D,IAAIC,SAAS,GAAGH,eAAe;QAC3BI,UAAU,GAAGR,UAAU,CAACS,aAAa,CAACL,eAAe,CAAC;;MAE1D;MACA,OACII,UAAU,IACVA,UAAU,CAACE,KAAK,CAAC,CAAC,CAAC,GAAGP,IAAI,CAACO,KAAK,CAAC,CAAC,CAAC,IACnCF,UAAU,CAACG,KAAK,KAAK,GAAG,EAC1B;QACEJ,SAAS,GAAGC,UAAU;QACtBA,UAAU,GAAGR,UAAU,CAACS,aAAa,CAACD,UAAU,CAAC;MACrD;;MAEA;MACA,IAAIA,UAAU,IACVA,UAAU,CAACE,KAAK,CAAC,CAAC,CAAC,GAAGP,IAAI,CAACO,KAAK,CAAC,CAAC,CAAC,IACnCV,UAAU,CAACY,oBAAoB,CAACL,SAAS,EAAEC,UAAU,CAAC,EACxD;QACET,OAAO,CAACc,MAAM,CAAC;UACXV,IAAI;UACJW,GAAG,EAAEV,eAAe,CAACU,GAAG,CAACC,KAAK;UAC9BC,SAAS,EAAE,kBAAkB;UAC7BC,GAAGA,CAACC,KAAK,EAAE;YACP,OAAOA,KAAK,CAACC,WAAW,CAAC,CAACZ,SAAS,CAACG,KAAK,CAAC,CAAC,CAAC,EAAEF,UAAU,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;UACvE;QACJ,CAAC,CAAC;MACN;IACJ;IAEA,OAAO;MACHU,cAAc,EAAElB,gBAAgB;MAChCmB,aAAa,EAAEnB;IACnB,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}