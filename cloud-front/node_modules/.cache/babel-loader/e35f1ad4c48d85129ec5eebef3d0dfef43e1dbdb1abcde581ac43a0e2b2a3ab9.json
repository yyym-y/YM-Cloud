{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using multiline strings\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow multiline strings\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-multi-str\"\n    },\n    schema: [],\n    messages: {\n      multilineString: \"Multiline support is limited to browsers supporting ES5 only.\"\n    }\n  },\n  create(context) {\n    /**\n     * Determines if a given node is part of JSX syntax.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node is a JSX node, false if not.\n     * @private\n     */\n    function isJSXElement(node) {\n      return node.type.indexOf(\"JSX\") === 0;\n    }\n\n    //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      Literal(node) {\n        if (astUtils.LINEBREAK_MATCHER.test(node.raw) && !isJSXElement(node.parent)) {\n          context.report({\n            node,\n            messageId: \"multilineString\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","multilineString","create","context","isJSXElement","node","indexOf","Literal","LINEBREAK_MATCHER","test","raw","parent","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-multi-str.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using multiline strings\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow multiline strings\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-multi-str\"\n        },\n\n        schema: [],\n\n        messages: {\n            multilineString: \"Multiline support is limited to browsers supporting ES5 only.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Determines if a given node is part of JSX syntax.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node is a JSX node, false if not.\n         * @private\n         */\n        function isJSXElement(node) {\n            return node.type.indexOf(\"JSX\") === 0;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            Literal(node) {\n                if (astUtils.LINEBREAK_MATCHER.test(node.raw) && !isJSXElement(node.parent)) {\n                    context.report({\n                        node,\n                        messageId: \"multilineString\"\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,4BAA4B;MACzCC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,eAAe,EAAE;IACrB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,YAAYA,CAACC,IAAI,EAAE;MACxB,OAAOA,IAAI,CAACZ,IAAI,CAACa,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;IACzC;;IAEA;IACA;IACA;;IAEA,OAAO;MAEHC,OAAOA,CAACF,IAAI,EAAE;QACV,IAAIjB,QAAQ,CAACoB,iBAAiB,CAACC,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,IAAI,CAACN,YAAY,CAACC,IAAI,CAACM,MAAM,CAAC,EAAE;UACzER,OAAO,CAACS,MAAM,CAAC;YACXP,IAAI;YACJQ,SAAS,EAAE;UACf,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}