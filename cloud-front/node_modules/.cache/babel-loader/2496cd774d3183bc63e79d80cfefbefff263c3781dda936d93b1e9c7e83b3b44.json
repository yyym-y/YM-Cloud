{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.regexp.flags.js\");\n(function webpackUniversalModuleDefinition(root, factory) {\n  /* istanbul ignore next */\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);\n  /* istanbul ignore next */else if (typeof exports === 'object') exports[\"esprima\"] = factory();else root[\"esprima\"] = factory();\n})(this, function () {\n  return (/******/function (modules) {\n      // webpackBootstrap\n      /******/ // The module cache\n      /******/\n      var installedModules = {};\n\n      /******/ // The require function\n      /******/\n      function __webpack_require__(moduleId) {\n        /******/ // Check if module is in cache\n        /* istanbul ignore if */\n        /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports;\n\n        /******/ // Create a new module (and put it into the cache)\n        /******/\n        var module = installedModules[moduleId] = {\n          /******/exports: {},\n          /******/id: moduleId,\n          /******/loaded: false\n          /******/\n        };\n\n        /******/ // Execute the module function\n        /******/\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n        /******/ // Flag the module as loaded\n        /******/\n        module.loaded = true;\n\n        /******/ // Return the exports of the module\n        /******/\n        return module.exports;\n        /******/\n      }\n\n      /******/ // expose the modules object (__webpack_modules__)\n      /******/\n      __webpack_require__.m = modules;\n\n      /******/ // expose the module cache\n      /******/\n      __webpack_require__.c = installedModules;\n\n      /******/ // __webpack_public_path__\n      /******/\n      __webpack_require__.p = \"\";\n\n      /******/ // Load entry module and return exports\n      /******/\n      return __webpack_require__(0);\n      /******/\n    }\n    /************************************************************************/\n    /******/([/* 0 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      /*\n        Copyright JS Foundation and other contributors, https://js.foundation/\n      \t  Redistribution and use in source and binary forms, with or without\n        modification, are permitted provided that the following conditions are met:\n      \t    * Redistributions of source code must retain the above copyright\n            notice, this list of conditions and the following disclaimer.\n          * Redistributions in binary form must reproduce the above copyright\n            notice, this list of conditions and the following disclaimer in the\n            documentation and/or other materials provided with the distribution.\n      \t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n        ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n        DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n        ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n        THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n      */\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var comment_handler_1 = __webpack_require__(1);\n      var jsx_parser_1 = __webpack_require__(3);\n      var parser_1 = __webpack_require__(8);\n      var tokenizer_1 = __webpack_require__(15);\n      function parse(code, options, delegate) {\n        var commentHandler = null;\n        var proxyDelegate = function (node, metadata) {\n          if (delegate) {\n            delegate(node, metadata);\n          }\n          if (commentHandler) {\n            commentHandler.visit(node, metadata);\n          }\n        };\n        var parserDelegate = typeof delegate === 'function' ? proxyDelegate : null;\n        var collectComment = false;\n        if (options) {\n          collectComment = typeof options.comment === 'boolean' && options.comment;\n          var attachComment = typeof options.attachComment === 'boolean' && options.attachComment;\n          if (collectComment || attachComment) {\n            commentHandler = new comment_handler_1.CommentHandler();\n            commentHandler.attach = attachComment;\n            options.comment = true;\n            parserDelegate = proxyDelegate;\n          }\n        }\n        var isModule = false;\n        if (options && typeof options.sourceType === 'string') {\n          isModule = options.sourceType === 'module';\n        }\n        var parser;\n        if (options && typeof options.jsx === 'boolean' && options.jsx) {\n          parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n        } else {\n          parser = new parser_1.Parser(code, options, parserDelegate);\n        }\n        var program = isModule ? parser.parseModule() : parser.parseScript();\n        var ast = program;\n        if (collectComment && commentHandler) {\n          ast.comments = commentHandler.comments;\n        }\n        if (parser.config.tokens) {\n          ast.tokens = parser.tokens;\n        }\n        if (parser.config.tolerant) {\n          ast.errors = parser.errorHandler.errors;\n        }\n        return ast;\n      }\n      exports.parse = parse;\n      function parseModule(code, options, delegate) {\n        var parsingOptions = options || {};\n        parsingOptions.sourceType = 'module';\n        return parse(code, parsingOptions, delegate);\n      }\n      exports.parseModule = parseModule;\n      function parseScript(code, options, delegate) {\n        var parsingOptions = options || {};\n        parsingOptions.sourceType = 'script';\n        return parse(code, parsingOptions, delegate);\n      }\n      exports.parseScript = parseScript;\n      function tokenize(code, options, delegate) {\n        var tokenizer = new tokenizer_1.Tokenizer(code, options);\n        var tokens;\n        tokens = [];\n        try {\n          while (true) {\n            var token = tokenizer.getNextToken();\n            if (!token) {\n              break;\n            }\n            if (delegate) {\n              token = delegate(token);\n            }\n            tokens.push(token);\n          }\n        } catch (e) {\n          tokenizer.errorHandler.tolerate(e);\n        }\n        if (tokenizer.errorHandler.tolerant) {\n          tokens.errors = tokenizer.errors();\n        }\n        return tokens;\n      }\n      exports.tokenize = tokenize;\n      var syntax_1 = __webpack_require__(2);\n      exports.Syntax = syntax_1.Syntax;\n      // Sync with *.json manifests.\n      exports.version = '4.0.1';\n\n      /***/\n    }, /* 1 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var syntax_1 = __webpack_require__(2);\n      var CommentHandler = function () {\n        function CommentHandler() {\n          this.attach = false;\n          this.comments = [];\n          this.stack = [];\n          this.leading = [];\n          this.trailing = [];\n        }\n        CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n          //  innnerComments for properties empty block\n          //  `function a() {/** comments **\\/}`\n          if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n            var innerComments = [];\n            for (var i = this.leading.length - 1; i >= 0; --i) {\n              var entry = this.leading[i];\n              if (metadata.end.offset >= entry.start) {\n                innerComments.unshift(entry.comment);\n                this.leading.splice(i, 1);\n                this.trailing.splice(i, 1);\n              }\n            }\n            if (innerComments.length) {\n              node.innerComments = innerComments;\n            }\n          }\n        };\n        CommentHandler.prototype.findTrailingComments = function (metadata) {\n          var trailingComments = [];\n          if (this.trailing.length > 0) {\n            for (var i = this.trailing.length - 1; i >= 0; --i) {\n              var entry_1 = this.trailing[i];\n              if (entry_1.start >= metadata.end.offset) {\n                trailingComments.unshift(entry_1.comment);\n              }\n            }\n            this.trailing.length = 0;\n            return trailingComments;\n          }\n          var entry = this.stack[this.stack.length - 1];\n          if (entry && entry.node.trailingComments) {\n            var firstComment = entry.node.trailingComments[0];\n            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n              trailingComments = entry.node.trailingComments;\n              delete entry.node.trailingComments;\n            }\n          }\n          return trailingComments;\n        };\n        CommentHandler.prototype.findLeadingComments = function (metadata) {\n          var leadingComments = [];\n          var target;\n          while (this.stack.length > 0) {\n            var entry = this.stack[this.stack.length - 1];\n            if (entry && entry.start >= metadata.start.offset) {\n              target = entry.node;\n              this.stack.pop();\n            } else {\n              break;\n            }\n          }\n          if (target) {\n            var count = target.leadingComments ? target.leadingComments.length : 0;\n            for (var i = count - 1; i >= 0; --i) {\n              var comment = target.leadingComments[i];\n              if (comment.range[1] <= metadata.start.offset) {\n                leadingComments.unshift(comment);\n                target.leadingComments.splice(i, 1);\n              }\n            }\n            if (target.leadingComments && target.leadingComments.length === 0) {\n              delete target.leadingComments;\n            }\n            return leadingComments;\n          }\n          for (var i = this.leading.length - 1; i >= 0; --i) {\n            var entry = this.leading[i];\n            if (entry.start <= metadata.start.offset) {\n              leadingComments.unshift(entry.comment);\n              this.leading.splice(i, 1);\n            }\n          }\n          return leadingComments;\n        };\n        CommentHandler.prototype.visitNode = function (node, metadata) {\n          if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n            return;\n          }\n          this.insertInnerComments(node, metadata);\n          var trailingComments = this.findTrailingComments(metadata);\n          var leadingComments = this.findLeadingComments(metadata);\n          if (leadingComments.length > 0) {\n            node.leadingComments = leadingComments;\n          }\n          if (trailingComments.length > 0) {\n            node.trailingComments = trailingComments;\n          }\n          this.stack.push({\n            node: node,\n            start: metadata.start.offset\n          });\n        };\n        CommentHandler.prototype.visitComment = function (node, metadata) {\n          var type = node.type[0] === 'L' ? 'Line' : 'Block';\n          var comment = {\n            type: type,\n            value: node.value\n          };\n          if (node.range) {\n            comment.range = node.range;\n          }\n          if (node.loc) {\n            comment.loc = node.loc;\n          }\n          this.comments.push(comment);\n          if (this.attach) {\n            var entry = {\n              comment: {\n                type: type,\n                value: node.value,\n                range: [metadata.start.offset, metadata.end.offset]\n              },\n              start: metadata.start.offset\n            };\n            if (node.loc) {\n              entry.comment.loc = node.loc;\n            }\n            node.type = type;\n            this.leading.push(entry);\n            this.trailing.push(entry);\n          }\n        };\n        CommentHandler.prototype.visit = function (node, metadata) {\n          if (node.type === 'LineComment') {\n            this.visitComment(node, metadata);\n          } else if (node.type === 'BlockComment') {\n            this.visitComment(node, metadata);\n          } else if (this.attach) {\n            this.visitNode(node, metadata);\n          }\n        };\n        return CommentHandler;\n      }();\n      exports.CommentHandler = CommentHandler;\n\n      /***/\n    }, /* 2 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        AssignmentPattern: 'AssignmentPattern',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        AwaitExpression: 'AwaitExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportAllDeclaration: 'ExportAllDeclaration',\n        ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n        ExportNamedDeclaration: 'ExportNamedDeclaration',\n        ExportSpecifier: 'ExportSpecifier',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForOfStatement: 'ForOfStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        ImportDeclaration: 'ImportDeclaration',\n        ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n        ImportSpecifier: 'ImportSpecifier',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MetaProperty: 'MetaProperty',\n        MethodDefinition: 'MethodDefinition',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        RestElement: 'RestElement',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SpreadElement: 'SpreadElement',\n        Super: 'Super',\n        SwitchCase: 'SwitchCase',\n        SwitchStatement: 'SwitchStatement',\n        TaggedTemplateExpression: 'TaggedTemplateExpression',\n        TemplateElement: 'TemplateElement',\n        TemplateLiteral: 'TemplateLiteral',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n      };\n\n      /***/\n    }, /* 3 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      /* istanbul ignore next */\n      var __extends = this && this.__extends || function () {\n        var extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n        return function (d, b) {\n          extendStatics(d, b);\n          function __() {\n            this.constructor = d;\n          }\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n      }();\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var character_1 = __webpack_require__(4);\n      var JSXNode = __webpack_require__(5);\n      var jsx_syntax_1 = __webpack_require__(6);\n      var Node = __webpack_require__(7);\n      var parser_1 = __webpack_require__(8);\n      var token_1 = __webpack_require__(13);\n      var xhtml_entities_1 = __webpack_require__(14);\n      token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';\n      token_1.TokenName[101 /* Text */] = 'JSXText';\n      // Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n      function getQualifiedElementName(elementName) {\n        var qualifiedName;\n        switch (elementName.type) {\n          case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n            var id = elementName;\n            qualifiedName = id.name;\n            break;\n          case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n            var ns = elementName;\n            qualifiedName = getQualifiedElementName(ns.namespace) + ':' + getQualifiedElementName(ns.name);\n            break;\n          case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n            var expr = elementName;\n            qualifiedName = getQualifiedElementName(expr.object) + '.' + getQualifiedElementName(expr.property);\n            break;\n          /* istanbul ignore next */\n          default:\n            break;\n        }\n        return qualifiedName;\n      }\n      var JSXParser = function (_super) {\n        __extends(JSXParser, _super);\n        function JSXParser(code, options, delegate) {\n          return _super.call(this, code, options, delegate) || this;\n        }\n        JSXParser.prototype.parsePrimaryExpression = function () {\n          return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n        };\n        JSXParser.prototype.startJSX = function () {\n          // Unwind the scanner before the lookahead token.\n          this.scanner.index = this.startMarker.index;\n          this.scanner.lineNumber = this.startMarker.line;\n          this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\n        };\n        JSXParser.prototype.finishJSX = function () {\n          // Prime the next lookahead.\n          this.nextToken();\n        };\n        JSXParser.prototype.reenterJSX = function () {\n          this.startJSX();\n          this.expectJSX('}');\n          // Pop the closing '}' added from the lookahead.\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n        };\n        JSXParser.prototype.createJSXNode = function () {\n          this.collectComments();\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n        JSXParser.prototype.createJSXChildNode = function () {\n          return {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        };\n        JSXParser.prototype.scanXHTMLEntity = function (quote) {\n          var result = '&';\n          var valid = true;\n          var terminated = false;\n          var numeric = false;\n          var hex = false;\n          while (!this.scanner.eof() && valid && !terminated) {\n            var ch = this.scanner.source[this.scanner.index];\n            if (ch === quote) {\n              break;\n            }\n            terminated = ch === ';';\n            result += ch;\n            ++this.scanner.index;\n            if (!terminated) {\n              switch (result.length) {\n                case 2:\n                  // e.g. '&#123;'\n                  numeric = ch === '#';\n                  break;\n                case 3:\n                  if (numeric) {\n                    // e.g. '&#x41;'\n                    hex = ch === 'x';\n                    valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n                    numeric = numeric && !hex;\n                  }\n                  break;\n                default:\n                  valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n                  valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n                  break;\n              }\n            }\n          }\n          if (valid && terminated && result.length > 2) {\n            // e.g. '&#x41;' becomes just '#x41'\n            var str = result.substr(1, result.length - 2);\n            if (numeric && str.length > 1) {\n              result = String.fromCharCode(parseInt(str.substr(1), 10));\n            } else if (hex && str.length > 2) {\n              result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n            } else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n              result = xhtml_entities_1.XHTMLEntities[str];\n            }\n          }\n          return result;\n        };\n        // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n        JSXParser.prototype.lexJSX = function () {\n          var cp = this.scanner.source.charCodeAt(this.scanner.index);\n          // < > / : = { }\n          if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n            var value = this.scanner.source[this.scanner.index++];\n            return {\n              type: 7 /* Punctuator */,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index - 1,\n              end: this.scanner.index\n            };\n          }\n          // \" '\n          if (cp === 34 || cp === 39) {\n            var start = this.scanner.index;\n            var quote = this.scanner.source[this.scanner.index++];\n            var str = '';\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source[this.scanner.index++];\n              if (ch === quote) {\n                break;\n              } else if (ch === '&') {\n                str += this.scanXHTMLEntity(quote);\n              } else {\n                str += ch;\n              }\n            }\n            return {\n              type: 8 /* StringLiteral */,\n              value: str,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          }\n          // ... or .\n          if (cp === 46) {\n            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n            var value = n1 === 46 && n2 === 46 ? '...' : '.';\n            var start = this.scanner.index;\n            this.scanner.index += value.length;\n            return {\n              type: 7 /* Punctuator */,\n              value: value,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          }\n          // `\n          if (cp === 96) {\n            // Only placeholder, since it will be rescanned as a real assignment expression.\n            return {\n              type: 10 /* Template */,\n              value: '',\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: this.scanner.index,\n              end: this.scanner.index\n            };\n          }\n          // Identifer can not contain backslash (char code 92).\n          if (character_1.Character.isIdentifierStart(cp) && cp !== 92) {\n            var start = this.scanner.index;\n            ++this.scanner.index;\n            while (!this.scanner.eof()) {\n              var ch = this.scanner.source.charCodeAt(this.scanner.index);\n              if (character_1.Character.isIdentifierPart(ch) && ch !== 92) {\n                ++this.scanner.index;\n              } else if (ch === 45) {\n                // Hyphen (char code 45) can be part of an identifier.\n                ++this.scanner.index;\n              } else {\n                break;\n              }\n            }\n            var id = this.scanner.source.slice(start, this.scanner.index);\n            return {\n              type: 100 /* Identifier */,\n              value: id,\n              lineNumber: this.scanner.lineNumber,\n              lineStart: this.scanner.lineStart,\n              start: start,\n              end: this.scanner.index\n            };\n          }\n          return this.scanner.lex();\n        };\n        JSXParser.prototype.nextJSXToken = function () {\n          this.collectComments();\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.line = this.scanner.lineNumber;\n          this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          var token = this.lexJSX();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          if (this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n          return token;\n        };\n        JSXParser.prototype.nextJSXText = function () {\n          this.startMarker.index = this.scanner.index;\n          this.startMarker.line = this.scanner.lineNumber;\n          this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          var start = this.scanner.index;\n          var text = '';\n          while (!this.scanner.eof()) {\n            var ch = this.scanner.source[this.scanner.index];\n            if (ch === '{' || ch === '<') {\n              break;\n            }\n            ++this.scanner.index;\n            text += ch;\n            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.scanner.lineNumber;\n              if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n                ++this.scanner.index;\n              }\n              this.scanner.lineStart = this.scanner.index;\n            }\n          }\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          var token = {\n            type: 101 /* Text */,\n            value: text,\n            lineNumber: this.scanner.lineNumber,\n            lineStart: this.scanner.lineStart,\n            start: start,\n            end: this.scanner.index\n          };\n          if (text.length > 0 && this.config.tokens) {\n            this.tokens.push(this.convertToken(token));\n          }\n          return token;\n        };\n        JSXParser.prototype.peekJSXToken = function () {\n          var state = this.scanner.saveState();\n          this.scanner.scanComments();\n          var next = this.lexJSX();\n          this.scanner.restoreState(state);\n          return next;\n        };\n        // Expect the next JSX token to match the specified punctuator.\n        // If not, an exception will be thrown.\n        JSXParser.prototype.expectJSX = function (value) {\n          var token = this.nextJSXToken();\n          if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        };\n        // Return true if the next JSX token matches the specified punctuator.\n        JSXParser.prototype.matchJSX = function (value) {\n          var next = this.peekJSXToken();\n          return next.type === 7 /* Punctuator */ && next.value === value;\n        };\n        JSXParser.prototype.parseJSXIdentifier = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n          if (token.type !== 100 /* Identifier */) {\n            this.throwUnexpectedToken(token);\n          }\n          return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n        };\n        JSXParser.prototype.parseJSXElementName = function () {\n          var node = this.createJSXNode();\n          var elementName = this.parseJSXIdentifier();\n          if (this.matchJSX(':')) {\n            var namespace = elementName;\n            this.expectJSX(':');\n            var name_1 = this.parseJSXIdentifier();\n            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n          } else if (this.matchJSX('.')) {\n            while (this.matchJSX('.')) {\n              var object = elementName;\n              this.expectJSX('.');\n              var property = this.parseJSXIdentifier();\n              elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n            }\n          }\n          return elementName;\n        };\n        JSXParser.prototype.parseJSXAttributeName = function () {\n          var node = this.createJSXNode();\n          var attributeName;\n          var identifier = this.parseJSXIdentifier();\n          if (this.matchJSX(':')) {\n            var namespace = identifier;\n            this.expectJSX(':');\n            var name_2 = this.parseJSXIdentifier();\n            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n          } else {\n            attributeName = identifier;\n          }\n          return attributeName;\n        };\n        JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n          var node = this.createJSXNode();\n          var token = this.nextJSXToken();\n          if (token.type !== 8 /* StringLiteral */) {\n            this.throwUnexpectedToken(token);\n          }\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        };\n        JSXParser.prototype.parseJSXExpressionAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.finishJSX();\n          if (this.match('}')) {\n            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n          }\n          var expression = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n        JSXParser.prototype.parseJSXAttributeValue = function () {\n          return this.matchJSX('{') ? this.parseJSXExpressionAttribute() : this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n        };\n        JSXParser.prototype.parseJSXNameValueAttribute = function () {\n          var node = this.createJSXNode();\n          var name = this.parseJSXAttributeName();\n          var value = null;\n          if (this.matchJSX('=')) {\n            this.expectJSX('=');\n            value = this.parseJSXAttributeValue();\n          }\n          return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n        };\n        JSXParser.prototype.parseJSXSpreadAttribute = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          this.expectJSX('...');\n          this.finishJSX();\n          var argument = this.parseAssignmentExpression();\n          this.reenterJSX();\n          return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n        };\n        JSXParser.prototype.parseJSXAttributes = function () {\n          var attributes = [];\n          while (!this.matchJSX('/') && !this.matchJSX('>')) {\n            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();\n            attributes.push(attribute);\n          }\n          return attributes;\n        };\n        JSXParser.prototype.parseJSXOpeningElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n        JSXParser.prototype.parseJSXBoundaryElement = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('<');\n          if (this.matchJSX('/')) {\n            this.expectJSX('/');\n            var name_3 = this.parseJSXElementName();\n            this.expectJSX('>');\n            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n          }\n          var name = this.parseJSXElementName();\n          var attributes = this.parseJSXAttributes();\n          var selfClosing = this.matchJSX('/');\n          if (selfClosing) {\n            this.expectJSX('/');\n          }\n          this.expectJSX('>');\n          return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n        };\n        JSXParser.prototype.parseJSXEmptyExpression = function () {\n          var node = this.createJSXChildNode();\n          this.collectComments();\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          return this.finalize(node, new JSXNode.JSXEmptyExpression());\n        };\n        JSXParser.prototype.parseJSXExpressionContainer = function () {\n          var node = this.createJSXNode();\n          this.expectJSX('{');\n          var expression;\n          if (this.matchJSX('}')) {\n            expression = this.parseJSXEmptyExpression();\n            this.expectJSX('}');\n          } else {\n            this.finishJSX();\n            expression = this.parseAssignmentExpression();\n            this.reenterJSX();\n          }\n          return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n        };\n        JSXParser.prototype.parseJSXChildren = function () {\n          var children = [];\n          while (!this.scanner.eof()) {\n            var node = this.createJSXChildNode();\n            var token = this.nextJSXText();\n            if (token.start < token.end) {\n              var raw = this.getTokenRaw(token);\n              var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n              children.push(child);\n            }\n            if (this.scanner.source[this.scanner.index] === '{') {\n              var container = this.parseJSXExpressionContainer();\n              children.push(container);\n            } else {\n              break;\n            }\n          }\n          return children;\n        };\n        JSXParser.prototype.parseComplexJSXElement = function (el) {\n          var stack = [];\n          while (!this.scanner.eof()) {\n            el.children = el.children.concat(this.parseJSXChildren());\n            var node = this.createJSXChildNode();\n            var element = this.parseJSXBoundaryElement();\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n              var opening = element;\n              if (opening.selfClosing) {\n                var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n                el.children.push(child);\n              } else {\n                stack.push(el);\n                el = {\n                  node: node,\n                  opening: opening,\n                  closing: null,\n                  children: []\n                };\n              }\n            }\n            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n              el.closing = element;\n              var open_1 = getQualifiedElementName(el.opening.name);\n              var close_1 = getQualifiedElementName(el.closing.name);\n              if (open_1 !== close_1) {\n                this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n              }\n              if (stack.length > 0) {\n                var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n                el = stack[stack.length - 1];\n                el.children.push(child);\n                stack.pop();\n              } else {\n                break;\n              }\n            }\n          }\n          return el;\n        };\n        JSXParser.prototype.parseJSXElement = function () {\n          var node = this.createJSXNode();\n          var opening = this.parseJSXOpeningElement();\n          var children = [];\n          var closing = null;\n          if (!opening.selfClosing) {\n            var el = this.parseComplexJSXElement({\n              node: node,\n              opening: opening,\n              closing: closing,\n              children: children\n            });\n            children = el.children;\n            closing = el.closing;\n          }\n          return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n        };\n        JSXParser.prototype.parseJSXRoot = function () {\n          // Pop the opening '<' added from the lookahead.\n          if (this.config.tokens) {\n            this.tokens.pop();\n          }\n          this.startJSX();\n          var element = this.parseJSXElement();\n          this.finishJSX();\n          return element;\n        };\n        JSXParser.prototype.isStartOfExpression = function () {\n          return _super.prototype.isStartOfExpression.call(this) || this.match('<');\n        };\n        return JSXParser;\n      }(parser_1.Parser);\n      exports.JSXParser = JSXParser;\n\n      /***/\n    }, /* 4 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      // See also tools/generate-unicode-regex.js.\n      var Regex = {\n        // Unicode v8.0.0 NonAsciiIdentifierStart:\n        NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n        // Unicode v8.0.0 NonAsciiIdentifierPart:\n        NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n      };\n      exports.Character = {\n        /* tslint:disable:no-bitwise */\n        fromCodePoint: function (cp) {\n          return cp < 0x10000 ? String.fromCharCode(cp) : String.fromCharCode(0xD800 + (cp - 0x10000 >> 10)) + String.fromCharCode(0xDC00 + (cp - 0x10000 & 1023));\n        },\n        // https://tc39.github.io/ecma262/#sec-white-space\n        isWhiteSpace: function (cp) {\n          return cp === 0x20 || cp === 0x09 || cp === 0x0B || cp === 0x0C || cp === 0xA0 || cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0;\n        },\n        // https://tc39.github.io/ecma262/#sec-line-terminators\n        isLineTerminator: function (cp) {\n          return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;\n        },\n        // https://tc39.github.io/ecma262/#sec-names-and-keywords\n        isIdentifierStart: function (cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp));\n        },\n        isIdentifierPart: function (cp) {\n          return cp === 0x24 || cp === 0x5F || cp >= 0x41 && cp <= 0x5A || cp >= 0x61 && cp <= 0x7A || cp >= 0x30 && cp <= 0x39 || cp === 0x5C || cp >= 0x80 && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp));\n        },\n        // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n        isDecimalDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x39; // 0..9\n        },\n\n        isHexDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x39 || cp >= 0x41 && cp <= 0x46 || cp >= 0x61 && cp <= 0x66; // a..f\n        },\n\n        isOctalDigit: function (cp) {\n          return cp >= 0x30 && cp <= 0x37; // 0..7\n        }\n      };\n\n      /***/\n    }, /* 5 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var jsx_syntax_1 = __webpack_require__(6);\n      /* tslint:disable:max-classes-per-file */\n      var JSXClosingElement = function () {\n        function JSXClosingElement(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n          this.name = name;\n        }\n        return JSXClosingElement;\n      }();\n      exports.JSXClosingElement = JSXClosingElement;\n      var JSXElement = function () {\n        function JSXElement(openingElement, children, closingElement) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n          this.openingElement = openingElement;\n          this.children = children;\n          this.closingElement = closingElement;\n        }\n        return JSXElement;\n      }();\n      exports.JSXElement = JSXElement;\n      var JSXEmptyExpression = function () {\n        function JSXEmptyExpression() {\n          this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n        }\n        return JSXEmptyExpression;\n      }();\n      exports.JSXEmptyExpression = JSXEmptyExpression;\n      var JSXExpressionContainer = function () {\n        function JSXExpressionContainer(expression) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n          this.expression = expression;\n        }\n        return JSXExpressionContainer;\n      }();\n      exports.JSXExpressionContainer = JSXExpressionContainer;\n      var JSXIdentifier = function () {\n        function JSXIdentifier(name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n          this.name = name;\n        }\n        return JSXIdentifier;\n      }();\n      exports.JSXIdentifier = JSXIdentifier;\n      var JSXMemberExpression = function () {\n        function JSXMemberExpression(object, property) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n          this.object = object;\n          this.property = property;\n        }\n        return JSXMemberExpression;\n      }();\n      exports.JSXMemberExpression = JSXMemberExpression;\n      var JSXAttribute = function () {\n        function JSXAttribute(name, value) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n          this.name = name;\n          this.value = value;\n        }\n        return JSXAttribute;\n      }();\n      exports.JSXAttribute = JSXAttribute;\n      var JSXNamespacedName = function () {\n        function JSXNamespacedName(namespace, name) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n          this.namespace = namespace;\n          this.name = name;\n        }\n        return JSXNamespacedName;\n      }();\n      exports.JSXNamespacedName = JSXNamespacedName;\n      var JSXOpeningElement = function () {\n        function JSXOpeningElement(name, selfClosing, attributes) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n          this.name = name;\n          this.selfClosing = selfClosing;\n          this.attributes = attributes;\n        }\n        return JSXOpeningElement;\n      }();\n      exports.JSXOpeningElement = JSXOpeningElement;\n      var JSXSpreadAttribute = function () {\n        function JSXSpreadAttribute(argument) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n          this.argument = argument;\n        }\n        return JSXSpreadAttribute;\n      }();\n      exports.JSXSpreadAttribute = JSXSpreadAttribute;\n      var JSXText = function () {\n        function JSXText(value, raw) {\n          this.type = jsx_syntax_1.JSXSyntax.JSXText;\n          this.value = value;\n          this.raw = raw;\n        }\n        return JSXText;\n      }();\n      exports.JSXText = JSXText;\n\n      /***/\n    }, /* 6 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.JSXSyntax = {\n        JSXAttribute: 'JSXAttribute',\n        JSXClosingElement: 'JSXClosingElement',\n        JSXElement: 'JSXElement',\n        JSXEmptyExpression: 'JSXEmptyExpression',\n        JSXExpressionContainer: 'JSXExpressionContainer',\n        JSXIdentifier: 'JSXIdentifier',\n        JSXMemberExpression: 'JSXMemberExpression',\n        JSXNamespacedName: 'JSXNamespacedName',\n        JSXOpeningElement: 'JSXOpeningElement',\n        JSXSpreadAttribute: 'JSXSpreadAttribute',\n        JSXText: 'JSXText'\n      };\n\n      /***/\n    }, /* 7 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var syntax_1 = __webpack_require__(2);\n      /* tslint:disable:max-classes-per-file */\n      var ArrayExpression = function () {\n        function ArrayExpression(elements) {\n          this.type = syntax_1.Syntax.ArrayExpression;\n          this.elements = elements;\n        }\n        return ArrayExpression;\n      }();\n      exports.ArrayExpression = ArrayExpression;\n      var ArrayPattern = function () {\n        function ArrayPattern(elements) {\n          this.type = syntax_1.Syntax.ArrayPattern;\n          this.elements = elements;\n        }\n        return ArrayPattern;\n      }();\n      exports.ArrayPattern = ArrayPattern;\n      var ArrowFunctionExpression = function () {\n        function ArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n          this.async = false;\n        }\n        return ArrowFunctionExpression;\n      }();\n      exports.ArrowFunctionExpression = ArrowFunctionExpression;\n      var AssignmentExpression = function () {\n        function AssignmentExpression(operator, left, right) {\n          this.type = syntax_1.Syntax.AssignmentExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n        return AssignmentExpression;\n      }();\n      exports.AssignmentExpression = AssignmentExpression;\n      var AssignmentPattern = function () {\n        function AssignmentPattern(left, right) {\n          this.type = syntax_1.Syntax.AssignmentPattern;\n          this.left = left;\n          this.right = right;\n        }\n        return AssignmentPattern;\n      }();\n      exports.AssignmentPattern = AssignmentPattern;\n      var AsyncArrowFunctionExpression = function () {\n        function AsyncArrowFunctionExpression(params, body, expression) {\n          this.type = syntax_1.Syntax.ArrowFunctionExpression;\n          this.id = null;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = expression;\n          this.async = true;\n        }\n        return AsyncArrowFunctionExpression;\n      }();\n      exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\n      var AsyncFunctionDeclaration = function () {\n        function AsyncFunctionDeclaration(id, params, body) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = false;\n          this.async = true;\n        }\n        return AsyncFunctionDeclaration;\n      }();\n      exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\n      var AsyncFunctionExpression = function () {\n        function AsyncFunctionExpression(id, params, body) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = false;\n          this.expression = false;\n          this.async = true;\n        }\n        return AsyncFunctionExpression;\n      }();\n      exports.AsyncFunctionExpression = AsyncFunctionExpression;\n      var AwaitExpression = function () {\n        function AwaitExpression(argument) {\n          this.type = syntax_1.Syntax.AwaitExpression;\n          this.argument = argument;\n        }\n        return AwaitExpression;\n      }();\n      exports.AwaitExpression = AwaitExpression;\n      var BinaryExpression = function () {\n        function BinaryExpression(operator, left, right) {\n          var logical = operator === '||' || operator === '&&';\n          this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n          this.operator = operator;\n          this.left = left;\n          this.right = right;\n        }\n        return BinaryExpression;\n      }();\n      exports.BinaryExpression = BinaryExpression;\n      var BlockStatement = function () {\n        function BlockStatement(body) {\n          this.type = syntax_1.Syntax.BlockStatement;\n          this.body = body;\n        }\n        return BlockStatement;\n      }();\n      exports.BlockStatement = BlockStatement;\n      var BreakStatement = function () {\n        function BreakStatement(label) {\n          this.type = syntax_1.Syntax.BreakStatement;\n          this.label = label;\n        }\n        return BreakStatement;\n      }();\n      exports.BreakStatement = BreakStatement;\n      var CallExpression = function () {\n        function CallExpression(callee, args) {\n          this.type = syntax_1.Syntax.CallExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n        return CallExpression;\n      }();\n      exports.CallExpression = CallExpression;\n      var CatchClause = function () {\n        function CatchClause(param, body) {\n          this.type = syntax_1.Syntax.CatchClause;\n          this.param = param;\n          this.body = body;\n        }\n        return CatchClause;\n      }();\n      exports.CatchClause = CatchClause;\n      var ClassBody = function () {\n        function ClassBody(body) {\n          this.type = syntax_1.Syntax.ClassBody;\n          this.body = body;\n        }\n        return ClassBody;\n      }();\n      exports.ClassBody = ClassBody;\n      var ClassDeclaration = function () {\n        function ClassDeclaration(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassDeclaration;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n        return ClassDeclaration;\n      }();\n      exports.ClassDeclaration = ClassDeclaration;\n      var ClassExpression = function () {\n        function ClassExpression(id, superClass, body) {\n          this.type = syntax_1.Syntax.ClassExpression;\n          this.id = id;\n          this.superClass = superClass;\n          this.body = body;\n        }\n        return ClassExpression;\n      }();\n      exports.ClassExpression = ClassExpression;\n      var ComputedMemberExpression = function () {\n        function ComputedMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = true;\n          this.object = object;\n          this.property = property;\n        }\n        return ComputedMemberExpression;\n      }();\n      exports.ComputedMemberExpression = ComputedMemberExpression;\n      var ConditionalExpression = function () {\n        function ConditionalExpression(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.ConditionalExpression;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n        return ConditionalExpression;\n      }();\n      exports.ConditionalExpression = ConditionalExpression;\n      var ContinueStatement = function () {\n        function ContinueStatement(label) {\n          this.type = syntax_1.Syntax.ContinueStatement;\n          this.label = label;\n        }\n        return ContinueStatement;\n      }();\n      exports.ContinueStatement = ContinueStatement;\n      var DebuggerStatement = function () {\n        function DebuggerStatement() {\n          this.type = syntax_1.Syntax.DebuggerStatement;\n        }\n        return DebuggerStatement;\n      }();\n      exports.DebuggerStatement = DebuggerStatement;\n      var Directive = function () {\n        function Directive(expression, directive) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n          this.directive = directive;\n        }\n        return Directive;\n      }();\n      exports.Directive = Directive;\n      var DoWhileStatement = function () {\n        function DoWhileStatement(body, test) {\n          this.type = syntax_1.Syntax.DoWhileStatement;\n          this.body = body;\n          this.test = test;\n        }\n        return DoWhileStatement;\n      }();\n      exports.DoWhileStatement = DoWhileStatement;\n      var EmptyStatement = function () {\n        function EmptyStatement() {\n          this.type = syntax_1.Syntax.EmptyStatement;\n        }\n        return EmptyStatement;\n      }();\n      exports.EmptyStatement = EmptyStatement;\n      var ExportAllDeclaration = function () {\n        function ExportAllDeclaration(source) {\n          this.type = syntax_1.Syntax.ExportAllDeclaration;\n          this.source = source;\n        }\n        return ExportAllDeclaration;\n      }();\n      exports.ExportAllDeclaration = ExportAllDeclaration;\n      var ExportDefaultDeclaration = function () {\n        function ExportDefaultDeclaration(declaration) {\n          this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n          this.declaration = declaration;\n        }\n        return ExportDefaultDeclaration;\n      }();\n      exports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n      var ExportNamedDeclaration = function () {\n        function ExportNamedDeclaration(declaration, specifiers, source) {\n          this.type = syntax_1.Syntax.ExportNamedDeclaration;\n          this.declaration = declaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n        return ExportNamedDeclaration;\n      }();\n      exports.ExportNamedDeclaration = ExportNamedDeclaration;\n      var ExportSpecifier = function () {\n        function ExportSpecifier(local, exported) {\n          this.type = syntax_1.Syntax.ExportSpecifier;\n          this.exported = exported;\n          this.local = local;\n        }\n        return ExportSpecifier;\n      }();\n      exports.ExportSpecifier = ExportSpecifier;\n      var ExpressionStatement = function () {\n        function ExpressionStatement(expression) {\n          this.type = syntax_1.Syntax.ExpressionStatement;\n          this.expression = expression;\n        }\n        return ExpressionStatement;\n      }();\n      exports.ExpressionStatement = ExpressionStatement;\n      var ForInStatement = function () {\n        function ForInStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForInStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n          this.each = false;\n        }\n        return ForInStatement;\n      }();\n      exports.ForInStatement = ForInStatement;\n      var ForOfStatement = function () {\n        function ForOfStatement(left, right, body) {\n          this.type = syntax_1.Syntax.ForOfStatement;\n          this.left = left;\n          this.right = right;\n          this.body = body;\n        }\n        return ForOfStatement;\n      }();\n      exports.ForOfStatement = ForOfStatement;\n      var ForStatement = function () {\n        function ForStatement(init, test, update, body) {\n          this.type = syntax_1.Syntax.ForStatement;\n          this.init = init;\n          this.test = test;\n          this.update = update;\n          this.body = body;\n        }\n        return ForStatement;\n      }();\n      exports.ForStatement = ForStatement;\n      var FunctionDeclaration = function () {\n        function FunctionDeclaration(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionDeclaration;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n          this.async = false;\n        }\n        return FunctionDeclaration;\n      }();\n      exports.FunctionDeclaration = FunctionDeclaration;\n      var FunctionExpression = function () {\n        function FunctionExpression(id, params, body, generator) {\n          this.type = syntax_1.Syntax.FunctionExpression;\n          this.id = id;\n          this.params = params;\n          this.body = body;\n          this.generator = generator;\n          this.expression = false;\n          this.async = false;\n        }\n        return FunctionExpression;\n      }();\n      exports.FunctionExpression = FunctionExpression;\n      var Identifier = function () {\n        function Identifier(name) {\n          this.type = syntax_1.Syntax.Identifier;\n          this.name = name;\n        }\n        return Identifier;\n      }();\n      exports.Identifier = Identifier;\n      var IfStatement = function () {\n        function IfStatement(test, consequent, alternate) {\n          this.type = syntax_1.Syntax.IfStatement;\n          this.test = test;\n          this.consequent = consequent;\n          this.alternate = alternate;\n        }\n        return IfStatement;\n      }();\n      exports.IfStatement = IfStatement;\n      var ImportDeclaration = function () {\n        function ImportDeclaration(specifiers, source) {\n          this.type = syntax_1.Syntax.ImportDeclaration;\n          this.specifiers = specifiers;\n          this.source = source;\n        }\n        return ImportDeclaration;\n      }();\n      exports.ImportDeclaration = ImportDeclaration;\n      var ImportDefaultSpecifier = function () {\n        function ImportDefaultSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n          this.local = local;\n        }\n        return ImportDefaultSpecifier;\n      }();\n      exports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n      var ImportNamespaceSpecifier = function () {\n        function ImportNamespaceSpecifier(local) {\n          this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n          this.local = local;\n        }\n        return ImportNamespaceSpecifier;\n      }();\n      exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n      var ImportSpecifier = function () {\n        function ImportSpecifier(local, imported) {\n          this.type = syntax_1.Syntax.ImportSpecifier;\n          this.local = local;\n          this.imported = imported;\n        }\n        return ImportSpecifier;\n      }();\n      exports.ImportSpecifier = ImportSpecifier;\n      var LabeledStatement = function () {\n        function LabeledStatement(label, body) {\n          this.type = syntax_1.Syntax.LabeledStatement;\n          this.label = label;\n          this.body = body;\n        }\n        return LabeledStatement;\n      }();\n      exports.LabeledStatement = LabeledStatement;\n      var Literal = function () {\n        function Literal(value, raw) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n        }\n        return Literal;\n      }();\n      exports.Literal = Literal;\n      var MetaProperty = function () {\n        function MetaProperty(meta, property) {\n          this.type = syntax_1.Syntax.MetaProperty;\n          this.meta = meta;\n          this.property = property;\n        }\n        return MetaProperty;\n      }();\n      exports.MetaProperty = MetaProperty;\n      var MethodDefinition = function () {\n        function MethodDefinition(key, computed, value, kind, isStatic) {\n          this.type = syntax_1.Syntax.MethodDefinition;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.static = isStatic;\n        }\n        return MethodDefinition;\n      }();\n      exports.MethodDefinition = MethodDefinition;\n      var Module = function () {\n        function Module(body) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = 'module';\n        }\n        return Module;\n      }();\n      exports.Module = Module;\n      var NewExpression = function () {\n        function NewExpression(callee, args) {\n          this.type = syntax_1.Syntax.NewExpression;\n          this.callee = callee;\n          this.arguments = args;\n        }\n        return NewExpression;\n      }();\n      exports.NewExpression = NewExpression;\n      var ObjectExpression = function () {\n        function ObjectExpression(properties) {\n          this.type = syntax_1.Syntax.ObjectExpression;\n          this.properties = properties;\n        }\n        return ObjectExpression;\n      }();\n      exports.ObjectExpression = ObjectExpression;\n      var ObjectPattern = function () {\n        function ObjectPattern(properties) {\n          this.type = syntax_1.Syntax.ObjectPattern;\n          this.properties = properties;\n        }\n        return ObjectPattern;\n      }();\n      exports.ObjectPattern = ObjectPattern;\n      var Property = function () {\n        function Property(kind, key, computed, value, method, shorthand) {\n          this.type = syntax_1.Syntax.Property;\n          this.key = key;\n          this.computed = computed;\n          this.value = value;\n          this.kind = kind;\n          this.method = method;\n          this.shorthand = shorthand;\n        }\n        return Property;\n      }();\n      exports.Property = Property;\n      var RegexLiteral = function () {\n        function RegexLiteral(value, raw, pattern, flags) {\n          this.type = syntax_1.Syntax.Literal;\n          this.value = value;\n          this.raw = raw;\n          this.regex = {\n            pattern: pattern,\n            flags: flags\n          };\n        }\n        return RegexLiteral;\n      }();\n      exports.RegexLiteral = RegexLiteral;\n      var RestElement = function () {\n        function RestElement(argument) {\n          this.type = syntax_1.Syntax.RestElement;\n          this.argument = argument;\n        }\n        return RestElement;\n      }();\n      exports.RestElement = RestElement;\n      var ReturnStatement = function () {\n        function ReturnStatement(argument) {\n          this.type = syntax_1.Syntax.ReturnStatement;\n          this.argument = argument;\n        }\n        return ReturnStatement;\n      }();\n      exports.ReturnStatement = ReturnStatement;\n      var Script = function () {\n        function Script(body) {\n          this.type = syntax_1.Syntax.Program;\n          this.body = body;\n          this.sourceType = 'script';\n        }\n        return Script;\n      }();\n      exports.Script = Script;\n      var SequenceExpression = function () {\n        function SequenceExpression(expressions) {\n          this.type = syntax_1.Syntax.SequenceExpression;\n          this.expressions = expressions;\n        }\n        return SequenceExpression;\n      }();\n      exports.SequenceExpression = SequenceExpression;\n      var SpreadElement = function () {\n        function SpreadElement(argument) {\n          this.type = syntax_1.Syntax.SpreadElement;\n          this.argument = argument;\n        }\n        return SpreadElement;\n      }();\n      exports.SpreadElement = SpreadElement;\n      var StaticMemberExpression = function () {\n        function StaticMemberExpression(object, property) {\n          this.type = syntax_1.Syntax.MemberExpression;\n          this.computed = false;\n          this.object = object;\n          this.property = property;\n        }\n        return StaticMemberExpression;\n      }();\n      exports.StaticMemberExpression = StaticMemberExpression;\n      var Super = function () {\n        function Super() {\n          this.type = syntax_1.Syntax.Super;\n        }\n        return Super;\n      }();\n      exports.Super = Super;\n      var SwitchCase = function () {\n        function SwitchCase(test, consequent) {\n          this.type = syntax_1.Syntax.SwitchCase;\n          this.test = test;\n          this.consequent = consequent;\n        }\n        return SwitchCase;\n      }();\n      exports.SwitchCase = SwitchCase;\n      var SwitchStatement = function () {\n        function SwitchStatement(discriminant, cases) {\n          this.type = syntax_1.Syntax.SwitchStatement;\n          this.discriminant = discriminant;\n          this.cases = cases;\n        }\n        return SwitchStatement;\n      }();\n      exports.SwitchStatement = SwitchStatement;\n      var TaggedTemplateExpression = function () {\n        function TaggedTemplateExpression(tag, quasi) {\n          this.type = syntax_1.Syntax.TaggedTemplateExpression;\n          this.tag = tag;\n          this.quasi = quasi;\n        }\n        return TaggedTemplateExpression;\n      }();\n      exports.TaggedTemplateExpression = TaggedTemplateExpression;\n      var TemplateElement = function () {\n        function TemplateElement(value, tail) {\n          this.type = syntax_1.Syntax.TemplateElement;\n          this.value = value;\n          this.tail = tail;\n        }\n        return TemplateElement;\n      }();\n      exports.TemplateElement = TemplateElement;\n      var TemplateLiteral = function () {\n        function TemplateLiteral(quasis, expressions) {\n          this.type = syntax_1.Syntax.TemplateLiteral;\n          this.quasis = quasis;\n          this.expressions = expressions;\n        }\n        return TemplateLiteral;\n      }();\n      exports.TemplateLiteral = TemplateLiteral;\n      var ThisExpression = function () {\n        function ThisExpression() {\n          this.type = syntax_1.Syntax.ThisExpression;\n        }\n        return ThisExpression;\n      }();\n      exports.ThisExpression = ThisExpression;\n      var ThrowStatement = function () {\n        function ThrowStatement(argument) {\n          this.type = syntax_1.Syntax.ThrowStatement;\n          this.argument = argument;\n        }\n        return ThrowStatement;\n      }();\n      exports.ThrowStatement = ThrowStatement;\n      var TryStatement = function () {\n        function TryStatement(block, handler, finalizer) {\n          this.type = syntax_1.Syntax.TryStatement;\n          this.block = block;\n          this.handler = handler;\n          this.finalizer = finalizer;\n        }\n        return TryStatement;\n      }();\n      exports.TryStatement = TryStatement;\n      var UnaryExpression = function () {\n        function UnaryExpression(operator, argument) {\n          this.type = syntax_1.Syntax.UnaryExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = true;\n        }\n        return UnaryExpression;\n      }();\n      exports.UnaryExpression = UnaryExpression;\n      var UpdateExpression = function () {\n        function UpdateExpression(operator, argument, prefix) {\n          this.type = syntax_1.Syntax.UpdateExpression;\n          this.operator = operator;\n          this.argument = argument;\n          this.prefix = prefix;\n        }\n        return UpdateExpression;\n      }();\n      exports.UpdateExpression = UpdateExpression;\n      var VariableDeclaration = function () {\n        function VariableDeclaration(declarations, kind) {\n          this.type = syntax_1.Syntax.VariableDeclaration;\n          this.declarations = declarations;\n          this.kind = kind;\n        }\n        return VariableDeclaration;\n      }();\n      exports.VariableDeclaration = VariableDeclaration;\n      var VariableDeclarator = function () {\n        function VariableDeclarator(id, init) {\n          this.type = syntax_1.Syntax.VariableDeclarator;\n          this.id = id;\n          this.init = init;\n        }\n        return VariableDeclarator;\n      }();\n      exports.VariableDeclarator = VariableDeclarator;\n      var WhileStatement = function () {\n        function WhileStatement(test, body) {\n          this.type = syntax_1.Syntax.WhileStatement;\n          this.test = test;\n          this.body = body;\n        }\n        return WhileStatement;\n      }();\n      exports.WhileStatement = WhileStatement;\n      var WithStatement = function () {\n        function WithStatement(object, body) {\n          this.type = syntax_1.Syntax.WithStatement;\n          this.object = object;\n          this.body = body;\n        }\n        return WithStatement;\n      }();\n      exports.WithStatement = WithStatement;\n      var YieldExpression = function () {\n        function YieldExpression(argument, delegate) {\n          this.type = syntax_1.Syntax.YieldExpression;\n          this.argument = argument;\n          this.delegate = delegate;\n        }\n        return YieldExpression;\n      }();\n      exports.YieldExpression = YieldExpression;\n\n      /***/\n    }, /* 8 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var assert_1 = __webpack_require__(9);\n      var error_handler_1 = __webpack_require__(10);\n      var messages_1 = __webpack_require__(11);\n      var Node = __webpack_require__(7);\n      var scanner_1 = __webpack_require__(12);\n      var syntax_1 = __webpack_require__(2);\n      var token_1 = __webpack_require__(13);\n      var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n      var Parser = function () {\n        function Parser(code, options, delegate) {\n          if (options === void 0) {\n            options = {};\n          }\n          this.config = {\n            range: typeof options.range === 'boolean' && options.range,\n            loc: typeof options.loc === 'boolean' && options.loc,\n            source: null,\n            tokens: typeof options.tokens === 'boolean' && options.tokens,\n            comment: typeof options.comment === 'boolean' && options.comment,\n            tolerant: typeof options.tolerant === 'boolean' && options.tolerant\n          };\n          if (this.config.loc && options.source && options.source !== null) {\n            this.config.source = String(options.source);\n          }\n          this.delegate = delegate;\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = this.config.tolerant;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = this.config.comment;\n          this.operatorPrecedence = {\n            ')': 0,\n            ';': 0,\n            ',': 0,\n            '=': 0,\n            ']': 0,\n            '||': 1,\n            '&&': 2,\n            '|': 3,\n            '^': 4,\n            '&': 5,\n            '==': 6,\n            '!=': 6,\n            '===': 6,\n            '!==': 6,\n            '<': 7,\n            '>': 7,\n            '<=': 7,\n            '>=': 7,\n            '<<': 8,\n            '>>': 8,\n            '>>>': 8,\n            '+': 9,\n            '-': 9,\n            '*': 11,\n            '/': 11,\n            '%': 11\n          };\n          this.lookahead = {\n            type: 2 /* EOF */,\n            value: '',\n            lineNumber: this.scanner.lineNumber,\n            lineStart: 0,\n            start: 0,\n            end: 0\n          };\n          this.hasLineTerminator = false;\n          this.context = {\n            isModule: false,\n            await: false,\n            allowIn: true,\n            allowStrictDirective: true,\n            allowYield: true,\n            firstCoverInitializedNameError: null,\n            isAssignmentTarget: false,\n            isBindingElement: false,\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false,\n            labelSet: {},\n            strict: false\n          };\n          this.tokens = [];\n          this.startMarker = {\n            index: 0,\n            line: this.scanner.lineNumber,\n            column: 0\n          };\n          this.lastMarker = {\n            index: 0,\n            line: this.scanner.lineNumber,\n            column: 0\n          };\n          this.nextToken();\n          this.lastMarker = {\n            index: this.scanner.index,\n            line: this.scanner.lineNumber,\n            column: this.scanner.index - this.scanner.lineStart\n          };\n        }\n        Parser.prototype.throwError = function (messageFormat) {\n          var values = [];\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.lastMarker.line;\n          var column = this.lastMarker.column + 1;\n          throw this.errorHandler.createError(index, line, column, msg);\n        };\n        Parser.prototype.tolerateError = function (messageFormat) {\n          var values = [];\n          for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n          }\n          var args = Array.prototype.slice.call(arguments, 1);\n          var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n            assert_1.assert(idx < args.length, 'Message reference must be in range');\n            return args[idx];\n          });\n          var index = this.lastMarker.index;\n          var line = this.scanner.lineNumber;\n          var column = this.lastMarker.column + 1;\n          this.errorHandler.tolerateError(index, line, column, msg);\n        };\n        // Throw an exception because of the token.\n        Parser.prototype.unexpectedTokenError = function (token, message) {\n          var msg = message || messages_1.Messages.UnexpectedToken;\n          var value;\n          if (token) {\n            if (!message) {\n              msg = token.type === 2 /* EOF */ ? messages_1.Messages.UnexpectedEOS : token.type === 3 /* Identifier */ ? messages_1.Messages.UnexpectedIdentifier : token.type === 6 /* NumericLiteral */ ? messages_1.Messages.UnexpectedNumber : token.type === 8 /* StringLiteral */ ? messages_1.Messages.UnexpectedString : token.type === 10 /* Template */ ? messages_1.Messages.UnexpectedTemplate : messages_1.Messages.UnexpectedToken;\n              if (token.type === 4 /* Keyword */) {\n                if (this.scanner.isFutureReservedWord(token.value)) {\n                  msg = messages_1.Messages.UnexpectedReserved;\n                } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n                  msg = messages_1.Messages.StrictReservedWord;\n                }\n              }\n            }\n            value = token.value;\n          } else {\n            value = 'ILLEGAL';\n          }\n          msg = msg.replace('%0', value);\n          if (token && typeof token.lineNumber === 'number') {\n            var index = token.start;\n            var line = token.lineNumber;\n            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\n            var column = token.start - lastMarkerLineStart + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          } else {\n            var index = this.lastMarker.index;\n            var line = this.lastMarker.line;\n            var column = this.lastMarker.column + 1;\n            return this.errorHandler.createError(index, line, column, msg);\n          }\n        };\n        Parser.prototype.throwUnexpectedToken = function (token, message) {\n          throw this.unexpectedTokenError(token, message);\n        };\n        Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n          this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n        };\n        Parser.prototype.collectComments = function () {\n          if (!this.config.comment) {\n            this.scanner.scanComments();\n          } else {\n            var comments = this.scanner.scanComments();\n            if (comments.length > 0 && this.delegate) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var node = void 0;\n                node = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: this.scanner.source.slice(e.slice[0], e.slice[1])\n                };\n                if (this.config.range) {\n                  node.range = e.range;\n                }\n                if (this.config.loc) {\n                  node.loc = e.loc;\n                }\n                var metadata = {\n                  start: {\n                    line: e.loc.start.line,\n                    column: e.loc.start.column,\n                    offset: e.range[0]\n                  },\n                  end: {\n                    line: e.loc.end.line,\n                    column: e.loc.end.column,\n                    offset: e.range[1]\n                  }\n                };\n                this.delegate(node, metadata);\n              }\n            }\n          }\n        };\n        // From internal representation to an external structure\n        Parser.prototype.getTokenRaw = function (token) {\n          return this.scanner.source.slice(token.start, token.end);\n        };\n        Parser.prototype.convertToken = function (token) {\n          var t = {\n            type: token_1.TokenName[token.type],\n            value: this.getTokenRaw(token)\n          };\n          if (this.config.range) {\n            t.range = [token.start, token.end];\n          }\n          if (this.config.loc) {\n            t.loc = {\n              start: {\n                line: this.startMarker.line,\n                column: this.startMarker.column\n              },\n              end: {\n                line: this.scanner.lineNumber,\n                column: this.scanner.index - this.scanner.lineStart\n              }\n            };\n          }\n          if (token.type === 9 /* RegularExpression */) {\n            var pattern = token.pattern;\n            var flags = token.flags;\n            t.regex = {\n              pattern: pattern,\n              flags: flags\n            };\n          }\n          return t;\n        };\n        Parser.prototype.nextToken = function () {\n          var token = this.lookahead;\n          this.lastMarker.index = this.scanner.index;\n          this.lastMarker.line = this.scanner.lineNumber;\n          this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n          this.collectComments();\n          if (this.scanner.index !== this.startMarker.index) {\n            this.startMarker.index = this.scanner.index;\n            this.startMarker.line = this.scanner.lineNumber;\n            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n          }\n          var next = this.scanner.lex();\n          this.hasLineTerminator = token.lineNumber !== next.lineNumber;\n          if (next && this.context.strict && next.type === 3 /* Identifier */) {\n            if (this.scanner.isStrictModeReservedWord(next.value)) {\n              next.type = 4 /* Keyword */;\n            }\n          }\n\n          this.lookahead = next;\n          if (this.config.tokens && next.type !== 2 /* EOF */) {\n            this.tokens.push(this.convertToken(next));\n          }\n          return token;\n        };\n        Parser.prototype.nextRegexToken = function () {\n          this.collectComments();\n          var token = this.scanner.scanRegExp();\n          if (this.config.tokens) {\n            // Pop the previous token, '/' or '/='\n            // This is added from the lookahead token.\n            this.tokens.pop();\n            this.tokens.push(this.convertToken(token));\n          }\n          // Prime the next lookahead.\n          this.lookahead = token;\n          this.nextToken();\n          return token;\n        };\n        Parser.prototype.createNode = function () {\n          return {\n            index: this.startMarker.index,\n            line: this.startMarker.line,\n            column: this.startMarker.column\n          };\n        };\n        Parser.prototype.startNode = function (token, lastLineStart) {\n          if (lastLineStart === void 0) {\n            lastLineStart = 0;\n          }\n          var column = token.start - token.lineStart;\n          var line = token.lineNumber;\n          if (column < 0) {\n            column += lastLineStart;\n            line--;\n          }\n          return {\n            index: token.start,\n            line: line,\n            column: column\n          };\n        };\n        Parser.prototype.finalize = function (marker, node) {\n          if (this.config.range) {\n            node.range = [marker.index, this.lastMarker.index];\n          }\n          if (this.config.loc) {\n            node.loc = {\n              start: {\n                line: marker.line,\n                column: marker.column\n              },\n              end: {\n                line: this.lastMarker.line,\n                column: this.lastMarker.column\n              }\n            };\n            if (this.config.source) {\n              node.loc.source = this.config.source;\n            }\n          }\n          if (this.delegate) {\n            var metadata = {\n              start: {\n                line: marker.line,\n                column: marker.column,\n                offset: marker.index\n              },\n              end: {\n                line: this.lastMarker.line,\n                column: this.lastMarker.column,\n                offset: this.lastMarker.index\n              }\n            };\n            this.delegate(node, metadata);\n          }\n          return node;\n        };\n        // Expect the next token to match the specified punctuator.\n        // If not, an exception will be thrown.\n        Parser.prototype.expect = function (value) {\n          var token = this.nextToken();\n          if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n            this.throwUnexpectedToken(token);\n          }\n        };\n        // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n        Parser.prototype.expectCommaSeparator = function () {\n          if (this.config.tolerant) {\n            var token = this.lookahead;\n            if (token.type === 7 /* Punctuator */ && token.value === ',') {\n              this.nextToken();\n            } else if (token.type === 7 /* Punctuator */ && token.value === ';') {\n              this.nextToken();\n              this.tolerateUnexpectedToken(token);\n            } else {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n            }\n          } else {\n            this.expect(',');\n          }\n        };\n        // Expect the next token to match the specified keyword.\n        // If not, an exception will be thrown.\n        Parser.prototype.expectKeyword = function (keyword) {\n          var token = this.nextToken();\n          if (token.type !== 4 /* Keyword */ || token.value !== keyword) {\n            this.throwUnexpectedToken(token);\n          }\n        };\n        // Return true if the next token matches the specified punctuator.\n        Parser.prototype.match = function (value) {\n          return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;\n        };\n        // Return true if the next token matches the specified keyword\n        Parser.prototype.matchKeyword = function (keyword) {\n          return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;\n        };\n        // Return true if the next token matches the specified contextual keyword\n        // (where an identifier is sometimes a keyword depending on the context)\n        Parser.prototype.matchContextualKeyword = function (keyword) {\n          return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;\n        };\n        // Return true if the next token is an assignment operator\n        Parser.prototype.matchAssign = function () {\n          if (this.lookahead.type !== 7 /* Punctuator */) {\n            return false;\n          }\n          var op = this.lookahead.value;\n          return op === '=' || op === '*=' || op === '**=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';\n        };\n        // Cover grammar support.\n        //\n        // When an assignment expression position starts with an left parenthesis, the determination of the type\n        // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n        // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n        //\n        // There are three productions that can be parsed in a parentheses pair that needs to be determined\n        // after the outermost pair is closed. They are:\n        //\n        //   1. AssignmentExpression\n        //   2. BindingElements\n        //   3. AssignmentTargets\n        //\n        // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n        // binding element or assignment target.\n        //\n        // The three productions have the relationship:\n        //\n        //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n        //\n        // with a single exception that CoverInitializedName when used directly in an Expression, generates\n        // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n        // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n        //\n        // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n        // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n        // the CoverInitializedName check is conducted.\n        //\n        // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n        // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n        // pattern. The CoverInitializedName check is deferred.\n        Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n          if (this.context.firstCoverInitializedNameError !== null) {\n            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n          }\n          this.context.isBindingElement = previousIsBindingElement;\n          this.context.isAssignmentTarget = previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n          return result;\n        };\n        Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n          var previousIsBindingElement = this.context.isBindingElement;\n          var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n          var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n          this.context.isBindingElement = true;\n          this.context.isAssignmentTarget = true;\n          this.context.firstCoverInitializedNameError = null;\n          var result = parseFunction.call(this);\n          this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n          this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n          this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n          return result;\n        };\n        Parser.prototype.consumeSemicolon = function () {\n          if (this.match(';')) {\n            this.nextToken();\n          } else if (!this.hasLineTerminator) {\n            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n            this.lastMarker.index = this.startMarker.index;\n            this.lastMarker.line = this.startMarker.line;\n            this.lastMarker.column = this.startMarker.column;\n          }\n        };\n        // https://tc39.github.io/ecma262/#sec-primary-expression\n        Parser.prototype.parsePrimaryExpression = function () {\n          var node = this.createNode();\n          var expr;\n          var token, raw;\n          switch (this.lookahead.type) {\n            case 3 /* Identifier */:\n              if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\n                this.tolerateUnexpectedToken(this.lookahead);\n              }\n              expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\n              break;\n            case 6 /* NumericLiteral */:\n            case 8 /* StringLiteral */:\n              if (this.context.strict && this.lookahead.octal) {\n                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n              }\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n            case 1 /* BooleanLiteral */:\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\n              break;\n            case 5 /* NullLiteral */:\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              token = this.nextToken();\n              raw = this.getTokenRaw(token);\n              expr = this.finalize(node, new Node.Literal(null, raw));\n              break;\n            case 10 /* Template */:\n              expr = this.parseTemplateLiteral();\n              break;\n            case 7 /* Punctuator */:\n              switch (this.lookahead.value) {\n                case '(':\n                  this.context.isBindingElement = false;\n                  expr = this.inheritCoverGrammar(this.parseGroupExpression);\n                  break;\n                case '[':\n                  expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n                  break;\n                case '{':\n                  expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n                  break;\n                case '/':\n                case '/=':\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                  this.scanner.index = this.startMarker.index;\n                  token = this.nextRegexToken();\n                  raw = this.getTokenRaw(token);\n                  expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\n                  break;\n                default:\n                  expr = this.throwUnexpectedToken(this.nextToken());\n              }\n              break;\n            case 4 /* Keyword */:\n              if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n                expr = this.parseIdentifierName();\n              } else if (!this.context.strict && this.matchKeyword('let')) {\n                expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n              } else {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                if (this.matchKeyword('function')) {\n                  expr = this.parseFunctionExpression();\n                } else if (this.matchKeyword('this')) {\n                  this.nextToken();\n                  expr = this.finalize(node, new Node.ThisExpression());\n                } else if (this.matchKeyword('class')) {\n                  expr = this.parseClassExpression();\n                } else {\n                  expr = this.throwUnexpectedToken(this.nextToken());\n                }\n              }\n              break;\n            default:\n              expr = this.throwUnexpectedToken(this.nextToken());\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-array-initializer\n        Parser.prototype.parseSpreadElement = function () {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n          return this.finalize(node, new Node.SpreadElement(arg));\n        };\n        Parser.prototype.parseArrayInitializer = function () {\n          var node = this.createNode();\n          var elements = [];\n          this.expect('[');\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else if (this.match('...')) {\n              var element = this.parseSpreadElement();\n              if (!this.match(']')) {\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                this.expect(',');\n              }\n              elements.push(element);\n            } else {\n              elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayExpression(elements));\n        };\n        // https://tc39.github.io/ecma262/#sec-object-initializer\n        Parser.prototype.parsePropertyMethod = function (params) {\n          this.context.isAssignmentTarget = false;\n          this.context.isBindingElement = false;\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = params.simple;\n          var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n          if (this.context.strict && params.firstRestricted) {\n            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n          }\n          if (this.context.strict && params.stricted) {\n            this.tolerateUnexpectedToken(params.stricted, params.message);\n          }\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          return body;\n        };\n        Parser.prototype.parsePropertyMethodFunction = function () {\n          var isGenerator = false;\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        };\n        Parser.prototype.parsePropertyMethodAsyncFunction = function () {\n          var node = this.createNode();\n          var previousAllowYield = this.context.allowYield;\n          var previousAwait = this.context.await;\n          this.context.allowYield = false;\n          this.context.await = true;\n          var params = this.parseFormalParameters();\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          this.context.await = previousAwait;\n          return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\n        };\n        Parser.prototype.parseObjectPropertyKey = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n          var key;\n          switch (token.type) {\n            case 8 /* StringLiteral */:\n            case 6 /* NumericLiteral */:\n              if (this.context.strict && token.octal) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n              }\n              var raw = this.getTokenRaw(token);\n              key = this.finalize(node, new Node.Literal(token.value, raw));\n              break;\n            case 3 /* Identifier */:\n            case 1 /* BooleanLiteral */:\n            case 5 /* NullLiteral */:\n            case 4 /* Keyword */:\n              key = this.finalize(node, new Node.Identifier(token.value));\n              break;\n            case 7 /* Punctuator */:\n              if (token.value === '[') {\n                key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                this.expect(']');\n              } else {\n                key = this.throwUnexpectedToken(token);\n              }\n              break;\n            default:\n              key = this.throwUnexpectedToken(token);\n          }\n          return key;\n        };\n        Parser.prototype.isPropertyKey = function (key, value) {\n          return key.type === syntax_1.Syntax.Identifier && key.name === value || key.type === syntax_1.Syntax.Literal && key.value === value;\n        };\n        Parser.prototype.parseObjectProperty = function (hasProto) {\n          var node = this.createNode();\n          var token = this.lookahead;\n          var kind;\n          var key = null;\n          var value = null;\n          var computed = false;\n          var method = false;\n          var shorthand = false;\n          var isAsync = false;\n          if (token.type === 3 /* Identifier */) {\n            var id = token.value;\n            this.nextToken();\n            computed = this.match('[');\n            isAsync = !this.hasLineTerminator && id === 'async' && !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\n            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\n          } else if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n          }\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n          if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\n            kind = 'get';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.context.allowYield = false;\n            value = this.parseGetterMethod();\n          } else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\n            kind = 'set';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseSetterMethod();\n          } else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          } else {\n            if (!key) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n            kind = 'init';\n            if (this.match(':') && !isAsync) {\n              if (!computed && this.isPropertyKey(key, '__proto__')) {\n                if (hasProto.value) {\n                  this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n                }\n                hasProto.value = true;\n              }\n              this.nextToken();\n              value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n            } else if (this.match('(')) {\n              value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n              method = true;\n            } else if (token.type === 3 /* Identifier */) {\n              var id = this.finalize(node, new Node.Identifier(token.value));\n              if (this.match('=')) {\n                this.context.firstCoverInitializedNameError = this.lookahead;\n                this.nextToken();\n                shorthand = true;\n                var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                value = this.finalize(node, new Node.AssignmentPattern(id, init));\n              } else {\n                shorthand = true;\n                value = id;\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n          return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n        };\n        Parser.prototype.parseObjectInitializer = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var properties = [];\n          var hasProto = {\n            value: false\n          };\n          while (!this.match('}')) {\n            properties.push(this.parseObjectProperty(hasProto));\n            if (!this.match('}')) {\n              this.expectCommaSeparator();\n            }\n          }\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectExpression(properties));\n        };\n        // https://tc39.github.io/ecma262/#sec-template-literals\n        Parser.prototype.parseTemplateHead = function () {\n          assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n          var node = this.createNode();\n          var token = this.nextToken();\n          var raw = token.value;\n          var cooked = token.cooked;\n          return this.finalize(node, new Node.TemplateElement({\n            raw: raw,\n            cooked: cooked\n          }, token.tail));\n        };\n        Parser.prototype.parseTemplateElement = function () {\n          if (this.lookahead.type !== 10 /* Template */) {\n            this.throwUnexpectedToken();\n          }\n          var node = this.createNode();\n          var token = this.nextToken();\n          var raw = token.value;\n          var cooked = token.cooked;\n          return this.finalize(node, new Node.TemplateElement({\n            raw: raw,\n            cooked: cooked\n          }, token.tail));\n        };\n        Parser.prototype.parseTemplateLiteral = function () {\n          var node = this.createNode();\n          var expressions = [];\n          var quasis = [];\n          var quasi = this.parseTemplateHead();\n          quasis.push(quasi);\n          while (!quasi.tail) {\n            expressions.push(this.parseExpression());\n            quasi = this.parseTemplateElement();\n            quasis.push(quasi);\n          }\n          return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n        };\n        // https://tc39.github.io/ecma262/#sec-grouping-operator\n        Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n            case syntax_1.Syntax.MemberExpression:\n            case syntax_1.Syntax.RestElement:\n            case syntax_1.Syntax.AssignmentPattern:\n              break;\n            case syntax_1.Syntax.SpreadElement:\n              expr.type = syntax_1.Syntax.RestElement;\n              this.reinterpretExpressionAsPattern(expr.argument);\n              break;\n            case syntax_1.Syntax.ArrayExpression:\n              expr.type = syntax_1.Syntax.ArrayPattern;\n              for (var i = 0; i < expr.elements.length; i++) {\n                if (expr.elements[i] !== null) {\n                  this.reinterpretExpressionAsPattern(expr.elements[i]);\n                }\n              }\n              break;\n            case syntax_1.Syntax.ObjectExpression:\n              expr.type = syntax_1.Syntax.ObjectPattern;\n              for (var i = 0; i < expr.properties.length; i++) {\n                this.reinterpretExpressionAsPattern(expr.properties[i].value);\n              }\n              break;\n            case syntax_1.Syntax.AssignmentExpression:\n              expr.type = syntax_1.Syntax.AssignmentPattern;\n              delete expr.operator;\n              this.reinterpretExpressionAsPattern(expr.left);\n              break;\n            default:\n              // Allow other node type for tolerant parsing.\n              break;\n          }\n        };\n        Parser.prototype.parseGroupExpression = function () {\n          var expr;\n          this.expect('(');\n          if (this.match(')')) {\n            this.nextToken();\n            if (!this.match('=>')) {\n              this.expect('=>');\n            }\n            expr = {\n              type: ArrowParameterPlaceHolder,\n              params: [],\n              async: false\n            };\n          } else {\n            var startToken = this.lookahead;\n            var params = [];\n            if (this.match('...')) {\n              expr = this.parseRestElement(params);\n              this.expect(')');\n              if (!this.match('=>')) {\n                this.expect('=>');\n              }\n              expr = {\n                type: ArrowParameterPlaceHolder,\n                params: [expr],\n                async: false\n              };\n            } else {\n              var arrow = false;\n              this.context.isBindingElement = true;\n              expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n              if (this.match(',')) {\n                var expressions = [];\n                this.context.isAssignmentTarget = false;\n                expressions.push(expr);\n                while (this.lookahead.type !== 2 /* EOF */) {\n                  if (!this.match(',')) {\n                    break;\n                  }\n                  this.nextToken();\n                  if (this.match(')')) {\n                    this.nextToken();\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions,\n                      async: false\n                    };\n                  } else if (this.match('...')) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n                    expressions.push(this.parseRestElement(params));\n                    this.expect(')');\n                    if (!this.match('=>')) {\n                      this.expect('=>');\n                    }\n                    this.context.isBindingElement = false;\n                    for (var i = 0; i < expressions.length; i++) {\n                      this.reinterpretExpressionAsPattern(expressions[i]);\n                    }\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: expressions,\n                      async: false\n                    };\n                  } else {\n                    expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n                  }\n                  if (arrow) {\n                    break;\n                  }\n                }\n                if (!arrow) {\n                  expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n                }\n              }\n              if (!arrow) {\n                this.expect(')');\n                if (this.match('=>')) {\n                  if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n                    arrow = true;\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: [expr],\n                      async: false\n                    };\n                  }\n                  if (!arrow) {\n                    if (!this.context.isBindingElement) {\n                      this.throwUnexpectedToken(this.lookahead);\n                    }\n                    if (expr.type === syntax_1.Syntax.SequenceExpression) {\n                      for (var i = 0; i < expr.expressions.length; i++) {\n                        this.reinterpretExpressionAsPattern(expr.expressions[i]);\n                      }\n                    } else {\n                      this.reinterpretExpressionAsPattern(expr);\n                    }\n                    var parameters = expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr];\n                    expr = {\n                      type: ArrowParameterPlaceHolder,\n                      params: parameters,\n                      async: false\n                    };\n                  }\n                }\n                this.context.isBindingElement = false;\n              }\n            }\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\n        Parser.prototype.parseArguments = function () {\n          this.expect('(');\n          var args = [];\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);\n              args.push(expr);\n              if (this.match(')')) {\n                break;\n              }\n              this.expectCommaSeparator();\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n          this.expect(')');\n          return args;\n        };\n        Parser.prototype.isIdentifierName = function (token) {\n          return token.type === 3 /* Identifier */ || token.type === 4 /* Keyword */ || token.type === 1 /* BooleanLiteral */ || token.type === 5 /* NullLiteral */;\n        };\n\n        Parser.prototype.parseIdentifierName = function () {\n          var node = this.createNode();\n          var token = this.nextToken();\n          if (!this.isIdentifierName(token)) {\n            this.throwUnexpectedToken(token);\n          }\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n        Parser.prototype.parseNewExpression = function () {\n          var node = this.createNode();\n          var id = this.parseIdentifierName();\n          assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n          var expr;\n          if (this.match('.')) {\n            this.nextToken();\n            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {\n              var property = this.parseIdentifierName();\n              expr = new Node.MetaProperty(id, property);\n            } else {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n            var args = this.match('(') ? this.parseArguments() : [];\n            expr = new Node.NewExpression(callee, args);\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n          return this.finalize(node, expr);\n        };\n        Parser.prototype.parseAsyncArgument = function () {\n          var arg = this.parseAssignmentExpression();\n          this.context.firstCoverInitializedNameError = null;\n          return arg;\n        };\n        Parser.prototype.parseAsyncArguments = function () {\n          this.expect('(');\n          var args = [];\n          if (!this.match(')')) {\n            while (true) {\n              var expr = this.match('...') ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);\n              args.push(expr);\n              if (this.match(')')) {\n                break;\n              }\n              this.expectCommaSeparator();\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n          this.expect(')');\n          return args;\n        };\n        Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n          var startToken = this.lookahead;\n          var maybeAsync = this.matchContextualKeyword('async');\n          var previousAllowIn = this.context.allowIn;\n          this.context.allowIn = true;\n          var expr;\n          if (this.matchKeyword('super') && this.context.inFunctionBody) {\n            expr = this.createNode();\n            this.nextToken();\n            expr = this.finalize(expr, new Node.Super());\n            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n          } else {\n            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n          }\n          while (true) {\n            if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n            } else if (this.match('(')) {\n              var asyncArrow = maybeAsync && startToken.lineNumber === this.lookahead.lineNumber;\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = false;\n              var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\n              expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n              if (asyncArrow && this.match('=>')) {\n                for (var i = 0; i < args.length; ++i) {\n                  this.reinterpretExpressionAsPattern(args[i]);\n                }\n                expr = {\n                  type: ArrowParameterPlaceHolder,\n                  params: args,\n                  async: true\n                };\n              }\n            } else if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n            } else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n          this.context.allowIn = previousAllowIn;\n          return expr;\n        };\n        Parser.prototype.parseSuper = function () {\n          var node = this.createNode();\n          this.expectKeyword('super');\n          if (!this.match('[') && !this.match('.')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n          return this.finalize(node, new Node.Super());\n        };\n        Parser.prototype.parseLeftHandSideExpression = function () {\n          assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n          var node = this.startNode(this.lookahead);\n          var expr = this.matchKeyword('super') && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n          while (true) {\n            if (this.match('[')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('[');\n              var property = this.isolateCoverGrammar(this.parseExpression);\n              this.expect(']');\n              expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n            } else if (this.match('.')) {\n              this.context.isBindingElement = false;\n              this.context.isAssignmentTarget = true;\n              this.expect('.');\n              var property = this.parseIdentifierName();\n              expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n            } else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n              var quasi = this.parseTemplateLiteral();\n              expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n            } else {\n              break;\n            }\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-update-expressions\n        Parser.prototype.parseUpdateExpression = function () {\n          var expr;\n          var startToken = this.lookahead;\n          if (this.match('++') || this.match('--')) {\n            var node = this.startNode(startToken);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n              this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n            }\n            if (!this.context.isAssignmentTarget) {\n              this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n            }\n            var prefix = true;\n            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else {\n            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {\n              if (this.match('++') || this.match('--')) {\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n                  this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n                }\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n                this.context.isAssignmentTarget = false;\n                this.context.isBindingElement = false;\n                var operator = this.nextToken().value;\n                var prefix = false;\n                expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n              }\n            }\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-unary-operators\n        Parser.prototype.parseAwaitExpression = function () {\n          var node = this.createNode();\n          this.nextToken();\n          var argument = this.parseUnaryExpression();\n          return this.finalize(node, new Node.AwaitExpression(argument));\n        };\n        Parser.prototype.parseUnaryExpression = function () {\n          var expr;\n          if (this.match('+') || this.match('-') || this.match('~') || this.match('!') || this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n            var node = this.startNode(this.lookahead);\n            var token = this.nextToken();\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n              this.tolerateError(messages_1.Messages.StrictDelete);\n            }\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          } else if (this.context.await && this.matchContextualKeyword('await')) {\n            expr = this.parseAwaitExpression();\n          } else {\n            expr = this.parseUpdateExpression();\n          }\n          return expr;\n        };\n        Parser.prototype.parseExponentiationExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n          if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-exp-operator\n        // https://tc39.github.io/ecma262/#sec-multiplicative-operators\n        // https://tc39.github.io/ecma262/#sec-additive-operators\n        // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\n        // https://tc39.github.io/ecma262/#sec-relational-operators\n        // https://tc39.github.io/ecma262/#sec-equality-operators\n        // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\n        // https://tc39.github.io/ecma262/#sec-binary-logical-operators\n        Parser.prototype.binaryPrecedence = function (token) {\n          var op = token.value;\n          var precedence;\n          if (token.type === 7 /* Punctuator */) {\n            precedence = this.operatorPrecedence[op] || 0;\n          } else if (token.type === 4 /* Keyword */) {\n            precedence = op === 'instanceof' || this.context.allowIn && op === 'in' ? 7 : 0;\n          } else {\n            precedence = 0;\n          }\n          return precedence;\n        };\n        Parser.prototype.parseBinaryExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n          var token = this.lookahead;\n          var prec = this.binaryPrecedence(token);\n          if (prec > 0) {\n            this.nextToken();\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n            var markers = [startToken, this.lookahead];\n            var left = expr;\n            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n            var stack = [left, token.value, right];\n            var precedences = [prec];\n            while (true) {\n              prec = this.binaryPrecedence(this.lookahead);\n              if (prec <= 0) {\n                break;\n              }\n              // Reduce: make a binary expression from the three topmost entries.\n              while (stack.length > 2 && prec <= precedences[precedences.length - 1]) {\n                right = stack.pop();\n                var operator = stack.pop();\n                precedences.pop();\n                left = stack.pop();\n                markers.pop();\n                var node = this.startNode(markers[markers.length - 1]);\n                stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n              }\n              // Shift.\n              stack.push(this.nextToken().value);\n              precedences.push(prec);\n              markers.push(this.lookahead);\n              stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n            }\n            // Final reduce to clean-up the stack.\n            var i = stack.length - 1;\n            expr = stack[i];\n            var lastMarker = markers.pop();\n            while (i > 1) {\n              var marker = markers.pop();\n              var lastLineStart = lastMarker && lastMarker.lineStart;\n              var node = this.startNode(marker, lastLineStart);\n              var operator = stack[i - 1];\n              expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\n              i -= 2;\n              lastMarker = marker;\n            }\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-conditional-operator\n        Parser.prototype.parseConditionalExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n          if (this.match('?')) {\n            this.nextToken();\n            var previousAllowIn = this.context.allowIn;\n            this.context.allowIn = true;\n            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowIn = previousAllowIn;\n            this.expect(':');\n            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n            this.context.isAssignmentTarget = false;\n            this.context.isBindingElement = false;\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-assignment-operators\n        Parser.prototype.checkPatternParam = function (options, param) {\n          switch (param.type) {\n            case syntax_1.Syntax.Identifier:\n              this.validateParam(options, param, param.name);\n              break;\n            case syntax_1.Syntax.RestElement:\n              this.checkPatternParam(options, param.argument);\n              break;\n            case syntax_1.Syntax.AssignmentPattern:\n              this.checkPatternParam(options, param.left);\n              break;\n            case syntax_1.Syntax.ArrayPattern:\n              for (var i = 0; i < param.elements.length; i++) {\n                if (param.elements[i] !== null) {\n                  this.checkPatternParam(options, param.elements[i]);\n                }\n              }\n              break;\n            case syntax_1.Syntax.ObjectPattern:\n              for (var i = 0; i < param.properties.length; i++) {\n                this.checkPatternParam(options, param.properties[i].value);\n              }\n              break;\n            default:\n              break;\n          }\n          options.simple = options.simple && param instanceof Node.Identifier;\n        };\n        Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n          var params = [expr];\n          var options;\n          var asyncArrow = false;\n          switch (expr.type) {\n            case syntax_1.Syntax.Identifier:\n              break;\n            case ArrowParameterPlaceHolder:\n              params = expr.params;\n              asyncArrow = expr.async;\n              break;\n            default:\n              return null;\n          }\n          options = {\n            simple: true,\n            paramSet: {}\n          };\n          for (var i = 0; i < params.length; ++i) {\n            var param = params[i];\n            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n              if (param.right.type === syntax_1.Syntax.YieldExpression) {\n                if (param.right.argument) {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n                param.right.type = syntax_1.Syntax.Identifier;\n                param.right.name = 'yield';\n                delete param.right.argument;\n                delete param.right.delegate;\n              }\n            } else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\n              this.throwUnexpectedToken(this.lookahead);\n            }\n            this.checkPatternParam(options, param);\n            params[i] = param;\n          }\n          if (this.context.strict || !this.context.allowYield) {\n            for (var i = 0; i < params.length; ++i) {\n              var param = params[i];\n              if (param.type === syntax_1.Syntax.YieldExpression) {\n                this.throwUnexpectedToken(this.lookahead);\n              }\n            }\n          }\n          if (options.message === messages_1.Messages.StrictParamDupe) {\n            var token = this.context.strict ? options.stricted : options.firstRestricted;\n            this.throwUnexpectedToken(token, options.message);\n          }\n          return {\n            simple: options.simple,\n            params: params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n        Parser.prototype.parseAssignmentExpression = function () {\n          var expr;\n          if (!this.context.allowYield && this.matchKeyword('yield')) {\n            expr = this.parseYieldExpression();\n          } else {\n            var startToken = this.lookahead;\n            var token = startToken;\n            expr = this.parseConditionalExpression();\n            if (token.type === 3 /* Identifier */ && token.lineNumber === this.lookahead.lineNumber && token.value === 'async') {\n              if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {\n                var arg = this.parsePrimaryExpression();\n                this.reinterpretExpressionAsPattern(arg);\n                expr = {\n                  type: ArrowParameterPlaceHolder,\n                  params: [arg],\n                  async: true\n                };\n              }\n            }\n            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n              // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\n              this.context.isAssignmentTarget = false;\n              this.context.isBindingElement = false;\n              var isAsync = expr.async;\n              var list = this.reinterpretAsCoverFormalsList(expr);\n              if (list) {\n                if (this.hasLineTerminator) {\n                  this.tolerateUnexpectedToken(this.lookahead);\n                }\n                this.context.firstCoverInitializedNameError = null;\n                var previousStrict = this.context.strict;\n                var previousAllowStrictDirective = this.context.allowStrictDirective;\n                this.context.allowStrictDirective = list.simple;\n                var previousAllowYield = this.context.allowYield;\n                var previousAwait = this.context.await;\n                this.context.allowYield = true;\n                this.context.await = isAsync;\n                var node = this.startNode(startToken);\n                this.expect('=>');\n                var body = void 0;\n                if (this.match('{')) {\n                  var previousAllowIn = this.context.allowIn;\n                  this.context.allowIn = true;\n                  body = this.parseFunctionSourceElements();\n                  this.context.allowIn = previousAllowIn;\n                } else {\n                  body = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                }\n                var expression = body.type !== syntax_1.Syntax.BlockStatement;\n                if (this.context.strict && list.firstRestricted) {\n                  this.throwUnexpectedToken(list.firstRestricted, list.message);\n                }\n                if (this.context.strict && list.stricted) {\n                  this.tolerateUnexpectedToken(list.stricted, list.message);\n                }\n                expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) : this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n                this.context.strict = previousStrict;\n                this.context.allowStrictDirective = previousAllowStrictDirective;\n                this.context.allowYield = previousAllowYield;\n                this.context.await = previousAwait;\n              }\n            } else {\n              if (this.matchAssign()) {\n                if (!this.context.isAssignmentTarget) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n                }\n                if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n                  var id = expr;\n                  if (this.scanner.isRestrictedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n                  }\n                  if (this.scanner.isStrictModeReservedWord(id.name)) {\n                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n                  }\n                }\n                if (!this.match('=')) {\n                  this.context.isAssignmentTarget = false;\n                  this.context.isBindingElement = false;\n                } else {\n                  this.reinterpretExpressionAsPattern(expr);\n                }\n                token = this.nextToken();\n                var operator = token.value;\n                var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n                expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\n                this.context.firstCoverInitializedNameError = null;\n              }\n            }\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-comma-operator\n        Parser.prototype.parseExpression = function () {\n          var startToken = this.lookahead;\n          var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          if (this.match(',')) {\n            var expressions = [];\n            expressions.push(expr);\n            while (this.lookahead.type !== 2 /* EOF */) {\n              if (!this.match(',')) {\n                break;\n              }\n              this.nextToken();\n              expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n            }\n            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n          }\n          return expr;\n        };\n        // https://tc39.github.io/ecma262/#sec-block\n        Parser.prototype.parseStatementListItem = function () {\n          var statement;\n          this.context.isAssignmentTarget = true;\n          this.context.isBindingElement = true;\n          if (this.lookahead.type === 4 /* Keyword */) {\n            switch (this.lookahead.value) {\n              case 'export':\n                if (!this.context.isModule) {\n                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n                }\n                statement = this.parseExportDeclaration();\n                break;\n              case 'import':\n                if (!this.context.isModule) {\n                  this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n                }\n                statement = this.parseImportDeclaration();\n                break;\n              case 'const':\n                statement = this.parseLexicalDeclaration({\n                  inFor: false\n                });\n                break;\n              case 'function':\n                statement = this.parseFunctionDeclaration();\n                break;\n              case 'class':\n                statement = this.parseClassDeclaration();\n                break;\n              case 'let':\n                statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({\n                  inFor: false\n                }) : this.parseStatement();\n                break;\n              default:\n                statement = this.parseStatement();\n                break;\n            }\n          } else {\n            statement = this.parseStatement();\n          }\n          return statement;\n        };\n        Parser.prototype.parseBlock = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var block = [];\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n            block.push(this.parseStatementListItem());\n          }\n          this.expect('}');\n          return this.finalize(node, new Node.BlockStatement(block));\n        };\n        // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\n        Parser.prototype.parseLexicalBinding = function (kind, options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, kind);\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n          var init = null;\n          if (kind === 'const') {\n            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n              if (this.match('=')) {\n                this.nextToken();\n                init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n              } else {\n                this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\n              }\n            }\n          } else if (!options.inFor && id.type !== syntax_1.Syntax.Identifier || this.match('=')) {\n            this.expect('=');\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          }\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n        Parser.prototype.parseBindingList = function (kind, options) {\n          var list = [this.parseLexicalBinding(kind, options)];\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseLexicalBinding(kind, options));\n          }\n          return list;\n        };\n        Parser.prototype.isLexicalDeclaration = function () {\n          var state = this.scanner.saveState();\n          this.scanner.scanComments();\n          var next = this.scanner.lex();\n          this.scanner.restoreState(state);\n          return next.type === 3 /* Identifier */ || next.type === 7 /* Punctuator */ && next.value === '[' || next.type === 7 /* Punctuator */ && next.value === '{' || next.type === 4 /* Keyword */ && next.value === 'let' || next.type === 4 /* Keyword */ && next.value === 'yield';\n        };\n        Parser.prototype.parseLexicalDeclaration = function (options) {\n          var node = this.createNode();\n          var kind = this.nextToken().value;\n          assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n          var declarations = this.parseBindingList(kind, options);\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n        };\n        // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\n        Parser.prototype.parseBindingRestElement = function (params, kind) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params, kind);\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n        Parser.prototype.parseArrayPattern = function (params, kind) {\n          var node = this.createNode();\n          this.expect('[');\n          var elements = [];\n          while (!this.match(']')) {\n            if (this.match(',')) {\n              this.nextToken();\n              elements.push(null);\n            } else {\n              if (this.match('...')) {\n                elements.push(this.parseBindingRestElement(params, kind));\n                break;\n              } else {\n                elements.push(this.parsePatternWithDefault(params, kind));\n              }\n              if (!this.match(']')) {\n                this.expect(',');\n              }\n            }\n          }\n          this.expect(']');\n          return this.finalize(node, new Node.ArrayPattern(elements));\n        };\n        Parser.prototype.parsePropertyPattern = function (params, kind) {\n          var node = this.createNode();\n          var computed = false;\n          var shorthand = false;\n          var method = false;\n          var key;\n          var value;\n          if (this.lookahead.type === 3 /* Identifier */) {\n            var keyToken = this.lookahead;\n            key = this.parseVariableIdentifier();\n            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n            if (this.match('=')) {\n              params.push(keyToken);\n              shorthand = true;\n              this.nextToken();\n              var expr = this.parseAssignmentExpression();\n              value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n            } else if (!this.match(':')) {\n              params.push(keyToken);\n              shorthand = true;\n              value = init;\n            } else {\n              this.expect(':');\n              value = this.parsePatternWithDefault(params, kind);\n            }\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            this.expect(':');\n            value = this.parsePatternWithDefault(params, kind);\n          }\n          return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n        };\n        Parser.prototype.parseObjectPattern = function (params, kind) {\n          var node = this.createNode();\n          var properties = [];\n          this.expect('{');\n          while (!this.match('}')) {\n            properties.push(this.parsePropertyPattern(params, kind));\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n          this.expect('}');\n          return this.finalize(node, new Node.ObjectPattern(properties));\n        };\n        Parser.prototype.parsePattern = function (params, kind) {\n          var pattern;\n          if (this.match('[')) {\n            pattern = this.parseArrayPattern(params, kind);\n          } else if (this.match('{')) {\n            pattern = this.parseObjectPattern(params, kind);\n          } else {\n            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n              this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\n            }\n            params.push(this.lookahead);\n            pattern = this.parseVariableIdentifier(kind);\n          }\n          return pattern;\n        };\n        Parser.prototype.parsePatternWithDefault = function (params, kind) {\n          var startToken = this.lookahead;\n          var pattern = this.parsePattern(params, kind);\n          if (this.match('=')) {\n            this.nextToken();\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = true;\n            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n            this.context.allowYield = previousAllowYield;\n            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n          }\n          return pattern;\n        };\n        // https://tc39.github.io/ecma262/#sec-variable-statement\n        Parser.prototype.parseVariableIdentifier = function (kind) {\n          var node = this.createNode();\n          var token = this.nextToken();\n          if (token.type === 4 /* Keyword */ && token.value === 'yield') {\n            if (this.context.strict) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            } else if (!this.context.allowYield) {\n              this.throwUnexpectedToken(token);\n            }\n          } else if (token.type !== 3 /* Identifier */) {\n            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {\n              this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n            } else {\n              if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n                this.throwUnexpectedToken(token);\n              }\n            }\n          } else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {\n            this.tolerateUnexpectedToken(token);\n          }\n          return this.finalize(node, new Node.Identifier(token.value));\n        };\n        Parser.prototype.parseVariableDeclaration = function (options) {\n          var node = this.createNode();\n          var params = [];\n          var id = this.parsePattern(params, 'var');\n          if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(id.name)) {\n              this.tolerateError(messages_1.Messages.StrictVarName);\n            }\n          }\n          var init = null;\n          if (this.match('=')) {\n            this.nextToken();\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n          } else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n            this.expect('=');\n          }\n          return this.finalize(node, new Node.VariableDeclarator(id, init));\n        };\n        Parser.prototype.parseVariableDeclarationList = function (options) {\n          var opt = {\n            inFor: options.inFor\n          };\n          var list = [];\n          list.push(this.parseVariableDeclaration(opt));\n          while (this.match(',')) {\n            this.nextToken();\n            list.push(this.parseVariableDeclaration(opt));\n          }\n          return list;\n        };\n        Parser.prototype.parseVariableStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('var');\n          var declarations = this.parseVariableDeclarationList({\n            inFor: false\n          });\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n        };\n        // https://tc39.github.io/ecma262/#sec-empty-statement\n        Parser.prototype.parseEmptyStatement = function () {\n          var node = this.createNode();\n          this.expect(';');\n          return this.finalize(node, new Node.EmptyStatement());\n        };\n        // https://tc39.github.io/ecma262/#sec-expression-statement\n        Parser.prototype.parseExpressionStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ExpressionStatement(expr));\n        };\n        // https://tc39.github.io/ecma262/#sec-if-statement\n        Parser.prototype.parseIfClause = function () {\n          if (this.context.strict && this.matchKeyword('function')) {\n            this.tolerateError(messages_1.Messages.StrictFunction);\n          }\n          return this.parseStatement();\n        };\n        Parser.prototype.parseIfStatement = function () {\n          var node = this.createNode();\n          var consequent;\n          var alternate = null;\n          this.expectKeyword('if');\n          this.expect('(');\n          var test = this.parseExpression();\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            consequent = this.parseIfClause();\n            if (this.matchKeyword('else')) {\n              this.nextToken();\n              alternate = this.parseIfClause();\n            }\n          }\n          return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n        };\n        // https://tc39.github.io/ecma262/#sec-do-while-statement\n        Parser.prototype.parseDoWhileStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('do');\n          var previousInIteration = this.context.inIteration;\n          this.context.inIteration = true;\n          var body = this.parseStatement();\n          this.context.inIteration = previousInIteration;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n          } else {\n            this.expect(')');\n            if (this.match(';')) {\n              this.nextToken();\n            }\n          }\n          return this.finalize(node, new Node.DoWhileStatement(body, test));\n        };\n        // https://tc39.github.io/ecma262/#sec-while-statement\n        Parser.prototype.parseWhileStatement = function () {\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('while');\n          this.expect('(');\n          var test = this.parseExpression();\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.parseStatement();\n            this.context.inIteration = previousInIteration;\n          }\n          return this.finalize(node, new Node.WhileStatement(test, body));\n        };\n        // https://tc39.github.io/ecma262/#sec-for-statement\n        // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n        Parser.prototype.parseForStatement = function () {\n          var init = null;\n          var test = null;\n          var update = null;\n          var forIn = true;\n          var left, right;\n          var node = this.createNode();\n          this.expectKeyword('for');\n          this.expect('(');\n          if (this.match(';')) {\n            this.nextToken();\n          } else {\n            if (this.matchKeyword('var')) {\n              init = this.createNode();\n              this.nextToken();\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              var declarations = this.parseVariableDeclarationList({\n                inFor: true\n              });\n              this.context.allowIn = previousAllowIn;\n              if (declarations.length === 1 && this.matchKeyword('in')) {\n                var decl = declarations[0];\n                if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n                  this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n                }\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.nextToken();\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n                this.expect(';');\n              }\n            } else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n              init = this.createNode();\n              var kind = this.nextToken().value;\n              if (!this.context.strict && this.lookahead.value === 'in') {\n                init = this.finalize(init, new Node.Identifier(kind));\n                this.nextToken();\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else {\n                var previousAllowIn = this.context.allowIn;\n                this.context.allowIn = false;\n                var declarations = this.parseBindingList(kind, {\n                  inFor: true\n                });\n                this.context.allowIn = previousAllowIn;\n                if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseExpression();\n                  init = null;\n                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                  this.nextToken();\n                  left = init;\n                  right = this.parseAssignmentExpression();\n                  init = null;\n                  forIn = false;\n                } else {\n                  this.consumeSemicolon();\n                  init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n                }\n              }\n            } else {\n              var initStartToken = this.lookahead;\n              var previousAllowIn = this.context.allowIn;\n              this.context.allowIn = false;\n              init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n              this.context.allowIn = previousAllowIn;\n              if (this.matchKeyword('in')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n                }\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseExpression();\n                init = null;\n              } else if (this.matchContextualKeyword('of')) {\n                if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n                  this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n                }\n                this.nextToken();\n                this.reinterpretExpressionAsPattern(init);\n                left = init;\n                right = this.parseAssignmentExpression();\n                init = null;\n                forIn = false;\n              } else {\n                if (this.match(',')) {\n                  var initSeq = [init];\n                  while (this.match(',')) {\n                    this.nextToken();\n                    initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n                  }\n                  init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n                }\n                this.expect(';');\n              }\n            }\n          }\n          if (typeof left === 'undefined') {\n            if (!this.match(';')) {\n              test = this.parseExpression();\n            }\n            this.expect(';');\n            if (!this.match(')')) {\n              update = this.parseExpression();\n            }\n          }\n          var body;\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            var previousInIteration = this.context.inIteration;\n            this.context.inIteration = true;\n            body = this.isolateCoverGrammar(this.parseStatement);\n            this.context.inIteration = previousInIteration;\n          }\n          return typeof left === 'undefined' ? this.finalize(node, new Node.ForStatement(init, test, update, body)) : forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) : this.finalize(node, new Node.ForOfStatement(left, right, body));\n        };\n        // https://tc39.github.io/ecma262/#sec-continue-statement\n        Parser.prototype.parseContinueStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('continue');\n          var label = null;\n          if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n            var id = this.parseVariableIdentifier();\n            label = id;\n            var key = '$' + id.name;\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, id.name);\n            }\n          }\n          this.consumeSemicolon();\n          if (label === null && !this.context.inIteration) {\n            this.throwError(messages_1.Messages.IllegalContinue);\n          }\n          return this.finalize(node, new Node.ContinueStatement(label));\n        };\n        // https://tc39.github.io/ecma262/#sec-break-statement\n        Parser.prototype.parseBreakStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('break');\n          var label = null;\n          if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n            var id = this.parseVariableIdentifier();\n            var key = '$' + id.name;\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.UnknownLabel, id.name);\n            }\n            label = id;\n          }\n          this.consumeSemicolon();\n          if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n            this.throwError(messages_1.Messages.IllegalBreak);\n          }\n          return this.finalize(node, new Node.BreakStatement(label));\n        };\n        // https://tc39.github.io/ecma262/#sec-return-statement\n        Parser.prototype.parseReturnStatement = function () {\n          if (!this.context.inFunctionBody) {\n            this.tolerateError(messages_1.Messages.IllegalReturn);\n          }\n          var node = this.createNode();\n          this.expectKeyword('return');\n          var hasArgument = !this.match(';') && !this.match('}') && !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */ || this.lookahead.type === 8 /* StringLiteral */ || this.lookahead.type === 10 /* Template */;\n          var argument = hasArgument ? this.parseExpression() : null;\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ReturnStatement(argument));\n        };\n        // https://tc39.github.io/ecma262/#sec-with-statement\n        Parser.prototype.parseWithStatement = function () {\n          if (this.context.strict) {\n            this.tolerateError(messages_1.Messages.StrictModeWith);\n          }\n          var node = this.createNode();\n          var body;\n          this.expectKeyword('with');\n          this.expect('(');\n          var object = this.parseExpression();\n          if (!this.match(')') && this.config.tolerant) {\n            this.tolerateUnexpectedToken(this.nextToken());\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n          } else {\n            this.expect(')');\n            body = this.parseStatement();\n          }\n          return this.finalize(node, new Node.WithStatement(object, body));\n        };\n        // https://tc39.github.io/ecma262/#sec-switch-statement\n        Parser.prototype.parseSwitchCase = function () {\n          var node = this.createNode();\n          var test;\n          if (this.matchKeyword('default')) {\n            this.nextToken();\n            test = null;\n          } else {\n            this.expectKeyword('case');\n            test = this.parseExpression();\n          }\n          this.expect(':');\n          var consequent = [];\n          while (true) {\n            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n              break;\n            }\n            consequent.push(this.parseStatementListItem());\n          }\n          return this.finalize(node, new Node.SwitchCase(test, consequent));\n        };\n        Parser.prototype.parseSwitchStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('switch');\n          this.expect('(');\n          var discriminant = this.parseExpression();\n          this.expect(')');\n          var previousInSwitch = this.context.inSwitch;\n          this.context.inSwitch = true;\n          var cases = [];\n          var defaultFound = false;\n          this.expect('{');\n          while (true) {\n            if (this.match('}')) {\n              break;\n            }\n            var clause = this.parseSwitchCase();\n            if (clause.test === null) {\n              if (defaultFound) {\n                this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n              }\n              defaultFound = true;\n            }\n            cases.push(clause);\n          }\n          this.expect('}');\n          this.context.inSwitch = previousInSwitch;\n          return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n        };\n        // https://tc39.github.io/ecma262/#sec-labelled-statements\n        Parser.prototype.parseLabelledStatement = function () {\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var statement;\n          if (expr.type === syntax_1.Syntax.Identifier && this.match(':')) {\n            this.nextToken();\n            var id = expr;\n            var key = '$' + id.name;\n            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n              this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n            }\n            this.context.labelSet[key] = true;\n            var body = void 0;\n            if (this.matchKeyword('class')) {\n              this.tolerateUnexpectedToken(this.lookahead);\n              body = this.parseClassDeclaration();\n            } else if (this.matchKeyword('function')) {\n              var token = this.lookahead;\n              var declaration = this.parseFunctionDeclaration();\n              if (this.context.strict) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\n              } else if (declaration.generator) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\n              }\n              body = declaration;\n            } else {\n              body = this.parseStatement();\n            }\n            delete this.context.labelSet[key];\n            statement = new Node.LabeledStatement(id, body);\n          } else {\n            this.consumeSemicolon();\n            statement = new Node.ExpressionStatement(expr);\n          }\n          return this.finalize(node, statement);\n        };\n        // https://tc39.github.io/ecma262/#sec-throw-statement\n        Parser.prototype.parseThrowStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('throw');\n          if (this.hasLineTerminator) {\n            this.throwError(messages_1.Messages.NewlineAfterThrow);\n          }\n          var argument = this.parseExpression();\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ThrowStatement(argument));\n        };\n        // https://tc39.github.io/ecma262/#sec-try-statement\n        Parser.prototype.parseCatchClause = function () {\n          var node = this.createNode();\n          this.expectKeyword('catch');\n          this.expect('(');\n          if (this.match(')')) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n          var params = [];\n          var param = this.parsePattern(params);\n          var paramMap = {};\n          for (var i = 0; i < params.length; i++) {\n            var key = '$' + params[i].value;\n            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n              this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n            }\n            paramMap[key] = true;\n          }\n          if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n            if (this.scanner.isRestrictedWord(param.name)) {\n              this.tolerateError(messages_1.Messages.StrictCatchVariable);\n            }\n          }\n          this.expect(')');\n          var body = this.parseBlock();\n          return this.finalize(node, new Node.CatchClause(param, body));\n        };\n        Parser.prototype.parseFinallyClause = function () {\n          this.expectKeyword('finally');\n          return this.parseBlock();\n        };\n        Parser.prototype.parseTryStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('try');\n          var block = this.parseBlock();\n          var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n          var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n          if (!handler && !finalizer) {\n            this.throwError(messages_1.Messages.NoCatchOrFinally);\n          }\n          return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n        };\n        // https://tc39.github.io/ecma262/#sec-debugger-statement\n        Parser.prototype.parseDebuggerStatement = function () {\n          var node = this.createNode();\n          this.expectKeyword('debugger');\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.DebuggerStatement());\n        };\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\n        Parser.prototype.parseStatement = function () {\n          var statement;\n          switch (this.lookahead.type) {\n            case 1 /* BooleanLiteral */:\n            case 5 /* NullLiteral */:\n            case 6 /* NumericLiteral */:\n            case 8 /* StringLiteral */:\n            case 10 /* Template */:\n            case 9 /* RegularExpression */:\n              statement = this.parseExpressionStatement();\n              break;\n            case 7 /* Punctuator */:\n              var value = this.lookahead.value;\n              if (value === '{') {\n                statement = this.parseBlock();\n              } else if (value === '(') {\n                statement = this.parseExpressionStatement();\n              } else if (value === ';') {\n                statement = this.parseEmptyStatement();\n              } else {\n                statement = this.parseExpressionStatement();\n              }\n              break;\n            case 3 /* Identifier */:\n              statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\n              break;\n            case 4 /* Keyword */:\n              switch (this.lookahead.value) {\n                case 'break':\n                  statement = this.parseBreakStatement();\n                  break;\n                case 'continue':\n                  statement = this.parseContinueStatement();\n                  break;\n                case 'debugger':\n                  statement = this.parseDebuggerStatement();\n                  break;\n                case 'do':\n                  statement = this.parseDoWhileStatement();\n                  break;\n                case 'for':\n                  statement = this.parseForStatement();\n                  break;\n                case 'function':\n                  statement = this.parseFunctionDeclaration();\n                  break;\n                case 'if':\n                  statement = this.parseIfStatement();\n                  break;\n                case 'return':\n                  statement = this.parseReturnStatement();\n                  break;\n                case 'switch':\n                  statement = this.parseSwitchStatement();\n                  break;\n                case 'throw':\n                  statement = this.parseThrowStatement();\n                  break;\n                case 'try':\n                  statement = this.parseTryStatement();\n                  break;\n                case 'var':\n                  statement = this.parseVariableStatement();\n                  break;\n                case 'while':\n                  statement = this.parseWhileStatement();\n                  break;\n                case 'with':\n                  statement = this.parseWithStatement();\n                  break;\n                default:\n                  statement = this.parseExpressionStatement();\n                  break;\n              }\n              break;\n            default:\n              statement = this.throwUnexpectedToken(this.lookahead);\n          }\n          return statement;\n        };\n        // https://tc39.github.io/ecma262/#sec-function-definitions\n        Parser.prototype.parseFunctionSourceElements = function () {\n          var node = this.createNode();\n          this.expect('{');\n          var body = this.parseDirectivePrologues();\n          var previousLabelSet = this.context.labelSet;\n          var previousInIteration = this.context.inIteration;\n          var previousInSwitch = this.context.inSwitch;\n          var previousInFunctionBody = this.context.inFunctionBody;\n          this.context.labelSet = {};\n          this.context.inIteration = false;\n          this.context.inSwitch = false;\n          this.context.inFunctionBody = true;\n          while (this.lookahead.type !== 2 /* EOF */) {\n            if (this.match('}')) {\n              break;\n            }\n            body.push(this.parseStatementListItem());\n          }\n          this.expect('}');\n          this.context.labelSet = previousLabelSet;\n          this.context.inIteration = previousInIteration;\n          this.context.inSwitch = previousInSwitch;\n          this.context.inFunctionBody = previousInFunctionBody;\n          return this.finalize(node, new Node.BlockStatement(body));\n        };\n        Parser.prototype.validateParam = function (options, param, name) {\n          var key = '$' + name;\n          if (this.context.strict) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            }\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          } else if (!options.firstRestricted) {\n            if (this.scanner.isRestrictedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictParamName;\n            } else if (this.scanner.isStrictModeReservedWord(name)) {\n              options.firstRestricted = param;\n              options.message = messages_1.Messages.StrictReservedWord;\n            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n              options.stricted = param;\n              options.message = messages_1.Messages.StrictParamDupe;\n            }\n          }\n          /* istanbul ignore next */\n          if (typeof Object.defineProperty === 'function') {\n            Object.defineProperty(options.paramSet, key, {\n              value: true,\n              enumerable: true,\n              writable: true,\n              configurable: true\n            });\n          } else {\n            options.paramSet[key] = true;\n          }\n        };\n        Parser.prototype.parseRestElement = function (params) {\n          var node = this.createNode();\n          this.expect('...');\n          var arg = this.parsePattern(params);\n          if (this.match('=')) {\n            this.throwError(messages_1.Messages.DefaultRestParameter);\n          }\n          if (!this.match(')')) {\n            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n          }\n          return this.finalize(node, new Node.RestElement(arg));\n        };\n        Parser.prototype.parseFormalParameter = function (options) {\n          var params = [];\n          var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n          for (var i = 0; i < params.length; i++) {\n            this.validateParam(options, params[i], params[i].value);\n          }\n          options.simple = options.simple && param instanceof Node.Identifier;\n          options.params.push(param);\n        };\n        Parser.prototype.parseFormalParameters = function (firstRestricted) {\n          var options;\n          options = {\n            simple: true,\n            params: [],\n            firstRestricted: firstRestricted\n          };\n          this.expect('(');\n          if (!this.match(')')) {\n            options.paramSet = {};\n            while (this.lookahead.type !== 2 /* EOF */) {\n              this.parseFormalParameter(options);\n              if (this.match(')')) {\n                break;\n              }\n              this.expect(',');\n              if (this.match(')')) {\n                break;\n              }\n            }\n          }\n          this.expect(')');\n          return {\n            simple: options.simple,\n            params: options.params,\n            stricted: options.stricted,\n            firstRestricted: options.firstRestricted,\n            message: options.message\n          };\n        };\n        Parser.prototype.matchAsyncFunction = function () {\n          var match = this.matchContextualKeyword('async');\n          if (match) {\n            var state = this.scanner.saveState();\n            this.scanner.scanComments();\n            var next = this.scanner.lex();\n            this.scanner.restoreState(state);\n            match = state.lineNumber === next.lineNumber && next.type === 4 /* Keyword */ && next.value === 'function';\n          }\n          return match;\n        };\n        Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var isAsync = this.matchContextualKeyword('async');\n          if (isAsync) {\n            this.nextToken();\n          }\n          this.expectKeyword('function');\n          var isGenerator = isAsync ? false : this.match('*');\n          if (isGenerator) {\n            this.nextToken();\n          }\n          var message;\n          var id = null;\n          var firstRestricted = null;\n          if (!identifierIsOptional || !this.match('(')) {\n            var token = this.lookahead;\n            id = this.parseVariableIdentifier();\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n          var previousAllowAwait = this.context.await;\n          var previousAllowYield = this.context.allowYield;\n          this.context.await = isAsync;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = formalParameters.simple;\n          var body = this.parseFunctionSourceElements();\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          this.context.await = previousAllowAwait;\n          this.context.allowYield = previousAllowYield;\n          return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) : this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n        };\n        Parser.prototype.parseFunctionExpression = function () {\n          var node = this.createNode();\n          var isAsync = this.matchContextualKeyword('async');\n          if (isAsync) {\n            this.nextToken();\n          }\n          this.expectKeyword('function');\n          var isGenerator = isAsync ? false : this.match('*');\n          if (isGenerator) {\n            this.nextToken();\n          }\n          var message;\n          var id = null;\n          var firstRestricted;\n          var previousAllowAwait = this.context.await;\n          var previousAllowYield = this.context.allowYield;\n          this.context.await = isAsync;\n          this.context.allowYield = !isGenerator;\n          if (!this.match('(')) {\n            var token = this.lookahead;\n            id = !this.context.strict && !isGenerator && this.matchKeyword('yield') ? this.parseIdentifierName() : this.parseVariableIdentifier();\n            if (this.context.strict) {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n              }\n            } else {\n              if (this.scanner.isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictFunctionName;\n              } else if (this.scanner.isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = messages_1.Messages.StrictReservedWord;\n              }\n            }\n          }\n          var formalParameters = this.parseFormalParameters(firstRestricted);\n          var params = formalParameters.params;\n          var stricted = formalParameters.stricted;\n          firstRestricted = formalParameters.firstRestricted;\n          if (formalParameters.message) {\n            message = formalParameters.message;\n          }\n          var previousStrict = this.context.strict;\n          var previousAllowStrictDirective = this.context.allowStrictDirective;\n          this.context.allowStrictDirective = formalParameters.simple;\n          var body = this.parseFunctionSourceElements();\n          if (this.context.strict && firstRestricted) {\n            this.throwUnexpectedToken(firstRestricted, message);\n          }\n          if (this.context.strict && stricted) {\n            this.tolerateUnexpectedToken(stricted, message);\n          }\n          this.context.strict = previousStrict;\n          this.context.allowStrictDirective = previousAllowStrictDirective;\n          this.context.await = previousAllowAwait;\n          this.context.allowYield = previousAllowYield;\n          return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) : this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n        };\n        // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\n        Parser.prototype.parseDirective = function () {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var expr = this.parseExpression();\n          var directive = expr.type === syntax_1.Syntax.Literal ? this.getTokenRaw(token).slice(1, -1) : null;\n          this.consumeSemicolon();\n          return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n        };\n        Parser.prototype.parseDirectivePrologues = function () {\n          var firstRestricted = null;\n          var body = [];\n          while (true) {\n            var token = this.lookahead;\n            if (token.type !== 8 /* StringLiteral */) {\n              break;\n            }\n            var statement = this.parseDirective();\n            body.push(statement);\n            var directive = statement.directive;\n            if (typeof directive !== 'string') {\n              break;\n            }\n            if (directive === 'use strict') {\n              this.context.strict = true;\n              if (firstRestricted) {\n                this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n              }\n              if (!this.context.allowStrictDirective) {\n                this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\n              }\n            } else {\n              if (!firstRestricted && token.octal) {\n                firstRestricted = token;\n              }\n            }\n          }\n          return body;\n        };\n        // https://tc39.github.io/ecma262/#sec-method-definitions\n        Parser.prototype.qualifiedPropertyName = function (token) {\n          switch (token.type) {\n            case 3 /* Identifier */:\n            case 8 /* StringLiteral */:\n            case 1 /* BooleanLiteral */:\n            case 5 /* NullLiteral */:\n            case 6 /* NumericLiteral */:\n            case 4 /* Keyword */:\n              return true;\n            case 7 /* Punctuator */:\n              return token.value === '[';\n            default:\n              break;\n          }\n          return false;\n        };\n        Parser.prototype.parseGetterMethod = function () {\n          var node = this.createNode();\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters();\n          if (formalParameters.params.length > 0) {\n            this.tolerateError(messages_1.Messages.BadGetterArity);\n          }\n          var method = this.parsePropertyMethod(formalParameters);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n        };\n        Parser.prototype.parseSetterMethod = function () {\n          var node = this.createNode();\n          var isGenerator = false;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = !isGenerator;\n          var formalParameters = this.parseFormalParameters();\n          if (formalParameters.params.length !== 1) {\n            this.tolerateError(messages_1.Messages.BadSetterArity);\n          } else if (formalParameters.params[0] instanceof Node.RestElement) {\n            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\n          }\n          var method = this.parsePropertyMethod(formalParameters);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n        };\n        Parser.prototype.parseGeneratorMethod = function () {\n          var node = this.createNode();\n          var isGenerator = true;\n          var previousAllowYield = this.context.allowYield;\n          this.context.allowYield = true;\n          var params = this.parseFormalParameters();\n          this.context.allowYield = false;\n          var method = this.parsePropertyMethod(params);\n          this.context.allowYield = previousAllowYield;\n          return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n        };\n        // https://tc39.github.io/ecma262/#sec-generator-function-definitions\n        Parser.prototype.isStartOfExpression = function () {\n          var start = true;\n          var value = this.lookahead.value;\n          switch (this.lookahead.type) {\n            case 7 /* Punctuator */:\n              start = value === '[' || value === '(' || value === '{' || value === '+' || value === '-' || value === '!' || value === '~' || value === '++' || value === '--' || value === '/' || value === '/='; // regular expression literal\n              break;\n            case 4 /* Keyword */:\n              start = value === 'class' || value === 'delete' || value === 'function' || value === 'let' || value === 'new' || value === 'super' || value === 'this' || value === 'typeof' || value === 'void' || value === 'yield';\n              break;\n            default:\n              break;\n          }\n          return start;\n        };\n        Parser.prototype.parseYieldExpression = function () {\n          var node = this.createNode();\n          this.expectKeyword('yield');\n          var argument = null;\n          var delegate = false;\n          if (!this.hasLineTerminator) {\n            var previousAllowYield = this.context.allowYield;\n            this.context.allowYield = false;\n            delegate = this.match('*');\n            if (delegate) {\n              this.nextToken();\n              argument = this.parseAssignmentExpression();\n            } else if (this.isStartOfExpression()) {\n              argument = this.parseAssignmentExpression();\n            }\n            this.context.allowYield = previousAllowYield;\n          }\n          return this.finalize(node, new Node.YieldExpression(argument, delegate));\n        };\n        // https://tc39.github.io/ecma262/#sec-class-definitions\n        Parser.prototype.parseClassElement = function (hasConstructor) {\n          var token = this.lookahead;\n          var node = this.createNode();\n          var kind = '';\n          var key = null;\n          var value = null;\n          var computed = false;\n          var method = false;\n          var isStatic = false;\n          var isAsync = false;\n          if (this.match('*')) {\n            this.nextToken();\n          } else {\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            var id = key;\n            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n              token = this.lookahead;\n              isStatic = true;\n              computed = this.match('[');\n              if (this.match('*')) {\n                this.nextToken();\n              } else {\n                key = this.parseObjectPropertyKey();\n              }\n            }\n            if (token.type === 3 /* Identifier */ && !this.hasLineTerminator && token.value === 'async') {\n              var punctuator = this.lookahead.value;\n              if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\n                isAsync = true;\n                token = this.lookahead;\n                key = this.parseObjectPropertyKey();\n                if (token.type === 3 /* Identifier */ && token.value === 'constructor') {\n                  this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\n                }\n              }\n            }\n          }\n          var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n          if (token.type === 3 /* Identifier */) {\n            if (token.value === 'get' && lookaheadPropertyKey) {\n              kind = 'get';\n              computed = this.match('[');\n              key = this.parseObjectPropertyKey();\n              this.context.allowYield = false;\n              value = this.parseGetterMethod();\n            } else if (token.value === 'set' && lookaheadPropertyKey) {\n              kind = 'set';\n              computed = this.match('[');\n              key = this.parseObjectPropertyKey();\n              value = this.parseSetterMethod();\n            }\n          } else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n            kind = 'init';\n            computed = this.match('[');\n            key = this.parseObjectPropertyKey();\n            value = this.parseGeneratorMethod();\n            method = true;\n          }\n          if (!kind && key && this.match('(')) {\n            kind = 'init';\n            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n            method = true;\n          }\n          if (!kind) {\n            this.throwUnexpectedToken(this.lookahead);\n          }\n          if (kind === 'init') {\n            kind = 'method';\n          }\n          if (!computed) {\n            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n              this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n            }\n            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n              if (kind !== 'method' || !method || value && value.generator) {\n                this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n              }\n              if (hasConstructor.value) {\n                this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n              } else {\n                hasConstructor.value = true;\n              }\n              kind = 'constructor';\n            }\n          }\n          return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n        };\n        Parser.prototype.parseClassElementList = function () {\n          var body = [];\n          var hasConstructor = {\n            value: false\n          };\n          this.expect('{');\n          while (!this.match('}')) {\n            if (this.match(';')) {\n              this.nextToken();\n            } else {\n              body.push(this.parseClassElement(hasConstructor));\n            }\n          }\n          this.expect('}');\n          return body;\n        };\n        Parser.prototype.parseClassBody = function () {\n          var node = this.createNode();\n          var elementList = this.parseClassElementList();\n          return this.finalize(node, new Node.ClassBody(elementList));\n        };\n        Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = identifierIsOptional && this.lookahead.type !== 3 /* Identifier */ ? null : this.parseVariableIdentifier();\n          var superClass = null;\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n        };\n        Parser.prototype.parseClassExpression = function () {\n          var node = this.createNode();\n          var previousStrict = this.context.strict;\n          this.context.strict = true;\n          this.expectKeyword('class');\n          var id = this.lookahead.type === 3 /* Identifier */ ? this.parseVariableIdentifier() : null;\n          var superClass = null;\n          if (this.matchKeyword('extends')) {\n            this.nextToken();\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n          }\n          var classBody = this.parseClassBody();\n          this.context.strict = previousStrict;\n          return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n        };\n        // https://tc39.github.io/ecma262/#sec-scripts\n        // https://tc39.github.io/ecma262/#sec-modules\n        Parser.prototype.parseModule = function () {\n          this.context.strict = true;\n          this.context.isModule = true;\n          this.scanner.isModule = true;\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n          while (this.lookahead.type !== 2 /* EOF */) {\n            body.push(this.parseStatementListItem());\n          }\n          return this.finalize(node, new Node.Module(body));\n        };\n        Parser.prototype.parseScript = function () {\n          var node = this.createNode();\n          var body = this.parseDirectivePrologues();\n          while (this.lookahead.type !== 2 /* EOF */) {\n            body.push(this.parseStatementListItem());\n          }\n          return this.finalize(node, new Node.Script(body));\n        };\n        // https://tc39.github.io/ecma262/#sec-imports\n        Parser.prototype.parseModuleSpecifier = function () {\n          var node = this.createNode();\n          if (this.lookahead.type !== 8 /* StringLiteral */) {\n            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n          }\n          var token = this.nextToken();\n          var raw = this.getTokenRaw(token);\n          return this.finalize(node, new Node.Literal(token.value, raw));\n        };\n        // import {<foo as bar>} ...;\n        Parser.prototype.parseImportSpecifier = function () {\n          var node = this.createNode();\n          var imported;\n          var local;\n          if (this.lookahead.type === 3 /* Identifier */) {\n            imported = this.parseVariableIdentifier();\n            local = imported;\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            }\n          } else {\n            imported = this.parseIdentifierName();\n            local = imported;\n            if (this.matchContextualKeyword('as')) {\n              this.nextToken();\n              local = this.parseVariableIdentifier();\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n          }\n          return this.finalize(node, new Node.ImportSpecifier(local, imported));\n        };\n        // {foo, bar as bas}\n        Parser.prototype.parseNamedImports = function () {\n          this.expect('{');\n          var specifiers = [];\n          while (!this.match('}')) {\n            specifiers.push(this.parseImportSpecifier());\n            if (!this.match('}')) {\n              this.expect(',');\n            }\n          }\n          this.expect('}');\n          return specifiers;\n        };\n        // import <foo> ...;\n        Parser.prototype.parseImportDefaultSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n        };\n        // import <* as foo> ...;\n        Parser.prototype.parseImportNamespaceSpecifier = function () {\n          var node = this.createNode();\n          this.expect('*');\n          if (!this.matchContextualKeyword('as')) {\n            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n          }\n          this.nextToken();\n          var local = this.parseIdentifierName();\n          return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n        };\n        Parser.prototype.parseImportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n          }\n          var node = this.createNode();\n          this.expectKeyword('import');\n          var src;\n          var specifiers = [];\n          if (this.lookahead.type === 8 /* StringLiteral */) {\n            // import 'foo';\n            src = this.parseModuleSpecifier();\n          } else {\n            if (this.match('{')) {\n              // import {bar}\n              specifiers = specifiers.concat(this.parseNamedImports());\n            } else if (this.match('*')) {\n              // import * as foo\n              specifiers.push(this.parseImportNamespaceSpecifier());\n            } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n              // import foo\n              specifiers.push(this.parseImportDefaultSpecifier());\n              if (this.match(',')) {\n                this.nextToken();\n                if (this.match('*')) {\n                  // import foo, * as foo\n                  specifiers.push(this.parseImportNamespaceSpecifier());\n                } else if (this.match('{')) {\n                  // import foo, {bar}\n                  specifiers = specifiers.concat(this.parseNamedImports());\n                } else {\n                  this.throwUnexpectedToken(this.lookahead);\n                }\n              }\n            } else {\n              this.throwUnexpectedToken(this.nextToken());\n            }\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n            this.nextToken();\n            src = this.parseModuleSpecifier();\n          }\n          this.consumeSemicolon();\n          return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n        };\n        // https://tc39.github.io/ecma262/#sec-exports\n        Parser.prototype.parseExportSpecifier = function () {\n          var node = this.createNode();\n          var local = this.parseIdentifierName();\n          var exported = local;\n          if (this.matchContextualKeyword('as')) {\n            this.nextToken();\n            exported = this.parseIdentifierName();\n          }\n          return this.finalize(node, new Node.ExportSpecifier(local, exported));\n        };\n        Parser.prototype.parseExportDeclaration = function () {\n          if (this.context.inFunctionBody) {\n            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n          }\n          var node = this.createNode();\n          this.expectKeyword('export');\n          var exportDeclaration;\n          if (this.matchKeyword('default')) {\n            // export default ...\n            this.nextToken();\n            if (this.matchKeyword('function')) {\n              // export default function foo () {}\n              // export default function () {}\n              var declaration = this.parseFunctionDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchKeyword('class')) {\n              // export default class foo {}\n              var declaration = this.parseClassDeclaration(true);\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else if (this.matchContextualKeyword('async')) {\n              // export default async function f () {}\n              // export default async function () {}\n              // export default async x => x\n              var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            } else {\n              if (this.matchContextualKeyword('from')) {\n                this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n              }\n              // export default {};\n              // export default [];\n              // export default (1 + 2);\n              var declaration = this.match('{') ? this.parseObjectInitializer() : this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n              this.consumeSemicolon();\n              exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n            }\n          } else if (this.match('*')) {\n            // export * from 'foo';\n            this.nextToken();\n            if (!this.matchContextualKeyword('from')) {\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            }\n            this.nextToken();\n            var src = this.parseModuleSpecifier();\n            this.consumeSemicolon();\n            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n          } else if (this.lookahead.type === 4 /* Keyword */) {\n            // export var f = 1;\n            var declaration = void 0;\n            switch (this.lookahead.value) {\n              case 'let':\n              case 'const':\n                declaration = this.parseLexicalDeclaration({\n                  inFor: false\n                });\n                break;\n              case 'var':\n              case 'class':\n              case 'function':\n                declaration = this.parseStatementListItem();\n                break;\n              default:\n                this.throwUnexpectedToken(this.lookahead);\n            }\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n          } else if (this.matchAsyncFunction()) {\n            var declaration = this.parseFunctionDeclaration();\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n          } else {\n            var specifiers = [];\n            var source = null;\n            var isExportFromIdentifier = false;\n            this.expect('{');\n            while (!this.match('}')) {\n              isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n              specifiers.push(this.parseExportSpecifier());\n              if (!this.match('}')) {\n                this.expect(',');\n              }\n            }\n            this.expect('}');\n            if (this.matchContextualKeyword('from')) {\n              // export {default} from 'foo';\n              // export {foo} from 'foo';\n              this.nextToken();\n              source = this.parseModuleSpecifier();\n              this.consumeSemicolon();\n            } else if (isExportFromIdentifier) {\n              // export {default}; // missing fromClause\n              var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n              this.throwError(message, this.lookahead.value);\n            } else {\n              // export {foo};\n              this.consumeSemicolon();\n            }\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n          }\n          return exportDeclaration;\n        };\n        return Parser;\n      }();\n      exports.Parser = Parser;\n\n      /***/\n    }, /* 9 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      // Ensure the condition is true, otherwise throw an error.\n      // This is only to have a better contract semantic, i.e. another safety net\n      // to catch a logic error. The condition shall be fulfilled in normal case.\n      // Do NOT use this to enforce a certain condition on any user input.\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      function assert(condition, message) {\n        /* istanbul ignore if */\n        if (!condition) {\n          throw new Error('ASSERT: ' + message);\n        }\n      }\n      exports.assert = assert;\n\n      /***/\n    }, /* 10 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      /* tslint:disable:max-classes-per-file */\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var ErrorHandler = function () {\n        function ErrorHandler() {\n          this.errors = [];\n          this.tolerant = false;\n        }\n        ErrorHandler.prototype.recordError = function (error) {\n          this.errors.push(error);\n        };\n        ErrorHandler.prototype.tolerate = function (error) {\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n        ErrorHandler.prototype.constructError = function (msg, column) {\n          var error = new Error(msg);\n          try {\n            throw error;\n          } catch (base) {\n            /* istanbul ignore else */\n            if (Object.create && Object.defineProperty) {\n              error = Object.create(base);\n              Object.defineProperty(error, 'column', {\n                value: column\n              });\n            }\n          }\n          /* istanbul ignore next */\n          return error;\n        };\n        ErrorHandler.prototype.createError = function (index, line, col, description) {\n          var msg = 'Line ' + line + ': ' + description;\n          var error = this.constructError(msg, col);\n          error.index = index;\n          error.lineNumber = line;\n          error.description = description;\n          return error;\n        };\n        ErrorHandler.prototype.throwError = function (index, line, col, description) {\n          throw this.createError(index, line, col, description);\n        };\n        ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n          var error = this.createError(index, line, col, description);\n          if (this.tolerant) {\n            this.recordError(error);\n          } else {\n            throw error;\n          }\n        };\n        return ErrorHandler;\n      }();\n      exports.ErrorHandler = ErrorHandler;\n\n      /***/\n    }, /* 11 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      // Error messages should be identical to V8.\n      exports.Messages = {\n        BadGetterArity: 'Getter must not have any formal parameters',\n        BadSetterArity: 'Setter must have exactly one formal parameter',\n        BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\n        ConstructorIsAsync: 'Class constructor may not be an async method',\n        ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n        DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\n        DefaultRestParameter: 'Unexpected token =',\n        DuplicateBinding: 'Duplicate binding %0',\n        DuplicateConstructor: 'A class may only have one constructor',\n        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n        ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\n        GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\n        IllegalBreak: 'Illegal break statement',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalExportDeclaration: 'Unexpected token',\n        IllegalImportDeclaration: 'Unexpected token',\n        IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\n        IllegalReturn: 'Illegal return statement',\n        InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\n        InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\n        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n        InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n        InvalidModuleSpecifier: 'Unexpected token',\n        InvalidRegExp: 'Invalid regular expression',\n        LetInLexicalBinding: 'let is disallowed as a lexically bound name',\n        MissingFromClause: 'Unexpected token',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NewlineAfterThrow: 'Illegal newline after throw',\n        NoAsAfterImportNamespace: 'Unexpected token',\n        NoCatchOrFinally: 'Missing catch or finally after try',\n        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        StaticPrototype: 'Classes may not have static property named prototype',\n        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n        StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n        StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\n        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictModeWith: 'Strict mode code may not include a with statement',\n        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n        StrictReservedWord: 'Use of future reserved word in strict mode',\n        StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n        UnexpectedEOS: 'Unexpected end of input',\n        UnexpectedIdentifier: 'Unexpected identifier',\n        UnexpectedNumber: 'Unexpected number',\n        UnexpectedReserved: 'Unexpected reserved word',\n        UnexpectedString: 'Unexpected string',\n        UnexpectedTemplate: 'Unexpected quasi %0',\n        UnexpectedToken: 'Unexpected token %0',\n        UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        UnterminatedRegExp: 'Invalid regular expression: missing /'\n      };\n\n      /***/\n    }, /* 12 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var assert_1 = __webpack_require__(9);\n      var character_1 = __webpack_require__(4);\n      var messages_1 = __webpack_require__(11);\n      function hexValue(ch) {\n        return '0123456789abcdef'.indexOf(ch.toLowerCase());\n      }\n      function octalValue(ch) {\n        return '01234567'.indexOf(ch);\n      }\n      var Scanner = function () {\n        function Scanner(code, handler) {\n          this.source = code;\n          this.errorHandler = handler;\n          this.trackComment = false;\n          this.isModule = false;\n          this.length = code.length;\n          this.index = 0;\n          this.lineNumber = code.length > 0 ? 1 : 0;\n          this.lineStart = 0;\n          this.curlyStack = [];\n        }\n        Scanner.prototype.saveState = function () {\n          return {\n            index: this.index,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart\n          };\n        };\n        Scanner.prototype.restoreState = function (state) {\n          this.index = state.index;\n          this.lineNumber = state.lineNumber;\n          this.lineStart = state.lineStart;\n        };\n        Scanner.prototype.eof = function () {\n          return this.index >= this.length;\n        };\n        Scanner.prototype.throwUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n          return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        };\n        Scanner.prototype.tolerateUnexpectedToken = function (message) {\n          if (message === void 0) {\n            message = messages_1.Messages.UnexpectedTokenIllegal;\n          }\n          this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n        };\n        // https://tc39.github.io/ecma262/#sec-comments\n        Scanner.prototype.skipSingleLineComment = function (offset) {\n          var comments = [];\n          var start, loc;\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - offset;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - offset\n              },\n              end: {}\n            };\n          }\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n            ++this.index;\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (this.trackComment) {\n                loc.end = {\n                  line: this.lineNumber,\n                  column: this.index - this.lineStart - 1\n                };\n                var entry = {\n                  multiLine: false,\n                  slice: [start + offset, this.index - 1],\n                  range: [start, this.index - 1],\n                  loc: loc\n                };\n                comments.push(entry);\n              }\n              if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n                ++this.index;\n              }\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              return comments;\n            }\n          }\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: false,\n              slice: [start + offset, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n          return comments;\n        };\n        Scanner.prototype.skipMultiLineComment = function () {\n          var comments = [];\n          var start, loc;\n          if (this.trackComment) {\n            comments = [];\n            start = this.index - 2;\n            loc = {\n              start: {\n                line: this.lineNumber,\n                column: this.index - this.lineStart - 2\n              },\n              end: {}\n            };\n          }\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n            if (character_1.Character.isLineTerminator(ch)) {\n              if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n                ++this.index;\n              }\n              ++this.lineNumber;\n              ++this.index;\n              this.lineStart = this.index;\n            } else if (ch === 0x2A) {\n              // Block comment ends with '*/'.\n              if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n                this.index += 2;\n                if (this.trackComment) {\n                  loc.end = {\n                    line: this.lineNumber,\n                    column: this.index - this.lineStart\n                  };\n                  var entry = {\n                    multiLine: true,\n                    slice: [start + 2, this.index - 2],\n                    range: [start, this.index],\n                    loc: loc\n                  };\n                  comments.push(entry);\n                }\n                return comments;\n              }\n              ++this.index;\n            } else {\n              ++this.index;\n            }\n          }\n          // Ran off the end of the file - the whole thing is a comment\n          if (this.trackComment) {\n            loc.end = {\n              line: this.lineNumber,\n              column: this.index - this.lineStart\n            };\n            var entry = {\n              multiLine: true,\n              slice: [start + 2, this.index],\n              range: [start, this.index],\n              loc: loc\n            };\n            comments.push(entry);\n          }\n          this.tolerateUnexpectedToken();\n          return comments;\n        };\n        Scanner.prototype.scanComments = function () {\n          var comments;\n          if (this.trackComment) {\n            comments = [];\n          }\n          var start = this.index === 0;\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n            if (character_1.Character.isWhiteSpace(ch)) {\n              ++this.index;\n            } else if (character_1.Character.isLineTerminator(ch)) {\n              ++this.index;\n              if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n                ++this.index;\n              }\n              ++this.lineNumber;\n              this.lineStart = this.index;\n              start = true;\n            } else if (ch === 0x2F) {\n              ch = this.source.charCodeAt(this.index + 1);\n              if (ch === 0x2F) {\n                this.index += 2;\n                var comment = this.skipSingleLineComment(2);\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n                start = true;\n              } else if (ch === 0x2A) {\n                this.index += 2;\n                var comment = this.skipMultiLineComment();\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (start && ch === 0x2D) {\n              // U+003E is '>'\n              if (this.source.charCodeAt(this.index + 1) === 0x2D && this.source.charCodeAt(this.index + 2) === 0x3E) {\n                // '-->' is a single-line comment\n                this.index += 3;\n                var comment = this.skipSingleLineComment(3);\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else if (ch === 0x3C && !this.isModule) {\n              if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n                this.index += 4; // `<!--`\n                var comment = this.skipSingleLineComment(4);\n                if (this.trackComment) {\n                  comments = comments.concat(comment);\n                }\n              } else {\n                break;\n              }\n            } else {\n              break;\n            }\n          }\n          return comments;\n        };\n        // https://tc39.github.io/ecma262/#sec-future-reserved-words\n        Scanner.prototype.isFutureReservedWord = function (id) {\n          switch (id) {\n            case 'enum':\n            case 'export':\n            case 'import':\n            case 'super':\n              return true;\n            default:\n              return false;\n          }\n        };\n        Scanner.prototype.isStrictModeReservedWord = function (id) {\n          switch (id) {\n            case 'implements':\n            case 'interface':\n            case 'package':\n            case 'private':\n            case 'protected':\n            case 'public':\n            case 'static':\n            case 'yield':\n            case 'let':\n              return true;\n            default:\n              return false;\n          }\n        };\n        Scanner.prototype.isRestrictedWord = function (id) {\n          return id === 'eval' || id === 'arguments';\n        };\n        // https://tc39.github.io/ecma262/#sec-keywords\n        Scanner.prototype.isKeyword = function (id) {\n          switch (id.length) {\n            case 2:\n              return id === 'if' || id === 'in' || id === 'do';\n            case 3:\n              return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';\n            case 4:\n              return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';\n            case 5:\n              return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';\n            case 6:\n              return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';\n            case 7:\n              return id === 'default' || id === 'finally' || id === 'extends';\n            case 8:\n              return id === 'function' || id === 'continue' || id === 'debugger';\n            case 10:\n              return id === 'instanceof';\n            default:\n              return false;\n          }\n        };\n        Scanner.prototype.codePointAt = function (i) {\n          var cp = this.source.charCodeAt(i);\n          if (cp >= 0xD800 && cp <= 0xDBFF) {\n            var second = this.source.charCodeAt(i + 1);\n            if (second >= 0xDC00 && second <= 0xDFFF) {\n              var first = cp;\n              cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            }\n          }\n          return cp;\n        };\n        Scanner.prototype.scanHexEscape = function (prefix) {\n          var len = prefix === 'u' ? 4 : 2;\n          var code = 0;\n          for (var i = 0; i < len; ++i) {\n            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              code = code * 16 + hexValue(this.source[this.index++]);\n            } else {\n              return null;\n            }\n          }\n          return String.fromCharCode(code);\n        };\n        Scanner.prototype.scanUnicodeCodePointEscape = function () {\n          var ch = this.source[this.index];\n          var code = 0;\n          // At least, one hex digit is required.\n          if (ch === '}') {\n            this.throwUnexpectedToken();\n          }\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n              break;\n            }\n            code = code * 16 + hexValue(ch);\n          }\n          if (code > 0x10FFFF || ch !== '}') {\n            this.throwUnexpectedToken();\n          }\n          return character_1.Character.fromCodePoint(code);\n        };\n        Scanner.prototype.getIdentifier = function () {\n          var start = this.index++;\n          while (!this.eof()) {\n            var ch = this.source.charCodeAt(this.index);\n            if (ch === 0x5C) {\n              // Blackslash (U+005C) marks Unicode escape sequence.\n              this.index = start;\n              return this.getComplexIdentifier();\n            } else if (ch >= 0xD800 && ch < 0xDFFF) {\n              // Need to handle surrogate pairs.\n              this.index = start;\n              return this.getComplexIdentifier();\n            }\n            if (character_1.Character.isIdentifierPart(ch)) {\n              ++this.index;\n            } else {\n              break;\n            }\n          }\n          return this.source.slice(start, this.index);\n        };\n        Scanner.prototype.getComplexIdentifier = function () {\n          var cp = this.codePointAt(this.index);\n          var id = character_1.Character.fromCodePoint(cp);\n          this.index += id.length;\n          // '\\u' (U+005C, U+0075) denotes an escaped character.\n          var ch;\n          if (cp === 0x5C) {\n            if (this.source.charCodeAt(this.index) !== 0x75) {\n              this.throwUnexpectedToken();\n            }\n            ++this.index;\n            if (this.source[this.index] === '{') {\n              ++this.index;\n              ch = this.scanUnicodeCodePointEscape();\n            } else {\n              ch = this.scanHexEscape('u');\n              if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken();\n              }\n            }\n            id = ch;\n          }\n          while (!this.eof()) {\n            cp = this.codePointAt(this.index);\n            if (!character_1.Character.isIdentifierPart(cp)) {\n              break;\n            }\n            ch = character_1.Character.fromCodePoint(cp);\n            id += ch;\n            this.index += ch.length;\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\n            if (cp === 0x5C) {\n              id = id.substr(0, id.length - 1);\n              if (this.source.charCodeAt(this.index) !== 0x75) {\n                this.throwUnexpectedToken();\n              }\n              ++this.index;\n              if (this.source[this.index] === '{') {\n                ++this.index;\n                ch = this.scanUnicodeCodePointEscape();\n              } else {\n                ch = this.scanHexEscape('u');\n                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n                  this.throwUnexpectedToken();\n                }\n              }\n              id += ch;\n            }\n          }\n          return id;\n        };\n        Scanner.prototype.octalToDecimal = function (ch) {\n          // \\0 is not octal escape sequence\n          var octal = ch !== '0';\n          var code = octalValue(ch);\n          if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n            octal = true;\n            code = code * 8 + octalValue(this.source[this.index++]);\n            // 3 digits are only allowed when string starts\n            // with 0, 1, 2, 3\n            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              code = code * 8 + octalValue(this.source[this.index++]);\n            }\n          }\n          return {\n            code: code,\n            octal: octal\n          };\n        };\n        // https://tc39.github.io/ecma262/#sec-names-and-keywords\n        Scanner.prototype.scanIdentifier = function () {\n          var type;\n          var start = this.index;\n          // Backslash (U+005C) starts an escaped character.\n          var id = this.source.charCodeAt(start) === 0x5C ? this.getComplexIdentifier() : this.getIdentifier();\n          // There is no keyword or literal with only one character.\n          // Thus, it must be an identifier.\n          if (id.length === 1) {\n            type = 3 /* Identifier */;\n          } else if (this.isKeyword(id)) {\n            type = 4 /* Keyword */;\n          } else if (id === 'null') {\n            type = 5 /* NullLiteral */;\n          } else if (id === 'true' || id === 'false') {\n            type = 1 /* BooleanLiteral */;\n          } else {\n            type = 3 /* Identifier */;\n          }\n\n          if (type !== 3 /* Identifier */ && start + id.length !== this.index) {\n            var restore = this.index;\n            this.index = start;\n            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\n            this.index = restore;\n          }\n          return {\n            type: type,\n            value: id,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        // https://tc39.github.io/ecma262/#sec-punctuators\n        Scanner.prototype.scanPunctuator = function () {\n          var start = this.index;\n          // Check for most common single-character punctuators.\n          var str = this.source[this.index];\n          switch (str) {\n            case '(':\n            case '{':\n              if (str === '{') {\n                this.curlyStack.push('{');\n              }\n              ++this.index;\n              break;\n            case '.':\n              ++this.index;\n              if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n                // Spread operator: ...\n                this.index += 2;\n                str = '...';\n              }\n              break;\n            case '}':\n              ++this.index;\n              this.curlyStack.pop();\n              break;\n            case ')':\n            case ';':\n            case ',':\n            case '[':\n            case ']':\n            case ':':\n            case '?':\n            case '~':\n              ++this.index;\n              break;\n            default:\n              // 4-character punctuator.\n              str = this.source.substr(this.index, 4);\n              if (str === '>>>=') {\n                this.index += 4;\n              } else {\n                // 3-character punctuators.\n                str = str.substr(0, 3);\n                if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=' || str === '**=') {\n                  this.index += 3;\n                } else {\n                  // 2-character punctuators.\n                  str = str.substr(0, 2);\n                  if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>' || str === '**') {\n                    this.index += 2;\n                  } else {\n                    // 1-character punctuators.\n                    str = this.source[this.index];\n                    if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n                      ++this.index;\n                    }\n                  }\n                }\n              }\n          }\n          if (this.index === start) {\n            this.throwUnexpectedToken();\n          }\n          return {\n            type: 7 /* Punctuator */,\n            value: str,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n        Scanner.prototype.scanHexLiteral = function (start) {\n          var num = '';\n          while (!this.eof()) {\n            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n            num += this.source[this.index++];\n          }\n          if (num.length === 0) {\n            this.throwUnexpectedToken();\n          }\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n          return {\n            type: 6 /* NumericLiteral */,\n            value: parseInt('0x' + num, 16),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        Scanner.prototype.scanBinaryLiteral = function (start) {\n          var num = '';\n          var ch;\n          while (!this.eof()) {\n            ch = this.source[this.index];\n            if (ch !== '0' && ch !== '1') {\n              break;\n            }\n            num += this.source[this.index++];\n          }\n          if (num.length === 0) {\n            // only 0b or 0B\n            this.throwUnexpectedToken();\n          }\n          if (!this.eof()) {\n            ch = this.source.charCodeAt(this.index);\n            /* istanbul ignore else */\n            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n              this.throwUnexpectedToken();\n            }\n          }\n          return {\n            type: 6 /* NumericLiteral */,\n            value: parseInt(num, 2),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n          var num = '';\n          var octal = false;\n          if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n            octal = true;\n            num = '0' + this.source[this.index++];\n          } else {\n            ++this.index;\n          }\n          while (!this.eof()) {\n            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n              break;\n            }\n            num += this.source[this.index++];\n          }\n          if (!octal && num.length === 0) {\n            // only 0o or 0O\n            this.throwUnexpectedToken();\n          }\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n          return {\n            type: 6 /* NumericLiteral */,\n            value: parseInt(num, 8),\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        Scanner.prototype.isImplicitOctalLiteral = function () {\n          // Implicit octal, unless there is a non-octal digit.\n          // (Annex B.1.1 on Numeric Literals)\n          for (var i = this.index + 1; i < this.length; ++i) {\n            var ch = this.source[i];\n            if (ch === '8' || ch === '9') {\n              return false;\n            }\n            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n              return true;\n            }\n          }\n          return true;\n        };\n        Scanner.prototype.scanNumericLiteral = function () {\n          var start = this.index;\n          var ch = this.source[start];\n          assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || ch === '.', 'Numeric literal must start with a decimal digit or a decimal point');\n          var num = '';\n          if (ch !== '.') {\n            num = this.source[this.index++];\n            ch = this.source[this.index];\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            // Octal number in ES6 starts with '0o'.\n            // Binary number in ES6 starts with '0b'.\n            if (num === '0') {\n              if (ch === 'x' || ch === 'X') {\n                ++this.index;\n                return this.scanHexLiteral(start);\n              }\n              if (ch === 'b' || ch === 'B') {\n                ++this.index;\n                return this.scanBinaryLiteral(start);\n              }\n              if (ch === 'o' || ch === 'O') {\n                return this.scanOctalLiteral(ch, start);\n              }\n              if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                if (this.isImplicitOctalLiteral()) {\n                  return this.scanOctalLiteral(ch, start);\n                }\n              }\n            }\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              num += this.source[this.index++];\n            }\n            ch = this.source[this.index];\n          }\n          if (ch === '.') {\n            num += this.source[this.index++];\n            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              num += this.source[this.index++];\n            }\n            ch = this.source[this.index];\n          }\n          if (ch === 'e' || ch === 'E') {\n            num += this.source[this.index++];\n            ch = this.source[this.index];\n            if (ch === '+' || ch === '-') {\n              num += this.source[this.index++];\n            }\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n              while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                num += this.source[this.index++];\n              }\n            } else {\n              this.throwUnexpectedToken();\n            }\n          }\n          if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n            this.throwUnexpectedToken();\n          }\n          return {\n            type: 6 /* NumericLiteral */,\n            value: parseFloat(num),\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        // https://tc39.github.io/ecma262/#sec-literals-string-literals\n        Scanner.prototype.scanStringLiteral = function () {\n          var start = this.index;\n          var quote = this.source[start];\n          assert_1.assert(quote === '\\'' || quote === '\"', 'String literal must starts with a quote');\n          ++this.index;\n          var octal = false;\n          var str = '';\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n            if (ch === quote) {\n              quote = '';\n              break;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n              if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'u':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      str += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var unescaped_1 = this.scanHexEscape(ch);\n                      if (unescaped_1 === null) {\n                        this.throwUnexpectedToken();\n                      }\n                      str += unescaped_1;\n                    }\n                    break;\n                  case 'x':\n                    var unescaped = this.scanHexEscape(ch);\n                    if (unescaped === null) {\n                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n                    }\n                    str += unescaped;\n                    break;\n                  case 'n':\n                    str += '\\n';\n                    break;\n                  case 'r':\n                    str += '\\r';\n                    break;\n                  case 't':\n                    str += '\\t';\n                    break;\n                  case 'b':\n                    str += '\\b';\n                    break;\n                  case 'f':\n                    str += '\\f';\n                    break;\n                  case 'v':\n                    str += '\\x0B';\n                    break;\n                  case '8':\n                  case '9':\n                    str += ch;\n                    this.tolerateUnexpectedToken();\n                    break;\n                  default:\n                    if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      var octToDec = this.octalToDecimal(ch);\n                      octal = octToDec.octal || octal;\n                      str += String.fromCharCode(octToDec.code);\n                    } else {\n                      str += ch;\n                    }\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              break;\n            } else {\n              str += ch;\n            }\n          }\n          if (quote !== '') {\n            this.index = start;\n            this.throwUnexpectedToken();\n          }\n          return {\n            type: 8 /* StringLiteral */,\n            value: str,\n            octal: octal,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\n        Scanner.prototype.scanTemplate = function () {\n          var cooked = '';\n          var terminated = false;\n          var start = this.index;\n          var head = this.source[start] === '`';\n          var tail = false;\n          var rawOffset = 2;\n          ++this.index;\n          while (!this.eof()) {\n            var ch = this.source[this.index++];\n            if (ch === '`') {\n              rawOffset = 1;\n              tail = true;\n              terminated = true;\n              break;\n            } else if (ch === '$') {\n              if (this.source[this.index] === '{') {\n                this.curlyStack.push('${');\n                ++this.index;\n                terminated = true;\n                break;\n              }\n              cooked += ch;\n            } else if (ch === '\\\\') {\n              ch = this.source[this.index++];\n              if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                switch (ch) {\n                  case 'n':\n                    cooked += '\\n';\n                    break;\n                  case 'r':\n                    cooked += '\\r';\n                    break;\n                  case 't':\n                    cooked += '\\t';\n                    break;\n                  case 'u':\n                    if (this.source[this.index] === '{') {\n                      ++this.index;\n                      cooked += this.scanUnicodeCodePointEscape();\n                    } else {\n                      var restore = this.index;\n                      var unescaped_2 = this.scanHexEscape(ch);\n                      if (unescaped_2 !== null) {\n                        cooked += unescaped_2;\n                      } else {\n                        this.index = restore;\n                        cooked += ch;\n                      }\n                    }\n                    break;\n                  case 'x':\n                    var unescaped = this.scanHexEscape(ch);\n                    if (unescaped === null) {\n                      this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n                    }\n                    cooked += unescaped;\n                    break;\n                  case 'b':\n                    cooked += '\\b';\n                    break;\n                  case 'f':\n                    cooked += '\\f';\n                    break;\n                  case 'v':\n                    cooked += '\\v';\n                    break;\n                  default:\n                    if (ch === '0') {\n                      if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n                        // Illegal: \\01 \\02 and so on\n                        this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                      }\n                      cooked += '\\0';\n                    } else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n                      // Illegal: \\1 \\2\n                      this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n                    } else {\n                      cooked += ch;\n                    }\n                    break;\n                }\n              } else {\n                ++this.lineNumber;\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\n                  ++this.index;\n                }\n                this.lineStart = this.index;\n              }\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              ++this.lineNumber;\n              if (ch === '\\r' && this.source[this.index] === '\\n') {\n                ++this.index;\n              }\n              this.lineStart = this.index;\n              cooked += '\\n';\n            } else {\n              cooked += ch;\n            }\n          }\n          if (!terminated) {\n            this.throwUnexpectedToken();\n          }\n          if (!head) {\n            this.curlyStack.pop();\n          }\n          return {\n            type: 10 /* Template */,\n            value: this.source.slice(start + 1, this.index - rawOffset),\n            cooked: cooked,\n            head: head,\n            tail: tail,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n        Scanner.prototype.testRegExp = function (pattern, flags) {\n          // The BMP character to use as a replacement for astral symbols when\n          // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n          // approximation.\n          // Note: replacing with '\\uFFFF' enables false positives in unlikely\n          // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n          // pattern that would not be detected by this substitution.\n          var astralSubstitute = '\\uFFFF';\n          var tmp = pattern;\n          var self = this;\n          if (flags.indexOf('u') >= 0) {\n            tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n              var codePoint = parseInt($1 || $2, 16);\n              if (codePoint > 0x10FFFF) {\n                self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n              }\n              if (codePoint <= 0xFFFF) {\n                return String.fromCharCode(codePoint);\n              }\n              return astralSubstitute;\n            }).replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n          }\n          // First, detect invalid regular expressions.\n          try {\n            RegExp(tmp);\n          } catch (e) {\n            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n          }\n          // Return a regular expression object for this pattern-flag pair, or\n          // `null` in case the current environment doesn't support the flags it\n          // uses.\n          try {\n            return new RegExp(pattern, flags);\n          } catch (exception) {\n            /* istanbul ignore next */\n            return null;\n          }\n        };\n        Scanner.prototype.scanRegExpBody = function () {\n          var ch = this.source[this.index];\n          assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n          var str = this.source[this.index++];\n          var classMarker = false;\n          var terminated = false;\n          while (!this.eof()) {\n            ch = this.source[this.index++];\n            str += ch;\n            if (ch === '\\\\') {\n              ch = this.source[this.index++];\n              // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n              if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n              }\n              str += ch;\n            } else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n              this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n            } else if (classMarker) {\n              if (ch === ']') {\n                classMarker = false;\n              }\n            } else {\n              if (ch === '/') {\n                terminated = true;\n                break;\n              } else if (ch === '[') {\n                classMarker = true;\n              }\n            }\n          }\n          if (!terminated) {\n            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n          }\n          // Exclude leading and trailing slash.\n          return str.substr(1, str.length - 2);\n        };\n        Scanner.prototype.scanRegExpFlags = function () {\n          var str = '';\n          var flags = '';\n          while (!this.eof()) {\n            var ch = this.source[this.index];\n            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n              break;\n            }\n            ++this.index;\n            if (ch === '\\\\' && !this.eof()) {\n              ch = this.source[this.index];\n              if (ch === 'u') {\n                ++this.index;\n                var restore = this.index;\n                var char = this.scanHexEscape('u');\n                if (char !== null) {\n                  flags += char;\n                  for (str += '\\\\u'; restore < this.index; ++restore) {\n                    str += this.source[restore];\n                  }\n                } else {\n                  this.index = restore;\n                  flags += 'u';\n                  str += '\\\\u';\n                }\n                this.tolerateUnexpectedToken();\n              } else {\n                str += '\\\\';\n                this.tolerateUnexpectedToken();\n              }\n            } else {\n              flags += ch;\n              str += ch;\n            }\n          }\n          return flags;\n        };\n        Scanner.prototype.scanRegExp = function () {\n          var start = this.index;\n          var pattern = this.scanRegExpBody();\n          var flags = this.scanRegExpFlags();\n          var value = this.testRegExp(pattern, flags);\n          return {\n            type: 9 /* RegularExpression */,\n            value: '',\n            pattern: pattern,\n            flags: flags,\n            regex: value,\n            lineNumber: this.lineNumber,\n            lineStart: this.lineStart,\n            start: start,\n            end: this.index\n          };\n        };\n        Scanner.prototype.lex = function () {\n          if (this.eof()) {\n            return {\n              type: 2 /* EOF */,\n              value: '',\n              lineNumber: this.lineNumber,\n              lineStart: this.lineStart,\n              start: this.index,\n              end: this.index\n            };\n          }\n          var cp = this.source.charCodeAt(this.index);\n          if (character_1.Character.isIdentifierStart(cp)) {\n            return this.scanIdentifier();\n          }\n          // Very common: ( and ) and ;\n          if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n            return this.scanPunctuator();\n          }\n          // String literal starts with single quote (U+0027) or double quote (U+0022).\n          if (cp === 0x27 || cp === 0x22) {\n            return this.scanStringLiteral();\n          }\n          // Dot (.) U+002E can also start a floating-point number, hence the need\n          // to check the next character.\n          if (cp === 0x2E) {\n            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n              return this.scanNumericLiteral();\n            }\n            return this.scanPunctuator();\n          }\n          if (character_1.Character.isDecimalDigit(cp)) {\n            return this.scanNumericLiteral();\n          }\n          // Template literals start with ` (U+0060) for template head\n          // or } (U+007D) for template middle or template tail.\n          if (cp === 0x60 || cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${') {\n            return this.scanTemplate();\n          }\n          // Possible identifier start in a surrogate pair.\n          if (cp >= 0xD800 && cp < 0xDFFF) {\n            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n              return this.scanIdentifier();\n            }\n          }\n          return this.scanPunctuator();\n        };\n        return Scanner;\n      }();\n      exports.Scanner = Scanner;\n\n      /***/\n    }, /* 13 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.TokenName = {};\n      exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';\n      exports.TokenName[2 /* EOF */] = '<end>';\n      exports.TokenName[3 /* Identifier */] = 'Identifier';\n      exports.TokenName[4 /* Keyword */] = 'Keyword';\n      exports.TokenName[5 /* NullLiteral */] = 'Null';\n      exports.TokenName[6 /* NumericLiteral */] = 'Numeric';\n      exports.TokenName[7 /* Punctuator */] = 'Punctuator';\n      exports.TokenName[8 /* StringLiteral */] = 'String';\n      exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';\n      exports.TokenName[10 /* Template */] = 'Template';\n\n      /***/\n    }, /* 14 */\n    /***/function (module, exports) {\n      \"use strict\";\n\n      // Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.XHTMLEntities = {\n        quot: '\\u0022',\n        amp: '\\u0026',\n        apos: '\\u0027',\n        gt: '\\u003E',\n        nbsp: '\\u00A0',\n        iexcl: '\\u00A1',\n        cent: '\\u00A2',\n        pound: '\\u00A3',\n        curren: '\\u00A4',\n        yen: '\\u00A5',\n        brvbar: '\\u00A6',\n        sect: '\\u00A7',\n        uml: '\\u00A8',\n        copy: '\\u00A9',\n        ordf: '\\u00AA',\n        laquo: '\\u00AB',\n        not: '\\u00AC',\n        shy: '\\u00AD',\n        reg: '\\u00AE',\n        macr: '\\u00AF',\n        deg: '\\u00B0',\n        plusmn: '\\u00B1',\n        sup2: '\\u00B2',\n        sup3: '\\u00B3',\n        acute: '\\u00B4',\n        micro: '\\u00B5',\n        para: '\\u00B6',\n        middot: '\\u00B7',\n        cedil: '\\u00B8',\n        sup1: '\\u00B9',\n        ordm: '\\u00BA',\n        raquo: '\\u00BB',\n        frac14: '\\u00BC',\n        frac12: '\\u00BD',\n        frac34: '\\u00BE',\n        iquest: '\\u00BF',\n        Agrave: '\\u00C0',\n        Aacute: '\\u00C1',\n        Acirc: '\\u00C2',\n        Atilde: '\\u00C3',\n        Auml: '\\u00C4',\n        Aring: '\\u00C5',\n        AElig: '\\u00C6',\n        Ccedil: '\\u00C7',\n        Egrave: '\\u00C8',\n        Eacute: '\\u00C9',\n        Ecirc: '\\u00CA',\n        Euml: '\\u00CB',\n        Igrave: '\\u00CC',\n        Iacute: '\\u00CD',\n        Icirc: '\\u00CE',\n        Iuml: '\\u00CF',\n        ETH: '\\u00D0',\n        Ntilde: '\\u00D1',\n        Ograve: '\\u00D2',\n        Oacute: '\\u00D3',\n        Ocirc: '\\u00D4',\n        Otilde: '\\u00D5',\n        Ouml: '\\u00D6',\n        times: '\\u00D7',\n        Oslash: '\\u00D8',\n        Ugrave: '\\u00D9',\n        Uacute: '\\u00DA',\n        Ucirc: '\\u00DB',\n        Uuml: '\\u00DC',\n        Yacute: '\\u00DD',\n        THORN: '\\u00DE',\n        szlig: '\\u00DF',\n        agrave: '\\u00E0',\n        aacute: '\\u00E1',\n        acirc: '\\u00E2',\n        atilde: '\\u00E3',\n        auml: '\\u00E4',\n        aring: '\\u00E5',\n        aelig: '\\u00E6',\n        ccedil: '\\u00E7',\n        egrave: '\\u00E8',\n        eacute: '\\u00E9',\n        ecirc: '\\u00EA',\n        euml: '\\u00EB',\n        igrave: '\\u00EC',\n        iacute: '\\u00ED',\n        icirc: '\\u00EE',\n        iuml: '\\u00EF',\n        eth: '\\u00F0',\n        ntilde: '\\u00F1',\n        ograve: '\\u00F2',\n        oacute: '\\u00F3',\n        ocirc: '\\u00F4',\n        otilde: '\\u00F5',\n        ouml: '\\u00F6',\n        divide: '\\u00F7',\n        oslash: '\\u00F8',\n        ugrave: '\\u00F9',\n        uacute: '\\u00FA',\n        ucirc: '\\u00FB',\n        uuml: '\\u00FC',\n        yacute: '\\u00FD',\n        thorn: '\\u00FE',\n        yuml: '\\u00FF',\n        OElig: '\\u0152',\n        oelig: '\\u0153',\n        Scaron: '\\u0160',\n        scaron: '\\u0161',\n        Yuml: '\\u0178',\n        fnof: '\\u0192',\n        circ: '\\u02C6',\n        tilde: '\\u02DC',\n        Alpha: '\\u0391',\n        Beta: '\\u0392',\n        Gamma: '\\u0393',\n        Delta: '\\u0394',\n        Epsilon: '\\u0395',\n        Zeta: '\\u0396',\n        Eta: '\\u0397',\n        Theta: '\\u0398',\n        Iota: '\\u0399',\n        Kappa: '\\u039A',\n        Lambda: '\\u039B',\n        Mu: '\\u039C',\n        Nu: '\\u039D',\n        Xi: '\\u039E',\n        Omicron: '\\u039F',\n        Pi: '\\u03A0',\n        Rho: '\\u03A1',\n        Sigma: '\\u03A3',\n        Tau: '\\u03A4',\n        Upsilon: '\\u03A5',\n        Phi: '\\u03A6',\n        Chi: '\\u03A7',\n        Psi: '\\u03A8',\n        Omega: '\\u03A9',\n        alpha: '\\u03B1',\n        beta: '\\u03B2',\n        gamma: '\\u03B3',\n        delta: '\\u03B4',\n        epsilon: '\\u03B5',\n        zeta: '\\u03B6',\n        eta: '\\u03B7',\n        theta: '\\u03B8',\n        iota: '\\u03B9',\n        kappa: '\\u03BA',\n        lambda: '\\u03BB',\n        mu: '\\u03BC',\n        nu: '\\u03BD',\n        xi: '\\u03BE',\n        omicron: '\\u03BF',\n        pi: '\\u03C0',\n        rho: '\\u03C1',\n        sigmaf: '\\u03C2',\n        sigma: '\\u03C3',\n        tau: '\\u03C4',\n        upsilon: '\\u03C5',\n        phi: '\\u03C6',\n        chi: '\\u03C7',\n        psi: '\\u03C8',\n        omega: '\\u03C9',\n        thetasym: '\\u03D1',\n        upsih: '\\u03D2',\n        piv: '\\u03D6',\n        ensp: '\\u2002',\n        emsp: '\\u2003',\n        thinsp: '\\u2009',\n        zwnj: '\\u200C',\n        zwj: '\\u200D',\n        lrm: '\\u200E',\n        rlm: '\\u200F',\n        ndash: '\\u2013',\n        mdash: '\\u2014',\n        lsquo: '\\u2018',\n        rsquo: '\\u2019',\n        sbquo: '\\u201A',\n        ldquo: '\\u201C',\n        rdquo: '\\u201D',\n        bdquo: '\\u201E',\n        dagger: '\\u2020',\n        Dagger: '\\u2021',\n        bull: '\\u2022',\n        hellip: '\\u2026',\n        permil: '\\u2030',\n        prime: '\\u2032',\n        Prime: '\\u2033',\n        lsaquo: '\\u2039',\n        rsaquo: '\\u203A',\n        oline: '\\u203E',\n        frasl: '\\u2044',\n        euro: '\\u20AC',\n        image: '\\u2111',\n        weierp: '\\u2118',\n        real: '\\u211C',\n        trade: '\\u2122',\n        alefsym: '\\u2135',\n        larr: '\\u2190',\n        uarr: '\\u2191',\n        rarr: '\\u2192',\n        darr: '\\u2193',\n        harr: '\\u2194',\n        crarr: '\\u21B5',\n        lArr: '\\u21D0',\n        uArr: '\\u21D1',\n        rArr: '\\u21D2',\n        dArr: '\\u21D3',\n        hArr: '\\u21D4',\n        forall: '\\u2200',\n        part: '\\u2202',\n        exist: '\\u2203',\n        empty: '\\u2205',\n        nabla: '\\u2207',\n        isin: '\\u2208',\n        notin: '\\u2209',\n        ni: '\\u220B',\n        prod: '\\u220F',\n        sum: '\\u2211',\n        minus: '\\u2212',\n        lowast: '\\u2217',\n        radic: '\\u221A',\n        prop: '\\u221D',\n        infin: '\\u221E',\n        ang: '\\u2220',\n        and: '\\u2227',\n        or: '\\u2228',\n        cap: '\\u2229',\n        cup: '\\u222A',\n        int: '\\u222B',\n        there4: '\\u2234',\n        sim: '\\u223C',\n        cong: '\\u2245',\n        asymp: '\\u2248',\n        ne: '\\u2260',\n        equiv: '\\u2261',\n        le: '\\u2264',\n        ge: '\\u2265',\n        sub: '\\u2282',\n        sup: '\\u2283',\n        nsub: '\\u2284',\n        sube: '\\u2286',\n        supe: '\\u2287',\n        oplus: '\\u2295',\n        otimes: '\\u2297',\n        perp: '\\u22A5',\n        sdot: '\\u22C5',\n        lceil: '\\u2308',\n        rceil: '\\u2309',\n        lfloor: '\\u230A',\n        rfloor: '\\u230B',\n        loz: '\\u25CA',\n        spades: '\\u2660',\n        clubs: '\\u2663',\n        hearts: '\\u2665',\n        diams: '\\u2666',\n        lang: '\\u27E8',\n        rang: '\\u27E9'\n      };\n\n      /***/\n    }, /* 15 */\n    /***/function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      var error_handler_1 = __webpack_require__(10);\n      var scanner_1 = __webpack_require__(12);\n      var token_1 = __webpack_require__(13);\n      var Reader = function () {\n        function Reader() {\n          this.values = [];\n          this.curly = this.paren = -1;\n        }\n        // A function following one of those tokens is an expression.\n        Reader.prototype.beforeFunctionExpression = function (t) {\n          return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new', 'return', 'case', 'delete', 'throw', 'void',\n          // assignment operators\n          '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ',',\n          // binary/unary operators\n          '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&', '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n        };\n        // Determine if forward slash (/) is an operator or part of a regular expression\n        // https://github.com/mozilla/sweet.js/wiki/design\n        Reader.prototype.isRegexStart = function () {\n          var previous = this.values[this.values.length - 1];\n          var regex = previous !== null;\n          switch (previous) {\n            case 'this':\n            case ']':\n              regex = false;\n              break;\n            case ')':\n              var keyword = this.values[this.paren - 1];\n              regex = keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with';\n              break;\n            case '}':\n              // Dividing a function by anything makes little sense,\n              // but we have to check for that.\n              regex = false;\n              if (this.values[this.curly - 3] === 'function') {\n                // Anonymous function, e.g. function(){} /42\n                var check = this.values[this.curly - 4];\n                regex = check ? !this.beforeFunctionExpression(check) : false;\n              } else if (this.values[this.curly - 4] === 'function') {\n                // Named function, e.g. function f(){} /42/\n                var check = this.values[this.curly - 5];\n                regex = check ? !this.beforeFunctionExpression(check) : true;\n              }\n              break;\n            default:\n              break;\n          }\n          return regex;\n        };\n        Reader.prototype.push = function (token) {\n          if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {\n            if (token.value === '{') {\n              this.curly = this.values.length;\n            } else if (token.value === '(') {\n              this.paren = this.values.length;\n            }\n            this.values.push(token.value);\n          } else {\n            this.values.push(null);\n          }\n        };\n        return Reader;\n      }();\n      var Tokenizer = function () {\n        function Tokenizer(code, config) {\n          this.errorHandler = new error_handler_1.ErrorHandler();\n          this.errorHandler.tolerant = config ? typeof config.tolerant === 'boolean' && config.tolerant : false;\n          this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n          this.scanner.trackComment = config ? typeof config.comment === 'boolean' && config.comment : false;\n          this.trackRange = config ? typeof config.range === 'boolean' && config.range : false;\n          this.trackLoc = config ? typeof config.loc === 'boolean' && config.loc : false;\n          this.buffer = [];\n          this.reader = new Reader();\n        }\n        Tokenizer.prototype.errors = function () {\n          return this.errorHandler.errors;\n        };\n        Tokenizer.prototype.getNextToken = function () {\n          if (this.buffer.length === 0) {\n            var comments = this.scanner.scanComments();\n            if (this.scanner.trackComment) {\n              for (var i = 0; i < comments.length; ++i) {\n                var e = comments[i];\n                var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n                var comment = {\n                  type: e.multiLine ? 'BlockComment' : 'LineComment',\n                  value: value\n                };\n                if (this.trackRange) {\n                  comment.range = e.range;\n                }\n                if (this.trackLoc) {\n                  comment.loc = e.loc;\n                }\n                this.buffer.push(comment);\n              }\n            }\n            if (!this.scanner.eof()) {\n              var loc = void 0;\n              if (this.trackLoc) {\n                loc = {\n                  start: {\n                    line: this.scanner.lineNumber,\n                    column: this.scanner.index - this.scanner.lineStart\n                  },\n                  end: {}\n                };\n              }\n              var startRegex = this.scanner.source[this.scanner.index] === '/' && this.reader.isRegexStart();\n              var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();\n              this.reader.push(token);\n              var entry = {\n                type: token_1.TokenName[token.type],\n                value: this.scanner.source.slice(token.start, token.end)\n              };\n              if (this.trackRange) {\n                entry.range = [token.start, token.end];\n              }\n              if (this.trackLoc) {\n                loc.end = {\n                  line: this.scanner.lineNumber,\n                  column: this.scanner.index - this.scanner.lineStart\n                };\n                entry.loc = loc;\n              }\n              if (token.type === 9 /* RegularExpression */) {\n                var pattern = token.pattern;\n                var flags = token.flags;\n                entry.regex = {\n                  pattern: pattern,\n                  flags: flags\n                };\n              }\n              this.buffer.push(entry);\n            }\n          }\n          return this.buffer.shift();\n        };\n        return Tokenizer;\n      }();\n      exports.Tokenizer = Tokenizer;\n\n      /***/\n    }\n    /******/])\n  );\n});\n\n;","map":{"version":3,"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","Object","defineProperty","value","comment_handler_1","jsx_parser_1","parser_1","tokenizer_1","parse","code","options","delegate","commentHandler","proxyDelegate","node","metadata","visit","parserDelegate","collectComment","comment","attachComment","CommentHandler","attach","isModule","sourceType","parser","jsx","JSXParser","Parser","program","parseModule","parseScript","ast","comments","config","tokens","tolerant","errors","errorHandler","parsingOptions","tokenize","tokenizer","Tokenizer","token","getNextToken","push","e","tolerate","syntax_1","Syntax","version","stack","leading","trailing","prototype","insertInnerComments","type","BlockStatement","body","length","innerComments","i","entry","end","offset","start","unshift","splice","findTrailingComments","trailingComments","entry_1","firstComment","range","findLeadingComments","leadingComments","target","pop","count","visitNode","Program","visitComment","loc","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForStatement","ForOfStatement","ForInStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","hasOwnProperty","__","constructor","create","character_1","JSXNode","jsx_syntax_1","Node","token_1","xhtml_entities_1","TokenName","getQualifiedElementName","elementName","qualifiedName","JSXSyntax","JSXIdentifier","name","JSXNamespacedName","ns","namespace","JSXMemberExpression","expr","object","property","_super","parsePrimaryExpression","match","parseJSXRoot","startJSX","scanner","index","startMarker","lineNumber","line","lineStart","column","finishJSX","nextToken","reenterJSX","expectJSX","createJSXNode","collectComments","createJSXChildNode","scanXHTMLEntity","quote","result","valid","terminated","numeric","hex","eof","ch","source","Character","isDecimalDigit","charCodeAt","isHexDigit","str","substr","String","fromCharCode","parseInt","XHTMLEntities","lexJSX","cp","n1","n2","isIdentifierStart","isIdentifierPart","slice","lex","nextJSXToken","lastMarker","convertToken","nextJSXText","text","isLineTerminator","peekJSXToken","state","saveState","scanComments","next","restoreState","throwUnexpectedToken","matchJSX","parseJSXIdentifier","finalize","parseJSXElementName","name_1","parseJSXAttributeName","attributeName","identifier","name_2","parseJSXStringLiteralAttribute","raw","getTokenRaw","parseJSXExpressionAttribute","tolerateError","expression","parseAssignmentExpression","JSXExpressionContainer","parseJSXAttributeValue","parseJSXElement","parseJSXNameValueAttribute","JSXAttribute","parseJSXSpreadAttribute","argument","JSXSpreadAttribute","parseJSXAttributes","attributes","attribute","parseJSXOpeningElement","selfClosing","JSXOpeningElement","parseJSXBoundaryElement","name_3","JSXClosingElement","parseJSXEmptyExpression","JSXEmptyExpression","parseJSXExpressionContainer","parseJSXChildren","children","child","JSXText","container","parseComplexJSXElement","el","concat","element","opening","JSXElement","closing","open_1","close_1","isStartOfExpression","Regex","NonAsciiIdentifierStart","NonAsciiIdentifierPart","fromCodePoint","isWhiteSpace","indexOf","test","isOctalDigit","openingElement","closingElement","elements","params","generator","async","operator","left","right","AsyncArrowFunctionExpression","AsyncFunctionDeclaration","AsyncFunctionExpression","logical","label","callee","args","arguments","param","superClass","ComputedMemberExpression","computed","consequent","alternate","Directive","directive","declaration","specifiers","local","exported","each","init","update","imported","meta","key","kind","isStatic","static","Module","properties","method","shorthand","RegexLiteral","pattern","flags","regex","Script","expressions","StaticMemberExpression","discriminant","cases","tag","quasi","tail","quasis","block","handler","finalizer","prefix","declarations","assert_1","error_handler_1","messages_1","scanner_1","ArrowParameterPlaceHolder","ErrorHandler","Scanner","trackComment","operatorPrecedence","lookahead","hasLineTerminator","context","await","allowIn","allowStrictDirective","allowYield","firstCoverInitializedNameError","isAssignmentTarget","isBindingElement","inFunctionBody","inIteration","inSwitch","labelSet","strict","throwError","messageFormat","values","_i","msg","replace","whole","idx","assert","createError","unexpectedTokenError","message","Messages","UnexpectedToken","UnexpectedEOS","UnexpectedIdentifier","UnexpectedNumber","UnexpectedString","UnexpectedTemplate","isFutureReservedWord","UnexpectedReserved","isStrictModeReservedWord","StrictReservedWord","lastMarkerLineStart","tolerateUnexpectedToken","multiLine","t","nextRegexToken","scanRegExp","createNode","startNode","lastLineStart","marker","expect","expectCommaSeparator","expectKeyword","keyword","matchKeyword","matchContextualKeyword","matchAssign","op","isolateCoverGrammar","parseFunction","previousIsBindingElement","previousIsAssignmentTarget","previousFirstCoverInitializedNameError","inheritCoverGrammar","consumeSemicolon","matchAsyncFunction","parseFunctionExpression","octal","StrictOctalLiteral","parseTemplateLiteral","parseGroupExpression","parseArrayInitializer","parseObjectInitializer","parseIdentifierName","parseClassExpression","parseSpreadElement","arg","parsePropertyMethod","previousStrict","previousAllowStrictDirective","simple","parseFunctionSourceElements","firstRestricted","stricted","parsePropertyMethodFunction","isGenerator","previousAllowYield","parseFormalParameters","parsePropertyMethodAsyncFunction","previousAwait","parseObjectPropertyKey","isPropertyKey","parseObjectProperty","hasProto","isAsync","lookaheadPropertyKey","qualifiedPropertyName","parseGetterMethod","parseSetterMethod","parseGeneratorMethod","DuplicateProtoProperty","parseTemplateHead","head","cooked","parseTemplateElement","parseExpression","reinterpretExpressionAsPattern","startToken","parseRestElement","arrow","parameters","parseArguments","isIdentifierName","parseNewExpression","parseLeftHandSideExpression","parseAsyncArgument","parseAsyncArguments","parseLeftHandSideExpressionAllowCall","maybeAsync","previousAllowIn","asyncArrow","parseSuper","parseUpdateExpression","parseUnaryExpression","isRestrictedWord","StrictLHSPrefix","InvalidLHSInAssignment","StrictLHSPostfix","parseAwaitExpression","StrictDelete","parseExponentiationExpression","binaryPrecedence","precedence","parseBinaryExpression","prec","markers","precedences","parseConditionalExpression","checkPatternParam","validateParam","reinterpretAsCoverFormalsList","paramSet","StrictParamDupe","parseYieldExpression","list","StrictLHSAssignment","parseStatementListItem","statement","IllegalExportDeclaration","parseExportDeclaration","IllegalImportDeclaration","parseImportDeclaration","parseLexicalDeclaration","inFor","parseFunctionDeclaration","parseClassDeclaration","isLexicalDeclaration","parseStatement","parseBlock","parseLexicalBinding","parsePattern","StrictVarName","DeclarationMissingInitializer","parseBindingList","parseBindingRestElement","parseArrayPattern","parsePatternWithDefault","parsePropertyPattern","keyToken","parseVariableIdentifier","parseObjectPattern","LetInLexicalBinding","parseVariableDeclaration","parseVariableDeclarationList","opt","parseVariableStatement","parseEmptyStatement","parseExpressionStatement","parseIfClause","StrictFunction","parseIfStatement","parseDoWhileStatement","previousInIteration","parseWhileStatement","parseForStatement","forIn","decl","ForInOfLoopInitializer","initStartToken","InvalidLHSInForIn","InvalidLHSInForLoop","initSeq","parseContinueStatement","UnknownLabel","IllegalContinue","parseBreakStatement","IllegalBreak","parseReturnStatement","IllegalReturn","hasArgument","parseWithStatement","StrictModeWith","parseSwitchCase","parseSwitchStatement","previousInSwitch","defaultFound","clause","MultipleDefaultsInSwitch","parseLabelledStatement","Redeclaration","GeneratorInLegacyContext","parseThrowStatement","NewlineAfterThrow","parseCatchClause","paramMap","DuplicateBinding","StrictCatchVariable","parseFinallyClause","parseTryStatement","NoCatchOrFinally","parseDebuggerStatement","parseDirectivePrologues","previousLabelSet","previousInFunctionBody","StrictParamName","enumerable","writable","configurable","DefaultRestParameter","ParameterAfterRestParameter","parseFormalParameter","identifierIsOptional","StrictFunctionName","previousAllowAwait","formalParameters","parseDirective","IllegalLanguageModeDirective","BadGetterArity","BadSetterArity","BadSetterRestParameter","parseClassElement","hasConstructor","punctuator","ConstructorIsAsync","StaticPrototype","ConstructorSpecialMethod","DuplicateConstructor","parseClassElementList","parseClassBody","elementList","classBody","parseModuleSpecifier","InvalidModuleSpecifier","parseImportSpecifier","parseNamedImports","parseImportDefaultSpecifier","parseImportNamespaceSpecifier","NoAsAfterImportNamespace","src","MissingFromClause","parseExportSpecifier","exportDeclaration","isExportFromIdentifier","condition","Error","recordError","error","constructError","base","col","description","InvalidEscapedReservedWord","InvalidHexEscapeSequence","InvalidRegExp","TemplateOctalLiteral","UnexpectedTokenIllegal","UnterminatedRegExp","hexValue","toLowerCase","octalValue","curlyStack","skipSingleLineComment","skipMultiLineComment","isKeyword","codePointAt","second","first","scanHexEscape","len","scanUnicodeCodePointEscape","getIdentifier","getComplexIdentifier","octalToDecimal","scanIdentifier","restore","scanPunctuator","scanHexLiteral","num","scanBinaryLiteral","scanOctalLiteral","isImplicitOctalLiteral","scanNumericLiteral","parseFloat","scanStringLiteral","unescaped_1","unescaped","octToDec","scanTemplate","rawOffset","unescaped_2","testRegExp","astralSubstitute","tmp","self","$0","$1","$2","codePoint","RegExp","exception","scanRegExpBody","classMarker","scanRegExpFlags","char","quot","amp","apos","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","tilde","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","loz","spades","clubs","hearts","diams","lang","rang","Reader","curly","paren","beforeFunctionExpression","isRegexStart","previous","check","trackRange","trackLoc","buffer","reader","startRegex","shift"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/esprima/dist/esprima.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n/* istanbul ignore next */\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n/* istanbul ignore next */\n\telse if(typeof exports === 'object')\n\t\texports[\"esprima\"] = factory();\n\telse\n\t\troot[\"esprima\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/* istanbul ignore if */\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/*\n\t  Copyright JS Foundation and other contributors, https://js.foundation/\n\n\t  Redistribution and use in source and binary forms, with or without\n\t  modification, are permitted provided that the following conditions are met:\n\n\t    * Redistributions of source code must retain the above copyright\n\t      notice, this list of conditions and the following disclaimer.\n\t    * Redistributions in binary form must reproduce the above copyright\n\t      notice, this list of conditions and the following disclaimer in the\n\t      documentation and/or other materials provided with the distribution.\n\n\t  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\t  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\t  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n\t  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\t  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\t  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\t  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n\t  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar comment_handler_1 = __webpack_require__(1);\n\tvar jsx_parser_1 = __webpack_require__(3);\n\tvar parser_1 = __webpack_require__(8);\n\tvar tokenizer_1 = __webpack_require__(15);\n\tfunction parse(code, options, delegate) {\n\t    var commentHandler = null;\n\t    var proxyDelegate = function (node, metadata) {\n\t        if (delegate) {\n\t            delegate(node, metadata);\n\t        }\n\t        if (commentHandler) {\n\t            commentHandler.visit(node, metadata);\n\t        }\n\t    };\n\t    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\n\t    var collectComment = false;\n\t    if (options) {\n\t        collectComment = (typeof options.comment === 'boolean' && options.comment);\n\t        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\n\t        if (collectComment || attachComment) {\n\t            commentHandler = new comment_handler_1.CommentHandler();\n\t            commentHandler.attach = attachComment;\n\t            options.comment = true;\n\t            parserDelegate = proxyDelegate;\n\t        }\n\t    }\n\t    var isModule = false;\n\t    if (options && typeof options.sourceType === 'string') {\n\t        isModule = (options.sourceType === 'module');\n\t    }\n\t    var parser;\n\t    if (options && typeof options.jsx === 'boolean' && options.jsx) {\n\t        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);\n\t    }\n\t    else {\n\t        parser = new parser_1.Parser(code, options, parserDelegate);\n\t    }\n\t    var program = isModule ? parser.parseModule() : parser.parseScript();\n\t    var ast = program;\n\t    if (collectComment && commentHandler) {\n\t        ast.comments = commentHandler.comments;\n\t    }\n\t    if (parser.config.tokens) {\n\t        ast.tokens = parser.tokens;\n\t    }\n\t    if (parser.config.tolerant) {\n\t        ast.errors = parser.errorHandler.errors;\n\t    }\n\t    return ast;\n\t}\n\texports.parse = parse;\n\tfunction parseModule(code, options, delegate) {\n\t    var parsingOptions = options || {};\n\t    parsingOptions.sourceType = 'module';\n\t    return parse(code, parsingOptions, delegate);\n\t}\n\texports.parseModule = parseModule;\n\tfunction parseScript(code, options, delegate) {\n\t    var parsingOptions = options || {};\n\t    parsingOptions.sourceType = 'script';\n\t    return parse(code, parsingOptions, delegate);\n\t}\n\texports.parseScript = parseScript;\n\tfunction tokenize(code, options, delegate) {\n\t    var tokenizer = new tokenizer_1.Tokenizer(code, options);\n\t    var tokens;\n\t    tokens = [];\n\t    try {\n\t        while (true) {\n\t            var token = tokenizer.getNextToken();\n\t            if (!token) {\n\t                break;\n\t            }\n\t            if (delegate) {\n\t                token = delegate(token);\n\t            }\n\t            tokens.push(token);\n\t        }\n\t    }\n\t    catch (e) {\n\t        tokenizer.errorHandler.tolerate(e);\n\t    }\n\t    if (tokenizer.errorHandler.tolerant) {\n\t        tokens.errors = tokenizer.errors();\n\t    }\n\t    return tokens;\n\t}\n\texports.tokenize = tokenize;\n\tvar syntax_1 = __webpack_require__(2);\n\texports.Syntax = syntax_1.Syntax;\n\t// Sync with *.json manifests.\n\texports.version = '4.0.1';\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar syntax_1 = __webpack_require__(2);\n\tvar CommentHandler = (function () {\n\t    function CommentHandler() {\n\t        this.attach = false;\n\t        this.comments = [];\n\t        this.stack = [];\n\t        this.leading = [];\n\t        this.trailing = [];\n\t    }\n\t    CommentHandler.prototype.insertInnerComments = function (node, metadata) {\n\t        //  innnerComments for properties empty block\n\t        //  `function a() {/** comments **\\/}`\n\t        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {\n\t            var innerComments = [];\n\t            for (var i = this.leading.length - 1; i >= 0; --i) {\n\t                var entry = this.leading[i];\n\t                if (metadata.end.offset >= entry.start) {\n\t                    innerComments.unshift(entry.comment);\n\t                    this.leading.splice(i, 1);\n\t                    this.trailing.splice(i, 1);\n\t                }\n\t            }\n\t            if (innerComments.length) {\n\t                node.innerComments = innerComments;\n\t            }\n\t        }\n\t    };\n\t    CommentHandler.prototype.findTrailingComments = function (metadata) {\n\t        var trailingComments = [];\n\t        if (this.trailing.length > 0) {\n\t            for (var i = this.trailing.length - 1; i >= 0; --i) {\n\t                var entry_1 = this.trailing[i];\n\t                if (entry_1.start >= metadata.end.offset) {\n\t                    trailingComments.unshift(entry_1.comment);\n\t                }\n\t            }\n\t            this.trailing.length = 0;\n\t            return trailingComments;\n\t        }\n\t        var entry = this.stack[this.stack.length - 1];\n\t        if (entry && entry.node.trailingComments) {\n\t            var firstComment = entry.node.trailingComments[0];\n\t            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\n\t                trailingComments = entry.node.trailingComments;\n\t                delete entry.node.trailingComments;\n\t            }\n\t        }\n\t        return trailingComments;\n\t    };\n\t    CommentHandler.prototype.findLeadingComments = function (metadata) {\n\t        var leadingComments = [];\n\t        var target;\n\t        while (this.stack.length > 0) {\n\t            var entry = this.stack[this.stack.length - 1];\n\t            if (entry && entry.start >= metadata.start.offset) {\n\t                target = entry.node;\n\t                this.stack.pop();\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        if (target) {\n\t            var count = target.leadingComments ? target.leadingComments.length : 0;\n\t            for (var i = count - 1; i >= 0; --i) {\n\t                var comment = target.leadingComments[i];\n\t                if (comment.range[1] <= metadata.start.offset) {\n\t                    leadingComments.unshift(comment);\n\t                    target.leadingComments.splice(i, 1);\n\t                }\n\t            }\n\t            if (target.leadingComments && target.leadingComments.length === 0) {\n\t                delete target.leadingComments;\n\t            }\n\t            return leadingComments;\n\t        }\n\t        for (var i = this.leading.length - 1; i >= 0; --i) {\n\t            var entry = this.leading[i];\n\t            if (entry.start <= metadata.start.offset) {\n\t                leadingComments.unshift(entry.comment);\n\t                this.leading.splice(i, 1);\n\t            }\n\t        }\n\t        return leadingComments;\n\t    };\n\t    CommentHandler.prototype.visitNode = function (node, metadata) {\n\t        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {\n\t            return;\n\t        }\n\t        this.insertInnerComments(node, metadata);\n\t        var trailingComments = this.findTrailingComments(metadata);\n\t        var leadingComments = this.findLeadingComments(metadata);\n\t        if (leadingComments.length > 0) {\n\t            node.leadingComments = leadingComments;\n\t        }\n\t        if (trailingComments.length > 0) {\n\t            node.trailingComments = trailingComments;\n\t        }\n\t        this.stack.push({\n\t            node: node,\n\t            start: metadata.start.offset\n\t        });\n\t    };\n\t    CommentHandler.prototype.visitComment = function (node, metadata) {\n\t        var type = (node.type[0] === 'L') ? 'Line' : 'Block';\n\t        var comment = {\n\t            type: type,\n\t            value: node.value\n\t        };\n\t        if (node.range) {\n\t            comment.range = node.range;\n\t        }\n\t        if (node.loc) {\n\t            comment.loc = node.loc;\n\t        }\n\t        this.comments.push(comment);\n\t        if (this.attach) {\n\t            var entry = {\n\t                comment: {\n\t                    type: type,\n\t                    value: node.value,\n\t                    range: [metadata.start.offset, metadata.end.offset]\n\t                },\n\t                start: metadata.start.offset\n\t            };\n\t            if (node.loc) {\n\t                entry.comment.loc = node.loc;\n\t            }\n\t            node.type = type;\n\t            this.leading.push(entry);\n\t            this.trailing.push(entry);\n\t        }\n\t    };\n\t    CommentHandler.prototype.visit = function (node, metadata) {\n\t        if (node.type === 'LineComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (node.type === 'BlockComment') {\n\t            this.visitComment(node, metadata);\n\t        }\n\t        else if (this.attach) {\n\t            this.visitNode(node, metadata);\n\t        }\n\t    };\n\t    return CommentHandler;\n\t}());\n\texports.CommentHandler = CommentHandler;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.Syntax = {\n\t    AssignmentExpression: 'AssignmentExpression',\n\t    AssignmentPattern: 'AssignmentPattern',\n\t    ArrayExpression: 'ArrayExpression',\n\t    ArrayPattern: 'ArrayPattern',\n\t    ArrowFunctionExpression: 'ArrowFunctionExpression',\n\t    AwaitExpression: 'AwaitExpression',\n\t    BlockStatement: 'BlockStatement',\n\t    BinaryExpression: 'BinaryExpression',\n\t    BreakStatement: 'BreakStatement',\n\t    CallExpression: 'CallExpression',\n\t    CatchClause: 'CatchClause',\n\t    ClassBody: 'ClassBody',\n\t    ClassDeclaration: 'ClassDeclaration',\n\t    ClassExpression: 'ClassExpression',\n\t    ConditionalExpression: 'ConditionalExpression',\n\t    ContinueStatement: 'ContinueStatement',\n\t    DoWhileStatement: 'DoWhileStatement',\n\t    DebuggerStatement: 'DebuggerStatement',\n\t    EmptyStatement: 'EmptyStatement',\n\t    ExportAllDeclaration: 'ExportAllDeclaration',\n\t    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\n\t    ExportNamedDeclaration: 'ExportNamedDeclaration',\n\t    ExportSpecifier: 'ExportSpecifier',\n\t    ExpressionStatement: 'ExpressionStatement',\n\t    ForStatement: 'ForStatement',\n\t    ForOfStatement: 'ForOfStatement',\n\t    ForInStatement: 'ForInStatement',\n\t    FunctionDeclaration: 'FunctionDeclaration',\n\t    FunctionExpression: 'FunctionExpression',\n\t    Identifier: 'Identifier',\n\t    IfStatement: 'IfStatement',\n\t    ImportDeclaration: 'ImportDeclaration',\n\t    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\n\t    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\n\t    ImportSpecifier: 'ImportSpecifier',\n\t    Literal: 'Literal',\n\t    LabeledStatement: 'LabeledStatement',\n\t    LogicalExpression: 'LogicalExpression',\n\t    MemberExpression: 'MemberExpression',\n\t    MetaProperty: 'MetaProperty',\n\t    MethodDefinition: 'MethodDefinition',\n\t    NewExpression: 'NewExpression',\n\t    ObjectExpression: 'ObjectExpression',\n\t    ObjectPattern: 'ObjectPattern',\n\t    Program: 'Program',\n\t    Property: 'Property',\n\t    RestElement: 'RestElement',\n\t    ReturnStatement: 'ReturnStatement',\n\t    SequenceExpression: 'SequenceExpression',\n\t    SpreadElement: 'SpreadElement',\n\t    Super: 'Super',\n\t    SwitchCase: 'SwitchCase',\n\t    SwitchStatement: 'SwitchStatement',\n\t    TaggedTemplateExpression: 'TaggedTemplateExpression',\n\t    TemplateElement: 'TemplateElement',\n\t    TemplateLiteral: 'TemplateLiteral',\n\t    ThisExpression: 'ThisExpression',\n\t    ThrowStatement: 'ThrowStatement',\n\t    TryStatement: 'TryStatement',\n\t    UnaryExpression: 'UnaryExpression',\n\t    UpdateExpression: 'UpdateExpression',\n\t    VariableDeclaration: 'VariableDeclaration',\n\t    VariableDeclarator: 'VariableDeclarator',\n\t    WhileStatement: 'WhileStatement',\n\t    WithStatement: 'WithStatement',\n\t    YieldExpression: 'YieldExpression'\n\t};\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n/* istanbul ignore next */\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar character_1 = __webpack_require__(4);\n\tvar JSXNode = __webpack_require__(5);\n\tvar jsx_syntax_1 = __webpack_require__(6);\n\tvar Node = __webpack_require__(7);\n\tvar parser_1 = __webpack_require__(8);\n\tvar token_1 = __webpack_require__(13);\n\tvar xhtml_entities_1 = __webpack_require__(14);\n\ttoken_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';\n\ttoken_1.TokenName[101 /* Text */] = 'JSXText';\n\t// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\n\tfunction getQualifiedElementName(elementName) {\n\t    var qualifiedName;\n\t    switch (elementName.type) {\n\t        case jsx_syntax_1.JSXSyntax.JSXIdentifier:\n\t            var id = elementName;\n\t            qualifiedName = id.name;\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:\n\t            var ns = elementName;\n\t            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\n\t                getQualifiedElementName(ns.name);\n\t            break;\n\t        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:\n\t            var expr = elementName;\n\t            qualifiedName = getQualifiedElementName(expr.object) + '.' +\n\t                getQualifiedElementName(expr.property);\n\t            break;\n\t        /* istanbul ignore next */\n\t        default:\n\t            break;\n\t    }\n\t    return qualifiedName;\n\t}\n\tvar JSXParser = (function (_super) {\n\t    __extends(JSXParser, _super);\n\t    function JSXParser(code, options, delegate) {\n\t        return _super.call(this, code, options, delegate) || this;\n\t    }\n\t    JSXParser.prototype.parsePrimaryExpression = function () {\n\t        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);\n\t    };\n\t    JSXParser.prototype.startJSX = function () {\n\t        // Unwind the scanner before the lookahead token.\n\t        this.scanner.index = this.startMarker.index;\n\t        this.scanner.lineNumber = this.startMarker.line;\n\t        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\n\t    };\n\t    JSXParser.prototype.finishJSX = function () {\n\t        // Prime the next lookahead.\n\t        this.nextToken();\n\t    };\n\t    JSXParser.prototype.reenterJSX = function () {\n\t        this.startJSX();\n\t        this.expectJSX('}');\n\t        // Pop the closing '}' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t    };\n\t    JSXParser.prototype.createJSXNode = function () {\n\t        this.collectComments();\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.createJSXChildNode = function () {\n\t        return {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    };\n\t    JSXParser.prototype.scanXHTMLEntity = function (quote) {\n\t        var result = '&';\n\t        var valid = true;\n\t        var terminated = false;\n\t        var numeric = false;\n\t        var hex = false;\n\t        while (!this.scanner.eof() && valid && !terminated) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === quote) {\n\t                break;\n\t            }\n\t            terminated = (ch === ';');\n\t            result += ch;\n\t            ++this.scanner.index;\n\t            if (!terminated) {\n\t                switch (result.length) {\n\t                    case 2:\n\t                        // e.g. '&#123;'\n\t                        numeric = (ch === '#');\n\t                        break;\n\t                    case 3:\n\t                        if (numeric) {\n\t                            // e.g. '&#x41;'\n\t                            hex = (ch === 'x');\n\t                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));\n\t                            numeric = numeric && !hex;\n\t                        }\n\t                        break;\n\t                    default:\n\t                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));\n\t                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));\n\t                        break;\n\t                }\n\t            }\n\t        }\n\t        if (valid && terminated && result.length > 2) {\n\t            // e.g. '&#x41;' becomes just '#x41'\n\t            var str = result.substr(1, result.length - 2);\n\t            if (numeric && str.length > 1) {\n\t                result = String.fromCharCode(parseInt(str.substr(1), 10));\n\t            }\n\t            else if (hex && str.length > 2) {\n\t                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\n\t            }\n\t            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {\n\t                result = xhtml_entities_1.XHTMLEntities[str];\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\n\t    JSXParser.prototype.lexJSX = function () {\n\t        var cp = this.scanner.source.charCodeAt(this.scanner.index);\n\t        // < > / : = { }\n\t        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\n\t            var value = this.scanner.source[this.scanner.index++];\n\t            return {\n\t                type: 7 /* Punctuator */,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index - 1,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // \" '\n\t        if (cp === 34 || cp === 39) {\n\t            var start = this.scanner.index;\n\t            var quote = this.scanner.source[this.scanner.index++];\n\t            var str = '';\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source[this.scanner.index++];\n\t                if (ch === quote) {\n\t                    break;\n\t                }\n\t                else if (ch === '&') {\n\t                    str += this.scanXHTMLEntity(quote);\n\t                }\n\t                else {\n\t                    str += ch;\n\t                }\n\t            }\n\t            return {\n\t                type: 8 /* StringLiteral */,\n\t                value: str,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // ... or .\n\t        if (cp === 46) {\n\t            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\n\t            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\n\t            var value = (n1 === 46 && n2 === 46) ? '...' : '.';\n\t            var start = this.scanner.index;\n\t            this.scanner.index += value.length;\n\t            return {\n\t                type: 7 /* Punctuator */,\n\t                value: value,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // `\n\t        if (cp === 96) {\n\t            // Only placeholder, since it will be rescanned as a real assignment expression.\n\t            return {\n\t                type: 10 /* Template */,\n\t                value: '',\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: this.scanner.index,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        // Identifer can not contain backslash (char code 92).\n\t        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {\n\t            var start = this.scanner.index;\n\t            ++this.scanner.index;\n\t            while (!this.scanner.eof()) {\n\t                var ch = this.scanner.source.charCodeAt(this.scanner.index);\n\t                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {\n\t                    ++this.scanner.index;\n\t                }\n\t                else if (ch === 45) {\n\t                    // Hyphen (char code 45) can be part of an identifier.\n\t                    ++this.scanner.index;\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            var id = this.scanner.source.slice(start, this.scanner.index);\n\t            return {\n\t                type: 100 /* Identifier */,\n\t                value: id,\n\t                lineNumber: this.scanner.lineNumber,\n\t                lineStart: this.scanner.lineStart,\n\t                start: start,\n\t                end: this.scanner.index\n\t            };\n\t        }\n\t        return this.scanner.lex();\n\t    };\n\t    JSXParser.prototype.nextJSXToken = function () {\n\t        this.collectComments();\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.line = this.scanner.lineNumber;\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var token = this.lexJSX();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        if (this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.nextJSXText = function () {\n\t        this.startMarker.index = this.scanner.index;\n\t        this.startMarker.line = this.scanner.lineNumber;\n\t        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var start = this.scanner.index;\n\t        var text = '';\n\t        while (!this.scanner.eof()) {\n\t            var ch = this.scanner.source[this.scanner.index];\n\t            if (ch === '{' || ch === '<') {\n\t                break;\n\t            }\n\t            ++this.scanner.index;\n\t            text += ch;\n\t            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.scanner.lineNumber;\n\t                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\n\t                    ++this.scanner.index;\n\t                }\n\t                this.scanner.lineStart = this.scanner.index;\n\t            }\n\t        }\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        var token = {\n\t            type: 101 /* Text */,\n\t            value: text,\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: this.scanner.lineStart,\n\t            start: start,\n\t            end: this.scanner.index\n\t        };\n\t        if ((text.length > 0) && this.config.tokens) {\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        return token;\n\t    };\n\t    JSXParser.prototype.peekJSXToken = function () {\n\t        var state = this.scanner.saveState();\n\t        this.scanner.scanComments();\n\t        var next = this.lexJSX();\n\t        this.scanner.restoreState(state);\n\t        return next;\n\t    };\n\t    // Expect the next JSX token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    JSXParser.prototype.expectJSX = function (value) {\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next JSX token matches the specified punctuator.\n\t    JSXParser.prototype.matchJSX = function (value) {\n\t        var next = this.peekJSXToken();\n\t        return next.type === 7 /* Punctuator */ && next.value === value;\n\t    };\n\t    JSXParser.prototype.parseJSXIdentifier = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 100 /* Identifier */) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\n\t    };\n\t    JSXParser.prototype.parseJSXElementName = function () {\n\t        var node = this.createJSXNode();\n\t        var elementName = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = elementName;\n\t            this.expectJSX(':');\n\t            var name_1 = this.parseJSXIdentifier();\n\t            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));\n\t        }\n\t        else if (this.matchJSX('.')) {\n\t            while (this.matchJSX('.')) {\n\t                var object = elementName;\n\t                this.expectJSX('.');\n\t                var property = this.parseJSXIdentifier();\n\t                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\n\t            }\n\t        }\n\t        return elementName;\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeName = function () {\n\t        var node = this.createJSXNode();\n\t        var attributeName;\n\t        var identifier = this.parseJSXIdentifier();\n\t        if (this.matchJSX(':')) {\n\t            var namespace = identifier;\n\t            this.expectJSX(':');\n\t            var name_2 = this.parseJSXIdentifier();\n\t            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));\n\t        }\n\t        else {\n\t            attributeName = identifier;\n\t        }\n\t        return attributeName;\n\t    };\n\t    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var token = this.nextJSXToken();\n\t        if (token.type !== 8 /* StringLiteral */) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.finishJSX();\n\t        if (this.match('}')) {\n\t            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\n\t        }\n\t        var expression = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributeValue = function () {\n\t        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\n\t            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\n\t    };\n\t    JSXParser.prototype.parseJSXNameValueAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        var name = this.parseJSXAttributeName();\n\t        var value = null;\n\t        if (this.matchJSX('=')) {\n\t            this.expectJSX('=');\n\t            value = this.parseJSXAttributeValue();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\n\t    };\n\t    JSXParser.prototype.parseJSXSpreadAttribute = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        this.expectJSX('...');\n\t        this.finishJSX();\n\t        var argument = this.parseAssignmentExpression();\n\t        this.reenterJSX();\n\t        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\n\t    };\n\t    JSXParser.prototype.parseJSXAttributes = function () {\n\t        var attributes = [];\n\t        while (!this.matchJSX('/') && !this.matchJSX('>')) {\n\t            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\n\t                this.parseJSXNameValueAttribute();\n\t            attributes.push(attribute);\n\t        }\n\t        return attributes;\n\t    };\n\t    JSXParser.prototype.parseJSXOpeningElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXBoundaryElement = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('<');\n\t        if (this.matchJSX('/')) {\n\t            this.expectJSX('/');\n\t            var name_3 = this.parseJSXElementName();\n\t            this.expectJSX('>');\n\t            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));\n\t        }\n\t        var name = this.parseJSXElementName();\n\t        var attributes = this.parseJSXAttributes();\n\t        var selfClosing = this.matchJSX('/');\n\t        if (selfClosing) {\n\t            this.expectJSX('/');\n\t        }\n\t        this.expectJSX('>');\n\t        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\n\t    };\n\t    JSXParser.prototype.parseJSXEmptyExpression = function () {\n\t        var node = this.createJSXChildNode();\n\t        this.collectComments();\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        return this.finalize(node, new JSXNode.JSXEmptyExpression());\n\t    };\n\t    JSXParser.prototype.parseJSXExpressionContainer = function () {\n\t        var node = this.createJSXNode();\n\t        this.expectJSX('{');\n\t        var expression;\n\t        if (this.matchJSX('}')) {\n\t            expression = this.parseJSXEmptyExpression();\n\t            this.expectJSX('}');\n\t        }\n\t        else {\n\t            this.finishJSX();\n\t            expression = this.parseAssignmentExpression();\n\t            this.reenterJSX();\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\n\t    };\n\t    JSXParser.prototype.parseJSXChildren = function () {\n\t        var children = [];\n\t        while (!this.scanner.eof()) {\n\t            var node = this.createJSXChildNode();\n\t            var token = this.nextJSXText();\n\t            if (token.start < token.end) {\n\t                var raw = this.getTokenRaw(token);\n\t                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\n\t                children.push(child);\n\t            }\n\t            if (this.scanner.source[this.scanner.index] === '{') {\n\t                var container = this.parseJSXExpressionContainer();\n\t                children.push(container);\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return children;\n\t    };\n\t    JSXParser.prototype.parseComplexJSXElement = function (el) {\n\t        var stack = [];\n\t        while (!this.scanner.eof()) {\n\t            el.children = el.children.concat(this.parseJSXChildren());\n\t            var node = this.createJSXChildNode();\n\t            var element = this.parseJSXBoundaryElement();\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {\n\t                var opening = element;\n\t                if (opening.selfClosing) {\n\t                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\n\t                    el.children.push(child);\n\t                }\n\t                else {\n\t                    stack.push(el);\n\t                    el = { node: node, opening: opening, closing: null, children: [] };\n\t                }\n\t            }\n\t            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {\n\t                el.closing = element;\n\t                var open_1 = getQualifiedElementName(el.opening.name);\n\t                var close_1 = getQualifiedElementName(el.closing.name);\n\t                if (open_1 !== close_1) {\n\t                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);\n\t                }\n\t                if (stack.length > 0) {\n\t                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\n\t                    el = stack[stack.length - 1];\n\t                    el.children.push(child);\n\t                    stack.pop();\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t    JSXParser.prototype.parseJSXElement = function () {\n\t        var node = this.createJSXNode();\n\t        var opening = this.parseJSXOpeningElement();\n\t        var children = [];\n\t        var closing = null;\n\t        if (!opening.selfClosing) {\n\t            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });\n\t            children = el.children;\n\t            closing = el.closing;\n\t        }\n\t        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\n\t    };\n\t    JSXParser.prototype.parseJSXRoot = function () {\n\t        // Pop the opening '<' added from the lookahead.\n\t        if (this.config.tokens) {\n\t            this.tokens.pop();\n\t        }\n\t        this.startJSX();\n\t        var element = this.parseJSXElement();\n\t        this.finishJSX();\n\t        return element;\n\t    };\n\t    JSXParser.prototype.isStartOfExpression = function () {\n\t        return _super.prototype.isStartOfExpression.call(this) || this.match('<');\n\t    };\n\t    return JSXParser;\n\t}(parser_1.Parser));\n\texports.JSXParser = JSXParser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// See also tools/generate-unicode-regex.js.\n\tvar Regex = {\n\t    // Unicode v8.0.0 NonAsciiIdentifierStart:\n\t    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n\t    // Unicode v8.0.0 NonAsciiIdentifierPart:\n\t    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\n\t};\n\texports.Character = {\n\t    /* tslint:disable:no-bitwise */\n\t    fromCodePoint: function (cp) {\n\t        return (cp < 0x10000) ? String.fromCharCode(cp) :\n\t            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\n\t                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-white-space\n\t    isWhiteSpace: function (cp) {\n\t        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\n\t            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-line-terminators\n\t    isLineTerminator: function (cp) {\n\t        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\t    isIdentifierStart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    isIdentifierPart: function (cp) {\n\t        return (cp === 0x24) || (cp === 0x5F) ||\n\t            (cp >= 0x41 && cp <= 0x5A) ||\n\t            (cp >= 0x61 && cp <= 0x7A) ||\n\t            (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp === 0x5C) ||\n\t            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));\n\t    },\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\t    isDecimalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39); // 0..9\n\t    },\n\t    isHexDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x39) ||\n\t            (cp >= 0x41 && cp <= 0x46) ||\n\t            (cp >= 0x61 && cp <= 0x66); // a..f\n\t    },\n\t    isOctalDigit: function (cp) {\n\t        return (cp >= 0x30 && cp <= 0x37); // 0..7\n\t    }\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar jsx_syntax_1 = __webpack_require__(6);\n\t/* tslint:disable:max-classes-per-file */\n\tvar JSXClosingElement = (function () {\n\t    function JSXClosingElement(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;\n\t        this.name = name;\n\t    }\n\t    return JSXClosingElement;\n\t}());\n\texports.JSXClosingElement = JSXClosingElement;\n\tvar JSXElement = (function () {\n\t    function JSXElement(openingElement, children, closingElement) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXElement;\n\t        this.openingElement = openingElement;\n\t        this.children = children;\n\t        this.closingElement = closingElement;\n\t    }\n\t    return JSXElement;\n\t}());\n\texports.JSXElement = JSXElement;\n\tvar JSXEmptyExpression = (function () {\n\t    function JSXEmptyExpression() {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;\n\t    }\n\t    return JSXEmptyExpression;\n\t}());\n\texports.JSXEmptyExpression = JSXEmptyExpression;\n\tvar JSXExpressionContainer = (function () {\n\t    function JSXExpressionContainer(expression) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;\n\t        this.expression = expression;\n\t    }\n\t    return JSXExpressionContainer;\n\t}());\n\texports.JSXExpressionContainer = JSXExpressionContainer;\n\tvar JSXIdentifier = (function () {\n\t    function JSXIdentifier(name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;\n\t        this.name = name;\n\t    }\n\t    return JSXIdentifier;\n\t}());\n\texports.JSXIdentifier = JSXIdentifier;\n\tvar JSXMemberExpression = (function () {\n\t    function JSXMemberExpression(object, property) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return JSXMemberExpression;\n\t}());\n\texports.JSXMemberExpression = JSXMemberExpression;\n\tvar JSXAttribute = (function () {\n\t    function JSXAttribute(name, value) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;\n\t        this.name = name;\n\t        this.value = value;\n\t    }\n\t    return JSXAttribute;\n\t}());\n\texports.JSXAttribute = JSXAttribute;\n\tvar JSXNamespacedName = (function () {\n\t    function JSXNamespacedName(namespace, name) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;\n\t        this.namespace = namespace;\n\t        this.name = name;\n\t    }\n\t    return JSXNamespacedName;\n\t}());\n\texports.JSXNamespacedName = JSXNamespacedName;\n\tvar JSXOpeningElement = (function () {\n\t    function JSXOpeningElement(name, selfClosing, attributes) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;\n\t        this.name = name;\n\t        this.selfClosing = selfClosing;\n\t        this.attributes = attributes;\n\t    }\n\t    return JSXOpeningElement;\n\t}());\n\texports.JSXOpeningElement = JSXOpeningElement;\n\tvar JSXSpreadAttribute = (function () {\n\t    function JSXSpreadAttribute(argument) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;\n\t        this.argument = argument;\n\t    }\n\t    return JSXSpreadAttribute;\n\t}());\n\texports.JSXSpreadAttribute = JSXSpreadAttribute;\n\tvar JSXText = (function () {\n\t    function JSXText(value, raw) {\n\t        this.type = jsx_syntax_1.JSXSyntax.JSXText;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return JSXText;\n\t}());\n\texports.JSXText = JSXText;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.JSXSyntax = {\n\t    JSXAttribute: 'JSXAttribute',\n\t    JSXClosingElement: 'JSXClosingElement',\n\t    JSXElement: 'JSXElement',\n\t    JSXEmptyExpression: 'JSXEmptyExpression',\n\t    JSXExpressionContainer: 'JSXExpressionContainer',\n\t    JSXIdentifier: 'JSXIdentifier',\n\t    JSXMemberExpression: 'JSXMemberExpression',\n\t    JSXNamespacedName: 'JSXNamespacedName',\n\t    JSXOpeningElement: 'JSXOpeningElement',\n\t    JSXSpreadAttribute: 'JSXSpreadAttribute',\n\t    JSXText: 'JSXText'\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar syntax_1 = __webpack_require__(2);\n\t/* tslint:disable:max-classes-per-file */\n\tvar ArrayExpression = (function () {\n\t    function ArrayExpression(elements) {\n\t        this.type = syntax_1.Syntax.ArrayExpression;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayExpression;\n\t}());\n\texports.ArrayExpression = ArrayExpression;\n\tvar ArrayPattern = (function () {\n\t    function ArrayPattern(elements) {\n\t        this.type = syntax_1.Syntax.ArrayPattern;\n\t        this.elements = elements;\n\t    }\n\t    return ArrayPattern;\n\t}());\n\texports.ArrayPattern = ArrayPattern;\n\tvar ArrowFunctionExpression = (function () {\n\t    function ArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t        this.async = false;\n\t    }\n\t    return ArrowFunctionExpression;\n\t}());\n\texports.ArrowFunctionExpression = ArrowFunctionExpression;\n\tvar AssignmentExpression = (function () {\n\t    function AssignmentExpression(operator, left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentExpression;\n\t}());\n\texports.AssignmentExpression = AssignmentExpression;\n\tvar AssignmentPattern = (function () {\n\t    function AssignmentPattern(left, right) {\n\t        this.type = syntax_1.Syntax.AssignmentPattern;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return AssignmentPattern;\n\t}());\n\texports.AssignmentPattern = AssignmentPattern;\n\tvar AsyncArrowFunctionExpression = (function () {\n\t    function AsyncArrowFunctionExpression(params, body, expression) {\n\t        this.type = syntax_1.Syntax.ArrowFunctionExpression;\n\t        this.id = null;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = expression;\n\t        this.async = true;\n\t    }\n\t    return AsyncArrowFunctionExpression;\n\t}());\n\texports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;\n\tvar AsyncFunctionDeclaration = (function () {\n\t    function AsyncFunctionDeclaration(id, params, body) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = false;\n\t        this.async = true;\n\t    }\n\t    return AsyncFunctionDeclaration;\n\t}());\n\texports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;\n\tvar AsyncFunctionExpression = (function () {\n\t    function AsyncFunctionExpression(id, params, body) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = false;\n\t        this.expression = false;\n\t        this.async = true;\n\t    }\n\t    return AsyncFunctionExpression;\n\t}());\n\texports.AsyncFunctionExpression = AsyncFunctionExpression;\n\tvar AwaitExpression = (function () {\n\t    function AwaitExpression(argument) {\n\t        this.type = syntax_1.Syntax.AwaitExpression;\n\t        this.argument = argument;\n\t    }\n\t    return AwaitExpression;\n\t}());\n\texports.AwaitExpression = AwaitExpression;\n\tvar BinaryExpression = (function () {\n\t    function BinaryExpression(operator, left, right) {\n\t        var logical = (operator === '||' || operator === '&&');\n\t        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;\n\t        this.operator = operator;\n\t        this.left = left;\n\t        this.right = right;\n\t    }\n\t    return BinaryExpression;\n\t}());\n\texports.BinaryExpression = BinaryExpression;\n\tvar BlockStatement = (function () {\n\t    function BlockStatement(body) {\n\t        this.type = syntax_1.Syntax.BlockStatement;\n\t        this.body = body;\n\t    }\n\t    return BlockStatement;\n\t}());\n\texports.BlockStatement = BlockStatement;\n\tvar BreakStatement = (function () {\n\t    function BreakStatement(label) {\n\t        this.type = syntax_1.Syntax.BreakStatement;\n\t        this.label = label;\n\t    }\n\t    return BreakStatement;\n\t}());\n\texports.BreakStatement = BreakStatement;\n\tvar CallExpression = (function () {\n\t    function CallExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.CallExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return CallExpression;\n\t}());\n\texports.CallExpression = CallExpression;\n\tvar CatchClause = (function () {\n\t    function CatchClause(param, body) {\n\t        this.type = syntax_1.Syntax.CatchClause;\n\t        this.param = param;\n\t        this.body = body;\n\t    }\n\t    return CatchClause;\n\t}());\n\texports.CatchClause = CatchClause;\n\tvar ClassBody = (function () {\n\t    function ClassBody(body) {\n\t        this.type = syntax_1.Syntax.ClassBody;\n\t        this.body = body;\n\t    }\n\t    return ClassBody;\n\t}());\n\texports.ClassBody = ClassBody;\n\tvar ClassDeclaration = (function () {\n\t    function ClassDeclaration(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassDeclaration;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassDeclaration;\n\t}());\n\texports.ClassDeclaration = ClassDeclaration;\n\tvar ClassExpression = (function () {\n\t    function ClassExpression(id, superClass, body) {\n\t        this.type = syntax_1.Syntax.ClassExpression;\n\t        this.id = id;\n\t        this.superClass = superClass;\n\t        this.body = body;\n\t    }\n\t    return ClassExpression;\n\t}());\n\texports.ClassExpression = ClassExpression;\n\tvar ComputedMemberExpression = (function () {\n\t    function ComputedMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = true;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return ComputedMemberExpression;\n\t}());\n\texports.ComputedMemberExpression = ComputedMemberExpression;\n\tvar ConditionalExpression = (function () {\n\t    function ConditionalExpression(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.ConditionalExpression;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return ConditionalExpression;\n\t}());\n\texports.ConditionalExpression = ConditionalExpression;\n\tvar ContinueStatement = (function () {\n\t    function ContinueStatement(label) {\n\t        this.type = syntax_1.Syntax.ContinueStatement;\n\t        this.label = label;\n\t    }\n\t    return ContinueStatement;\n\t}());\n\texports.ContinueStatement = ContinueStatement;\n\tvar DebuggerStatement = (function () {\n\t    function DebuggerStatement() {\n\t        this.type = syntax_1.Syntax.DebuggerStatement;\n\t    }\n\t    return DebuggerStatement;\n\t}());\n\texports.DebuggerStatement = DebuggerStatement;\n\tvar Directive = (function () {\n\t    function Directive(expression, directive) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t        this.directive = directive;\n\t    }\n\t    return Directive;\n\t}());\n\texports.Directive = Directive;\n\tvar DoWhileStatement = (function () {\n\t    function DoWhileStatement(body, test) {\n\t        this.type = syntax_1.Syntax.DoWhileStatement;\n\t        this.body = body;\n\t        this.test = test;\n\t    }\n\t    return DoWhileStatement;\n\t}());\n\texports.DoWhileStatement = DoWhileStatement;\n\tvar EmptyStatement = (function () {\n\t    function EmptyStatement() {\n\t        this.type = syntax_1.Syntax.EmptyStatement;\n\t    }\n\t    return EmptyStatement;\n\t}());\n\texports.EmptyStatement = EmptyStatement;\n\tvar ExportAllDeclaration = (function () {\n\t    function ExportAllDeclaration(source) {\n\t        this.type = syntax_1.Syntax.ExportAllDeclaration;\n\t        this.source = source;\n\t    }\n\t    return ExportAllDeclaration;\n\t}());\n\texports.ExportAllDeclaration = ExportAllDeclaration;\n\tvar ExportDefaultDeclaration = (function () {\n\t    function ExportDefaultDeclaration(declaration) {\n\t        this.type = syntax_1.Syntax.ExportDefaultDeclaration;\n\t        this.declaration = declaration;\n\t    }\n\t    return ExportDefaultDeclaration;\n\t}());\n\texports.ExportDefaultDeclaration = ExportDefaultDeclaration;\n\tvar ExportNamedDeclaration = (function () {\n\t    function ExportNamedDeclaration(declaration, specifiers, source) {\n\t        this.type = syntax_1.Syntax.ExportNamedDeclaration;\n\t        this.declaration = declaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ExportNamedDeclaration;\n\t}());\n\texports.ExportNamedDeclaration = ExportNamedDeclaration;\n\tvar ExportSpecifier = (function () {\n\t    function ExportSpecifier(local, exported) {\n\t        this.type = syntax_1.Syntax.ExportSpecifier;\n\t        this.exported = exported;\n\t        this.local = local;\n\t    }\n\t    return ExportSpecifier;\n\t}());\n\texports.ExportSpecifier = ExportSpecifier;\n\tvar ExpressionStatement = (function () {\n\t    function ExpressionStatement(expression) {\n\t        this.type = syntax_1.Syntax.ExpressionStatement;\n\t        this.expression = expression;\n\t    }\n\t    return ExpressionStatement;\n\t}());\n\texports.ExpressionStatement = ExpressionStatement;\n\tvar ForInStatement = (function () {\n\t    function ForInStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForInStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t        this.each = false;\n\t    }\n\t    return ForInStatement;\n\t}());\n\texports.ForInStatement = ForInStatement;\n\tvar ForOfStatement = (function () {\n\t    function ForOfStatement(left, right, body) {\n\t        this.type = syntax_1.Syntax.ForOfStatement;\n\t        this.left = left;\n\t        this.right = right;\n\t        this.body = body;\n\t    }\n\t    return ForOfStatement;\n\t}());\n\texports.ForOfStatement = ForOfStatement;\n\tvar ForStatement = (function () {\n\t    function ForStatement(init, test, update, body) {\n\t        this.type = syntax_1.Syntax.ForStatement;\n\t        this.init = init;\n\t        this.test = test;\n\t        this.update = update;\n\t        this.body = body;\n\t    }\n\t    return ForStatement;\n\t}());\n\texports.ForStatement = ForStatement;\n\tvar FunctionDeclaration = (function () {\n\t    function FunctionDeclaration(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionDeclaration;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t        this.async = false;\n\t    }\n\t    return FunctionDeclaration;\n\t}());\n\texports.FunctionDeclaration = FunctionDeclaration;\n\tvar FunctionExpression = (function () {\n\t    function FunctionExpression(id, params, body, generator) {\n\t        this.type = syntax_1.Syntax.FunctionExpression;\n\t        this.id = id;\n\t        this.params = params;\n\t        this.body = body;\n\t        this.generator = generator;\n\t        this.expression = false;\n\t        this.async = false;\n\t    }\n\t    return FunctionExpression;\n\t}());\n\texports.FunctionExpression = FunctionExpression;\n\tvar Identifier = (function () {\n\t    function Identifier(name) {\n\t        this.type = syntax_1.Syntax.Identifier;\n\t        this.name = name;\n\t    }\n\t    return Identifier;\n\t}());\n\texports.Identifier = Identifier;\n\tvar IfStatement = (function () {\n\t    function IfStatement(test, consequent, alternate) {\n\t        this.type = syntax_1.Syntax.IfStatement;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t        this.alternate = alternate;\n\t    }\n\t    return IfStatement;\n\t}());\n\texports.IfStatement = IfStatement;\n\tvar ImportDeclaration = (function () {\n\t    function ImportDeclaration(specifiers, source) {\n\t        this.type = syntax_1.Syntax.ImportDeclaration;\n\t        this.specifiers = specifiers;\n\t        this.source = source;\n\t    }\n\t    return ImportDeclaration;\n\t}());\n\texports.ImportDeclaration = ImportDeclaration;\n\tvar ImportDefaultSpecifier = (function () {\n\t    function ImportDefaultSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportDefaultSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportDefaultSpecifier;\n\t}());\n\texports.ImportDefaultSpecifier = ImportDefaultSpecifier;\n\tvar ImportNamespaceSpecifier = (function () {\n\t    function ImportNamespaceSpecifier(local) {\n\t        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;\n\t        this.local = local;\n\t    }\n\t    return ImportNamespaceSpecifier;\n\t}());\n\texports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\tvar ImportSpecifier = (function () {\n\t    function ImportSpecifier(local, imported) {\n\t        this.type = syntax_1.Syntax.ImportSpecifier;\n\t        this.local = local;\n\t        this.imported = imported;\n\t    }\n\t    return ImportSpecifier;\n\t}());\n\texports.ImportSpecifier = ImportSpecifier;\n\tvar LabeledStatement = (function () {\n\t    function LabeledStatement(label, body) {\n\t        this.type = syntax_1.Syntax.LabeledStatement;\n\t        this.label = label;\n\t        this.body = body;\n\t    }\n\t    return LabeledStatement;\n\t}());\n\texports.LabeledStatement = LabeledStatement;\n\tvar Literal = (function () {\n\t    function Literal(value, raw) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t    }\n\t    return Literal;\n\t}());\n\texports.Literal = Literal;\n\tvar MetaProperty = (function () {\n\t    function MetaProperty(meta, property) {\n\t        this.type = syntax_1.Syntax.MetaProperty;\n\t        this.meta = meta;\n\t        this.property = property;\n\t    }\n\t    return MetaProperty;\n\t}());\n\texports.MetaProperty = MetaProperty;\n\tvar MethodDefinition = (function () {\n\t    function MethodDefinition(key, computed, value, kind, isStatic) {\n\t        this.type = syntax_1.Syntax.MethodDefinition;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.static = isStatic;\n\t    }\n\t    return MethodDefinition;\n\t}());\n\texports.MethodDefinition = MethodDefinition;\n\tvar Module = (function () {\n\t    function Module(body) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = 'module';\n\t    }\n\t    return Module;\n\t}());\n\texports.Module = Module;\n\tvar NewExpression = (function () {\n\t    function NewExpression(callee, args) {\n\t        this.type = syntax_1.Syntax.NewExpression;\n\t        this.callee = callee;\n\t        this.arguments = args;\n\t    }\n\t    return NewExpression;\n\t}());\n\texports.NewExpression = NewExpression;\n\tvar ObjectExpression = (function () {\n\t    function ObjectExpression(properties) {\n\t        this.type = syntax_1.Syntax.ObjectExpression;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectExpression;\n\t}());\n\texports.ObjectExpression = ObjectExpression;\n\tvar ObjectPattern = (function () {\n\t    function ObjectPattern(properties) {\n\t        this.type = syntax_1.Syntax.ObjectPattern;\n\t        this.properties = properties;\n\t    }\n\t    return ObjectPattern;\n\t}());\n\texports.ObjectPattern = ObjectPattern;\n\tvar Property = (function () {\n\t    function Property(kind, key, computed, value, method, shorthand) {\n\t        this.type = syntax_1.Syntax.Property;\n\t        this.key = key;\n\t        this.computed = computed;\n\t        this.value = value;\n\t        this.kind = kind;\n\t        this.method = method;\n\t        this.shorthand = shorthand;\n\t    }\n\t    return Property;\n\t}());\n\texports.Property = Property;\n\tvar RegexLiteral = (function () {\n\t    function RegexLiteral(value, raw, pattern, flags) {\n\t        this.type = syntax_1.Syntax.Literal;\n\t        this.value = value;\n\t        this.raw = raw;\n\t        this.regex = { pattern: pattern, flags: flags };\n\t    }\n\t    return RegexLiteral;\n\t}());\n\texports.RegexLiteral = RegexLiteral;\n\tvar RestElement = (function () {\n\t    function RestElement(argument) {\n\t        this.type = syntax_1.Syntax.RestElement;\n\t        this.argument = argument;\n\t    }\n\t    return RestElement;\n\t}());\n\texports.RestElement = RestElement;\n\tvar ReturnStatement = (function () {\n\t    function ReturnStatement(argument) {\n\t        this.type = syntax_1.Syntax.ReturnStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ReturnStatement;\n\t}());\n\texports.ReturnStatement = ReturnStatement;\n\tvar Script = (function () {\n\t    function Script(body) {\n\t        this.type = syntax_1.Syntax.Program;\n\t        this.body = body;\n\t        this.sourceType = 'script';\n\t    }\n\t    return Script;\n\t}());\n\texports.Script = Script;\n\tvar SequenceExpression = (function () {\n\t    function SequenceExpression(expressions) {\n\t        this.type = syntax_1.Syntax.SequenceExpression;\n\t        this.expressions = expressions;\n\t    }\n\t    return SequenceExpression;\n\t}());\n\texports.SequenceExpression = SequenceExpression;\n\tvar SpreadElement = (function () {\n\t    function SpreadElement(argument) {\n\t        this.type = syntax_1.Syntax.SpreadElement;\n\t        this.argument = argument;\n\t    }\n\t    return SpreadElement;\n\t}());\n\texports.SpreadElement = SpreadElement;\n\tvar StaticMemberExpression = (function () {\n\t    function StaticMemberExpression(object, property) {\n\t        this.type = syntax_1.Syntax.MemberExpression;\n\t        this.computed = false;\n\t        this.object = object;\n\t        this.property = property;\n\t    }\n\t    return StaticMemberExpression;\n\t}());\n\texports.StaticMemberExpression = StaticMemberExpression;\n\tvar Super = (function () {\n\t    function Super() {\n\t        this.type = syntax_1.Syntax.Super;\n\t    }\n\t    return Super;\n\t}());\n\texports.Super = Super;\n\tvar SwitchCase = (function () {\n\t    function SwitchCase(test, consequent) {\n\t        this.type = syntax_1.Syntax.SwitchCase;\n\t        this.test = test;\n\t        this.consequent = consequent;\n\t    }\n\t    return SwitchCase;\n\t}());\n\texports.SwitchCase = SwitchCase;\n\tvar SwitchStatement = (function () {\n\t    function SwitchStatement(discriminant, cases) {\n\t        this.type = syntax_1.Syntax.SwitchStatement;\n\t        this.discriminant = discriminant;\n\t        this.cases = cases;\n\t    }\n\t    return SwitchStatement;\n\t}());\n\texports.SwitchStatement = SwitchStatement;\n\tvar TaggedTemplateExpression = (function () {\n\t    function TaggedTemplateExpression(tag, quasi) {\n\t        this.type = syntax_1.Syntax.TaggedTemplateExpression;\n\t        this.tag = tag;\n\t        this.quasi = quasi;\n\t    }\n\t    return TaggedTemplateExpression;\n\t}());\n\texports.TaggedTemplateExpression = TaggedTemplateExpression;\n\tvar TemplateElement = (function () {\n\t    function TemplateElement(value, tail) {\n\t        this.type = syntax_1.Syntax.TemplateElement;\n\t        this.value = value;\n\t        this.tail = tail;\n\t    }\n\t    return TemplateElement;\n\t}());\n\texports.TemplateElement = TemplateElement;\n\tvar TemplateLiteral = (function () {\n\t    function TemplateLiteral(quasis, expressions) {\n\t        this.type = syntax_1.Syntax.TemplateLiteral;\n\t        this.quasis = quasis;\n\t        this.expressions = expressions;\n\t    }\n\t    return TemplateLiteral;\n\t}());\n\texports.TemplateLiteral = TemplateLiteral;\n\tvar ThisExpression = (function () {\n\t    function ThisExpression() {\n\t        this.type = syntax_1.Syntax.ThisExpression;\n\t    }\n\t    return ThisExpression;\n\t}());\n\texports.ThisExpression = ThisExpression;\n\tvar ThrowStatement = (function () {\n\t    function ThrowStatement(argument) {\n\t        this.type = syntax_1.Syntax.ThrowStatement;\n\t        this.argument = argument;\n\t    }\n\t    return ThrowStatement;\n\t}());\n\texports.ThrowStatement = ThrowStatement;\n\tvar TryStatement = (function () {\n\t    function TryStatement(block, handler, finalizer) {\n\t        this.type = syntax_1.Syntax.TryStatement;\n\t        this.block = block;\n\t        this.handler = handler;\n\t        this.finalizer = finalizer;\n\t    }\n\t    return TryStatement;\n\t}());\n\texports.TryStatement = TryStatement;\n\tvar UnaryExpression = (function () {\n\t    function UnaryExpression(operator, argument) {\n\t        this.type = syntax_1.Syntax.UnaryExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = true;\n\t    }\n\t    return UnaryExpression;\n\t}());\n\texports.UnaryExpression = UnaryExpression;\n\tvar UpdateExpression = (function () {\n\t    function UpdateExpression(operator, argument, prefix) {\n\t        this.type = syntax_1.Syntax.UpdateExpression;\n\t        this.operator = operator;\n\t        this.argument = argument;\n\t        this.prefix = prefix;\n\t    }\n\t    return UpdateExpression;\n\t}());\n\texports.UpdateExpression = UpdateExpression;\n\tvar VariableDeclaration = (function () {\n\t    function VariableDeclaration(declarations, kind) {\n\t        this.type = syntax_1.Syntax.VariableDeclaration;\n\t        this.declarations = declarations;\n\t        this.kind = kind;\n\t    }\n\t    return VariableDeclaration;\n\t}());\n\texports.VariableDeclaration = VariableDeclaration;\n\tvar VariableDeclarator = (function () {\n\t    function VariableDeclarator(id, init) {\n\t        this.type = syntax_1.Syntax.VariableDeclarator;\n\t        this.id = id;\n\t        this.init = init;\n\t    }\n\t    return VariableDeclarator;\n\t}());\n\texports.VariableDeclarator = VariableDeclarator;\n\tvar WhileStatement = (function () {\n\t    function WhileStatement(test, body) {\n\t        this.type = syntax_1.Syntax.WhileStatement;\n\t        this.test = test;\n\t        this.body = body;\n\t    }\n\t    return WhileStatement;\n\t}());\n\texports.WhileStatement = WhileStatement;\n\tvar WithStatement = (function () {\n\t    function WithStatement(object, body) {\n\t        this.type = syntax_1.Syntax.WithStatement;\n\t        this.object = object;\n\t        this.body = body;\n\t    }\n\t    return WithStatement;\n\t}());\n\texports.WithStatement = WithStatement;\n\tvar YieldExpression = (function () {\n\t    function YieldExpression(argument, delegate) {\n\t        this.type = syntax_1.Syntax.YieldExpression;\n\t        this.argument = argument;\n\t        this.delegate = delegate;\n\t    }\n\t    return YieldExpression;\n\t}());\n\texports.YieldExpression = YieldExpression;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar assert_1 = __webpack_require__(9);\n\tvar error_handler_1 = __webpack_require__(10);\n\tvar messages_1 = __webpack_require__(11);\n\tvar Node = __webpack_require__(7);\n\tvar scanner_1 = __webpack_require__(12);\n\tvar syntax_1 = __webpack_require__(2);\n\tvar token_1 = __webpack_require__(13);\n\tvar ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\n\tvar Parser = (function () {\n\t    function Parser(code, options, delegate) {\n\t        if (options === void 0) { options = {}; }\n\t        this.config = {\n\t            range: (typeof options.range === 'boolean') && options.range,\n\t            loc: (typeof options.loc === 'boolean') && options.loc,\n\t            source: null,\n\t            tokens: (typeof options.tokens === 'boolean') && options.tokens,\n\t            comment: (typeof options.comment === 'boolean') && options.comment,\n\t            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\n\t        };\n\t        if (this.config.loc && options.source && options.source !== null) {\n\t            this.config.source = String(options.source);\n\t        }\n\t        this.delegate = delegate;\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = this.config.tolerant;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = this.config.comment;\n\t        this.operatorPrecedence = {\n\t            ')': 0,\n\t            ';': 0,\n\t            ',': 0,\n\t            '=': 0,\n\t            ']': 0,\n\t            '||': 1,\n\t            '&&': 2,\n\t            '|': 3,\n\t            '^': 4,\n\t            '&': 5,\n\t            '==': 6,\n\t            '!=': 6,\n\t            '===': 6,\n\t            '!==': 6,\n\t            '<': 7,\n\t            '>': 7,\n\t            '<=': 7,\n\t            '>=': 7,\n\t            '<<': 8,\n\t            '>>': 8,\n\t            '>>>': 8,\n\t            '+': 9,\n\t            '-': 9,\n\t            '*': 11,\n\t            '/': 11,\n\t            '%': 11\n\t        };\n\t        this.lookahead = {\n\t            type: 2 /* EOF */,\n\t            value: '',\n\t            lineNumber: this.scanner.lineNumber,\n\t            lineStart: 0,\n\t            start: 0,\n\t            end: 0\n\t        };\n\t        this.hasLineTerminator = false;\n\t        this.context = {\n\t            isModule: false,\n\t            await: false,\n\t            allowIn: true,\n\t            allowStrictDirective: true,\n\t            allowYield: true,\n\t            firstCoverInitializedNameError: null,\n\t            isAssignmentTarget: false,\n\t            isBindingElement: false,\n\t            inFunctionBody: false,\n\t            inIteration: false,\n\t            inSwitch: false,\n\t            labelSet: {},\n\t            strict: false\n\t        };\n\t        this.tokens = [];\n\t        this.startMarker = {\n\t            index: 0,\n\t            line: this.scanner.lineNumber,\n\t            column: 0\n\t        };\n\t        this.lastMarker = {\n\t            index: 0,\n\t            line: this.scanner.lineNumber,\n\t            column: 0\n\t        };\n\t        this.nextToken();\n\t        this.lastMarker = {\n\t            index: this.scanner.index,\n\t            line: this.scanner.lineNumber,\n\t            column: this.scanner.index - this.scanner.lineStart\n\t        };\n\t    }\n\t    Parser.prototype.throwError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.lastMarker.line;\n\t        var column = this.lastMarker.column + 1;\n\t        throw this.errorHandler.createError(index, line, column, msg);\n\t    };\n\t    Parser.prototype.tolerateError = function (messageFormat) {\n\t        var values = [];\n\t        for (var _i = 1; _i < arguments.length; _i++) {\n\t            values[_i - 1] = arguments[_i];\n\t        }\n\t        var args = Array.prototype.slice.call(arguments, 1);\n\t        var msg = messageFormat.replace(/%(\\d)/g, function (whole, idx) {\n\t            assert_1.assert(idx < args.length, 'Message reference must be in range');\n\t            return args[idx];\n\t        });\n\t        var index = this.lastMarker.index;\n\t        var line = this.scanner.lineNumber;\n\t        var column = this.lastMarker.column + 1;\n\t        this.errorHandler.tolerateError(index, line, column, msg);\n\t    };\n\t    // Throw an exception because of the token.\n\t    Parser.prototype.unexpectedTokenError = function (token, message) {\n\t        var msg = message || messages_1.Messages.UnexpectedToken;\n\t        var value;\n\t        if (token) {\n\t            if (!message) {\n\t                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :\n\t                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :\n\t                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :\n\t                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :\n\t                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :\n\t                                    messages_1.Messages.UnexpectedToken;\n\t                if (token.type === 4 /* Keyword */) {\n\t                    if (this.scanner.isFutureReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.UnexpectedReserved;\n\t                    }\n\t                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                        msg = messages_1.Messages.StrictReservedWord;\n\t                    }\n\t                }\n\t            }\n\t            value = token.value;\n\t        }\n\t        else {\n\t            value = 'ILLEGAL';\n\t        }\n\t        msg = msg.replace('%0', value);\n\t        if (token && typeof token.lineNumber === 'number') {\n\t            var index = token.start;\n\t            var line = token.lineNumber;\n\t            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\n\t            var column = token.start - lastMarkerLineStart + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t        else {\n\t            var index = this.lastMarker.index;\n\t            var line = this.lastMarker.line;\n\t            var column = this.lastMarker.column + 1;\n\t            return this.errorHandler.createError(index, line, column, msg);\n\t        }\n\t    };\n\t    Parser.prototype.throwUnexpectedToken = function (token, message) {\n\t        throw this.unexpectedTokenError(token, message);\n\t    };\n\t    Parser.prototype.tolerateUnexpectedToken = function (token, message) {\n\t        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\n\t    };\n\t    Parser.prototype.collectComments = function () {\n\t        if (!this.config.comment) {\n\t            this.scanner.scanComments();\n\t        }\n\t        else {\n\t            var comments = this.scanner.scanComments();\n\t            if (comments.length > 0 && this.delegate) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var node = void 0;\n\t                    node = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\n\t                    };\n\t                    if (this.config.range) {\n\t                        node.range = e.range;\n\t                    }\n\t                    if (this.config.loc) {\n\t                        node.loc = e.loc;\n\t                    }\n\t                    var metadata = {\n\t                        start: {\n\t                            line: e.loc.start.line,\n\t                            column: e.loc.start.column,\n\t                            offset: e.range[0]\n\t                        },\n\t                        end: {\n\t                            line: e.loc.end.line,\n\t                            column: e.loc.end.column,\n\t                            offset: e.range[1]\n\t                        }\n\t                    };\n\t                    this.delegate(node, metadata);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    // From internal representation to an external structure\n\t    Parser.prototype.getTokenRaw = function (token) {\n\t        return this.scanner.source.slice(token.start, token.end);\n\t    };\n\t    Parser.prototype.convertToken = function (token) {\n\t        var t = {\n\t            type: token_1.TokenName[token.type],\n\t            value: this.getTokenRaw(token)\n\t        };\n\t        if (this.config.range) {\n\t            t.range = [token.start, token.end];\n\t        }\n\t        if (this.config.loc) {\n\t            t.loc = {\n\t                start: {\n\t                    line: this.startMarker.line,\n\t                    column: this.startMarker.column\n\t                },\n\t                end: {\n\t                    line: this.scanner.lineNumber,\n\t                    column: this.scanner.index - this.scanner.lineStart\n\t                }\n\t            };\n\t        }\n\t        if (token.type === 9 /* RegularExpression */) {\n\t            var pattern = token.pattern;\n\t            var flags = token.flags;\n\t            t.regex = { pattern: pattern, flags: flags };\n\t        }\n\t        return t;\n\t    };\n\t    Parser.prototype.nextToken = function () {\n\t        var token = this.lookahead;\n\t        this.lastMarker.index = this.scanner.index;\n\t        this.lastMarker.line = this.scanner.lineNumber;\n\t        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        this.collectComments();\n\t        if (this.scanner.index !== this.startMarker.index) {\n\t            this.startMarker.index = this.scanner.index;\n\t            this.startMarker.line = this.scanner.lineNumber;\n\t            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\n\t        }\n\t        var next = this.scanner.lex();\n\t        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);\n\t        if (next && this.context.strict && next.type === 3 /* Identifier */) {\n\t            if (this.scanner.isStrictModeReservedWord(next.value)) {\n\t                next.type = 4 /* Keyword */;\n\t            }\n\t        }\n\t        this.lookahead = next;\n\t        if (this.config.tokens && next.type !== 2 /* EOF */) {\n\t            this.tokens.push(this.convertToken(next));\n\t        }\n\t        return token;\n\t    };\n\t    Parser.prototype.nextRegexToken = function () {\n\t        this.collectComments();\n\t        var token = this.scanner.scanRegExp();\n\t        if (this.config.tokens) {\n\t            // Pop the previous token, '/' or '/='\n\t            // This is added from the lookahead token.\n\t            this.tokens.pop();\n\t            this.tokens.push(this.convertToken(token));\n\t        }\n\t        // Prime the next lookahead.\n\t        this.lookahead = token;\n\t        this.nextToken();\n\t        return token;\n\t    };\n\t    Parser.prototype.createNode = function () {\n\t        return {\n\t            index: this.startMarker.index,\n\t            line: this.startMarker.line,\n\t            column: this.startMarker.column\n\t        };\n\t    };\n\t    Parser.prototype.startNode = function (token, lastLineStart) {\n\t        if (lastLineStart === void 0) { lastLineStart = 0; }\n\t        var column = token.start - token.lineStart;\n\t        var line = token.lineNumber;\n\t        if (column < 0) {\n\t            column += lastLineStart;\n\t            line--;\n\t        }\n\t        return {\n\t            index: token.start,\n\t            line: line,\n\t            column: column\n\t        };\n\t    };\n\t    Parser.prototype.finalize = function (marker, node) {\n\t        if (this.config.range) {\n\t            node.range = [marker.index, this.lastMarker.index];\n\t        }\n\t        if (this.config.loc) {\n\t            node.loc = {\n\t                start: {\n\t                    line: marker.line,\n\t                    column: marker.column,\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.line,\n\t                    column: this.lastMarker.column\n\t                }\n\t            };\n\t            if (this.config.source) {\n\t                node.loc.source = this.config.source;\n\t            }\n\t        }\n\t        if (this.delegate) {\n\t            var metadata = {\n\t                start: {\n\t                    line: marker.line,\n\t                    column: marker.column,\n\t                    offset: marker.index\n\t                },\n\t                end: {\n\t                    line: this.lastMarker.line,\n\t                    column: this.lastMarker.column,\n\t                    offset: this.lastMarker.index\n\t                }\n\t            };\n\t            this.delegate(node, metadata);\n\t        }\n\t        return node;\n\t    };\n\t    // Expect the next token to match the specified punctuator.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expect = function (value) {\n\t        var token = this.nextToken();\n\t        if (token.type !== 7 /* Punctuator */ || token.value !== value) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\n\t    Parser.prototype.expectCommaSeparator = function () {\n\t        if (this.config.tolerant) {\n\t            var token = this.lookahead;\n\t            if (token.type === 7 /* Punctuator */ && token.value === ',') {\n\t                this.nextToken();\n\t            }\n\t            else if (token.type === 7 /* Punctuator */ && token.value === ';') {\n\t                this.nextToken();\n\t                this.tolerateUnexpectedToken(token);\n\t            }\n\t            else {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);\n\t            }\n\t        }\n\t        else {\n\t            this.expect(',');\n\t        }\n\t    };\n\t    // Expect the next token to match the specified keyword.\n\t    // If not, an exception will be thrown.\n\t    Parser.prototype.expectKeyword = function (keyword) {\n\t        var token = this.nextToken();\n\t        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t    };\n\t    // Return true if the next token matches the specified punctuator.\n\t    Parser.prototype.match = function (value) {\n\t        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;\n\t    };\n\t    // Return true if the next token matches the specified keyword\n\t    Parser.prototype.matchKeyword = function (keyword) {\n\t        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token matches the specified contextual keyword\n\t    // (where an identifier is sometimes a keyword depending on the context)\n\t    Parser.prototype.matchContextualKeyword = function (keyword) {\n\t        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;\n\t    };\n\t    // Return true if the next token is an assignment operator\n\t    Parser.prototype.matchAssign = function () {\n\t        if (this.lookahead.type !== 7 /* Punctuator */) {\n\t            return false;\n\t        }\n\t        var op = this.lookahead.value;\n\t        return op === '=' ||\n\t            op === '*=' ||\n\t            op === '**=' ||\n\t            op === '/=' ||\n\t            op === '%=' ||\n\t            op === '+=' ||\n\t            op === '-=' ||\n\t            op === '<<=' ||\n\t            op === '>>=' ||\n\t            op === '>>>=' ||\n\t            op === '&=' ||\n\t            op === '^=' ||\n\t            op === '|=';\n\t    };\n\t    // Cover grammar support.\n\t    //\n\t    // When an assignment expression position starts with an left parenthesis, the determination of the type\n\t    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\n\t    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\n\t    //\n\t    // There are three productions that can be parsed in a parentheses pair that needs to be determined\n\t    // after the outermost pair is closed. They are:\n\t    //\n\t    //   1. AssignmentExpression\n\t    //   2. BindingElements\n\t    //   3. AssignmentTargets\n\t    //\n\t    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\n\t    // binding element or assignment target.\n\t    //\n\t    // The three productions have the relationship:\n\t    //\n\t    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\n\t    //\n\t    // with a single exception that CoverInitializedName when used directly in an Expression, generates\n\t    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\n\t    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\n\t    //\n\t    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\n\t    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\n\t    // the CoverInitializedName check is conducted.\n\t    //\n\t    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\n\t    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\n\t    // pattern. The CoverInitializedName check is deferred.\n\t    Parser.prototype.isolateCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        if (this.context.firstCoverInitializedNameError !== null) {\n\t            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\n\t        }\n\t        this.context.isBindingElement = previousIsBindingElement;\n\t        this.context.isAssignmentTarget = previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.inheritCoverGrammar = function (parseFunction) {\n\t        var previousIsBindingElement = this.context.isBindingElement;\n\t        var previousIsAssignmentTarget = this.context.isAssignmentTarget;\n\t        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\n\t        this.context.isBindingElement = true;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.firstCoverInitializedNameError = null;\n\t        var result = parseFunction.call(this);\n\t        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\n\t        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\n\t        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\n\t        return result;\n\t    };\n\t    Parser.prototype.consumeSemicolon = function () {\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else if (!this.hasLineTerminator) {\n\t            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.lastMarker.index = this.startMarker.index;\n\t            this.lastMarker.line = this.startMarker.line;\n\t            this.lastMarker.column = this.startMarker.column;\n\t        }\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-primary-expression\n\t    Parser.prototype.parsePrimaryExpression = function () {\n\t        var node = this.createNode();\n\t        var expr;\n\t        var token, raw;\n\t        switch (this.lookahead.type) {\n\t            case 3 /* Identifier */:\n\t                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\n\t                    this.tolerateUnexpectedToken(this.lookahead);\n\t                }\n\t                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                break;\n\t            case 6 /* NumericLiteral */:\n\t            case 8 /* StringLiteral */:\n\t                if (this.context.strict && this.lookahead.octal) {\n\t                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case 1 /* BooleanLiteral */:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\n\t                break;\n\t            case 5 /* NullLiteral */:\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                token = this.nextToken();\n\t                raw = this.getTokenRaw(token);\n\t                expr = this.finalize(node, new Node.Literal(null, raw));\n\t                break;\n\t            case 10 /* Template */:\n\t                expr = this.parseTemplateLiteral();\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                switch (this.lookahead.value) {\n\t                    case '(':\n\t                        this.context.isBindingElement = false;\n\t                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\n\t                        break;\n\t                    case '[':\n\t                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\n\t                        break;\n\t                    case '{':\n\t                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\n\t                        break;\n\t                    case '/':\n\t                    case '/=':\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                        this.scanner.index = this.startMarker.index;\n\t                        token = this.nextRegexToken();\n\t                        raw = this.getTokenRaw(token);\n\t                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));\n\t                        break;\n\t                    default:\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\n\t                }\n\t                break;\n\t            case 4 /* Keyword */:\n\t                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\n\t                    expr = this.parseIdentifierName();\n\t                }\n\t                else if (!this.context.strict && this.matchKeyword('let')) {\n\t                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\n\t                }\n\t                else {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    if (this.matchKeyword('function')) {\n\t                        expr = this.parseFunctionExpression();\n\t                    }\n\t                    else if (this.matchKeyword('this')) {\n\t                        this.nextToken();\n\t                        expr = this.finalize(node, new Node.ThisExpression());\n\t                    }\n\t                    else if (this.matchKeyword('class')) {\n\t                        expr = this.parseClassExpression();\n\t                    }\n\t                    else {\n\t                        expr = this.throwUnexpectedToken(this.nextToken());\n\t                    }\n\t                }\n\t                break;\n\t            default:\n\t                expr = this.throwUnexpectedToken(this.nextToken());\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-array-initializer\n\t    Parser.prototype.parseSpreadElement = function () {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t        return this.finalize(node, new Node.SpreadElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayInitializer = function () {\n\t        var node = this.createNode();\n\t        var elements = [];\n\t        this.expect('[');\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else if (this.match('...')) {\n\t                var element = this.parseSpreadElement();\n\t                if (!this.match(']')) {\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    this.expect(',');\n\t                }\n\t                elements.push(element);\n\t            }\n\t            else {\n\t                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayExpression(elements));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-object-initializer\n\t    Parser.prototype.parsePropertyMethod = function (params) {\n\t        this.context.isAssignmentTarget = false;\n\t        this.context.isBindingElement = false;\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = params.simple;\n\t        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\n\t        if (this.context.strict && params.firstRestricted) {\n\t            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\n\t        }\n\t        if (this.context.strict && params.stricted) {\n\t            this.tolerateUnexpectedToken(params.stricted, params.message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        return body;\n\t    };\n\t    Parser.prototype.parsePropertyMethodFunction = function () {\n\t        var isGenerator = false;\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parsePropertyMethodAsyncFunction = function () {\n\t        var node = this.createNode();\n\t        var previousAllowYield = this.context.allowYield;\n\t        var previousAwait = this.context.await;\n\t        this.context.allowYield = false;\n\t        this.context.await = true;\n\t        var params = this.parseFormalParameters();\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        this.context.await = previousAwait;\n\t        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\n\t    };\n\t    Parser.prototype.parseObjectPropertyKey = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var key;\n\t        switch (token.type) {\n\t            case 8 /* StringLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t                if (this.context.strict && token.octal) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                var raw = this.getTokenRaw(token);\n\t                key = this.finalize(node, new Node.Literal(token.value, raw));\n\t                break;\n\t            case 3 /* Identifier */:\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 4 /* Keyword */:\n\t                key = this.finalize(node, new Node.Identifier(token.value));\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                if (token.value === '[') {\n\t                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    this.expect(']');\n\t                }\n\t                else {\n\t                    key = this.throwUnexpectedToken(token);\n\t                }\n\t                break;\n\t            default:\n\t                key = this.throwUnexpectedToken(token);\n\t        }\n\t        return key;\n\t    };\n\t    Parser.prototype.isPropertyKey = function (key, value) {\n\t        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||\n\t            (key.type === syntax_1.Syntax.Literal && key.value === value);\n\t    };\n\t    Parser.prototype.parseObjectProperty = function (hasProto) {\n\t        var node = this.createNode();\n\t        var token = this.lookahead;\n\t        var kind;\n\t        var key = null;\n\t        var value = null;\n\t        var computed = false;\n\t        var method = false;\n\t        var shorthand = false;\n\t        var isAsync = false;\n\t        if (token.type === 3 /* Identifier */) {\n\t            var id = token.value;\n\t            this.nextToken();\n\t            computed = this.match('[');\n\t            isAsync = !this.hasLineTerminator && (id === 'async') &&\n\t                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\n\t            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\n\t        }\n\t        else if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\n\t            kind = 'get';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.context.allowYield = false;\n\t            value = this.parseGetterMethod();\n\t        }\n\t        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\n\t            kind = 'set';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseSetterMethod();\n\t        }\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        else {\n\t            if (!key) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            kind = 'init';\n\t            if (this.match(':') && !isAsync) {\n\t                if (!computed && this.isPropertyKey(key, '__proto__')) {\n\t                    if (hasProto.value) {\n\t                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);\n\t                    }\n\t                    hasProto.value = true;\n\t                }\n\t                this.nextToken();\n\t                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t            }\n\t            else if (this.match('(')) {\n\t                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n\t                method = true;\n\t            }\n\t            else if (token.type === 3 /* Identifier */) {\n\t                var id = this.finalize(node, new Node.Identifier(token.value));\n\t                if (this.match('=')) {\n\t                    this.context.firstCoverInitializedNameError = this.lookahead;\n\t                    this.nextToken();\n\t                    shorthand = true;\n\t                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\n\t                }\n\t                else {\n\t                    shorthand = true;\n\t                    value = id;\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectInitializer = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var properties = [];\n\t        var hasProto = { value: false };\n\t        while (!this.match('}')) {\n\t            properties.push(this.parseObjectProperty(hasProto));\n\t            if (!this.match('}')) {\n\t                this.expectCommaSeparator();\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectExpression(properties));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-template-literals\n\t    Parser.prototype.parseTemplateHead = function () {\n\t        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var raw = token.value;\n\t        var cooked = token.cooked;\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateElement = function () {\n\t        if (this.lookahead.type !== 10 /* Template */) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        var raw = token.value;\n\t        var cooked = token.cooked;\n\t        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));\n\t    };\n\t    Parser.prototype.parseTemplateLiteral = function () {\n\t        var node = this.createNode();\n\t        var expressions = [];\n\t        var quasis = [];\n\t        var quasi = this.parseTemplateHead();\n\t        quasis.push(quasi);\n\t        while (!quasi.tail) {\n\t            expressions.push(this.parseExpression());\n\t            quasi = this.parseTemplateElement();\n\t            quasis.push(quasi);\n\t        }\n\t        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-grouping-operator\n\t    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t            case syntax_1.Syntax.MemberExpression:\n\t            case syntax_1.Syntax.RestElement:\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                break;\n\t            case syntax_1.Syntax.SpreadElement:\n\t                expr.type = syntax_1.Syntax.RestElement;\n\t                this.reinterpretExpressionAsPattern(expr.argument);\n\t                break;\n\t            case syntax_1.Syntax.ArrayExpression:\n\t                expr.type = syntax_1.Syntax.ArrayPattern;\n\t                for (var i = 0; i < expr.elements.length; i++) {\n\t                    if (expr.elements[i] !== null) {\n\t                        this.reinterpretExpressionAsPattern(expr.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectExpression:\n\t                expr.type = syntax_1.Syntax.ObjectPattern;\n\t                for (var i = 0; i < expr.properties.length; i++) {\n\t                    this.reinterpretExpressionAsPattern(expr.properties[i].value);\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.AssignmentExpression:\n\t                expr.type = syntax_1.Syntax.AssignmentPattern;\n\t                delete expr.operator;\n\t                this.reinterpretExpressionAsPattern(expr.left);\n\t                break;\n\t            default:\n\t                // Allow other node type for tolerant parsing.\n\t                break;\n\t        }\n\t    };\n\t    Parser.prototype.parseGroupExpression = function () {\n\t        var expr;\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.nextToken();\n\t            if (!this.match('=>')) {\n\t                this.expect('=>');\n\t            }\n\t            expr = {\n\t                type: ArrowParameterPlaceHolder,\n\t                params: [],\n\t                async: false\n\t            };\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var params = [];\n\t            if (this.match('...')) {\n\t                expr = this.parseRestElement(params);\n\t                this.expect(')');\n\t                if (!this.match('=>')) {\n\t                    this.expect('=>');\n\t                }\n\t                expr = {\n\t                    type: ArrowParameterPlaceHolder,\n\t                    params: [expr],\n\t                    async: false\n\t                };\n\t            }\n\t            else {\n\t                var arrow = false;\n\t                this.context.isBindingElement = true;\n\t                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                if (this.match(',')) {\n\t                    var expressions = [];\n\t                    this.context.isAssignmentTarget = false;\n\t                    expressions.push(expr);\n\t                    while (this.lookahead.type !== 2 /* EOF */) {\n\t                        if (!this.match(',')) {\n\t                            break;\n\t                        }\n\t                        this.nextToken();\n\t                        if (this.match(')')) {\n\t                            this.nextToken();\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions,\n\t                                async: false\n\t                            };\n\t                        }\n\t                        else if (this.match('...')) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            expressions.push(this.parseRestElement(params));\n\t                            this.expect(')');\n\t                            if (!this.match('=>')) {\n\t                                this.expect('=>');\n\t                            }\n\t                            this.context.isBindingElement = false;\n\t                            for (var i = 0; i < expressions.length; i++) {\n\t                                this.reinterpretExpressionAsPattern(expressions[i]);\n\t                            }\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: expressions,\n\t                                async: false\n\t                            };\n\t                        }\n\t                        else {\n\t                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        if (arrow) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!arrow) {\n\t                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t                    }\n\t                }\n\t                if (!arrow) {\n\t                    this.expect(')');\n\t                    if (this.match('=>')) {\n\t                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {\n\t                            arrow = true;\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: [expr],\n\t                                async: false\n\t                            };\n\t                        }\n\t                        if (!arrow) {\n\t                            if (!this.context.isBindingElement) {\n\t                                this.throwUnexpectedToken(this.lookahead);\n\t                            }\n\t                            if (expr.type === syntax_1.Syntax.SequenceExpression) {\n\t                                for (var i = 0; i < expr.expressions.length; i++) {\n\t                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\n\t                                }\n\t                            }\n\t                            else {\n\t                                this.reinterpretExpressionAsPattern(expr);\n\t                            }\n\t                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);\n\t                            expr = {\n\t                                type: ArrowParameterPlaceHolder,\n\t                                params: parameters,\n\t                                async: false\n\t                            };\n\t                        }\n\t                    }\n\t                    this.context.isBindingElement = false;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\n\t    Parser.prototype.parseArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.isIdentifierName = function (token) {\n\t        return token.type === 3 /* Identifier */ ||\n\t            token.type === 4 /* Keyword */ ||\n\t            token.type === 1 /* BooleanLiteral */ ||\n\t            token.type === 5 /* NullLiteral */;\n\t    };\n\t    Parser.prototype.parseIdentifierName = function () {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (!this.isIdentifierName(token)) {\n\t            this.throwUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseNewExpression = function () {\n\t        var node = this.createNode();\n\t        var id = this.parseIdentifierName();\n\t        assert_1.assert(id.name === 'new', 'New expression must start with `new`');\n\t        var expr;\n\t        if (this.match('.')) {\n\t            this.nextToken();\n\t            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {\n\t                var property = this.parseIdentifierName();\n\t                expr = new Node.MetaProperty(id, property);\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\n\t            var args = this.match('(') ? this.parseArguments() : [];\n\t            expr = new Node.NewExpression(callee, args);\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return this.finalize(node, expr);\n\t    };\n\t    Parser.prototype.parseAsyncArgument = function () {\n\t        var arg = this.parseAssignmentExpression();\n\t        this.context.firstCoverInitializedNameError = null;\n\t        return arg;\n\t    };\n\t    Parser.prototype.parseAsyncArguments = function () {\n\t        this.expect('(');\n\t        var args = [];\n\t        if (!this.match(')')) {\n\t            while (true) {\n\t                var expr = this.match('...') ? this.parseSpreadElement() :\n\t                    this.isolateCoverGrammar(this.parseAsyncArgument);\n\t                args.push(expr);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expectCommaSeparator();\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return args;\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {\n\t        var startToken = this.lookahead;\n\t        var maybeAsync = this.matchContextualKeyword('async');\n\t        var previousAllowIn = this.context.allowIn;\n\t        this.context.allowIn = true;\n\t        var expr;\n\t        if (this.matchKeyword('super') && this.context.inFunctionBody) {\n\t            expr = this.createNode();\n\t            this.nextToken();\n\t            expr = this.finalize(expr, new Node.Super());\n\t            if (!this.match('(') && !this.match('.') && !this.match('[')) {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        }\n\t        while (true) {\n\t            if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('(')) {\n\t                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = false;\n\t                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\n\t                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\n\t                if (asyncArrow && this.match('=>')) {\n\t                    for (var i = 0; i < args.length; ++i) {\n\t                        this.reinterpretExpressionAsPattern(args[i]);\n\t                    }\n\t                    expr = {\n\t                        type: ArrowParameterPlaceHolder,\n\t                        params: args,\n\t                        async: true\n\t                    };\n\t                }\n\t            }\n\t            else if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        this.context.allowIn = previousAllowIn;\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseSuper = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('super');\n\t        if (!this.match('[') && !this.match('.')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return this.finalize(node, new Node.Super());\n\t    };\n\t    Parser.prototype.parseLeftHandSideExpression = function () {\n\t        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\n\t        var node = this.startNode(this.lookahead);\n\t        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\n\t            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\n\t        while (true) {\n\t            if (this.match('[')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('[');\n\t                var property = this.isolateCoverGrammar(this.parseExpression);\n\t                this.expect(']');\n\t                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\n\t            }\n\t            else if (this.match('.')) {\n\t                this.context.isBindingElement = false;\n\t                this.context.isAssignmentTarget = true;\n\t                this.expect('.');\n\t                var property = this.parseIdentifierName();\n\t                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\n\t            }\n\t            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {\n\t                var quasi = this.parseTemplateLiteral();\n\t                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-update-expressions\n\t    Parser.prototype.parseUpdateExpression = function () {\n\t        var expr;\n\t        var startToken = this.lookahead;\n\t        if (this.match('++') || this.match('--')) {\n\t            var node = this.startNode(startToken);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictLHSPrefix);\n\t            }\n\t            if (!this.context.isAssignmentTarget) {\n\t                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t            }\n\t            var prefix = true;\n\t            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else {\n\t            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {\n\t                if (this.match('++') || this.match('--')) {\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\n\t                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);\n\t                    }\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    this.context.isAssignmentTarget = false;\n\t                    this.context.isBindingElement = false;\n\t                    var operator = this.nextToken().value;\n\t                    var prefix = false;\n\t                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-unary-operators\n\t    Parser.prototype.parseAwaitExpression = function () {\n\t        var node = this.createNode();\n\t        this.nextToken();\n\t        var argument = this.parseUnaryExpression();\n\t        return this.finalize(node, new Node.AwaitExpression(argument));\n\t    };\n\t    Parser.prototype.parseUnaryExpression = function () {\n\t        var expr;\n\t        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\n\t            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\n\t            var node = this.startNode(this.lookahead);\n\t            var token = this.nextToken();\n\t            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\n\t            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {\n\t                this.tolerateError(messages_1.Messages.StrictDelete);\n\t            }\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        else if (this.context.await && this.matchContextualKeyword('await')) {\n\t            expr = this.parseAwaitExpression();\n\t        }\n\t        else {\n\t            expr = this.parseUpdateExpression();\n\t        }\n\t        return expr;\n\t    };\n\t    Parser.prototype.parseExponentiationExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);\n\t        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-exp-operator\n\t    // https://tc39.github.io/ecma262/#sec-multiplicative-operators\n\t    // https://tc39.github.io/ecma262/#sec-additive-operators\n\t    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\n\t    // https://tc39.github.io/ecma262/#sec-relational-operators\n\t    // https://tc39.github.io/ecma262/#sec-equality-operators\n\t    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\n\t    // https://tc39.github.io/ecma262/#sec-binary-logical-operators\n\t    Parser.prototype.binaryPrecedence = function (token) {\n\t        var op = token.value;\n\t        var precedence;\n\t        if (token.type === 7 /* Punctuator */) {\n\t            precedence = this.operatorPrecedence[op] || 0;\n\t        }\n\t        else if (token.type === 4 /* Keyword */) {\n\t            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\n\t        }\n\t        else {\n\t            precedence = 0;\n\t        }\n\t        return precedence;\n\t    };\n\t    Parser.prototype.parseBinaryExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\n\t        var token = this.lookahead;\n\t        var prec = this.binaryPrecedence(token);\n\t        if (prec > 0) {\n\t            this.nextToken();\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t            var markers = [startToken, this.lookahead];\n\t            var left = expr;\n\t            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);\n\t            var stack = [left, token.value, right];\n\t            var precedences = [prec];\n\t            while (true) {\n\t                prec = this.binaryPrecedence(this.lookahead);\n\t                if (prec <= 0) {\n\t                    break;\n\t                }\n\t                // Reduce: make a binary expression from the three topmost entries.\n\t                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {\n\t                    right = stack.pop();\n\t                    var operator = stack.pop();\n\t                    precedences.pop();\n\t                    left = stack.pop();\n\t                    markers.pop();\n\t                    var node = this.startNode(markers[markers.length - 1]);\n\t                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\n\t                }\n\t                // Shift.\n\t                stack.push(this.nextToken().value);\n\t                precedences.push(prec);\n\t                markers.push(this.lookahead);\n\t                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\n\t            }\n\t            // Final reduce to clean-up the stack.\n\t            var i = stack.length - 1;\n\t            expr = stack[i];\n\t            var lastMarker = markers.pop();\n\t            while (i > 1) {\n\t                var marker = markers.pop();\n\t                var lastLineStart = lastMarker && lastMarker.lineStart;\n\t                var node = this.startNode(marker, lastLineStart);\n\t                var operator = stack[i - 1];\n\t                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\n\t                i -= 2;\n\t                lastMarker = marker;\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-conditional-operator\n\t    Parser.prototype.parseConditionalExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);\n\t        if (this.match('?')) {\n\t            this.nextToken();\n\t            var previousAllowIn = this.context.allowIn;\n\t            this.context.allowIn = true;\n\t            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowIn = previousAllowIn;\n\t            this.expect(':');\n\t            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\n\t            this.context.isAssignmentTarget = false;\n\t            this.context.isBindingElement = false;\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-assignment-operators\n\t    Parser.prototype.checkPatternParam = function (options, param) {\n\t        switch (param.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                this.validateParam(options, param, param.name);\n\t                break;\n\t            case syntax_1.Syntax.RestElement:\n\t                this.checkPatternParam(options, param.argument);\n\t                break;\n\t            case syntax_1.Syntax.AssignmentPattern:\n\t                this.checkPatternParam(options, param.left);\n\t                break;\n\t            case syntax_1.Syntax.ArrayPattern:\n\t                for (var i = 0; i < param.elements.length; i++) {\n\t                    if (param.elements[i] !== null) {\n\t                        this.checkPatternParam(options, param.elements[i]);\n\t                    }\n\t                }\n\t                break;\n\t            case syntax_1.Syntax.ObjectPattern:\n\t                for (var i = 0; i < param.properties.length; i++) {\n\t                    this.checkPatternParam(options, param.properties[i].value);\n\t                }\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\n\t    };\n\t    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {\n\t        var params = [expr];\n\t        var options;\n\t        var asyncArrow = false;\n\t        switch (expr.type) {\n\t            case syntax_1.Syntax.Identifier:\n\t                break;\n\t            case ArrowParameterPlaceHolder:\n\t                params = expr.params;\n\t                asyncArrow = expr.async;\n\t                break;\n\t            default:\n\t                return null;\n\t        }\n\t        options = {\n\t            simple: true,\n\t            paramSet: {}\n\t        };\n\t        for (var i = 0; i < params.length; ++i) {\n\t            var param = params[i];\n\t            if (param.type === syntax_1.Syntax.AssignmentPattern) {\n\t                if (param.right.type === syntax_1.Syntax.YieldExpression) {\n\t                    if (param.right.argument) {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                    param.right.type = syntax_1.Syntax.Identifier;\n\t                    param.right.name = 'yield';\n\t                    delete param.right.argument;\n\t                    delete param.right.delegate;\n\t                }\n\t            }\n\t            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {\n\t                this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            this.checkPatternParam(options, param);\n\t            params[i] = param;\n\t        }\n\t        if (this.context.strict || !this.context.allowYield) {\n\t            for (var i = 0; i < params.length; ++i) {\n\t                var param = params[i];\n\t                if (param.type === syntax_1.Syntax.YieldExpression) {\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t                }\n\t            }\n\t        }\n\t        if (options.message === messages_1.Messages.StrictParamDupe) {\n\t            var token = this.context.strict ? options.stricted : options.firstRestricted;\n\t            this.throwUnexpectedToken(token, options.message);\n\t        }\n\t        return {\n\t            simple: options.simple,\n\t            params: params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.parseAssignmentExpression = function () {\n\t        var expr;\n\t        if (!this.context.allowYield && this.matchKeyword('yield')) {\n\t            expr = this.parseYieldExpression();\n\t        }\n\t        else {\n\t            var startToken = this.lookahead;\n\t            var token = startToken;\n\t            expr = this.parseConditionalExpression();\n\t            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {\n\t                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {\n\t                    var arg = this.parsePrimaryExpression();\n\t                    this.reinterpretExpressionAsPattern(arg);\n\t                    expr = {\n\t                        type: ArrowParameterPlaceHolder,\n\t                        params: [arg],\n\t                        async: true\n\t                    };\n\t                }\n\t            }\n\t            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\n\t                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\n\t                this.context.isAssignmentTarget = false;\n\t                this.context.isBindingElement = false;\n\t                var isAsync = expr.async;\n\t                var list = this.reinterpretAsCoverFormalsList(expr);\n\t                if (list) {\n\t                    if (this.hasLineTerminator) {\n\t                        this.tolerateUnexpectedToken(this.lookahead);\n\t                    }\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                    var previousStrict = this.context.strict;\n\t                    var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t                    this.context.allowStrictDirective = list.simple;\n\t                    var previousAllowYield = this.context.allowYield;\n\t                    var previousAwait = this.context.await;\n\t                    this.context.allowYield = true;\n\t                    this.context.await = isAsync;\n\t                    var node = this.startNode(startToken);\n\t                    this.expect('=>');\n\t                    var body = void 0;\n\t                    if (this.match('{')) {\n\t                        var previousAllowIn = this.context.allowIn;\n\t                        this.context.allowIn = true;\n\t                        body = this.parseFunctionSourceElements();\n\t                        this.context.allowIn = previousAllowIn;\n\t                    }\n\t                    else {\n\t                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    }\n\t                    var expression = body.type !== syntax_1.Syntax.BlockStatement;\n\t                    if (this.context.strict && list.firstRestricted) {\n\t                        this.throwUnexpectedToken(list.firstRestricted, list.message);\n\t                    }\n\t                    if (this.context.strict && list.stricted) {\n\t                        this.tolerateUnexpectedToken(list.stricted, list.message);\n\t                    }\n\t                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :\n\t                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\n\t                    this.context.strict = previousStrict;\n\t                    this.context.allowStrictDirective = previousAllowStrictDirective;\n\t                    this.context.allowYield = previousAllowYield;\n\t                    this.context.await = previousAwait;\n\t                }\n\t            }\n\t            else {\n\t                if (this.matchAssign()) {\n\t                    if (!this.context.isAssignmentTarget) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);\n\t                    }\n\t                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {\n\t                        var id = expr;\n\t                        if (this.scanner.isRestrictedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);\n\t                        }\n\t                        if (this.scanner.isStrictModeReservedWord(id.name)) {\n\t                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t                        }\n\t                    }\n\t                    if (!this.match('=')) {\n\t                        this.context.isAssignmentTarget = false;\n\t                        this.context.isBindingElement = false;\n\t                    }\n\t                    else {\n\t                        this.reinterpretExpressionAsPattern(expr);\n\t                    }\n\t                    token = this.nextToken();\n\t                    var operator = token.value;\n\t                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\n\t                    this.context.firstCoverInitializedNameError = null;\n\t                }\n\t            }\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-comma-operator\n\t    Parser.prototype.parseExpression = function () {\n\t        var startToken = this.lookahead;\n\t        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        if (this.match(',')) {\n\t            var expressions = [];\n\t            expressions.push(expr);\n\t            while (this.lookahead.type !== 2 /* EOF */) {\n\t                if (!this.match(',')) {\n\t                    break;\n\t                }\n\t                this.nextToken();\n\t                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t            }\n\t            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\n\t        }\n\t        return expr;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-block\n\t    Parser.prototype.parseStatementListItem = function () {\n\t        var statement;\n\t        this.context.isAssignmentTarget = true;\n\t        this.context.isBindingElement = true;\n\t        if (this.lookahead.type === 4 /* Keyword */) {\n\t            switch (this.lookahead.value) {\n\t                case 'export':\n\t                    if (!this.context.isModule) {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);\n\t                    }\n\t                    statement = this.parseExportDeclaration();\n\t                    break;\n\t                case 'import':\n\t                    if (!this.context.isModule) {\n\t                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);\n\t                    }\n\t                    statement = this.parseImportDeclaration();\n\t                    break;\n\t                case 'const':\n\t                    statement = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'function':\n\t                    statement = this.parseFunctionDeclaration();\n\t                    break;\n\t                case 'class':\n\t                    statement = this.parseClassDeclaration();\n\t                    break;\n\t                case 'let':\n\t                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\n\t                    break;\n\t                default:\n\t                    statement = this.parseStatement();\n\t                    break;\n\t            }\n\t        }\n\t        else {\n\t            statement = this.parseStatement();\n\t        }\n\t        return statement;\n\t    };\n\t    Parser.prototype.parseBlock = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var block = [];\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            block.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.BlockStatement(block));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\n\t    Parser.prototype.parseLexicalBinding = function (kind, options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, kind);\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(id.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (kind === 'const') {\n\t            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\n\t                if (this.match('=')) {\n\t                    this.nextToken();\n\t                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t                }\n\t                else {\n\t                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');\n\t                }\n\t            }\n\t        }\n\t        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {\n\t            this.expect('=');\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseBindingList = function (kind, options) {\n\t        var list = [this.parseLexicalBinding(kind, options)];\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseLexicalBinding(kind, options));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.isLexicalDeclaration = function () {\n\t        var state = this.scanner.saveState();\n\t        this.scanner.scanComments();\n\t        var next = this.scanner.lex();\n\t        this.scanner.restoreState(state);\n\t        return (next.type === 3 /* Identifier */) ||\n\t            (next.type === 7 /* Punctuator */ && next.value === '[') ||\n\t            (next.type === 7 /* Punctuator */ && next.value === '{') ||\n\t            (next.type === 4 /* Keyword */ && next.value === 'let') ||\n\t            (next.type === 4 /* Keyword */ && next.value === 'yield');\n\t    };\n\t    Parser.prototype.parseLexicalDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var kind = this.nextToken().value;\n\t        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\n\t        var declarations = this.parseBindingList(kind, options);\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\n\t    Parser.prototype.parseBindingRestElement = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params, kind);\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseArrayPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        this.expect('[');\n\t        var elements = [];\n\t        while (!this.match(']')) {\n\t            if (this.match(',')) {\n\t                this.nextToken();\n\t                elements.push(null);\n\t            }\n\t            else {\n\t                if (this.match('...')) {\n\t                    elements.push(this.parseBindingRestElement(params, kind));\n\t                    break;\n\t                }\n\t                else {\n\t                    elements.push(this.parsePatternWithDefault(params, kind));\n\t                }\n\t                if (!this.match(']')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t        }\n\t        this.expect(']');\n\t        return this.finalize(node, new Node.ArrayPattern(elements));\n\t    };\n\t    Parser.prototype.parsePropertyPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var computed = false;\n\t        var shorthand = false;\n\t        var method = false;\n\t        var key;\n\t        var value;\n\t        if (this.lookahead.type === 3 /* Identifier */) {\n\t            var keyToken = this.lookahead;\n\t            key = this.parseVariableIdentifier();\n\t            var init = this.finalize(node, new Node.Identifier(keyToken.value));\n\t            if (this.match('=')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                this.nextToken();\n\t                var expr = this.parseAssignmentExpression();\n\t                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\n\t            }\n\t            else if (!this.match(':')) {\n\t                params.push(keyToken);\n\t                shorthand = true;\n\t                value = init;\n\t            }\n\t            else {\n\t                this.expect(':');\n\t                value = this.parsePatternWithDefault(params, kind);\n\t            }\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            this.expect(':');\n\t            value = this.parsePatternWithDefault(params, kind);\n\t        }\n\t        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\n\t    };\n\t    Parser.prototype.parseObjectPattern = function (params, kind) {\n\t        var node = this.createNode();\n\t        var properties = [];\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            properties.push(this.parsePropertyPattern(params, kind));\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return this.finalize(node, new Node.ObjectPattern(properties));\n\t    };\n\t    Parser.prototype.parsePattern = function (params, kind) {\n\t        var pattern;\n\t        if (this.match('[')) {\n\t            pattern = this.parseArrayPattern(params, kind);\n\t        }\n\t        else if (this.match('{')) {\n\t            pattern = this.parseObjectPattern(params, kind);\n\t        }\n\t        else {\n\t            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\n\t                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);\n\t            }\n\t            params.push(this.lookahead);\n\t            pattern = this.parseVariableIdentifier(kind);\n\t        }\n\t        return pattern;\n\t    };\n\t    Parser.prototype.parsePatternWithDefault = function (params, kind) {\n\t        var startToken = this.lookahead;\n\t        var pattern = this.parsePattern(params, kind);\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = true;\n\t            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t            this.context.allowYield = previousAllowYield;\n\t            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\n\t        }\n\t        return pattern;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-variable-statement\n\t    Parser.prototype.parseVariableIdentifier = function (kind) {\n\t        var node = this.createNode();\n\t        var token = this.nextToken();\n\t        if (token.type === 4 /* Keyword */ && token.value === 'yield') {\n\t            if (this.context.strict) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else if (!this.context.allowYield) {\n\t                this.throwUnexpectedToken(token);\n\t            }\n\t        }\n\t        else if (token.type !== 3 /* Identifier */) {\n\t            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {\n\t                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);\n\t            }\n\t            else {\n\t                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\n\t                    this.throwUnexpectedToken(token);\n\t                }\n\t            }\n\t        }\n\t        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {\n\t            this.tolerateUnexpectedToken(token);\n\t        }\n\t        return this.finalize(node, new Node.Identifier(token.value));\n\t    };\n\t    Parser.prototype.parseVariableDeclaration = function (options) {\n\t        var node = this.createNode();\n\t        var params = [];\n\t        var id = this.parsePattern(params, 'var');\n\t        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(id.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictVarName);\n\t            }\n\t        }\n\t        var init = null;\n\t        if (this.match('=')) {\n\t            this.nextToken();\n\t            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\n\t        }\n\t        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {\n\t            this.expect('=');\n\t        }\n\t        return this.finalize(node, new Node.VariableDeclarator(id, init));\n\t    };\n\t    Parser.prototype.parseVariableDeclarationList = function (options) {\n\t        var opt = { inFor: options.inFor };\n\t        var list = [];\n\t        list.push(this.parseVariableDeclaration(opt));\n\t        while (this.match(',')) {\n\t            this.nextToken();\n\t            list.push(this.parseVariableDeclaration(opt));\n\t        }\n\t        return list;\n\t    };\n\t    Parser.prototype.parseVariableStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('var');\n\t        var declarations = this.parseVariableDeclarationList({ inFor: false });\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-empty-statement\n\t    Parser.prototype.parseEmptyStatement = function () {\n\t        var node = this.createNode();\n\t        this.expect(';');\n\t        return this.finalize(node, new Node.EmptyStatement());\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-expression-statement\n\t    Parser.prototype.parseExpressionStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ExpressionStatement(expr));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-if-statement\n\t    Parser.prototype.parseIfClause = function () {\n\t        if (this.context.strict && this.matchKeyword('function')) {\n\t            this.tolerateError(messages_1.Messages.StrictFunction);\n\t        }\n\t        return this.parseStatement();\n\t    };\n\t    Parser.prototype.parseIfStatement = function () {\n\t        var node = this.createNode();\n\t        var consequent;\n\t        var alternate = null;\n\t        this.expectKeyword('if');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            consequent = this.parseIfClause();\n\t            if (this.matchKeyword('else')) {\n\t                this.nextToken();\n\t                alternate = this.parseIfClause();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-do-while-statement\n\t    Parser.prototype.parseDoWhileStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('do');\n\t        var previousInIteration = this.context.inIteration;\n\t        this.context.inIteration = true;\n\t        var body = this.parseStatement();\n\t        this.context.inIteration = previousInIteration;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.DoWhileStatement(body, test));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-while-statement\n\t    Parser.prototype.parseWhileStatement = function () {\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('while');\n\t        this.expect('(');\n\t        var test = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.parseStatement();\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return this.finalize(node, new Node.WhileStatement(test, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-for-statement\n\t    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\n\t    Parser.prototype.parseForStatement = function () {\n\t        var init = null;\n\t        var test = null;\n\t        var update = null;\n\t        var forIn = true;\n\t        var left, right;\n\t        var node = this.createNode();\n\t        this.expectKeyword('for');\n\t        this.expect('(');\n\t        if (this.match(';')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            if (this.matchKeyword('var')) {\n\t                init = this.createNode();\n\t                this.nextToken();\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                var declarations = this.parseVariableDeclarationList({ inFor: true });\n\t                this.context.allowIn = previousAllowIn;\n\t                if (declarations.length === 1 && this.matchKeyword('in')) {\n\t                    var decl = declarations[0];\n\t                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {\n\t                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');\n\t                    }\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\n\t                    this.expect(';');\n\t                }\n\t            }\n\t            else if (this.matchKeyword('const') || this.matchKeyword('let')) {\n\t                init = this.createNode();\n\t                var kind = this.nextToken().value;\n\t                if (!this.context.strict && this.lookahead.value === 'in') {\n\t                    init = this.finalize(init, new Node.Identifier(kind));\n\t                    this.nextToken();\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else {\n\t                    var previousAllowIn = this.context.allowIn;\n\t                    this.context.allowIn = false;\n\t                    var declarations = this.parseBindingList(kind, { inFor: true });\n\t                    this.context.allowIn = previousAllowIn;\n\t                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseExpression();\n\t                        init = null;\n\t                    }\n\t                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                        this.nextToken();\n\t                        left = init;\n\t                        right = this.parseAssignmentExpression();\n\t                        init = null;\n\t                        forIn = false;\n\t                    }\n\t                    else {\n\t                        this.consumeSemicolon();\n\t                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                var initStartToken = this.lookahead;\n\t                var previousAllowIn = this.context.allowIn;\n\t                this.context.allowIn = false;\n\t                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\n\t                this.context.allowIn = previousAllowIn;\n\t                if (this.matchKeyword('in')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseExpression();\n\t                    init = null;\n\t                }\n\t                else if (this.matchContextualKeyword('of')) {\n\t                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {\n\t                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);\n\t                    }\n\t                    this.nextToken();\n\t                    this.reinterpretExpressionAsPattern(init);\n\t                    left = init;\n\t                    right = this.parseAssignmentExpression();\n\t                    init = null;\n\t                    forIn = false;\n\t                }\n\t                else {\n\t                    if (this.match(',')) {\n\t                        var initSeq = [init];\n\t                        while (this.match(',')) {\n\t                            this.nextToken();\n\t                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\n\t                        }\n\t                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\n\t                    }\n\t                    this.expect(';');\n\t                }\n\t            }\n\t        }\n\t        if (typeof left === 'undefined') {\n\t            if (!this.match(';')) {\n\t                test = this.parseExpression();\n\t            }\n\t            this.expect(';');\n\t            if (!this.match(')')) {\n\t                update = this.parseExpression();\n\t            }\n\t        }\n\t        var body;\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            var previousInIteration = this.context.inIteration;\n\t            this.context.inIteration = true;\n\t            body = this.isolateCoverGrammar(this.parseStatement);\n\t            this.context.inIteration = previousInIteration;\n\t        }\n\t        return (typeof left === 'undefined') ?\n\t            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\n\t            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\n\t                this.finalize(node, new Node.ForOfStatement(left, right, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-continue-statement\n\t    Parser.prototype.parseContinueStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('continue');\n\t        var label = null;\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n\t            var id = this.parseVariableIdentifier();\n\t            label = id;\n\t            var key = '$' + id.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\n\t            }\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration) {\n\t            this.throwError(messages_1.Messages.IllegalContinue);\n\t        }\n\t        return this.finalize(node, new Node.ContinueStatement(label));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-break-statement\n\t    Parser.prototype.parseBreakStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('break');\n\t        var label = null;\n\t        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {\n\t            var id = this.parseVariableIdentifier();\n\t            var key = '$' + id.name;\n\t            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.UnknownLabel, id.name);\n\t            }\n\t            label = id;\n\t        }\n\t        this.consumeSemicolon();\n\t        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\n\t            this.throwError(messages_1.Messages.IllegalBreak);\n\t        }\n\t        return this.finalize(node, new Node.BreakStatement(label));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-return-statement\n\t    Parser.prototype.parseReturnStatement = function () {\n\t        if (!this.context.inFunctionBody) {\n\t            this.tolerateError(messages_1.Messages.IllegalReturn);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('return');\n\t        var hasArgument = (!this.match(';') && !this.match('}') &&\n\t            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||\n\t            this.lookahead.type === 8 /* StringLiteral */ ||\n\t            this.lookahead.type === 10 /* Template */;\n\t        var argument = hasArgument ? this.parseExpression() : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ReturnStatement(argument));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-with-statement\n\t    Parser.prototype.parseWithStatement = function () {\n\t        if (this.context.strict) {\n\t            this.tolerateError(messages_1.Messages.StrictModeWith);\n\t        }\n\t        var node = this.createNode();\n\t        var body;\n\t        this.expectKeyword('with');\n\t        this.expect('(');\n\t        var object = this.parseExpression();\n\t        if (!this.match(')') && this.config.tolerant) {\n\t            this.tolerateUnexpectedToken(this.nextToken());\n\t            body = this.finalize(this.createNode(), new Node.EmptyStatement());\n\t        }\n\t        else {\n\t            this.expect(')');\n\t            body = this.parseStatement();\n\t        }\n\t        return this.finalize(node, new Node.WithStatement(object, body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-switch-statement\n\t    Parser.prototype.parseSwitchCase = function () {\n\t        var node = this.createNode();\n\t        var test;\n\t        if (this.matchKeyword('default')) {\n\t            this.nextToken();\n\t            test = null;\n\t        }\n\t        else {\n\t            this.expectKeyword('case');\n\t            test = this.parseExpression();\n\t        }\n\t        this.expect(':');\n\t        var consequent = [];\n\t        while (true) {\n\t            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\n\t                break;\n\t            }\n\t            consequent.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.SwitchCase(test, consequent));\n\t    };\n\t    Parser.prototype.parseSwitchStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('switch');\n\t        this.expect('(');\n\t        var discriminant = this.parseExpression();\n\t        this.expect(')');\n\t        var previousInSwitch = this.context.inSwitch;\n\t        this.context.inSwitch = true;\n\t        var cases = [];\n\t        var defaultFound = false;\n\t        this.expect('{');\n\t        while (true) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            var clause = this.parseSwitchCase();\n\t            if (clause.test === null) {\n\t                if (defaultFound) {\n\t                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);\n\t                }\n\t                defaultFound = true;\n\t            }\n\t            cases.push(clause);\n\t        }\n\t        this.expect('}');\n\t        this.context.inSwitch = previousInSwitch;\n\t        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-labelled-statements\n\t    Parser.prototype.parseLabelledStatement = function () {\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var statement;\n\t        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {\n\t            this.nextToken();\n\t            var id = expr;\n\t            var key = '$' + id.name;\n\t            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\n\t                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);\n\t            }\n\t            this.context.labelSet[key] = true;\n\t            var body = void 0;\n\t            if (this.matchKeyword('class')) {\n\t                this.tolerateUnexpectedToken(this.lookahead);\n\t                body = this.parseClassDeclaration();\n\t            }\n\t            else if (this.matchKeyword('function')) {\n\t                var token = this.lookahead;\n\t                var declaration = this.parseFunctionDeclaration();\n\t                if (this.context.strict) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);\n\t                }\n\t                else if (declaration.generator) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);\n\t                }\n\t                body = declaration;\n\t            }\n\t            else {\n\t                body = this.parseStatement();\n\t            }\n\t            delete this.context.labelSet[key];\n\t            statement = new Node.LabeledStatement(id, body);\n\t        }\n\t        else {\n\t            this.consumeSemicolon();\n\t            statement = new Node.ExpressionStatement(expr);\n\t        }\n\t        return this.finalize(node, statement);\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-throw-statement\n\t    Parser.prototype.parseThrowStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('throw');\n\t        if (this.hasLineTerminator) {\n\t            this.throwError(messages_1.Messages.NewlineAfterThrow);\n\t        }\n\t        var argument = this.parseExpression();\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ThrowStatement(argument));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-try-statement\n\t    Parser.prototype.parseCatchClause = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('catch');\n\t        this.expect('(');\n\t        if (this.match(')')) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        var params = [];\n\t        var param = this.parsePattern(params);\n\t        var paramMap = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var key = '$' + params[i].value;\n\t            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\n\t                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);\n\t            }\n\t            paramMap[key] = true;\n\t        }\n\t        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {\n\t            if (this.scanner.isRestrictedWord(param.name)) {\n\t                this.tolerateError(messages_1.Messages.StrictCatchVariable);\n\t            }\n\t        }\n\t        this.expect(')');\n\t        var body = this.parseBlock();\n\t        return this.finalize(node, new Node.CatchClause(param, body));\n\t    };\n\t    Parser.prototype.parseFinallyClause = function () {\n\t        this.expectKeyword('finally');\n\t        return this.parseBlock();\n\t    };\n\t    Parser.prototype.parseTryStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('try');\n\t        var block = this.parseBlock();\n\t        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\n\t        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\n\t        if (!handler && !finalizer) {\n\t            this.throwError(messages_1.Messages.NoCatchOrFinally);\n\t        }\n\t        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-debugger-statement\n\t    Parser.prototype.parseDebuggerStatement = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('debugger');\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.DebuggerStatement());\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\n\t    Parser.prototype.parseStatement = function () {\n\t        var statement;\n\t        switch (this.lookahead.type) {\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t            case 8 /* StringLiteral */:\n\t            case 10 /* Template */:\n\t            case 9 /* RegularExpression */:\n\t                statement = this.parseExpressionStatement();\n\t                break;\n\t            case 7 /* Punctuator */:\n\t                var value = this.lookahead.value;\n\t                if (value === '{') {\n\t                    statement = this.parseBlock();\n\t                }\n\t                else if (value === '(') {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                else if (value === ';') {\n\t                    statement = this.parseEmptyStatement();\n\t                }\n\t                else {\n\t                    statement = this.parseExpressionStatement();\n\t                }\n\t                break;\n\t            case 3 /* Identifier */:\n\t                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\n\t                break;\n\t            case 4 /* Keyword */:\n\t                switch (this.lookahead.value) {\n\t                    case 'break':\n\t                        statement = this.parseBreakStatement();\n\t                        break;\n\t                    case 'continue':\n\t                        statement = this.parseContinueStatement();\n\t                        break;\n\t                    case 'debugger':\n\t                        statement = this.parseDebuggerStatement();\n\t                        break;\n\t                    case 'do':\n\t                        statement = this.parseDoWhileStatement();\n\t                        break;\n\t                    case 'for':\n\t                        statement = this.parseForStatement();\n\t                        break;\n\t                    case 'function':\n\t                        statement = this.parseFunctionDeclaration();\n\t                        break;\n\t                    case 'if':\n\t                        statement = this.parseIfStatement();\n\t                        break;\n\t                    case 'return':\n\t                        statement = this.parseReturnStatement();\n\t                        break;\n\t                    case 'switch':\n\t                        statement = this.parseSwitchStatement();\n\t                        break;\n\t                    case 'throw':\n\t                        statement = this.parseThrowStatement();\n\t                        break;\n\t                    case 'try':\n\t                        statement = this.parseTryStatement();\n\t                        break;\n\t                    case 'var':\n\t                        statement = this.parseVariableStatement();\n\t                        break;\n\t                    case 'while':\n\t                        statement = this.parseWhileStatement();\n\t                        break;\n\t                    case 'with':\n\t                        statement = this.parseWithStatement();\n\t                        break;\n\t                    default:\n\t                        statement = this.parseExpressionStatement();\n\t                        break;\n\t                }\n\t                break;\n\t            default:\n\t                statement = this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        return statement;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-function-definitions\n\t    Parser.prototype.parseFunctionSourceElements = function () {\n\t        var node = this.createNode();\n\t        this.expect('{');\n\t        var body = this.parseDirectivePrologues();\n\t        var previousLabelSet = this.context.labelSet;\n\t        var previousInIteration = this.context.inIteration;\n\t        var previousInSwitch = this.context.inSwitch;\n\t        var previousInFunctionBody = this.context.inFunctionBody;\n\t        this.context.labelSet = {};\n\t        this.context.inIteration = false;\n\t        this.context.inSwitch = false;\n\t        this.context.inFunctionBody = true;\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            if (this.match('}')) {\n\t                break;\n\t            }\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        this.expect('}');\n\t        this.context.labelSet = previousLabelSet;\n\t        this.context.inIteration = previousInIteration;\n\t        this.context.inSwitch = previousInSwitch;\n\t        this.context.inFunctionBody = previousInFunctionBody;\n\t        return this.finalize(node, new Node.BlockStatement(body));\n\t    };\n\t    Parser.prototype.validateParam = function (options, param, name) {\n\t        var key = '$' + name;\n\t        if (this.context.strict) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        else if (!options.firstRestricted) {\n\t            if (this.scanner.isRestrictedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictParamName;\n\t            }\n\t            else if (this.scanner.isStrictModeReservedWord(name)) {\n\t                options.firstRestricted = param;\n\t                options.message = messages_1.Messages.StrictReservedWord;\n\t            }\n\t            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\n\t                options.stricted = param;\n\t                options.message = messages_1.Messages.StrictParamDupe;\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        if (typeof Object.defineProperty === 'function') {\n\t            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\n\t        }\n\t        else {\n\t            options.paramSet[key] = true;\n\t        }\n\t    };\n\t    Parser.prototype.parseRestElement = function (params) {\n\t        var node = this.createNode();\n\t        this.expect('...');\n\t        var arg = this.parsePattern(params);\n\t        if (this.match('=')) {\n\t            this.throwError(messages_1.Messages.DefaultRestParameter);\n\t        }\n\t        if (!this.match(')')) {\n\t            this.throwError(messages_1.Messages.ParameterAfterRestParameter);\n\t        }\n\t        return this.finalize(node, new Node.RestElement(arg));\n\t    };\n\t    Parser.prototype.parseFormalParameter = function (options) {\n\t        var params = [];\n\t        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\n\t        for (var i = 0; i < params.length; i++) {\n\t            this.validateParam(options, params[i], params[i].value);\n\t        }\n\t        options.simple = options.simple && (param instanceof Node.Identifier);\n\t        options.params.push(param);\n\t    };\n\t    Parser.prototype.parseFormalParameters = function (firstRestricted) {\n\t        var options;\n\t        options = {\n\t            simple: true,\n\t            params: [],\n\t            firstRestricted: firstRestricted\n\t        };\n\t        this.expect('(');\n\t        if (!this.match(')')) {\n\t            options.paramSet = {};\n\t            while (this.lookahead.type !== 2 /* EOF */) {\n\t                this.parseFormalParameter(options);\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t                this.expect(',');\n\t                if (this.match(')')) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        this.expect(')');\n\t        return {\n\t            simple: options.simple,\n\t            params: options.params,\n\t            stricted: options.stricted,\n\t            firstRestricted: options.firstRestricted,\n\t            message: options.message\n\t        };\n\t    };\n\t    Parser.prototype.matchAsyncFunction = function () {\n\t        var match = this.matchContextualKeyword('async');\n\t        if (match) {\n\t            var state = this.scanner.saveState();\n\t            this.scanner.scanComments();\n\t            var next = this.scanner.lex();\n\t            this.scanner.restoreState(state);\n\t            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');\n\t        }\n\t        return match;\n\t    };\n\t    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var isAsync = this.matchContextualKeyword('async');\n\t        if (isAsync) {\n\t            this.nextToken();\n\t        }\n\t        this.expectKeyword('function');\n\t        var isGenerator = isAsync ? false : this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted = null;\n\t        if (!identifierIsOptional || !this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var previousAllowAwait = this.context.await;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.await = isAsync;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = formalParameters.simple;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        this.context.await = previousAllowAwait;\n\t        this.context.allowYield = previousAllowYield;\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :\n\t            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\n\t    };\n\t    Parser.prototype.parseFunctionExpression = function () {\n\t        var node = this.createNode();\n\t        var isAsync = this.matchContextualKeyword('async');\n\t        if (isAsync) {\n\t            this.nextToken();\n\t        }\n\t        this.expectKeyword('function');\n\t        var isGenerator = isAsync ? false : this.match('*');\n\t        if (isGenerator) {\n\t            this.nextToken();\n\t        }\n\t        var message;\n\t        var id = null;\n\t        var firstRestricted;\n\t        var previousAllowAwait = this.context.await;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.await = isAsync;\n\t        this.context.allowYield = !isGenerator;\n\t        if (!this.match('(')) {\n\t            var token = this.lookahead;\n\t            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\n\t            if (this.context.strict) {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);\n\t                }\n\t            }\n\t            else {\n\t                if (this.scanner.isRestrictedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictFunctionName;\n\t                }\n\t                else if (this.scanner.isStrictModeReservedWord(token.value)) {\n\t                    firstRestricted = token;\n\t                    message = messages_1.Messages.StrictReservedWord;\n\t                }\n\t            }\n\t        }\n\t        var formalParameters = this.parseFormalParameters(firstRestricted);\n\t        var params = formalParameters.params;\n\t        var stricted = formalParameters.stricted;\n\t        firstRestricted = formalParameters.firstRestricted;\n\t        if (formalParameters.message) {\n\t            message = formalParameters.message;\n\t        }\n\t        var previousStrict = this.context.strict;\n\t        var previousAllowStrictDirective = this.context.allowStrictDirective;\n\t        this.context.allowStrictDirective = formalParameters.simple;\n\t        var body = this.parseFunctionSourceElements();\n\t        if (this.context.strict && firstRestricted) {\n\t            this.throwUnexpectedToken(firstRestricted, message);\n\t        }\n\t        if (this.context.strict && stricted) {\n\t            this.tolerateUnexpectedToken(stricted, message);\n\t        }\n\t        this.context.strict = previousStrict;\n\t        this.context.allowStrictDirective = previousAllowStrictDirective;\n\t        this.context.await = previousAllowAwait;\n\t        this.context.allowYield = previousAllowYield;\n\t        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :\n\t            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\n\t    Parser.prototype.parseDirective = function () {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var expr = this.parseExpression();\n\t        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\n\t    };\n\t    Parser.prototype.parseDirectivePrologues = function () {\n\t        var firstRestricted = null;\n\t        var body = [];\n\t        while (true) {\n\t            var token = this.lookahead;\n\t            if (token.type !== 8 /* StringLiteral */) {\n\t                break;\n\t            }\n\t            var statement = this.parseDirective();\n\t            body.push(statement);\n\t            var directive = statement.directive;\n\t            if (typeof directive !== 'string') {\n\t                break;\n\t            }\n\t            if (directive === 'use strict') {\n\t                this.context.strict = true;\n\t                if (firstRestricted) {\n\t                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);\n\t                }\n\t                if (!this.context.allowStrictDirective) {\n\t                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);\n\t                }\n\t            }\n\t            else {\n\t                if (!firstRestricted && token.octal) {\n\t                    firstRestricted = token;\n\t                }\n\t            }\n\t        }\n\t        return body;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-method-definitions\n\t    Parser.prototype.qualifiedPropertyName = function (token) {\n\t        switch (token.type) {\n\t            case 3 /* Identifier */:\n\t            case 8 /* StringLiteral */:\n\t            case 1 /* BooleanLiteral */:\n\t            case 5 /* NullLiteral */:\n\t            case 6 /* NumericLiteral */:\n\t            case 4 /* Keyword */:\n\t                return true;\n\t            case 7 /* Punctuator */:\n\t                return token.value === '[';\n\t            default:\n\t                break;\n\t        }\n\t        return false;\n\t    };\n\t    Parser.prototype.parseGetterMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters();\n\t        if (formalParameters.params.length > 0) {\n\t            this.tolerateError(messages_1.Messages.BadGetterArity);\n\t        }\n\t        var method = this.parsePropertyMethod(formalParameters);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseSetterMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = false;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = !isGenerator;\n\t        var formalParameters = this.parseFormalParameters();\n\t        if (formalParameters.params.length !== 1) {\n\t            this.tolerateError(messages_1.Messages.BadSetterArity);\n\t        }\n\t        else if (formalParameters.params[0] instanceof Node.RestElement) {\n\t            this.tolerateError(messages_1.Messages.BadSetterRestParameter);\n\t        }\n\t        var method = this.parsePropertyMethod(formalParameters);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\n\t    };\n\t    Parser.prototype.parseGeneratorMethod = function () {\n\t        var node = this.createNode();\n\t        var isGenerator = true;\n\t        var previousAllowYield = this.context.allowYield;\n\t        this.context.allowYield = true;\n\t        var params = this.parseFormalParameters();\n\t        this.context.allowYield = false;\n\t        var method = this.parsePropertyMethod(params);\n\t        this.context.allowYield = previousAllowYield;\n\t        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-generator-function-definitions\n\t    Parser.prototype.isStartOfExpression = function () {\n\t        var start = true;\n\t        var value = this.lookahead.value;\n\t        switch (this.lookahead.type) {\n\t            case 7 /* Punctuator */:\n\t                start = (value === '[') || (value === '(') || (value === '{') ||\n\t                    (value === '+') || (value === '-') ||\n\t                    (value === '!') || (value === '~') ||\n\t                    (value === '++') || (value === '--') ||\n\t                    (value === '/') || (value === '/='); // regular expression literal\n\t                break;\n\t            case 4 /* Keyword */:\n\t                start = (value === 'class') || (value === 'delete') ||\n\t                    (value === 'function') || (value === 'let') || (value === 'new') ||\n\t                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\n\t                    (value === 'void') || (value === 'yield');\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return start;\n\t    };\n\t    Parser.prototype.parseYieldExpression = function () {\n\t        var node = this.createNode();\n\t        this.expectKeyword('yield');\n\t        var argument = null;\n\t        var delegate = false;\n\t        if (!this.hasLineTerminator) {\n\t            var previousAllowYield = this.context.allowYield;\n\t            this.context.allowYield = false;\n\t            delegate = this.match('*');\n\t            if (delegate) {\n\t                this.nextToken();\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            else if (this.isStartOfExpression()) {\n\t                argument = this.parseAssignmentExpression();\n\t            }\n\t            this.context.allowYield = previousAllowYield;\n\t        }\n\t        return this.finalize(node, new Node.YieldExpression(argument, delegate));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-class-definitions\n\t    Parser.prototype.parseClassElement = function (hasConstructor) {\n\t        var token = this.lookahead;\n\t        var node = this.createNode();\n\t        var kind = '';\n\t        var key = null;\n\t        var value = null;\n\t        var computed = false;\n\t        var method = false;\n\t        var isStatic = false;\n\t        var isAsync = false;\n\t        if (this.match('*')) {\n\t            this.nextToken();\n\t        }\n\t        else {\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            var id = key;\n\t            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\n\t                token = this.lookahead;\n\t                isStatic = true;\n\t                computed = this.match('[');\n\t                if (this.match('*')) {\n\t                    this.nextToken();\n\t                }\n\t                else {\n\t                    key = this.parseObjectPropertyKey();\n\t                }\n\t            }\n\t            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {\n\t                var punctuator = this.lookahead.value;\n\t                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\n\t                    isAsync = true;\n\t                    token = this.lookahead;\n\t                    key = this.parseObjectPropertyKey();\n\t                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {\n\t                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\n\t        if (token.type === 3 /* Identifier */) {\n\t            if (token.value === 'get' && lookaheadPropertyKey) {\n\t                kind = 'get';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                this.context.allowYield = false;\n\t                value = this.parseGetterMethod();\n\t            }\n\t            else if (token.value === 'set' && lookaheadPropertyKey) {\n\t                kind = 'set';\n\t                computed = this.match('[');\n\t                key = this.parseObjectPropertyKey();\n\t                value = this.parseSetterMethod();\n\t            }\n\t        }\n\t        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {\n\t            kind = 'init';\n\t            computed = this.match('[');\n\t            key = this.parseObjectPropertyKey();\n\t            value = this.parseGeneratorMethod();\n\t            method = true;\n\t        }\n\t        if (!kind && key && this.match('(')) {\n\t            kind = 'init';\n\t            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\n\t            method = true;\n\t        }\n\t        if (!kind) {\n\t            this.throwUnexpectedToken(this.lookahead);\n\t        }\n\t        if (kind === 'init') {\n\t            kind = 'method';\n\t        }\n\t        if (!computed) {\n\t            if (isStatic && this.isPropertyKey(key, 'prototype')) {\n\t                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);\n\t            }\n\t            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\n\t                if (kind !== 'method' || !method || (value && value.generator)) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);\n\t                }\n\t                if (hasConstructor.value) {\n\t                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);\n\t                }\n\t                else {\n\t                    hasConstructor.value = true;\n\t                }\n\t                kind = 'constructor';\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\n\t    };\n\t    Parser.prototype.parseClassElementList = function () {\n\t        var body = [];\n\t        var hasConstructor = { value: false };\n\t        this.expect('{');\n\t        while (!this.match('}')) {\n\t            if (this.match(';')) {\n\t                this.nextToken();\n\t            }\n\t            else {\n\t                body.push(this.parseClassElement(hasConstructor));\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return body;\n\t    };\n\t    Parser.prototype.parseClassBody = function () {\n\t        var node = this.createNode();\n\t        var elementList = this.parseClassElementList();\n\t        return this.finalize(node, new Node.ClassBody(elementList));\n\t    };\n\t    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));\n\t    };\n\t    Parser.prototype.parseClassExpression = function () {\n\t        var node = this.createNode();\n\t        var previousStrict = this.context.strict;\n\t        this.context.strict = true;\n\t        this.expectKeyword('class');\n\t        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;\n\t        var superClass = null;\n\t        if (this.matchKeyword('extends')) {\n\t            this.nextToken();\n\t            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\n\t        }\n\t        var classBody = this.parseClassBody();\n\t        this.context.strict = previousStrict;\n\t        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-scripts\n\t    // https://tc39.github.io/ecma262/#sec-modules\n\t    Parser.prototype.parseModule = function () {\n\t        this.context.strict = true;\n\t        this.context.isModule = true;\n\t        this.scanner.isModule = true;\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Module(body));\n\t    };\n\t    Parser.prototype.parseScript = function () {\n\t        var node = this.createNode();\n\t        var body = this.parseDirectivePrologues();\n\t        while (this.lookahead.type !== 2 /* EOF */) {\n\t            body.push(this.parseStatementListItem());\n\t        }\n\t        return this.finalize(node, new Node.Script(body));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-imports\n\t    Parser.prototype.parseModuleSpecifier = function () {\n\t        var node = this.createNode();\n\t        if (this.lookahead.type !== 8 /* StringLiteral */) {\n\t            this.throwError(messages_1.Messages.InvalidModuleSpecifier);\n\t        }\n\t        var token = this.nextToken();\n\t        var raw = this.getTokenRaw(token);\n\t        return this.finalize(node, new Node.Literal(token.value, raw));\n\t    };\n\t    // import {<foo as bar>} ...;\n\t    Parser.prototype.parseImportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var imported;\n\t        var local;\n\t        if (this.lookahead.type === 3 /* Identifier */) {\n\t            imported = this.parseVariableIdentifier();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t        }\n\t        else {\n\t            imported = this.parseIdentifierName();\n\t            local = imported;\n\t            if (this.matchContextualKeyword('as')) {\n\t                this.nextToken();\n\t                local = this.parseVariableIdentifier();\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t        }\n\t        return this.finalize(node, new Node.ImportSpecifier(local, imported));\n\t    };\n\t    // {foo, bar as bas}\n\t    Parser.prototype.parseNamedImports = function () {\n\t        this.expect('{');\n\t        var specifiers = [];\n\t        while (!this.match('}')) {\n\t            specifiers.push(this.parseImportSpecifier());\n\t            if (!this.match('}')) {\n\t                this.expect(',');\n\t            }\n\t        }\n\t        this.expect('}');\n\t        return specifiers;\n\t    };\n\t    // import <foo> ...;\n\t    Parser.prototype.parseImportDefaultSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\n\t    };\n\t    // import <* as foo> ...;\n\t    Parser.prototype.parseImportNamespaceSpecifier = function () {\n\t        var node = this.createNode();\n\t        this.expect('*');\n\t        if (!this.matchContextualKeyword('as')) {\n\t            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);\n\t        }\n\t        this.nextToken();\n\t        var local = this.parseIdentifierName();\n\t        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\n\t    };\n\t    Parser.prototype.parseImportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalImportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('import');\n\t        var src;\n\t        var specifiers = [];\n\t        if (this.lookahead.type === 8 /* StringLiteral */) {\n\t            // import 'foo';\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        else {\n\t            if (this.match('{')) {\n\t                // import {bar}\n\t                specifiers = specifiers.concat(this.parseNamedImports());\n\t            }\n\t            else if (this.match('*')) {\n\t                // import * as foo\n\t                specifiers.push(this.parseImportNamespaceSpecifier());\n\t            }\n\t            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\n\t                // import foo\n\t                specifiers.push(this.parseImportDefaultSpecifier());\n\t                if (this.match(',')) {\n\t                    this.nextToken();\n\t                    if (this.match('*')) {\n\t                        // import foo, * as foo\n\t                        specifiers.push(this.parseImportNamespaceSpecifier());\n\t                    }\n\t                    else if (this.match('{')) {\n\t                        // import foo, {bar}\n\t                        specifiers = specifiers.concat(this.parseNamedImports());\n\t                    }\n\t                    else {\n\t                        this.throwUnexpectedToken(this.lookahead);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken(this.nextToken());\n\t            }\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            src = this.parseModuleSpecifier();\n\t        }\n\t        this.consumeSemicolon();\n\t        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-exports\n\t    Parser.prototype.parseExportSpecifier = function () {\n\t        var node = this.createNode();\n\t        var local = this.parseIdentifierName();\n\t        var exported = local;\n\t        if (this.matchContextualKeyword('as')) {\n\t            this.nextToken();\n\t            exported = this.parseIdentifierName();\n\t        }\n\t        return this.finalize(node, new Node.ExportSpecifier(local, exported));\n\t    };\n\t    Parser.prototype.parseExportDeclaration = function () {\n\t        if (this.context.inFunctionBody) {\n\t            this.throwError(messages_1.Messages.IllegalExportDeclaration);\n\t        }\n\t        var node = this.createNode();\n\t        this.expectKeyword('export');\n\t        var exportDeclaration;\n\t        if (this.matchKeyword('default')) {\n\t            // export default ...\n\t            this.nextToken();\n\t            if (this.matchKeyword('function')) {\n\t                // export default function foo () {}\n\t                // export default function () {}\n\t                var declaration = this.parseFunctionDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchKeyword('class')) {\n\t                // export default class foo {}\n\t                var declaration = this.parseClassDeclaration(true);\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else if (this.matchContextualKeyword('async')) {\n\t                // export default async function f () {}\n\t                // export default async function () {}\n\t                // export default async x => x\n\t                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t            else {\n\t                if (this.matchContextualKeyword('from')) {\n\t                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);\n\t                }\n\t                // export default {};\n\t                // export default [];\n\t                // export default (1 + 2);\n\t                var declaration = this.match('{') ? this.parseObjectInitializer() :\n\t                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\n\t                this.consumeSemicolon();\n\t                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\n\t            }\n\t        }\n\t        else if (this.match('*')) {\n\t            // export * from 'foo';\n\t            this.nextToken();\n\t            if (!this.matchContextualKeyword('from')) {\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            this.nextToken();\n\t            var src = this.parseModuleSpecifier();\n\t            this.consumeSemicolon();\n\t            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\n\t        }\n\t        else if (this.lookahead.type === 4 /* Keyword */) {\n\t            // export var f = 1;\n\t            var declaration = void 0;\n\t            switch (this.lookahead.value) {\n\t                case 'let':\n\t                case 'const':\n\t                    declaration = this.parseLexicalDeclaration({ inFor: false });\n\t                    break;\n\t                case 'var':\n\t                case 'class':\n\t                case 'function':\n\t                    declaration = this.parseStatementListItem();\n\t                    break;\n\t                default:\n\t                    this.throwUnexpectedToken(this.lookahead);\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else if (this.matchAsyncFunction()) {\n\t            var declaration = this.parseFunctionDeclaration();\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\n\t        }\n\t        else {\n\t            var specifiers = [];\n\t            var source = null;\n\t            var isExportFromIdentifier = false;\n\t            this.expect('{');\n\t            while (!this.match('}')) {\n\t                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\n\t                specifiers.push(this.parseExportSpecifier());\n\t                if (!this.match('}')) {\n\t                    this.expect(',');\n\t                }\n\t            }\n\t            this.expect('}');\n\t            if (this.matchContextualKeyword('from')) {\n\t                // export {default} from 'foo';\n\t                // export {foo} from 'foo';\n\t                this.nextToken();\n\t                source = this.parseModuleSpecifier();\n\t                this.consumeSemicolon();\n\t            }\n\t            else if (isExportFromIdentifier) {\n\t                // export {default}; // missing fromClause\n\t                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;\n\t                this.throwError(message, this.lookahead.value);\n\t            }\n\t            else {\n\t                // export {foo};\n\t                this.consumeSemicolon();\n\t            }\n\t            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\n\t        }\n\t        return exportDeclaration;\n\t    };\n\t    return Parser;\n\t}());\n\texports.Parser = Parser;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Ensure the condition is true, otherwise throw an error.\n\t// This is only to have a better contract semantic, i.e. another safety net\n\t// to catch a logic error. The condition shall be fulfilled in normal case.\n\t// Do NOT use this to enforce a certain condition on any user input.\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tfunction assert(condition, message) {\n\t    /* istanbul ignore if */\n\t    if (!condition) {\n\t        throw new Error('ASSERT: ' + message);\n\t    }\n\t}\n\texports.assert = assert;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/* tslint:disable:max-classes-per-file */\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar ErrorHandler = (function () {\n\t    function ErrorHandler() {\n\t        this.errors = [];\n\t        this.tolerant = false;\n\t    }\n\t    ErrorHandler.prototype.recordError = function (error) {\n\t        this.errors.push(error);\n\t    };\n\t    ErrorHandler.prototype.tolerate = function (error) {\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    ErrorHandler.prototype.constructError = function (msg, column) {\n\t        var error = new Error(msg);\n\t        try {\n\t            throw error;\n\t        }\n\t        catch (base) {\n\t            /* istanbul ignore else */\n\t            if (Object.create && Object.defineProperty) {\n\t                error = Object.create(base);\n\t                Object.defineProperty(error, 'column', { value: column });\n\t            }\n\t        }\n\t        /* istanbul ignore next */\n\t        return error;\n\t    };\n\t    ErrorHandler.prototype.createError = function (index, line, col, description) {\n\t        var msg = 'Line ' + line + ': ' + description;\n\t        var error = this.constructError(msg, col);\n\t        error.index = index;\n\t        error.lineNumber = line;\n\t        error.description = description;\n\t        return error;\n\t    };\n\t    ErrorHandler.prototype.throwError = function (index, line, col, description) {\n\t        throw this.createError(index, line, col, description);\n\t    };\n\t    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {\n\t        var error = this.createError(index, line, col, description);\n\t        if (this.tolerant) {\n\t            this.recordError(error);\n\t        }\n\t        else {\n\t            throw error;\n\t        }\n\t    };\n\t    return ErrorHandler;\n\t}());\n\texports.ErrorHandler = ErrorHandler;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t// Error messages should be identical to V8.\n\texports.Messages = {\n\t    BadGetterArity: 'Getter must not have any formal parameters',\n\t    BadSetterArity: 'Setter must have exactly one formal parameter',\n\t    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\n\t    ConstructorIsAsync: 'Class constructor may not be an async method',\n\t    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\n\t    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\n\t    DefaultRestParameter: 'Unexpected token =',\n\t    DuplicateBinding: 'Duplicate binding %0',\n\t    DuplicateConstructor: 'A class may only have one constructor',\n\t    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\n\t    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\n\t    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\n\t    IllegalBreak: 'Illegal break statement',\n\t    IllegalContinue: 'Illegal continue statement',\n\t    IllegalExportDeclaration: 'Unexpected token',\n\t    IllegalImportDeclaration: 'Unexpected token',\n\t    IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\n\t    IllegalReturn: 'Illegal return statement',\n\t    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\n\t    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\n\t    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\n\t    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\n\t    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\n\t    InvalidModuleSpecifier: 'Unexpected token',\n\t    InvalidRegExp: 'Invalid regular expression',\n\t    LetInLexicalBinding: 'let is disallowed as a lexically bound name',\n\t    MissingFromClause: 'Unexpected token',\n\t    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n\t    NewlineAfterThrow: 'Illegal newline after throw',\n\t    NoAsAfterImportNamespace: 'Unexpected token',\n\t    NoCatchOrFinally: 'Missing catch or finally after try',\n\t    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\n\t    Redeclaration: '%0 \\'%1\\' has already been declared',\n\t    StaticPrototype: 'Classes may not have static property named prototype',\n\t    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\n\t    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\n\t    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\n\t    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\n\t    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\n\t    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n\t    StrictModeWith: 'Strict mode code may not include a with statement',\n\t    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\n\t    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n\t    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\n\t    StrictReservedWord: 'Use of future reserved word in strict mode',\n\t    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\n\t    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\n\t    UnexpectedEOS: 'Unexpected end of input',\n\t    UnexpectedIdentifier: 'Unexpected identifier',\n\t    UnexpectedNumber: 'Unexpected number',\n\t    UnexpectedReserved: 'Unexpected reserved word',\n\t    UnexpectedString: 'Unexpected string',\n\t    UnexpectedTemplate: 'Unexpected quasi %0',\n\t    UnexpectedToken: 'Unexpected token %0',\n\t    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\n\t    UnknownLabel: 'Undefined label \\'%0\\'',\n\t    UnterminatedRegExp: 'Invalid regular expression: missing /'\n\t};\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar assert_1 = __webpack_require__(9);\n\tvar character_1 = __webpack_require__(4);\n\tvar messages_1 = __webpack_require__(11);\n\tfunction hexValue(ch) {\n\t    return '0123456789abcdef'.indexOf(ch.toLowerCase());\n\t}\n\tfunction octalValue(ch) {\n\t    return '01234567'.indexOf(ch);\n\t}\n\tvar Scanner = (function () {\n\t    function Scanner(code, handler) {\n\t        this.source = code;\n\t        this.errorHandler = handler;\n\t        this.trackComment = false;\n\t        this.isModule = false;\n\t        this.length = code.length;\n\t        this.index = 0;\n\t        this.lineNumber = (code.length > 0) ? 1 : 0;\n\t        this.lineStart = 0;\n\t        this.curlyStack = [];\n\t    }\n\t    Scanner.prototype.saveState = function () {\n\t        return {\n\t            index: this.index,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart\n\t        };\n\t    };\n\t    Scanner.prototype.restoreState = function (state) {\n\t        this.index = state.index;\n\t        this.lineNumber = state.lineNumber;\n\t        this.lineStart = state.lineStart;\n\t    };\n\t    Scanner.prototype.eof = function () {\n\t        return this.index >= this.length;\n\t    };\n\t    Scanner.prototype.throwUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    Scanner.prototype.tolerateUnexpectedToken = function (message) {\n\t        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }\n\t        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-comments\n\t    Scanner.prototype.skipSingleLineComment = function (offset) {\n\t        var comments = [];\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - offset;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - offset\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            ++this.index;\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (this.trackComment) {\n\t                    loc.end = {\n\t                        line: this.lineNumber,\n\t                        column: this.index - this.lineStart - 1\n\t                    };\n\t                    var entry = {\n\t                        multiLine: false,\n\t                        slice: [start + offset, this.index - 1],\n\t                        range: [start, this.index - 1],\n\t                        loc: loc\n\t                    };\n\t                    comments.push(entry);\n\t                }\n\t                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                return comments;\n\t            }\n\t        }\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: false,\n\t                slice: [start + offset, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        return comments;\n\t    };\n\t    Scanner.prototype.skipMultiLineComment = function () {\n\t        var comments = [];\n\t        var start, loc;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t            start = this.index - 2;\n\t            loc = {\n\t                start: {\n\t                    line: this.lineNumber,\n\t                    column: this.index - this.lineStart - 2\n\t                },\n\t                end: {}\n\t            };\n\t        }\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isLineTerminator(ch)) {\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                ++this.index;\n\t                this.lineStart = this.index;\n\t            }\n\t            else if (ch === 0x2A) {\n\t                // Block comment ends with '*/'.\n\t                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\n\t                    this.index += 2;\n\t                    if (this.trackComment) {\n\t                        loc.end = {\n\t                            line: this.lineNumber,\n\t                            column: this.index - this.lineStart\n\t                        };\n\t                        var entry = {\n\t                            multiLine: true,\n\t                            slice: [start + 2, this.index - 2],\n\t                            range: [start, this.index],\n\t                            loc: loc\n\t                        };\n\t                        comments.push(entry);\n\t                    }\n\t                    return comments;\n\t                }\n\t                ++this.index;\n\t            }\n\t            else {\n\t                ++this.index;\n\t            }\n\t        }\n\t        // Ran off the end of the file - the whole thing is a comment\n\t        if (this.trackComment) {\n\t            loc.end = {\n\t                line: this.lineNumber,\n\t                column: this.index - this.lineStart\n\t            };\n\t            var entry = {\n\t                multiLine: true,\n\t                slice: [start + 2, this.index],\n\t                range: [start, this.index],\n\t                loc: loc\n\t            };\n\t            comments.push(entry);\n\t        }\n\t        this.tolerateUnexpectedToken();\n\t        return comments;\n\t    };\n\t    Scanner.prototype.scanComments = function () {\n\t        var comments;\n\t        if (this.trackComment) {\n\t            comments = [];\n\t        }\n\t        var start = (this.index === 0);\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (character_1.Character.isWhiteSpace(ch)) {\n\t                ++this.index;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch)) {\n\t                ++this.index;\n\t                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\n\t                    ++this.index;\n\t                }\n\t                ++this.lineNumber;\n\t                this.lineStart = this.index;\n\t                start = true;\n\t            }\n\t            else if (ch === 0x2F) {\n\t                ch = this.source.charCodeAt(this.index + 1);\n\t                if (ch === 0x2F) {\n\t                    this.index += 2;\n\t                    var comment = this.skipSingleLineComment(2);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                    start = true;\n\t                }\n\t                else if (ch === 0x2A) {\n\t                    this.index += 2;\n\t                    var comment = this.skipMultiLineComment();\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (start && ch === 0x2D) {\n\t                // U+003E is '>'\n\t                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\n\t                    // '-->' is a single-line comment\n\t                    this.index += 3;\n\t                    var comment = this.skipSingleLineComment(3);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else if (ch === 0x3C && !this.isModule) {\n\t                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\n\t                    this.index += 4; // `<!--`\n\t                    var comment = this.skipSingleLineComment(4);\n\t                    if (this.trackComment) {\n\t                        comments = comments.concat(comment);\n\t                    }\n\t                }\n\t                else {\n\t                    break;\n\t                }\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return comments;\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-future-reserved-words\n\t    Scanner.prototype.isFutureReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'enum':\n\t            case 'export':\n\t            case 'import':\n\t            case 'super':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.isStrictModeReservedWord = function (id) {\n\t        switch (id) {\n\t            case 'implements':\n\t            case 'interface':\n\t            case 'package':\n\t            case 'private':\n\t            case 'protected':\n\t            case 'public':\n\t            case 'static':\n\t            case 'yield':\n\t            case 'let':\n\t                return true;\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.isRestrictedWord = function (id) {\n\t        return id === 'eval' || id === 'arguments';\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-keywords\n\t    Scanner.prototype.isKeyword = function (id) {\n\t        switch (id.length) {\n\t            case 2:\n\t                return (id === 'if') || (id === 'in') || (id === 'do');\n\t            case 3:\n\t                return (id === 'var') || (id === 'for') || (id === 'new') ||\n\t                    (id === 'try') || (id === 'let');\n\t            case 4:\n\t                return (id === 'this') || (id === 'else') || (id === 'case') ||\n\t                    (id === 'void') || (id === 'with') || (id === 'enum');\n\t            case 5:\n\t                return (id === 'while') || (id === 'break') || (id === 'catch') ||\n\t                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\n\t                    (id === 'class') || (id === 'super');\n\t            case 6:\n\t                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n\t                    (id === 'switch') || (id === 'export') || (id === 'import');\n\t            case 7:\n\t                return (id === 'default') || (id === 'finally') || (id === 'extends');\n\t            case 8:\n\t                return (id === 'function') || (id === 'continue') || (id === 'debugger');\n\t            case 10:\n\t                return (id === 'instanceof');\n\t            default:\n\t                return false;\n\t        }\n\t    };\n\t    Scanner.prototype.codePointAt = function (i) {\n\t        var cp = this.source.charCodeAt(i);\n\t        if (cp >= 0xD800 && cp <= 0xDBFF) {\n\t            var second = this.source.charCodeAt(i + 1);\n\t            if (second >= 0xDC00 && second <= 0xDFFF) {\n\t                var first = cp;\n\t                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t            }\n\t        }\n\t        return cp;\n\t    };\n\t    Scanner.prototype.scanHexEscape = function (prefix) {\n\t        var len = (prefix === 'u') ? 4 : 2;\n\t        var code = 0;\n\t        for (var i = 0; i < len; ++i) {\n\t            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 16 + hexValue(this.source[this.index++]);\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        }\n\t        return String.fromCharCode(code);\n\t    };\n\t    Scanner.prototype.scanUnicodeCodePointEscape = function () {\n\t        var ch = this.source[this.index];\n\t        var code = 0;\n\t        // At least, one hex digit is required.\n\t        if (ch === '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            code = code * 16 + hexValue(ch);\n\t        }\n\t        if (code > 0x10FFFF || ch !== '}') {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return character_1.Character.fromCodePoint(code);\n\t    };\n\t    Scanner.prototype.getIdentifier = function () {\n\t        var start = this.index++;\n\t        while (!this.eof()) {\n\t            var ch = this.source.charCodeAt(this.index);\n\t            if (ch === 0x5C) {\n\t                // Blackslash (U+005C) marks Unicode escape sequence.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            else if (ch >= 0xD800 && ch < 0xDFFF) {\n\t                // Need to handle surrogate pairs.\n\t                this.index = start;\n\t                return this.getComplexIdentifier();\n\t            }\n\t            if (character_1.Character.isIdentifierPart(ch)) {\n\t                ++this.index;\n\t            }\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t        return this.source.slice(start, this.index);\n\t    };\n\t    Scanner.prototype.getComplexIdentifier = function () {\n\t        var cp = this.codePointAt(this.index);\n\t        var id = character_1.Character.fromCodePoint(cp);\n\t        this.index += id.length;\n\t        // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t        var ch;\n\t        if (cp === 0x5C) {\n\t            if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t            ++this.index;\n\t            if (this.source[this.index] === '{') {\n\t                ++this.index;\n\t                ch = this.scanUnicodeCodePointEscape();\n\t            }\n\t            else {\n\t                ch = this.scanHexEscape('u');\n\t                if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t            }\n\t            id = ch;\n\t        }\n\t        while (!this.eof()) {\n\t            cp = this.codePointAt(this.index);\n\t            if (!character_1.Character.isIdentifierPart(cp)) {\n\t                break;\n\t            }\n\t            ch = character_1.Character.fromCodePoint(cp);\n\t            id += ch;\n\t            this.index += ch.length;\n\t            // '\\u' (U+005C, U+0075) denotes an escaped character.\n\t            if (cp === 0x5C) {\n\t                id = id.substr(0, id.length - 1);\n\t                if (this.source.charCodeAt(this.index) !== 0x75) {\n\t                    this.throwUnexpectedToken();\n\t                }\n\t                ++this.index;\n\t                if (this.source[this.index] === '{') {\n\t                    ++this.index;\n\t                    ch = this.scanUnicodeCodePointEscape();\n\t                }\n\t                else {\n\t                    ch = this.scanHexEscape('u');\n\t                    if (ch === null || ch === '\\\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                        this.throwUnexpectedToken();\n\t                    }\n\t                }\n\t                id += ch;\n\t            }\n\t        }\n\t        return id;\n\t    };\n\t    Scanner.prototype.octalToDecimal = function (ch) {\n\t        // \\0 is not octal escape sequence\n\t        var octal = (ch !== '0');\n\t        var code = octalValue(ch);\n\t        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t            octal = true;\n\t            code = code * 8 + octalValue(this.source[this.index++]);\n\t            // 3 digits are only allowed when string starts\n\t            // with 0, 1, 2, 3\n\t            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                code = code * 8 + octalValue(this.source[this.index++]);\n\t            }\n\t        }\n\t        return {\n\t            code: code,\n\t            octal: octal\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-names-and-keywords\n\t    Scanner.prototype.scanIdentifier = function () {\n\t        var type;\n\t        var start = this.index;\n\t        // Backslash (U+005C) starts an escaped character.\n\t        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\n\t        // There is no keyword or literal with only one character.\n\t        // Thus, it must be an identifier.\n\t        if (id.length === 1) {\n\t            type = 3 /* Identifier */;\n\t        }\n\t        else if (this.isKeyword(id)) {\n\t            type = 4 /* Keyword */;\n\t        }\n\t        else if (id === 'null') {\n\t            type = 5 /* NullLiteral */;\n\t        }\n\t        else if (id === 'true' || id === 'false') {\n\t            type = 1 /* BooleanLiteral */;\n\t        }\n\t        else {\n\t            type = 3 /* Identifier */;\n\t        }\n\t        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {\n\t            var restore = this.index;\n\t            this.index = start;\n\t            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);\n\t            this.index = restore;\n\t        }\n\t        return {\n\t            type: type,\n\t            value: id,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-punctuators\n\t    Scanner.prototype.scanPunctuator = function () {\n\t        var start = this.index;\n\t        // Check for most common single-character punctuators.\n\t        var str = this.source[this.index];\n\t        switch (str) {\n\t            case '(':\n\t            case '{':\n\t                if (str === '{') {\n\t                    this.curlyStack.push('{');\n\t                }\n\t                ++this.index;\n\t                break;\n\t            case '.':\n\t                ++this.index;\n\t                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\n\t                    // Spread operator: ...\n\t                    this.index += 2;\n\t                    str = '...';\n\t                }\n\t                break;\n\t            case '}':\n\t                ++this.index;\n\t                this.curlyStack.pop();\n\t                break;\n\t            case ')':\n\t            case ';':\n\t            case ',':\n\t            case '[':\n\t            case ']':\n\t            case ':':\n\t            case '?':\n\t            case '~':\n\t                ++this.index;\n\t                break;\n\t            default:\n\t                // 4-character punctuator.\n\t                str = this.source.substr(this.index, 4);\n\t                if (str === '>>>=') {\n\t                    this.index += 4;\n\t                }\n\t                else {\n\t                    // 3-character punctuators.\n\t                    str = str.substr(0, 3);\n\t                    if (str === '===' || str === '!==' || str === '>>>' ||\n\t                        str === '<<=' || str === '>>=' || str === '**=') {\n\t                        this.index += 3;\n\t                    }\n\t                    else {\n\t                        // 2-character punctuators.\n\t                        str = str.substr(0, 2);\n\t                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\n\t                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\n\t                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\n\t                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\n\t                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\n\t                            this.index += 2;\n\t                        }\n\t                        else {\n\t                            // 1-character punctuators.\n\t                            str = this.source[this.index];\n\t                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\n\t                                ++this.index;\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t        }\n\t        if (this.index === start) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 7 /* Punctuator */,\n\t            value: str,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\n\t    Scanner.prototype.scanHexLiteral = function (start) {\n\t        var num = '';\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (num.length === 0) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt('0x' + num, 16),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.scanBinaryLiteral = function (start) {\n\t        var num = '';\n\t        var ch;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index];\n\t            if (ch !== '0' && ch !== '1') {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (num.length === 0) {\n\t            // only 0b or 0B\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!this.eof()) {\n\t            ch = this.source.charCodeAt(this.index);\n\t            /* istanbul ignore else */\n\t            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt(num, 2),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.scanOctalLiteral = function (prefix, start) {\n\t        var num = '';\n\t        var octal = false;\n\t        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {\n\t            octal = true;\n\t            num = '0' + this.source[this.index++];\n\t        }\n\t        else {\n\t            ++this.index;\n\t        }\n\t        while (!this.eof()) {\n\t            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {\n\t                break;\n\t            }\n\t            num += this.source[this.index++];\n\t        }\n\t        if (!octal && num.length === 0) {\n\t            // only 0o or 0O\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseInt(num, 8),\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.isImplicitOctalLiteral = function () {\n\t        // Implicit octal, unless there is a non-octal digit.\n\t        // (Annex B.1.1 on Numeric Literals)\n\t        for (var i = this.index + 1; i < this.length; ++i) {\n\t            var ch = this.source[i];\n\t            if (ch === '8' || ch === '9') {\n\t                return false;\n\t            }\n\t            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                return true;\n\t            }\n\t        }\n\t        return true;\n\t    };\n\t    Scanner.prototype.scanNumericLiteral = function () {\n\t        var start = this.index;\n\t        var ch = this.source[start];\n\t        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');\n\t        var num = '';\n\t        if (ch !== '.') {\n\t            num = this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            // Hex number starts with '0x'.\n\t            // Octal number starts with '0'.\n\t            // Octal number in ES6 starts with '0o'.\n\t            // Binary number in ES6 starts with '0b'.\n\t            if (num === '0') {\n\t                if (ch === 'x' || ch === 'X') {\n\t                    ++this.index;\n\t                    return this.scanHexLiteral(start);\n\t                }\n\t                if (ch === 'b' || ch === 'B') {\n\t                    ++this.index;\n\t                    return this.scanBinaryLiteral(start);\n\t                }\n\t                if (ch === 'o' || ch === 'O') {\n\t                    return this.scanOctalLiteral(ch, start);\n\t                }\n\t                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                    if (this.isImplicitOctalLiteral()) {\n\t                        return this.scanOctalLiteral(ch, start);\n\t                    }\n\t                }\n\t            }\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                num += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === '.') {\n\t            num += this.source[this.index++];\n\t            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                num += this.source[this.index++];\n\t            }\n\t            ch = this.source[this.index];\n\t        }\n\t        if (ch === 'e' || ch === 'E') {\n\t            num += this.source[this.index++];\n\t            ch = this.source[this.index];\n\t            if (ch === '+' || ch === '-') {\n\t                num += this.source[this.index++];\n\t            }\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                    num += this.source[this.index++];\n\t                }\n\t            }\n\t            else {\n\t                this.throwUnexpectedToken();\n\t            }\n\t        }\n\t        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 6 /* NumericLiteral */,\n\t            value: parseFloat(num),\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-string-literals\n\t    Scanner.prototype.scanStringLiteral = function () {\n\t        var start = this.index;\n\t        var quote = this.source[start];\n\t        assert_1.assert((quote === '\\'' || quote === '\"'), 'String literal must starts with a quote');\n\t        ++this.index;\n\t        var octal = false;\n\t        var str = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === quote) {\n\t                quote = '';\n\t                break;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'u':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                str += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var unescaped_1 = this.scanHexEscape(ch);\n\t                                if (unescaped_1 === null) {\n\t                                    this.throwUnexpectedToken();\n\t                                }\n\t                                str += unescaped_1;\n\t                            }\n\t                            break;\n\t                        case 'x':\n\t                            var unescaped = this.scanHexEscape(ch);\n\t                            if (unescaped === null) {\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n\t                            }\n\t                            str += unescaped;\n\t                            break;\n\t                        case 'n':\n\t                            str += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            str += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            str += '\\t';\n\t                            break;\n\t                        case 'b':\n\t                            str += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            str += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            str += '\\x0B';\n\t                            break;\n\t                        case '8':\n\t                        case '9':\n\t                            str += ch;\n\t                            this.tolerateUnexpectedToken();\n\t                            break;\n\t                        default:\n\t                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                var octToDec = this.octalToDecimal(ch);\n\t                                octal = octToDec.octal || octal;\n\t                                str += String.fromCharCode(octToDec.code);\n\t                            }\n\t                            else {\n\t                                str += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            else {\n\t                str += ch;\n\t            }\n\t        }\n\t        if (quote !== '') {\n\t            this.index = start;\n\t            this.throwUnexpectedToken();\n\t        }\n\t        return {\n\t            type: 8 /* StringLiteral */,\n\t            value: str,\n\t            octal: octal,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\n\t    Scanner.prototype.scanTemplate = function () {\n\t        var cooked = '';\n\t        var terminated = false;\n\t        var start = this.index;\n\t        var head = (this.source[start] === '`');\n\t        var tail = false;\n\t        var rawOffset = 2;\n\t        ++this.index;\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index++];\n\t            if (ch === '`') {\n\t                rawOffset = 1;\n\t                tail = true;\n\t                terminated = true;\n\t                break;\n\t            }\n\t            else if (ch === '$') {\n\t                if (this.source[this.index] === '{') {\n\t                    this.curlyStack.push('${');\n\t                    ++this.index;\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                cooked += ch;\n\t            }\n\t            else if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    switch (ch) {\n\t                        case 'n':\n\t                            cooked += '\\n';\n\t                            break;\n\t                        case 'r':\n\t                            cooked += '\\r';\n\t                            break;\n\t                        case 't':\n\t                            cooked += '\\t';\n\t                            break;\n\t                        case 'u':\n\t                            if (this.source[this.index] === '{') {\n\t                                ++this.index;\n\t                                cooked += this.scanUnicodeCodePointEscape();\n\t                            }\n\t                            else {\n\t                                var restore = this.index;\n\t                                var unescaped_2 = this.scanHexEscape(ch);\n\t                                if (unescaped_2 !== null) {\n\t                                    cooked += unescaped_2;\n\t                                }\n\t                                else {\n\t                                    this.index = restore;\n\t                                    cooked += ch;\n\t                                }\n\t                            }\n\t                            break;\n\t                        case 'x':\n\t                            var unescaped = this.scanHexEscape(ch);\n\t                            if (unescaped === null) {\n\t                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);\n\t                            }\n\t                            cooked += unescaped;\n\t                            break;\n\t                        case 'b':\n\t                            cooked += '\\b';\n\t                            break;\n\t                        case 'f':\n\t                            cooked += '\\f';\n\t                            break;\n\t                        case 'v':\n\t                            cooked += '\\v';\n\t                            break;\n\t                        default:\n\t                            if (ch === '0') {\n\t                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\n\t                                    // Illegal: \\01 \\02 and so on\n\t                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                                }\n\t                                cooked += '\\0';\n\t                            }\n\t                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {\n\t                                // Illegal: \\1 \\2\n\t                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);\n\t                            }\n\t                            else {\n\t                                cooked += ch;\n\t                            }\n\t                            break;\n\t                    }\n\t                }\n\t                else {\n\t                    ++this.lineNumber;\n\t                    if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                        ++this.index;\n\t                    }\n\t                    this.lineStart = this.index;\n\t                }\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                ++this.lineNumber;\n\t                if (ch === '\\r' && this.source[this.index] === '\\n') {\n\t                    ++this.index;\n\t                }\n\t                this.lineStart = this.index;\n\t                cooked += '\\n';\n\t            }\n\t            else {\n\t                cooked += ch;\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken();\n\t        }\n\t        if (!head) {\n\t            this.curlyStack.pop();\n\t        }\n\t        return {\n\t            type: 10 /* Template */,\n\t            value: this.source.slice(start + 1, this.index - rawOffset),\n\t            cooked: cooked,\n\t            head: head,\n\t            tail: tail,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\t    Scanner.prototype.testRegExp = function (pattern, flags) {\n\t        // The BMP character to use as a replacement for astral symbols when\n\t        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\n\t        // approximation.\n\t        // Note: replacing with '\\uFFFF' enables false positives in unlikely\n\t        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\n\t        // pattern that would not be detected by this substitution.\n\t        var astralSubstitute = '\\uFFFF';\n\t        var tmp = pattern;\n\t        var self = this;\n\t        if (flags.indexOf('u') >= 0) {\n\t            tmp = tmp\n\t                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {\n\t                var codePoint = parseInt($1 || $2, 16);\n\t                if (codePoint > 0x10FFFF) {\n\t                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t                }\n\t                if (codePoint <= 0xFFFF) {\n\t                    return String.fromCharCode(codePoint);\n\t                }\n\t                return astralSubstitute;\n\t            })\n\t                .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, astralSubstitute);\n\t        }\n\t        // First, detect invalid regular expressions.\n\t        try {\n\t            RegExp(tmp);\n\t        }\n\t        catch (e) {\n\t            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);\n\t        }\n\t        // Return a regular expression object for this pattern-flag pair, or\n\t        // `null` in case the current environment doesn't support the flags it\n\t        // uses.\n\t        try {\n\t            return new RegExp(pattern, flags);\n\t        }\n\t        catch (exception) {\n\t            /* istanbul ignore next */\n\t            return null;\n\t        }\n\t    };\n\t    Scanner.prototype.scanRegExpBody = function () {\n\t        var ch = this.source[this.index];\n\t        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');\n\t        var str = this.source[this.index++];\n\t        var classMarker = false;\n\t        var terminated = false;\n\t        while (!this.eof()) {\n\t            ch = this.source[this.index++];\n\t            str += ch;\n\t            if (ch === '\\\\') {\n\t                ch = this.source[this.index++];\n\t                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\n\t                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t                }\n\t                str += ch;\n\t            }\n\t            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {\n\t                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t            }\n\t            else if (classMarker) {\n\t                if (ch === ']') {\n\t                    classMarker = false;\n\t                }\n\t            }\n\t            else {\n\t                if (ch === '/') {\n\t                    terminated = true;\n\t                    break;\n\t                }\n\t                else if (ch === '[') {\n\t                    classMarker = true;\n\t                }\n\t            }\n\t        }\n\t        if (!terminated) {\n\t            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);\n\t        }\n\t        // Exclude leading and trailing slash.\n\t        return str.substr(1, str.length - 2);\n\t    };\n\t    Scanner.prototype.scanRegExpFlags = function () {\n\t        var str = '';\n\t        var flags = '';\n\t        while (!this.eof()) {\n\t            var ch = this.source[this.index];\n\t            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {\n\t                break;\n\t            }\n\t            ++this.index;\n\t            if (ch === '\\\\' && !this.eof()) {\n\t                ch = this.source[this.index];\n\t                if (ch === 'u') {\n\t                    ++this.index;\n\t                    var restore = this.index;\n\t                    var char = this.scanHexEscape('u');\n\t                    if (char !== null) {\n\t                        flags += char;\n\t                        for (str += '\\\\u'; restore < this.index; ++restore) {\n\t                            str += this.source[restore];\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.index = restore;\n\t                        flags += 'u';\n\t                        str += '\\\\u';\n\t                    }\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t                else {\n\t                    str += '\\\\';\n\t                    this.tolerateUnexpectedToken();\n\t                }\n\t            }\n\t            else {\n\t                flags += ch;\n\t                str += ch;\n\t            }\n\t        }\n\t        return flags;\n\t    };\n\t    Scanner.prototype.scanRegExp = function () {\n\t        var start = this.index;\n\t        var pattern = this.scanRegExpBody();\n\t        var flags = this.scanRegExpFlags();\n\t        var value = this.testRegExp(pattern, flags);\n\t        return {\n\t            type: 9 /* RegularExpression */,\n\t            value: '',\n\t            pattern: pattern,\n\t            flags: flags,\n\t            regex: value,\n\t            lineNumber: this.lineNumber,\n\t            lineStart: this.lineStart,\n\t            start: start,\n\t            end: this.index\n\t        };\n\t    };\n\t    Scanner.prototype.lex = function () {\n\t        if (this.eof()) {\n\t            return {\n\t                type: 2 /* EOF */,\n\t                value: '',\n\t                lineNumber: this.lineNumber,\n\t                lineStart: this.lineStart,\n\t                start: this.index,\n\t                end: this.index\n\t            };\n\t        }\n\t        var cp = this.source.charCodeAt(this.index);\n\t        if (character_1.Character.isIdentifierStart(cp)) {\n\t            return this.scanIdentifier();\n\t        }\n\t        // Very common: ( and ) and ;\n\t        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\n\t            return this.scanPunctuator();\n\t        }\n\t        // String literal starts with single quote (U+0027) or double quote (U+0022).\n\t        if (cp === 0x27 || cp === 0x22) {\n\t            return this.scanStringLiteral();\n\t        }\n\t        // Dot (.) U+002E can also start a floating-point number, hence the need\n\t        // to check the next character.\n\t        if (cp === 0x2E) {\n\t            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\n\t                return this.scanNumericLiteral();\n\t            }\n\t            return this.scanPunctuator();\n\t        }\n\t        if (character_1.Character.isDecimalDigit(cp)) {\n\t            return this.scanNumericLiteral();\n\t        }\n\t        // Template literals start with ` (U+0060) for template head\n\t        // or } (U+007D) for template middle or template tail.\n\t        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\n\t            return this.scanTemplate();\n\t        }\n\t        // Possible identifier start in a surrogate pair.\n\t        if (cp >= 0xD800 && cp < 0xDFFF) {\n\t            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {\n\t                return this.scanIdentifier();\n\t            }\n\t        }\n\t        return this.scanPunctuator();\n\t    };\n\t    return Scanner;\n\t}());\n\texports.Scanner = Scanner;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.TokenName = {};\n\texports.TokenName[1 /* BooleanLiteral */] = 'Boolean';\n\texports.TokenName[2 /* EOF */] = '<end>';\n\texports.TokenName[3 /* Identifier */] = 'Identifier';\n\texports.TokenName[4 /* Keyword */] = 'Keyword';\n\texports.TokenName[5 /* NullLiteral */] = 'Null';\n\texports.TokenName[6 /* NumericLiteral */] = 'Numeric';\n\texports.TokenName[7 /* Punctuator */] = 'Punctuator';\n\texports.TokenName[8 /* StringLiteral */] = 'String';\n\texports.TokenName[9 /* RegularExpression */] = 'RegularExpression';\n\texports.TokenName[10 /* Template */] = 'Template';\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.XHTMLEntities = {\n\t    quot: '\\u0022',\n\t    amp: '\\u0026',\n\t    apos: '\\u0027',\n\t    gt: '\\u003E',\n\t    nbsp: '\\u00A0',\n\t    iexcl: '\\u00A1',\n\t    cent: '\\u00A2',\n\t    pound: '\\u00A3',\n\t    curren: '\\u00A4',\n\t    yen: '\\u00A5',\n\t    brvbar: '\\u00A6',\n\t    sect: '\\u00A7',\n\t    uml: '\\u00A8',\n\t    copy: '\\u00A9',\n\t    ordf: '\\u00AA',\n\t    laquo: '\\u00AB',\n\t    not: '\\u00AC',\n\t    shy: '\\u00AD',\n\t    reg: '\\u00AE',\n\t    macr: '\\u00AF',\n\t    deg: '\\u00B0',\n\t    plusmn: '\\u00B1',\n\t    sup2: '\\u00B2',\n\t    sup3: '\\u00B3',\n\t    acute: '\\u00B4',\n\t    micro: '\\u00B5',\n\t    para: '\\u00B6',\n\t    middot: '\\u00B7',\n\t    cedil: '\\u00B8',\n\t    sup1: '\\u00B9',\n\t    ordm: '\\u00BA',\n\t    raquo: '\\u00BB',\n\t    frac14: '\\u00BC',\n\t    frac12: '\\u00BD',\n\t    frac34: '\\u00BE',\n\t    iquest: '\\u00BF',\n\t    Agrave: '\\u00C0',\n\t    Aacute: '\\u00C1',\n\t    Acirc: '\\u00C2',\n\t    Atilde: '\\u00C3',\n\t    Auml: '\\u00C4',\n\t    Aring: '\\u00C5',\n\t    AElig: '\\u00C6',\n\t    Ccedil: '\\u00C7',\n\t    Egrave: '\\u00C8',\n\t    Eacute: '\\u00C9',\n\t    Ecirc: '\\u00CA',\n\t    Euml: '\\u00CB',\n\t    Igrave: '\\u00CC',\n\t    Iacute: '\\u00CD',\n\t    Icirc: '\\u00CE',\n\t    Iuml: '\\u00CF',\n\t    ETH: '\\u00D0',\n\t    Ntilde: '\\u00D1',\n\t    Ograve: '\\u00D2',\n\t    Oacute: '\\u00D3',\n\t    Ocirc: '\\u00D4',\n\t    Otilde: '\\u00D5',\n\t    Ouml: '\\u00D6',\n\t    times: '\\u00D7',\n\t    Oslash: '\\u00D8',\n\t    Ugrave: '\\u00D9',\n\t    Uacute: '\\u00DA',\n\t    Ucirc: '\\u00DB',\n\t    Uuml: '\\u00DC',\n\t    Yacute: '\\u00DD',\n\t    THORN: '\\u00DE',\n\t    szlig: '\\u00DF',\n\t    agrave: '\\u00E0',\n\t    aacute: '\\u00E1',\n\t    acirc: '\\u00E2',\n\t    atilde: '\\u00E3',\n\t    auml: '\\u00E4',\n\t    aring: '\\u00E5',\n\t    aelig: '\\u00E6',\n\t    ccedil: '\\u00E7',\n\t    egrave: '\\u00E8',\n\t    eacute: '\\u00E9',\n\t    ecirc: '\\u00EA',\n\t    euml: '\\u00EB',\n\t    igrave: '\\u00EC',\n\t    iacute: '\\u00ED',\n\t    icirc: '\\u00EE',\n\t    iuml: '\\u00EF',\n\t    eth: '\\u00F0',\n\t    ntilde: '\\u00F1',\n\t    ograve: '\\u00F2',\n\t    oacute: '\\u00F3',\n\t    ocirc: '\\u00F4',\n\t    otilde: '\\u00F5',\n\t    ouml: '\\u00F6',\n\t    divide: '\\u00F7',\n\t    oslash: '\\u00F8',\n\t    ugrave: '\\u00F9',\n\t    uacute: '\\u00FA',\n\t    ucirc: '\\u00FB',\n\t    uuml: '\\u00FC',\n\t    yacute: '\\u00FD',\n\t    thorn: '\\u00FE',\n\t    yuml: '\\u00FF',\n\t    OElig: '\\u0152',\n\t    oelig: '\\u0153',\n\t    Scaron: '\\u0160',\n\t    scaron: '\\u0161',\n\t    Yuml: '\\u0178',\n\t    fnof: '\\u0192',\n\t    circ: '\\u02C6',\n\t    tilde: '\\u02DC',\n\t    Alpha: '\\u0391',\n\t    Beta: '\\u0392',\n\t    Gamma: '\\u0393',\n\t    Delta: '\\u0394',\n\t    Epsilon: '\\u0395',\n\t    Zeta: '\\u0396',\n\t    Eta: '\\u0397',\n\t    Theta: '\\u0398',\n\t    Iota: '\\u0399',\n\t    Kappa: '\\u039A',\n\t    Lambda: '\\u039B',\n\t    Mu: '\\u039C',\n\t    Nu: '\\u039D',\n\t    Xi: '\\u039E',\n\t    Omicron: '\\u039F',\n\t    Pi: '\\u03A0',\n\t    Rho: '\\u03A1',\n\t    Sigma: '\\u03A3',\n\t    Tau: '\\u03A4',\n\t    Upsilon: '\\u03A5',\n\t    Phi: '\\u03A6',\n\t    Chi: '\\u03A7',\n\t    Psi: '\\u03A8',\n\t    Omega: '\\u03A9',\n\t    alpha: '\\u03B1',\n\t    beta: '\\u03B2',\n\t    gamma: '\\u03B3',\n\t    delta: '\\u03B4',\n\t    epsilon: '\\u03B5',\n\t    zeta: '\\u03B6',\n\t    eta: '\\u03B7',\n\t    theta: '\\u03B8',\n\t    iota: '\\u03B9',\n\t    kappa: '\\u03BA',\n\t    lambda: '\\u03BB',\n\t    mu: '\\u03BC',\n\t    nu: '\\u03BD',\n\t    xi: '\\u03BE',\n\t    omicron: '\\u03BF',\n\t    pi: '\\u03C0',\n\t    rho: '\\u03C1',\n\t    sigmaf: '\\u03C2',\n\t    sigma: '\\u03C3',\n\t    tau: '\\u03C4',\n\t    upsilon: '\\u03C5',\n\t    phi: '\\u03C6',\n\t    chi: '\\u03C7',\n\t    psi: '\\u03C8',\n\t    omega: '\\u03C9',\n\t    thetasym: '\\u03D1',\n\t    upsih: '\\u03D2',\n\t    piv: '\\u03D6',\n\t    ensp: '\\u2002',\n\t    emsp: '\\u2003',\n\t    thinsp: '\\u2009',\n\t    zwnj: '\\u200C',\n\t    zwj: '\\u200D',\n\t    lrm: '\\u200E',\n\t    rlm: '\\u200F',\n\t    ndash: '\\u2013',\n\t    mdash: '\\u2014',\n\t    lsquo: '\\u2018',\n\t    rsquo: '\\u2019',\n\t    sbquo: '\\u201A',\n\t    ldquo: '\\u201C',\n\t    rdquo: '\\u201D',\n\t    bdquo: '\\u201E',\n\t    dagger: '\\u2020',\n\t    Dagger: '\\u2021',\n\t    bull: '\\u2022',\n\t    hellip: '\\u2026',\n\t    permil: '\\u2030',\n\t    prime: '\\u2032',\n\t    Prime: '\\u2033',\n\t    lsaquo: '\\u2039',\n\t    rsaquo: '\\u203A',\n\t    oline: '\\u203E',\n\t    frasl: '\\u2044',\n\t    euro: '\\u20AC',\n\t    image: '\\u2111',\n\t    weierp: '\\u2118',\n\t    real: '\\u211C',\n\t    trade: '\\u2122',\n\t    alefsym: '\\u2135',\n\t    larr: '\\u2190',\n\t    uarr: '\\u2191',\n\t    rarr: '\\u2192',\n\t    darr: '\\u2193',\n\t    harr: '\\u2194',\n\t    crarr: '\\u21B5',\n\t    lArr: '\\u21D0',\n\t    uArr: '\\u21D1',\n\t    rArr: '\\u21D2',\n\t    dArr: '\\u21D3',\n\t    hArr: '\\u21D4',\n\t    forall: '\\u2200',\n\t    part: '\\u2202',\n\t    exist: '\\u2203',\n\t    empty: '\\u2205',\n\t    nabla: '\\u2207',\n\t    isin: '\\u2208',\n\t    notin: '\\u2209',\n\t    ni: '\\u220B',\n\t    prod: '\\u220F',\n\t    sum: '\\u2211',\n\t    minus: '\\u2212',\n\t    lowast: '\\u2217',\n\t    radic: '\\u221A',\n\t    prop: '\\u221D',\n\t    infin: '\\u221E',\n\t    ang: '\\u2220',\n\t    and: '\\u2227',\n\t    or: '\\u2228',\n\t    cap: '\\u2229',\n\t    cup: '\\u222A',\n\t    int: '\\u222B',\n\t    there4: '\\u2234',\n\t    sim: '\\u223C',\n\t    cong: '\\u2245',\n\t    asymp: '\\u2248',\n\t    ne: '\\u2260',\n\t    equiv: '\\u2261',\n\t    le: '\\u2264',\n\t    ge: '\\u2265',\n\t    sub: '\\u2282',\n\t    sup: '\\u2283',\n\t    nsub: '\\u2284',\n\t    sube: '\\u2286',\n\t    supe: '\\u2287',\n\t    oplus: '\\u2295',\n\t    otimes: '\\u2297',\n\t    perp: '\\u22A5',\n\t    sdot: '\\u22C5',\n\t    lceil: '\\u2308',\n\t    rceil: '\\u2309',\n\t    lfloor: '\\u230A',\n\t    rfloor: '\\u230B',\n\t    loz: '\\u25CA',\n\t    spades: '\\u2660',\n\t    clubs: '\\u2663',\n\t    hearts: '\\u2665',\n\t    diams: '\\u2666',\n\t    lang: '\\u27E8',\n\t    rang: '\\u27E9'\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar error_handler_1 = __webpack_require__(10);\n\tvar scanner_1 = __webpack_require__(12);\n\tvar token_1 = __webpack_require__(13);\n\tvar Reader = (function () {\n\t    function Reader() {\n\t        this.values = [];\n\t        this.curly = this.paren = -1;\n\t    }\n\t    // A function following one of those tokens is an expression.\n\t    Reader.prototype.beforeFunctionExpression = function (t) {\n\t        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\n\t            'return', 'case', 'delete', 'throw', 'void',\n\t            // assignment operators\n\t            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\n\t            '&=', '|=', '^=', ',',\n\t            // binary/unary operators\n\t            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\n\t            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\n\t            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\n\t    };\n\t    // Determine if forward slash (/) is an operator or part of a regular expression\n\t    // https://github.com/mozilla/sweet.js/wiki/design\n\t    Reader.prototype.isRegexStart = function () {\n\t        var previous = this.values[this.values.length - 1];\n\t        var regex = (previous !== null);\n\t        switch (previous) {\n\t            case 'this':\n\t            case ']':\n\t                regex = false;\n\t                break;\n\t            case ')':\n\t                var keyword = this.values[this.paren - 1];\n\t                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');\n\t                break;\n\t            case '}':\n\t                // Dividing a function by anything makes little sense,\n\t                // but we have to check for that.\n\t                regex = false;\n\t                if (this.values[this.curly - 3] === 'function') {\n\t                    // Anonymous function, e.g. function(){} /42\n\t                    var check = this.values[this.curly - 4];\n\t                    regex = check ? !this.beforeFunctionExpression(check) : false;\n\t                }\n\t                else if (this.values[this.curly - 4] === 'function') {\n\t                    // Named function, e.g. function f(){} /42/\n\t                    var check = this.values[this.curly - 5];\n\t                    regex = check ? !this.beforeFunctionExpression(check) : true;\n\t                }\n\t                break;\n\t            default:\n\t                break;\n\t        }\n\t        return regex;\n\t    };\n\t    Reader.prototype.push = function (token) {\n\t        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {\n\t            if (token.value === '{') {\n\t                this.curly = this.values.length;\n\t            }\n\t            else if (token.value === '(') {\n\t                this.paren = this.values.length;\n\t            }\n\t            this.values.push(token.value);\n\t        }\n\t        else {\n\t            this.values.push(null);\n\t        }\n\t    };\n\t    return Reader;\n\t}());\n\tvar Tokenizer = (function () {\n\t    function Tokenizer(code, config) {\n\t        this.errorHandler = new error_handler_1.ErrorHandler();\n\t        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\n\t        this.scanner = new scanner_1.Scanner(code, this.errorHandler);\n\t        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\n\t        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\n\t        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\n\t        this.buffer = [];\n\t        this.reader = new Reader();\n\t    }\n\t    Tokenizer.prototype.errors = function () {\n\t        return this.errorHandler.errors;\n\t    };\n\t    Tokenizer.prototype.getNextToken = function () {\n\t        if (this.buffer.length === 0) {\n\t            var comments = this.scanner.scanComments();\n\t            if (this.scanner.trackComment) {\n\t                for (var i = 0; i < comments.length; ++i) {\n\t                    var e = comments[i];\n\t                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);\n\t                    var comment = {\n\t                        type: e.multiLine ? 'BlockComment' : 'LineComment',\n\t                        value: value\n\t                    };\n\t                    if (this.trackRange) {\n\t                        comment.range = e.range;\n\t                    }\n\t                    if (this.trackLoc) {\n\t                        comment.loc = e.loc;\n\t                    }\n\t                    this.buffer.push(comment);\n\t                }\n\t            }\n\t            if (!this.scanner.eof()) {\n\t                var loc = void 0;\n\t                if (this.trackLoc) {\n\t                    loc = {\n\t                        start: {\n\t                            line: this.scanner.lineNumber,\n\t                            column: this.scanner.index - this.scanner.lineStart\n\t                        },\n\t                        end: {}\n\t                    };\n\t                }\n\t                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();\n\t                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();\n\t                this.reader.push(token);\n\t                var entry = {\n\t                    type: token_1.TokenName[token.type],\n\t                    value: this.scanner.source.slice(token.start, token.end)\n\t                };\n\t                if (this.trackRange) {\n\t                    entry.range = [token.start, token.end];\n\t                }\n\t                if (this.trackLoc) {\n\t                    loc.end = {\n\t                        line: this.scanner.lineNumber,\n\t                        column: this.scanner.index - this.scanner.lineStart\n\t                    };\n\t                    entry.loc = loc;\n\t                }\n\t                if (token.type === 9 /* RegularExpression */) {\n\t                    var pattern = token.pattern;\n\t                    var flags = token.flags;\n\t                    entry.regex = { pattern: pattern, flags: flags };\n\t                }\n\t                this.buffer.push(entry);\n\t            }\n\t        }\n\t        return this.buffer.shift();\n\t    };\n\t    return Tokenizer;\n\t}());\n\texports.Tokenizer = Tokenizer;\n\n\n/***/ }\n/******/ ])\n});\n;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}