{"ast":null,"code":"/**\n * @fileoverview enforce \"for\" loop update clause moving the counter in the right direction.(for-direction)\n * @author Aladdin-ADD<hh_2013@foxmail.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"enforce \\\"for\\\" loop update clause moving the counter in the right direction.\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/for-direction\"\n    },\n    fixable: null,\n    schema: [],\n    messages: {\n      incorrectDirection: \"The update clause in this loop moves the variable in the wrong direction.\"\n    }\n  },\n  create(context) {\n    /**\n     * report an error.\n     * @param {ASTNode} node the node to report.\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"incorrectDirection\"\n      });\n    }\n\n    /**\n     * check the right side of the assignment\n     * @param {ASTNode} update UpdateExpression to check\n     * @param {int} dir expected direction that could either be turned around or invalidated\n     * @returns {int} return dir, the negated dir or zero if it's not clear for identifiers\n     */\n    function getRightDirection(update, dir) {\n      if (update.right.type === \"UnaryExpression\") {\n        if (update.right.operator === \"-\") {\n          return -dir;\n        }\n      } else if (update.right.type === \"Identifier\") {\n        return 0;\n      }\n      return dir;\n    }\n\n    /**\n     * check UpdateExpression add/sub the counter\n     * @param {ASTNode} update UpdateExpression to check\n     * @param {string} counter variable name to check\n     * @returns {int} if add return 1, if sub return -1, if nochange, return 0\n     */\n    function getUpdateDirection(update, counter) {\n      if (update.argument.type === \"Identifier\" && update.argument.name === counter) {\n        if (update.operator === \"++\") {\n          return 1;\n        }\n        if (update.operator === \"--\") {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * check AssignmentExpression add/sub the counter\n     * @param {ASTNode} update AssignmentExpression to check\n     * @param {string} counter variable name to check\n     * @returns {int} if add return 1, if sub return -1, if nochange, return 0\n     */\n    function getAssignmentDirection(update, counter) {\n      if (update.left.name === counter) {\n        if (update.operator === \"+=\") {\n          return getRightDirection(update, 1);\n        }\n        if (update.operator === \"-=\") {\n          return getRightDirection(update, -1);\n        }\n      }\n      return 0;\n    }\n    return {\n      ForStatement(node) {\n        if (node.test && node.test.type === \"BinaryExpression\" && node.test.left.type === \"Identifier\" && node.update) {\n          const counter = node.test.left.name;\n          const operator = node.test.operator;\n          const update = node.update;\n          let wrongDirection;\n          if (operator === \"<\" || operator === \"<=\") {\n            wrongDirection = -1;\n          } else if (operator === \">\" || operator === \">=\") {\n            wrongDirection = 1;\n          } else {\n            return;\n          }\n          if (update.type === \"UpdateExpression\") {\n            if (getUpdateDirection(update, counter) === wrongDirection) {\n              report(node);\n            }\n          } else if (update.type === \"AssignmentExpression\" && getAssignmentDirection(update, counter) === wrongDirection) {\n            report(node);\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","incorrectDirection","create","context","report","node","messageId","getRightDirection","update","dir","right","operator","getUpdateDirection","counter","argument","name","getAssignmentDirection","left","ForStatement","test","wrongDirection"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/for-direction.js"],"sourcesContent":["/**\n * @fileoverview enforce \"for\" loop update clause moving the counter in the right direction.(for-direction)\n * @author Aladdin-ADD<hh_2013@foxmail.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"enforce \\\"for\\\" loop update clause moving the counter in the right direction.\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/for-direction\"\n        },\n\n        fixable: null,\n        schema: [],\n\n        messages: {\n            incorrectDirection: \"The update clause in this loop moves the variable in the wrong direction.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * report an error.\n         * @param {ASTNode} node the node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({\n                node,\n                messageId: \"incorrectDirection\"\n            });\n        }\n\n        /**\n         * check the right side of the assignment\n         * @param {ASTNode} update UpdateExpression to check\n         * @param {int} dir expected direction that could either be turned around or invalidated\n         * @returns {int} return dir, the negated dir or zero if it's not clear for identifiers\n         */\n        function getRightDirection(update, dir) {\n            if (update.right.type === \"UnaryExpression\") {\n                if (update.right.operator === \"-\") {\n                    return -dir;\n                }\n            } else if (update.right.type === \"Identifier\") {\n                return 0;\n            }\n            return dir;\n        }\n\n        /**\n         * check UpdateExpression add/sub the counter\n         * @param {ASTNode} update UpdateExpression to check\n         * @param {string} counter variable name to check\n         * @returns {int} if add return 1, if sub return -1, if nochange, return 0\n         */\n        function getUpdateDirection(update, counter) {\n            if (update.argument.type === \"Identifier\" && update.argument.name === counter) {\n                if (update.operator === \"++\") {\n                    return 1;\n                }\n                if (update.operator === \"--\") {\n                    return -1;\n                }\n            }\n            return 0;\n        }\n\n        /**\n         * check AssignmentExpression add/sub the counter\n         * @param {ASTNode} update AssignmentExpression to check\n         * @param {string} counter variable name to check\n         * @returns {int} if add return 1, if sub return -1, if nochange, return 0\n         */\n        function getAssignmentDirection(update, counter) {\n            if (update.left.name === counter) {\n                if (update.operator === \"+=\") {\n                    return getRightDirection(update, 1);\n                }\n                if (update.operator === \"-=\") {\n                    return getRightDirection(update, -1);\n                }\n            }\n            return 0;\n        }\n        return {\n            ForStatement(node) {\n\n                if (node.test && node.test.type === \"BinaryExpression\" && node.test.left.type === \"Identifier\" && node.update) {\n                    const counter = node.test.left.name;\n                    const operator = node.test.operator;\n                    const update = node.update;\n\n                    let wrongDirection;\n\n                    if (operator === \"<\" || operator === \"<=\") {\n                        wrongDirection = -1;\n                    } else if (operator === \">\" || operator === \">=\") {\n                        wrongDirection = 1;\n                    } else {\n                        return;\n                    }\n\n                    if (update.type === \"UpdateExpression\") {\n                        if (getUpdateDirection(update, counter) === wrongDirection) {\n                            report(node);\n                        }\n                    } else if (update.type === \"AssignmentExpression\" && getAssignmentDirection(update, counter) === wrongDirection) {\n                        report(node);\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,+EAA+E;MAC5FC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,kBAAkB,EAAE;IACxB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,MAAMA,CAACC,IAAI,EAAE;MAClBF,OAAO,CAACC,MAAM,CAAC;QACXC,IAAI;QACJC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,iBAAiBA,CAACC,MAAM,EAAEC,GAAG,EAAE;MACpC,IAAID,MAAM,CAACE,KAAK,CAAClB,IAAI,KAAK,iBAAiB,EAAE;QACzC,IAAIgB,MAAM,CAACE,KAAK,CAACC,QAAQ,KAAK,GAAG,EAAE;UAC/B,OAAO,CAACF,GAAG;QACf;MACJ,CAAC,MAAM,IAAID,MAAM,CAACE,KAAK,CAAClB,IAAI,KAAK,YAAY,EAAE;QAC3C,OAAO,CAAC;MACZ;MACA,OAAOiB,GAAG;IACd;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASG,kBAAkBA,CAACJ,MAAM,EAAEK,OAAO,EAAE;MACzC,IAAIL,MAAM,CAACM,QAAQ,CAACtB,IAAI,KAAK,YAAY,IAAIgB,MAAM,CAACM,QAAQ,CAACC,IAAI,KAAKF,OAAO,EAAE;QAC3E,IAAIL,MAAM,CAACG,QAAQ,KAAK,IAAI,EAAE;UAC1B,OAAO,CAAC;QACZ;QACA,IAAIH,MAAM,CAACG,QAAQ,KAAK,IAAI,EAAE;UAC1B,OAAO,CAAC,CAAC;QACb;MACJ;MACA,OAAO,CAAC;IACZ;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASK,sBAAsBA,CAACR,MAAM,EAAEK,OAAO,EAAE;MAC7C,IAAIL,MAAM,CAACS,IAAI,CAACF,IAAI,KAAKF,OAAO,EAAE;QAC9B,IAAIL,MAAM,CAACG,QAAQ,KAAK,IAAI,EAAE;UAC1B,OAAOJ,iBAAiB,CAACC,MAAM,EAAE,CAAC,CAAC;QACvC;QACA,IAAIA,MAAM,CAACG,QAAQ,KAAK,IAAI,EAAE;UAC1B,OAAOJ,iBAAiB,CAACC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxC;MACJ;MACA,OAAO,CAAC;IACZ;IACA,OAAO;MACHU,YAAYA,CAACb,IAAI,EAAE;QAEf,IAAIA,IAAI,CAACc,IAAI,IAAId,IAAI,CAACc,IAAI,CAAC3B,IAAI,KAAK,kBAAkB,IAAIa,IAAI,CAACc,IAAI,CAACF,IAAI,CAACzB,IAAI,KAAK,YAAY,IAAIa,IAAI,CAACG,MAAM,EAAE;UAC3G,MAAMK,OAAO,GAAGR,IAAI,CAACc,IAAI,CAACF,IAAI,CAACF,IAAI;UACnC,MAAMJ,QAAQ,GAAGN,IAAI,CAACc,IAAI,CAACR,QAAQ;UACnC,MAAMH,MAAM,GAAGH,IAAI,CAACG,MAAM;UAE1B,IAAIY,cAAc;UAElB,IAAIT,QAAQ,KAAK,GAAG,IAAIA,QAAQ,KAAK,IAAI,EAAE;YACvCS,cAAc,GAAG,CAAC,CAAC;UACvB,CAAC,MAAM,IAAIT,QAAQ,KAAK,GAAG,IAAIA,QAAQ,KAAK,IAAI,EAAE;YAC9CS,cAAc,GAAG,CAAC;UACtB,CAAC,MAAM;YACH;UACJ;UAEA,IAAIZ,MAAM,CAAChB,IAAI,KAAK,kBAAkB,EAAE;YACpC,IAAIoB,kBAAkB,CAACJ,MAAM,EAAEK,OAAO,CAAC,KAAKO,cAAc,EAAE;cACxDhB,MAAM,CAACC,IAAI,CAAC;YAChB;UACJ,CAAC,MAAM,IAAIG,MAAM,CAAChB,IAAI,KAAK,sBAAsB,IAAIwB,sBAAsB,CAACR,MAAM,EAAEK,OAAO,CAAC,KAAKO,cAAc,EAAE;YAC7GhB,MAAM,CAACC,IAAI,CAAC;UAChB;QACJ;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}