{"ast":null,"code":"/**\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow assignments to native objects or read-only global variables\",\n      category: \"Best Practices\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-global-assign\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptions: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      globalShouldNotBeModified: \"Read-only global '{{name}}' should not be modified.\"\n    }\n  },\n  create(context) {\n    const config = context.options[0];\n    const exceptions = config && config.exceptions || [];\n\n    /**\n     * Reports write references.\n     * @param {Reference} reference A reference to check.\n     * @param {int} index The index of the reference in the references.\n     * @param {Reference[]} references The array that the reference belongs to.\n     * @returns {void}\n     */\n    function checkReference(reference, index, references) {\n      const identifier = reference.identifier;\n      if (reference.init === false && reference.isWrite() && (\n      /*\n       * Destructuring assignments can have multiple default value,\n       * so possibly there are multiple writeable references for the same identifier.\n       */\n      index === 0 || references[index - 1].identifier !== identifier)) {\n        context.report({\n          node: identifier,\n          messageId: \"globalShouldNotBeModified\",\n          data: {\n            name: identifier.name\n          }\n        });\n      }\n    }\n\n    /**\n     * Reports write references if a given variable is read-only builtin.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n      if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {\n        variable.references.forEach(checkReference);\n      }\n    }\n    return {\n      Program() {\n        const globalScope = context.getScope();\n        globalScope.variables.forEach(checkVariable);\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","exceptions","items","uniqueItems","additionalProperties","messages","globalShouldNotBeModified","create","context","config","options","checkReference","reference","index","references","identifier","init","isWrite","report","node","messageId","data","name","checkVariable","variable","writeable","indexOf","forEach","Program","globalScope","getScope","variables"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-global-assign.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow assignments to native objects or read-only global variables\",\n            category: \"Best Practices\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-global-assign\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: { type: \"string\" },\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            globalShouldNotBeModified: \"Read-only global '{{name}}' should not be modified.\"\n        }\n    },\n\n    create(context) {\n        const config = context.options[0];\n        const exceptions = (config && config.exceptions) || [];\n\n        /**\n         * Reports write references.\n         * @param {Reference} reference A reference to check.\n         * @param {int} index The index of the reference in the references.\n         * @param {Reference[]} references The array that the reference belongs to.\n         * @returns {void}\n         */\n        function checkReference(reference, index, references) {\n            const identifier = reference.identifier;\n\n            if (reference.init === false &&\n                reference.isWrite() &&\n\n                /*\n                 * Destructuring assignments can have multiple default value,\n                 * so possibly there are multiple writeable references for the same identifier.\n                 */\n                (index === 0 || references[index - 1].identifier !== identifier)\n            ) {\n                context.report({\n                    node: identifier,\n                    messageId: \"globalShouldNotBeModified\",\n                    data: {\n                        name: identifier.name\n                    }\n                });\n            }\n        }\n\n        /**\n         * Reports write references if a given variable is read-only builtin.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {\n                variable.references.forEach(checkReference);\n            }\n        }\n\n        return {\n            Program() {\n                const globalScope = context.getScope();\n\n                globalScope.variables.forEach(checkVariable);\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,sEAAsE;MACnFC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIN,IAAI,EAAE,QAAQ;MACdO,UAAU,EAAE;QACRC,UAAU,EAAE;UACRR,IAAI,EAAE,OAAO;UACbS,KAAK,EAAE;YAAET,IAAI,EAAE;UAAS,CAAC;UACzBU,WAAW,EAAE;QACjB;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,yBAAyB,EAAE;IAC/B;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC;IACjC,MAAMT,UAAU,GAAIQ,MAAM,IAAIA,MAAM,CAACR,UAAU,IAAK,EAAE;;IAEtD;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASU,cAAcA,CAACC,SAAS,EAAEC,KAAK,EAAEC,UAAU,EAAE;MAClD,MAAMC,UAAU,GAAGH,SAAS,CAACG,UAAU;MAEvC,IAAIH,SAAS,CAACI,IAAI,KAAK,KAAK,IACxBJ,SAAS,CAACK,OAAO,CAAC,CAAC;MAEnB;AAChB;AACA;AACA;MACiBJ,KAAK,KAAK,CAAC,IAAIC,UAAU,CAACD,KAAK,GAAG,CAAC,CAAC,CAACE,UAAU,KAAKA,UAAU,CAAC,EAClE;QACEP,OAAO,CAACU,MAAM,CAAC;UACXC,IAAI,EAAEJ,UAAU;UAChBK,SAAS,EAAE,2BAA2B;UACtCC,IAAI,EAAE;YACFC,IAAI,EAAEP,UAAU,CAACO;UACrB;QACJ,CAAC,CAAC;MACN;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,aAAaA,CAACC,QAAQ,EAAE;MAC7B,IAAIA,QAAQ,CAACC,SAAS,KAAK,KAAK,IAAIxB,UAAU,CAACyB,OAAO,CAACF,QAAQ,CAACF,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1EE,QAAQ,CAACV,UAAU,CAACa,OAAO,CAAChB,cAAc,CAAC;MAC/C;IACJ;IAEA,OAAO;MACHiB,OAAOA,CAAA,EAAG;QACN,MAAMC,WAAW,GAAGrB,OAAO,CAACsB,QAAQ,CAAC,CAAC;QAEtCD,WAAW,CAACE,SAAS,CAACJ,OAAO,CAACJ,aAAa,CAAC;MAChD;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}