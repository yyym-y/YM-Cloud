{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of certain node types\n * @author Burak Yigit Kaya\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified syntax\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-syntax\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        oneOf: [{\n          type: \"string\"\n        }, {\n          type: \"object\",\n          properties: {\n            selector: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          required: [\"selector\"],\n          additionalProperties: false\n        }]\n      },\n      uniqueItems: true,\n      minItems: 0\n    },\n    messages: {\n      // eslint-disable-next-line eslint-plugin/report-message-format\n      restrictedSyntax: \"{{message}}\"\n    }\n  },\n  create(context) {\n    return context.options.reduce((result, selectorOrObject) => {\n      const isStringFormat = typeof selectorOrObject === \"string\";\n      const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\n      const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\n      const message = hasCustomMessage ? selectorOrObject.message : `Using '${selector}' is not allowed.`;\n      return Object.assign(result, {\n        [selector](node) {\n          context.report({\n            node,\n            messageId: \"restrictedSyntax\",\n            data: {\n              message\n            }\n          });\n        }\n      });\n    }, {});\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","items","oneOf","properties","selector","message","required","additionalProperties","uniqueItems","minItems","messages","restrictedSyntax","create","context","options","reduce","result","selectorOrObject","isStringFormat","hasCustomMessage","Boolean","Object","assign","node","report","messageId","data"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-restricted-syntax.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of certain node types\n * @author Burak Yigit Kaya\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified syntax\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-syntax\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                oneOf: [\n                    {\n                        type: \"string\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            selector: { type: \"string\" },\n                            message: { type: \"string\" }\n                        },\n                        required: [\"selector\"],\n                        additionalProperties: false\n                    }\n                ]\n            },\n            uniqueItems: true,\n            minItems: 0\n        },\n\n        messages: {\n            // eslint-disable-next-line eslint-plugin/report-message-format\n            restrictedSyntax: \"{{message}}\"\n        }\n    },\n\n    create(context) {\n        return context.options.reduce((result, selectorOrObject) => {\n            const isStringFormat = (typeof selectorOrObject === \"string\");\n            const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\n\n            const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\n            const message = hasCustomMessage ? selectorOrObject.message : `Using '${selector}' is not allowed.`;\n\n            return Object.assign(result, {\n                [selector](node) {\n                    context.report({\n                        node,\n                        messageId: \"restrictedSyntax\",\n                        data: { message }\n                    });\n                }\n            });\n        }, {});\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,2BAA2B;MACxCC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE;MACJN,IAAI,EAAE,OAAO;MACbO,KAAK,EAAE;QACHC,KAAK,EAAE,CACH;UACIR,IAAI,EAAE;QACV,CAAC,EACD;UACIA,IAAI,EAAE,QAAQ;UACdS,UAAU,EAAE;YACRC,QAAQ,EAAE;cAAEV,IAAI,EAAE;YAAS,CAAC;YAC5BW,OAAO,EAAE;cAAEX,IAAI,EAAE;YAAS;UAC9B,CAAC;UACDY,QAAQ,EAAE,CAAC,UAAU,CAAC;UACtBC,oBAAoB,EAAE;QAC1B,CAAC;MAET,CAAC;MACDC,WAAW,EAAE,IAAI;MACjBC,QAAQ,EAAE;IACd,CAAC;IAEDC,QAAQ,EAAE;MACN;MACAC,gBAAgB,EAAE;IACtB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,OAAOA,OAAO,CAACC,OAAO,CAACC,MAAM,CAAC,CAACC,MAAM,EAAEC,gBAAgB,KAAK;MACxD,MAAMC,cAAc,GAAI,OAAOD,gBAAgB,KAAK,QAAS;MAC7D,MAAME,gBAAgB,GAAG,CAACD,cAAc,IAAIE,OAAO,CAACH,gBAAgB,CAACZ,OAAO,CAAC;MAE7E,MAAMD,QAAQ,GAAGc,cAAc,GAAGD,gBAAgB,GAAGA,gBAAgB,CAACb,QAAQ;MAC9E,MAAMC,OAAO,GAAGc,gBAAgB,GAAGF,gBAAgB,CAACZ,OAAO,GAAI,UAASD,QAAS,mBAAkB;MAEnG,OAAOiB,MAAM,CAACC,MAAM,CAACN,MAAM,EAAE;QACzB,CAACZ,QAAQ,EAAEmB,IAAI,EAAE;UACbV,OAAO,CAACW,MAAM,CAAC;YACXD,IAAI;YACJE,SAAS,EAAE,kBAAkB;YAC7BC,IAAI,EAAE;cAAErB;YAAQ;UACpB,CAAC,CAAC;QACN;MACJ,CAAC,CAAC;IACN,CAAC,EAAE,CAAC,CAAC,CAAC;EAEV;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}