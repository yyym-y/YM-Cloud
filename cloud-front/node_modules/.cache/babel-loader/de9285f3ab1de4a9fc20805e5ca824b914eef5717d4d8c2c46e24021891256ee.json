{"ast":null,"code":"/**\n * @fileoverview Rule to disallow assignments where both sides are exactly the same\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SPACES = /\\s+/gu;\n\n/**\n * Traverses 2 Pattern nodes in parallel, then reports self-assignments.\n * @param {ASTNode|null} left A left node to traverse. This is a Pattern or\n *      a Property.\n * @param {ASTNode|null} right A right node to traverse. This is a Pattern or\n *      a Property.\n * @param {boolean} props The flag to check member expressions as well.\n * @param {Function} report A callback function to report.\n * @returns {void}\n */\nfunction eachSelfAssignment(left, right, props, report) {\n  if (!left || !right) {\n\n    // do nothing\n  } else if (left.type === \"Identifier\" && right.type === \"Identifier\" && left.name === right.name) {\n    report(right);\n  } else if (left.type === \"ArrayPattern\" && right.type === \"ArrayExpression\") {\n    const end = Math.min(left.elements.length, right.elements.length);\n    for (let i = 0; i < end; ++i) {\n      const leftElement = left.elements[i];\n      const rightElement = right.elements[i];\n\n      // Avoid cases such as [...a] = [...a, 1]\n      if (leftElement && leftElement.type === \"RestElement\" && i < right.elements.length - 1) {\n        break;\n      }\n      eachSelfAssignment(leftElement, rightElement, props, report);\n\n      // After a spread element, those indices are unknown.\n      if (rightElement && rightElement.type === \"SpreadElement\") {\n        break;\n      }\n    }\n  } else if (left.type === \"RestElement\" && right.type === \"SpreadElement\") {\n    eachSelfAssignment(left.argument, right.argument, props, report);\n  } else if (left.type === \"ObjectPattern\" && right.type === \"ObjectExpression\" && right.properties.length >= 1) {\n    /*\n     * Gets the index of the last spread property.\n     * It's possible to overwrite properties followed by it.\n     */\n    let startJ = 0;\n    for (let i = right.properties.length - 1; i >= 0; --i) {\n      const propType = right.properties[i].type;\n      if (propType === \"SpreadElement\" || propType === \"ExperimentalSpreadProperty\") {\n        startJ = i + 1;\n        break;\n      }\n    }\n    for (let i = 0; i < left.properties.length; ++i) {\n      for (let j = startJ; j < right.properties.length; ++j) {\n        eachSelfAssignment(left.properties[i], right.properties[j], props, report);\n      }\n    }\n  } else if (left.type === \"Property\" && right.type === \"Property\" && right.kind === \"init\" && !right.method) {\n    const leftName = astUtils.getStaticPropertyName(left);\n    if (leftName !== null && leftName === astUtils.getStaticPropertyName(right)) {\n      eachSelfAssignment(left.value, right.value, props, report);\n    }\n  } else if (props && astUtils.skipChainExpression(left).type === \"MemberExpression\" && astUtils.skipChainExpression(right).type === \"MemberExpression\" && astUtils.isSameReference(left, right)) {\n    report(right);\n  }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow assignments where both sides are exactly the same\",\n      category: \"Best Practices\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-self-assign\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        props: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      selfAssignment: \"'{{name}}' is assigned to itself.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const [{\n      props = true\n    } = {}] = context.options;\n\n    /**\n     * Reports a given node as self assignments.\n     * @param {ASTNode} node A node to report. This is an Identifier node.\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"selfAssignment\",\n        data: {\n          name: sourceCode.getText(node).replace(SPACES, \"\")\n        }\n      });\n    }\n    return {\n      AssignmentExpression(node) {\n        if (node.operator === \"=\") {\n          eachSelfAssignment(node.left, node.right, props, report);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","SPACES","eachSelfAssignment","left","right","props","report","type","name","end","Math","min","elements","length","i","leftElement","rightElement","argument","properties","startJ","propType","j","kind","method","leftName","getStaticPropertyName","value","skipChainExpression","isSameReference","module","exports","meta","docs","description","category","recommended","url","schema","default","additionalProperties","messages","selfAssignment","create","context","sourceCode","getSourceCode","options","node","messageId","data","getText","replace","AssignmentExpression","operator"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-self-assign.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow assignments where both sides are exactly the same\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SPACES = /\\s+/gu;\n\n/**\n * Traverses 2 Pattern nodes in parallel, then reports self-assignments.\n * @param {ASTNode|null} left A left node to traverse. This is a Pattern or\n *      a Property.\n * @param {ASTNode|null} right A right node to traverse. This is a Pattern or\n *      a Property.\n * @param {boolean} props The flag to check member expressions as well.\n * @param {Function} report A callback function to report.\n * @returns {void}\n */\nfunction eachSelfAssignment(left, right, props, report) {\n    if (!left || !right) {\n\n        // do nothing\n    } else if (\n        left.type === \"Identifier\" &&\n        right.type === \"Identifier\" &&\n        left.name === right.name\n    ) {\n        report(right);\n    } else if (\n        left.type === \"ArrayPattern\" &&\n        right.type === \"ArrayExpression\"\n    ) {\n        const end = Math.min(left.elements.length, right.elements.length);\n\n        for (let i = 0; i < end; ++i) {\n            const leftElement = left.elements[i];\n            const rightElement = right.elements[i];\n\n            // Avoid cases such as [...a] = [...a, 1]\n            if (\n                leftElement &&\n                leftElement.type === \"RestElement\" &&\n                i < right.elements.length - 1\n            ) {\n                break;\n            }\n\n            eachSelfAssignment(leftElement, rightElement, props, report);\n\n            // After a spread element, those indices are unknown.\n            if (rightElement && rightElement.type === \"SpreadElement\") {\n                break;\n            }\n        }\n    } else if (\n        left.type === \"RestElement\" &&\n        right.type === \"SpreadElement\"\n    ) {\n        eachSelfAssignment(left.argument, right.argument, props, report);\n    } else if (\n        left.type === \"ObjectPattern\" &&\n        right.type === \"ObjectExpression\" &&\n        right.properties.length >= 1\n    ) {\n\n        /*\n         * Gets the index of the last spread property.\n         * It's possible to overwrite properties followed by it.\n         */\n        let startJ = 0;\n\n        for (let i = right.properties.length - 1; i >= 0; --i) {\n            const propType = right.properties[i].type;\n\n            if (propType === \"SpreadElement\" || propType === \"ExperimentalSpreadProperty\") {\n                startJ = i + 1;\n                break;\n            }\n        }\n\n        for (let i = 0; i < left.properties.length; ++i) {\n            for (let j = startJ; j < right.properties.length; ++j) {\n                eachSelfAssignment(\n                    left.properties[i],\n                    right.properties[j],\n                    props,\n                    report\n                );\n            }\n        }\n    } else if (\n        left.type === \"Property\" &&\n        right.type === \"Property\" &&\n        right.kind === \"init\" &&\n        !right.method\n    ) {\n        const leftName = astUtils.getStaticPropertyName(left);\n\n        if (leftName !== null && leftName === astUtils.getStaticPropertyName(right)) {\n            eachSelfAssignment(left.value, right.value, props, report);\n        }\n    } else if (\n        props &&\n        astUtils.skipChainExpression(left).type === \"MemberExpression\" &&\n        astUtils.skipChainExpression(right).type === \"MemberExpression\" &&\n        astUtils.isSameReference(left, right)\n    ) {\n        report(right);\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow assignments where both sides are exactly the same\",\n            category: \"Best Practices\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-self-assign\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    props: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            selfAssignment: \"'{{name}}' is assigned to itself.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const [{ props = true } = {}] = context.options;\n\n        /**\n         * Reports a given node as self assignments.\n         * @param {ASTNode} node A node to report. This is an Identifier node.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({\n                node,\n                messageId: \"selfAssignment\",\n                data: {\n                    name: sourceCode.getText(node).replace(SPACES, \"\")\n                }\n            });\n        }\n\n        return {\n            AssignmentExpression(node) {\n                if (node.operator === \"=\") {\n                    eachSelfAssignment(node.left, node.right, props, report);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}