{"ast":null,"code":"/**\n * @fileoverview Rule to flag references to undeclared variables.\n * @author Mark Macdonald\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is the argument of a typeof operator.\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean} Whether or not the node is the argument of a typeof operator.\n */\nfunction hasTypeOfOperator(node) {\n  const parent = node.parent;\n  return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",\n      category: \"Variables\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-undef\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        typeof: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      undef: \"'{{name}}' is not defined.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0];\n    const considerTypeOf = options && options.typeof === true || false;\n    return {\n      \"Program:exit\"( /* node */\n      ) {\n        const globalScope = context.getScope();\n        globalScope.through.forEach(ref => {\n          const identifier = ref.identifier;\n          if (!considerTypeOf && hasTypeOfOperator(identifier)) {\n            return;\n          }\n          context.report({\n            node: identifier,\n            messageId: \"undef\",\n            data: identifier\n          });\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["hasTypeOfOperator","node","parent","type","operator","module","exports","meta","docs","description","category","recommended","url","schema","properties","typeof","default","additionalProperties","messages","undef","create","context","options","considerTypeOf","Program:exit","globalScope","getScope","through","forEach","ref","identifier","report","messageId","data"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-undef.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag references to undeclared variables.\n * @author Mark Macdonald\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is the argument of a typeof operator.\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean} Whether or not the node is the argument of a typeof operator.\n */\nfunction hasTypeOfOperator(node) {\n    const parent = node.parent;\n\n    return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",\n            category: \"Variables\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-undef\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    typeof: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            undef: \"'{{name}}' is not defined.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0];\n        const considerTypeOf = options && options.typeof === true || false;\n\n        return {\n            \"Program:exit\"(/* node */) {\n                const globalScope = context.getScope();\n\n                globalScope.through.forEach(ref => {\n                    const identifier = ref.identifier;\n\n                    if (!considerTypeOf && hasTypeOfOperator(identifier)) {\n                        return;\n                    }\n\n                    context.report({\n                        node: identifier,\n                        messageId: \"undef\",\n                        data: identifier\n                    });\n                });\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiBA,CAACC,IAAI,EAAE;EAC7B,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,OAAOA,MAAM,CAACC,IAAI,KAAK,iBAAiB,IAAID,MAAM,CAACE,QAAQ,KAAK,QAAQ;AAC5E;;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFJ,IAAI,EAAE,SAAS;IAEfK,IAAI,EAAE;MACFC,WAAW,EAAE,qFAAqF;MAClGC,QAAQ,EAAE,WAAW;MACrBC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIV,IAAI,EAAE,QAAQ;MACdW,UAAU,EAAE;QACRC,MAAM,EAAE;UACJZ,IAAI,EAAE,SAAS;UACfa,OAAO,EAAE;QACb;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IACDC,QAAQ,EAAE;MACNC,KAAK,EAAE;IACX;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC;IAClC,MAAMC,cAAc,GAAGD,OAAO,IAAIA,OAAO,CAACP,MAAM,KAAK,IAAI,IAAI,KAAK;IAElE,OAAO;MACH,cAAcS,CAAA,CAAC;MAAA,EAAY;QACvB,MAAMC,WAAW,GAAGJ,OAAO,CAACK,QAAQ,CAAC,CAAC;QAEtCD,WAAW,CAACE,OAAO,CAACC,OAAO,CAACC,GAAG,IAAI;UAC/B,MAAMC,UAAU,GAAGD,GAAG,CAACC,UAAU;UAEjC,IAAI,CAACP,cAAc,IAAIvB,iBAAiB,CAAC8B,UAAU,CAAC,EAAE;YAClD;UACJ;UAEAT,OAAO,CAACU,MAAM,CAAC;YACX9B,IAAI,EAAE6B,UAAU;YAChBE,SAAS,EAAE,OAAO;YAClBC,IAAI,EAAEH;UACV,CAAC,CAAC;QACN,CAAC,CAAC;MACN;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}