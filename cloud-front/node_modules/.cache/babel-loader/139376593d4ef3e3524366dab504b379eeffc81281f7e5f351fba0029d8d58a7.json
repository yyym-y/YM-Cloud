{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of an empty block statement\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow empty block statements\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-empty\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowEmptyCatch: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Empty {{type}} statement.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {},\n      allowEmptyCatch = options.allowEmptyCatch || false;\n    const sourceCode = context.getSourceCode();\n    return {\n      BlockStatement(node) {\n        // if the body is not empty, we can just return immediately\n        if (node.body.length !== 0) {\n          return;\n        }\n\n        // a function is generally allowed to be empty\n        if (astUtils.isFunction(node.parent)) {\n          return;\n        }\n        if (allowEmptyCatch && node.parent.type === \"CatchClause\") {\n          return;\n        }\n\n        // any other block is only allowed to be empty, if it contains a comment\n        if (sourceCode.getCommentsInside(node).length > 0) {\n          return;\n        }\n        context.report({\n          node,\n          messageId: \"unexpected\",\n          data: {\n            type: \"block\"\n          }\n        });\n      },\n      SwitchStatement(node) {\n        if (typeof node.cases === \"undefined\" || node.cases.length === 0) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              type: \"switch\"\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allowEmptyCatch","default","additionalProperties","messages","unexpected","create","context","options","sourceCode","getSourceCode","BlockStatement","node","body","length","isFunction","parent","getCommentsInside","report","messageId","data","SwitchStatement","cases"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-empty.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of an empty block statement\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow empty block statements\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-empty\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowEmptyCatch: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Empty {{type}} statement.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {},\n            allowEmptyCatch = options.allowEmptyCatch || false;\n\n        const sourceCode = context.getSourceCode();\n\n        return {\n            BlockStatement(node) {\n\n                // if the body is not empty, we can just return immediately\n                if (node.body.length !== 0) {\n                    return;\n                }\n\n                // a function is generally allowed to be empty\n                if (astUtils.isFunction(node.parent)) {\n                    return;\n                }\n\n                if (allowEmptyCatch && node.parent.type === \"CatchClause\") {\n                    return;\n                }\n\n                // any other block is only allowed to be empty, if it contains a comment\n                if (sourceCode.getCommentsInside(node).length > 0) {\n                    return;\n                }\n\n                context.report({ node, messageId: \"unexpected\", data: { type: \"block\" } });\n            },\n\n            SwitchStatement(node) {\n\n                if (typeof node.cases === \"undefined\" || node.cases.length === 0) {\n                    context.report({ node, messageId: \"unexpected\", data: { type: \"switch\" } });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,iCAAiC;MAC9CC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIN,IAAI,EAAE,QAAQ;MACdO,UAAU,EAAE;QACRC,eAAe,EAAE;UACbR,IAAI,EAAE,SAAS;UACfS,OAAO,EAAE;QACb;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MACpCP,eAAe,GAAGO,OAAO,CAACP,eAAe,IAAI,KAAK;IAEtD,MAAMQ,UAAU,GAAGF,OAAO,CAACG,aAAa,CAAC,CAAC;IAE1C,OAAO;MACHC,cAAcA,CAACC,IAAI,EAAE;QAEjB;QACA,IAAIA,IAAI,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;UACxB;QACJ;;QAEA;QACA,IAAI1B,QAAQ,CAAC2B,UAAU,CAACH,IAAI,CAACI,MAAM,CAAC,EAAE;UAClC;QACJ;QAEA,IAAIf,eAAe,IAAIW,IAAI,CAACI,MAAM,CAACvB,IAAI,KAAK,aAAa,EAAE;UACvD;QACJ;;QAEA;QACA,IAAIgB,UAAU,CAACQ,iBAAiB,CAACL,IAAI,CAAC,CAACE,MAAM,GAAG,CAAC,EAAE;UAC/C;QACJ;QAEAP,OAAO,CAACW,MAAM,CAAC;UAAEN,IAAI;UAAEO,SAAS,EAAE,YAAY;UAAEC,IAAI,EAAE;YAAE3B,IAAI,EAAE;UAAQ;QAAE,CAAC,CAAC;MAC9E,CAAC;MAED4B,eAAeA,CAACT,IAAI,EAAE;QAElB,IAAI,OAAOA,IAAI,CAACU,KAAK,KAAK,WAAW,IAAIV,IAAI,CAACU,KAAK,CAACR,MAAM,KAAK,CAAC,EAAE;UAC9DP,OAAO,CAACW,MAAM,CAAC;YAAEN,IAAI;YAAEO,SAAS,EAAE,YAAY;YAAEC,IAAI,EAAE;cAAE3B,IAAI,EAAE;YAAS;UAAE,CAAC,CAAC;QAC/E;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}