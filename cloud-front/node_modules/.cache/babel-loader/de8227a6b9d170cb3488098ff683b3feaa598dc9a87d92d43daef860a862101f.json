{"ast":null,"code":"/**\n * @fileoverview Rule to control spacing within function calls\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing between function identifiers and their invocations\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/func-call-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }, {\n          type: \"object\",\n          properties: {\n            allowNewlines: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace between function name and paren.\",\n      unexpectedNewline: \"Unexpected newline between function name and paren.\",\n      missing: \"Missing space between function name and paren.\"\n    }\n  },\n  create(context) {\n    const never = context.options[0] !== \"always\";\n    const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\n    const sourceCode = context.getSourceCode();\n    const text = sourceCode.getText();\n\n    /**\n     * Check if open space is present in a function name\n     * @param {ASTNode} node node to evaluate\n     * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\n     * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\n     * @returns {void}\n     * @private\n     */\n    function checkSpacing(node, leftToken, rightToken) {\n      const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\n      const hasWhitespace = /\\s/u.test(textBetweenTokens);\n      const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n\n      /*\n       * never allowNewlines hasWhitespace hasNewline message\n       * F     F             F             F          Missing space between function name and paren.\n       * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * F     F             T             T          Unexpected newline between function name and paren.\n       * F     F             T             F          (OK)\n       * F     T             T             F          (OK)\n       * F     T             T             T          (OK)\n       * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * F     T             F             F          Missing space between function name and paren.\n       * T     T             F             F          (Invalid `never && allowNewlines`)\n       * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * T     T             T             T          (Invalid `never && allowNewlines`)\n       * T     T             T             F          (Invalid `never && allowNewlines`)\n       * T     F             T             F          Unexpected space between function name and paren.\n       * T     F             T             T          Unexpected space between function name and paren.\n       * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * T     F             F             F          (OK)\n       *\n       * T                   T                        Unexpected space between function name and paren.\n       * F                   F                        Missing space between function name and paren.\n       * F     F                           T          Unexpected newline between function name and paren.\n       */\n\n      if (never && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: leftToken.loc.end,\n            end: {\n              line: rightToken.loc.start.line,\n              column: rightToken.loc.start.column - 1\n            }\n          },\n          messageId: \"unexpectedWhitespace\",\n          fix(fixer) {\n            // Don't remove comments.\n            if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n              return null;\n            }\n\n            // If `?.` exists, it doesn't hide no-unexpected-multiline errors\n            if (node.optional) {\n              return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \"?.\");\n            }\n\n            /*\n             * Only autofix if there is no newline\n             * https://github.com/eslint/eslint/issues/7787\n             */\n            if (hasNewline) {\n              return null;\n            }\n            return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n          }\n        });\n      } else if (!never && !hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: {\n              line: leftToken.loc.end.line,\n              column: leftToken.loc.end.column - 1\n            },\n            end: rightToken.loc.start\n          },\n          messageId: \"missing\",\n          fix(fixer) {\n            if (node.optional) {\n              return null; // Not sure if inserting a space to either before/after `?.` token.\n            }\n\n            return fixer.insertTextBefore(rightToken, \" \");\n          }\n        });\n      } else if (!never && !allowNewlines && hasNewline) {\n        context.report({\n          node,\n          loc: {\n            start: leftToken.loc.end,\n            end: rightToken.loc.start\n          },\n          messageId: \"unexpectedNewline\",\n          fix(fixer) {\n            /*\n             * Only autofix if there is no newline\n             * https://github.com/eslint/eslint/issues/7787\n             * But if `?.` exists, it doesn't hide no-unexpected-multiline errors\n             */\n            if (!node.optional) {\n              return null;\n            }\n\n            // Don't remove comments.\n            if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n              return null;\n            }\n            const range = [leftToken.range[1], rightToken.range[0]];\n            const qdToken = sourceCode.getTokenAfter(leftToken);\n            if (qdToken.range[0] === leftToken.range[1]) {\n              return fixer.replaceTextRange(range, \"?. \");\n            }\n            if (qdToken.range[1] === rightToken.range[0]) {\n              return fixer.replaceTextRange(range, \" ?.\");\n            }\n            return fixer.replaceTextRange(range, \" ?. \");\n          }\n        });\n      }\n    }\n    return {\n      \"CallExpression, NewExpression\"(node) {\n        const lastToken = sourceCode.getLastToken(node);\n        const lastCalleeToken = sourceCode.getLastToken(node.callee);\n        const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\n        const prevToken = parenToken && sourceCode.getTokenBefore(parenToken, astUtils.isNotQuestionDotToken);\n\n        // Parens in NewExpression are optional\n        if (!(parenToken && parenToken.range[1] < node.range[1])) {\n          return;\n        }\n        checkSpacing(node, prevToken, parenToken);\n      },\n      ImportExpression(node) {\n        const leftToken = sourceCode.getFirstToken(node);\n        const rightToken = sourceCode.getTokenAfter(leftToken);\n        checkSpacing(node, leftToken, rightToken);\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","minItems","maxItems","properties","allowNewlines","additionalProperties","messages","unexpectedWhitespace","unexpectedNewline","missing","create","context","never","options","sourceCode","getSourceCode","text","getText","checkSpacing","node","leftToken","rightToken","textBetweenTokens","slice","range","replace","hasWhitespace","test","hasNewline","LINEBREAK_MATCHER","report","loc","start","end","line","column","messageId","fix","fixer","commentsExistBetween","optional","replaceTextRange","removeRange","insertTextBefore","qdToken","getTokenAfter","CallExpression, NewExpression","lastToken","getLastToken","lastCalleeToken","callee","parenToken","getFirstTokenBetween","isOpeningParenToken","prevToken","getTokenBefore","isNotQuestionDotToken","ImportExpression","getFirstToken"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/func-call-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to control spacing within function calls\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing between function identifiers and their invocations\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/func-call-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                allowNewlines: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            unexpectedWhitespace: \"Unexpected whitespace between function name and paren.\",\n            unexpectedNewline: \"Unexpected newline between function name and paren.\",\n            missing: \"Missing space between function name and paren.\"\n        }\n    },\n\n    create(context) {\n\n        const never = context.options[0] !== \"always\";\n        const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\n        const sourceCode = context.getSourceCode();\n        const text = sourceCode.getText();\n\n        /**\n         * Check if open space is present in a function name\n         * @param {ASTNode} node node to evaluate\n         * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\n         * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\n         * @returns {void}\n         * @private\n         */\n        function checkSpacing(node, leftToken, rightToken) {\n            const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\n            const hasWhitespace = /\\s/u.test(textBetweenTokens);\n            const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n\n            /*\n             * never allowNewlines hasWhitespace hasNewline message\n             * F     F             F             F          Missing space between function name and paren.\n             * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * F     F             T             T          Unexpected newline between function name and paren.\n             * F     F             T             F          (OK)\n             * F     T             T             F          (OK)\n             * F     T             T             T          (OK)\n             * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * F     T             F             F          Missing space between function name and paren.\n             * T     T             F             F          (Invalid `never && allowNewlines`)\n             * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * T     T             T             T          (Invalid `never && allowNewlines`)\n             * T     T             T             F          (Invalid `never && allowNewlines`)\n             * T     F             T             F          Unexpected space between function name and paren.\n             * T     F             T             T          Unexpected space between function name and paren.\n             * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * T     F             F             F          (OK)\n             *\n             * T                   T                        Unexpected space between function name and paren.\n             * F                   F                        Missing space between function name and paren.\n             * F     F                           T          Unexpected newline between function name and paren.\n             */\n\n            if (never && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: leftToken.loc.end,\n                        end: {\n                            line: rightToken.loc.start.line,\n                            column: rightToken.loc.start.column - 1\n                        }\n                    },\n                    messageId: \"unexpectedWhitespace\",\n                    fix(fixer) {\n\n                        // Don't remove comments.\n                        if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                            return null;\n                        }\n\n                        // If `?.` exists, it doesn't hide no-unexpected-multiline errors\n                        if (node.optional) {\n                            return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \"?.\");\n                        }\n\n                        /*\n                         * Only autofix if there is no newline\n                         * https://github.com/eslint/eslint/issues/7787\n                         */\n                        if (hasNewline) {\n                            return null;\n                        }\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                    }\n                });\n            } else if (!never && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: {\n                            line: leftToken.loc.end.line,\n                            column: leftToken.loc.end.column - 1\n                        },\n                        end: rightToken.loc.start\n                    },\n                    messageId: \"missing\",\n                    fix(fixer) {\n                        if (node.optional) {\n                            return null; // Not sure if inserting a space to either before/after `?.` token.\n                        }\n                        return fixer.insertTextBefore(rightToken, \" \");\n                    }\n                });\n            } else if (!never && !allowNewlines && hasNewline) {\n                context.report({\n                    node,\n                    loc: {\n                        start: leftToken.loc.end,\n                        end: rightToken.loc.start\n                    },\n                    messageId: \"unexpectedNewline\",\n                    fix(fixer) {\n\n                        /*\n                         * Only autofix if there is no newline\n                         * https://github.com/eslint/eslint/issues/7787\n                         * But if `?.` exists, it doesn't hide no-unexpected-multiline errors\n                         */\n                        if (!node.optional) {\n                            return null;\n                        }\n\n                        // Don't remove comments.\n                        if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                            return null;\n                        }\n\n                        const range = [leftToken.range[1], rightToken.range[0]];\n                        const qdToken = sourceCode.getTokenAfter(leftToken);\n\n                        if (qdToken.range[0] === leftToken.range[1]) {\n                            return fixer.replaceTextRange(range, \"?. \");\n                        }\n                        if (qdToken.range[1] === rightToken.range[0]) {\n                            return fixer.replaceTextRange(range, \" ?.\");\n                        }\n                        return fixer.replaceTextRange(range, \" ?. \");\n                    }\n                });\n            }\n        }\n\n        return {\n            \"CallExpression, NewExpression\"(node) {\n                const lastToken = sourceCode.getLastToken(node);\n                const lastCalleeToken = sourceCode.getLastToken(node.callee);\n                const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\n                const prevToken = parenToken && sourceCode.getTokenBefore(parenToken, astUtils.isNotQuestionDotToken);\n\n                // Parens in NewExpression are optional\n                if (!(parenToken && parenToken.range[1] < node.range[1])) {\n                    return;\n                }\n\n                checkSpacing(node, prevToken, parenToken);\n            },\n\n            ImportExpression(node) {\n                const leftToken = sourceCode.getFirstToken(node);\n                const rightToken = sourceCode.getTokenAfter(leftToken);\n\n                checkSpacing(node, leftToken, rightToken);\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}