{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow reassigning `function` declarations\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-func-assign\"\n    },\n    schema: [],\n    messages: {\n      isAFunction: \"'{{name}}' is a function.\"\n    }\n  },\n  create(context) {\n    /**\n     * Reports a reference if is non initializer and writable.\n     * @param {References} references Collection of reference to check.\n     * @returns {void}\n     */\n    function checkReference(references) {\n      astUtils.getModifyingReferences(references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          messageId: \"isAFunction\",\n          data: {\n            name: reference.identifier.name\n          }\n        });\n      });\n    }\n\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n      if (variable.defs[0].type === \"FunctionName\") {\n        checkReference(variable.references);\n      }\n    }\n\n    /**\n     * Checks parameters of a given function node.\n     * @param {ASTNode} node A function node to check.\n     * @returns {void}\n     */\n    function checkForFunction(node) {\n      context.getDeclaredVariables(node).forEach(checkVariable);\n    }\n    return {\n      FunctionDeclaration: checkForFunction,\n      FunctionExpression: checkForFunction\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","isAFunction","create","context","checkReference","references","getModifyingReferences","forEach","reference","report","node","identifier","messageId","data","name","checkVariable","variable","defs","checkForFunction","getDeclaredVariables","FunctionDeclaration","FunctionExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-func-assign.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow reassigning `function` declarations\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-func-assign\"\n        },\n\n        schema: [],\n\n        messages: {\n            isAFunction: \"'{{name}}' is a function.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Reports a reference if is non initializer and writable.\n         * @param {References} references Collection of reference to check.\n         * @returns {void}\n         */\n        function checkReference(references) {\n            astUtils.getModifyingReferences(references).forEach(reference => {\n                context.report({\n                    node: reference.identifier,\n                    messageId: \"isAFunction\",\n                    data: {\n                        name: reference.identifier.name\n                    }\n                });\n            });\n        }\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.defs[0].type === \"FunctionName\") {\n                checkReference(variable.references);\n            }\n        }\n\n        /**\n         * Checks parameters of a given function node.\n         * @param {ASTNode} node A function node to check.\n         * @returns {void}\n         */\n        function checkForFunction(node) {\n            context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n\n        return {\n            FunctionDeclaration: checkForFunction,\n            FunctionExpression: checkForFunction\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,8CAA8C;MAC3DC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,WAAW,EAAE;IACjB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,cAAcA,CAACC,UAAU,EAAE;MAChCjB,QAAQ,CAACkB,sBAAsB,CAACD,UAAU,CAAC,CAACE,OAAO,CAACC,SAAS,IAAI;QAC7DL,OAAO,CAACM,MAAM,CAAC;UACXC,IAAI,EAAEF,SAAS,CAACG,UAAU;UAC1BC,SAAS,EAAE,aAAa;UACxBC,IAAI,EAAE;YACFC,IAAI,EAAEN,SAAS,CAACG,UAAU,CAACG;UAC/B;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,aAAaA,CAACC,QAAQ,EAAE;MAC7B,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAACxB,IAAI,KAAK,cAAc,EAAE;QAC1CW,cAAc,CAACY,QAAQ,CAACX,UAAU,CAAC;MACvC;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASa,gBAAgBA,CAACR,IAAI,EAAE;MAC5BP,OAAO,CAACgB,oBAAoB,CAACT,IAAI,CAAC,CAACH,OAAO,CAACQ,aAAa,CAAC;IAC7D;IAEA,OAAO;MACHK,mBAAmB,EAAEF,gBAAgB;MACrCG,kBAAkB,EAAEH;IACxB,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}