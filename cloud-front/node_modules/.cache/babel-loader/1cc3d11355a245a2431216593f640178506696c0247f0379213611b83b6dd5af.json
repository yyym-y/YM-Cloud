{"ast":null,"code":"/**\n * @fileoverview Rule to flag the generator functions that does not have yield.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require generator functions to contain `yield`\",\n      category: \"ECMAScript 6\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/require-yield\"\n    },\n    schema: [],\n    messages: {\n      missingYield: \"This generator function does not have 'yield'.\"\n    }\n  },\n  create(context) {\n    const stack = [];\n\n    /**\n     * If the node is a generator function, start counting `yield` keywords.\n     * @param {Node} node A function node to check.\n     * @returns {void}\n     */\n    function beginChecking(node) {\n      if (node.generator) {\n        stack.push(0);\n      }\n    }\n\n    /**\n     * If the node is a generator function, end counting `yield` keywords, then\n     * reports result.\n     * @param {Node} node A function node to check.\n     * @returns {void}\n     */\n    function endChecking(node) {\n      if (!node.generator) {\n        return;\n      }\n      const countYield = stack.pop();\n      if (countYield === 0 && node.body.body.length > 0) {\n        context.report({\n          node,\n          messageId: \"missingYield\"\n        });\n      }\n    }\n    return {\n      FunctionDeclaration: beginChecking,\n      \"FunctionDeclaration:exit\": endChecking,\n      FunctionExpression: beginChecking,\n      \"FunctionExpression:exit\": endChecking,\n      // Increases the count of `yield` keyword.\n      YieldExpression() {\n        /* istanbul ignore else */\n        if (stack.length > 0) {\n          stack[stack.length - 1] += 1;\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","missingYield","create","context","stack","beginChecking","node","generator","push","endChecking","countYield","pop","body","length","report","messageId","FunctionDeclaration","FunctionExpression","YieldExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/require-yield.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag the generator functions that does not have yield.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require generator functions to contain `yield`\",\n            category: \"ECMAScript 6\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/require-yield\"\n        },\n\n        schema: [],\n\n        messages: {\n            missingYield: \"This generator function does not have 'yield'.\"\n        }\n    },\n\n    create(context) {\n        const stack = [];\n\n        /**\n         * If the node is a generator function, start counting `yield` keywords.\n         * @param {Node} node A function node to check.\n         * @returns {void}\n         */\n        function beginChecking(node) {\n            if (node.generator) {\n                stack.push(0);\n            }\n        }\n\n        /**\n         * If the node is a generator function, end counting `yield` keywords, then\n         * reports result.\n         * @param {Node} node A function node to check.\n         * @returns {void}\n         */\n        function endChecking(node) {\n            if (!node.generator) {\n                return;\n            }\n\n            const countYield = stack.pop();\n\n            if (countYield === 0 && node.body.body.length > 0) {\n                context.report({ node, messageId: \"missingYield\" });\n            }\n        }\n\n        return {\n            FunctionDeclaration: beginChecking,\n            \"FunctionDeclaration:exit\": endChecking,\n            FunctionExpression: beginChecking,\n            \"FunctionExpression:exit\": endChecking,\n\n            // Increases the count of `yield` keyword.\n            YieldExpression() {\n\n                /* istanbul ignore else */\n                if (stack.length > 0) {\n                    stack[stack.length - 1] += 1;\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAAAA,OAAA;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,gDAAgD;MAC7DC,QAAQ,EAAE,cAAc;MACxBC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,YAAY,EAAE;IAClB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,KAAK,GAAG,EAAE;;IAEhB;AACR;AACA;AACA;AACA;IACQ,SAASC,aAAaA,CAACC,IAAI,EAAE;MACzB,IAAIA,IAAI,CAACC,SAAS,EAAE;QAChBH,KAAK,CAACI,IAAI,CAAC,CAAC,CAAC;MACjB;IACJ;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,WAAWA,CAACH,IAAI,EAAE;MACvB,IAAI,CAACA,IAAI,CAACC,SAAS,EAAE;QACjB;MACJ;MAEA,MAAMG,UAAU,GAAGN,KAAK,CAACO,GAAG,CAAC,CAAC;MAE9B,IAAID,UAAU,KAAK,CAAC,IAAIJ,IAAI,CAACM,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QAC/CV,OAAO,CAACW,MAAM,CAAC;UAAER,IAAI;UAAES,SAAS,EAAE;QAAe,CAAC,CAAC;MACvD;IACJ;IAEA,OAAO;MACHC,mBAAmB,EAAEX,aAAa;MAClC,0BAA0B,EAAEI,WAAW;MACvCQ,kBAAkB,EAAEZ,aAAa;MACjC,yBAAyB,EAAEI,WAAW;MAEtC;MACAS,eAAeA,CAAA,EAAG;QAEd;QACA,IAAId,KAAK,CAACS,MAAM,GAAG,CAAC,EAAE;UAClBT,KAAK,CAACA,KAAK,CAACS,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;QAChC;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}