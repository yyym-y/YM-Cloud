{"ast":null,"code":"/**\n * @fileoverview Rule to check the spacing around the * in yield* expressions.\n * @author Bryan Smith\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing around the `*` in `yield*` expressions\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/yield-star-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      oneOf: [{\n        enum: [\"before\", \"after\", \"both\", \"neither\"]\n      }, {\n        type: \"object\",\n        properties: {\n          before: {\n            type: \"boolean\"\n          },\n          after: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      missingBefore: \"Missing space before *.\",\n      missingAfter: \"Missing space after *.\",\n      unexpectedBefore: \"Unexpected space before *.\",\n      unexpectedAfter: \"Unexpected space after *.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const mode = function (option) {\n      if (!option || typeof option === \"string\") {\n        return {\n          before: {\n            before: true,\n            after: false\n          },\n          after: {\n            before: false,\n            after: true\n          },\n          both: {\n            before: true,\n            after: true\n          },\n          neither: {\n            before: false,\n            after: false\n          }\n        }[option || \"after\"];\n      }\n      return option;\n    }(context.options[0]);\n\n    /**\n     * Checks the spacing between two tokens before or after the star token.\n     * @param {string} side Either \"before\" or \"after\".\n     * @param {Token} leftToken `function` keyword token if side is \"before\", or\n     *     star token if side is \"after\".\n     * @param {Token} rightToken Star token if side is \"before\", or identifier\n     *     token if side is \"after\".\n     * @returns {void}\n     */\n    function checkSpacing(side, leftToken, rightToken) {\n      if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) {\n        const after = leftToken.value === \"*\";\n        const spaceRequired = mode[side];\n        const node = after ? leftToken : rightToken;\n        let messageId = \"\";\n        if (spaceRequired) {\n          messageId = side === \"before\" ? \"missingBefore\" : \"missingAfter\";\n        } else {\n          messageId = side === \"before\" ? \"unexpectedBefore\" : \"unexpectedAfter\";\n        }\n        context.report({\n          node,\n          messageId,\n          fix(fixer) {\n            if (spaceRequired) {\n              if (after) {\n                return fixer.insertTextAfter(node, \" \");\n              }\n              return fixer.insertTextBefore(node, \" \");\n            }\n            return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n          }\n        });\n      }\n    }\n\n    /**\n     * Enforces the spacing around the star if node is a yield* expression.\n     * @param {ASTNode} node A yield expression node.\n     * @returns {void}\n     */\n    function checkExpression(node) {\n      if (!node.delegate) {\n        return;\n      }\n      const tokens = sourceCode.getFirstTokens(node, 3);\n      const yieldToken = tokens[0];\n      const starToken = tokens[1];\n      const nextToken = tokens[2];\n      checkSpacing(\"before\", yieldToken, starToken);\n      checkSpacing(\"after\", starToken, nextToken);\n    }\n    return {\n      YieldExpression: checkExpression\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","oneOf","enum","properties","before","after","additionalProperties","messages","missingBefore","missingAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","mode","option","both","neither","options","checkSpacing","side","leftToken","rightToken","isSpaceBetweenTokens","value","spaceRequired","node","messageId","report","fix","fixer","insertTextAfter","insertTextBefore","removeRange","range","checkExpression","delegate","tokens","getFirstTokens","yieldToken","starToken","nextToken","YieldExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/yield-star-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to check the spacing around the * in yield* expressions.\n * @author Bryan Smith\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing around the `*` in `yield*` expressions\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/yield-star-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"before\", \"after\", \"both\", \"neither\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            before: { type: \"boolean\" },\n                            after: { type: \"boolean\" }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            missingBefore: \"Missing space before *.\",\n            missingAfter: \"Missing space after *.\",\n            unexpectedBefore: \"Unexpected space before *.\",\n            unexpectedAfter: \"Unexpected space after *.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        const mode = (function(option) {\n            if (!option || typeof option === \"string\") {\n                return {\n                    before: { before: true, after: false },\n                    after: { before: false, after: true },\n                    both: { before: true, after: true },\n                    neither: { before: false, after: false }\n                }[option || \"after\"];\n            }\n            return option;\n        }(context.options[0]));\n\n        /**\n         * Checks the spacing between two tokens before or after the star token.\n         * @param {string} side Either \"before\" or \"after\".\n         * @param {Token} leftToken `function` keyword token if side is \"before\", or\n         *     star token if side is \"after\".\n         * @param {Token} rightToken Star token if side is \"before\", or identifier\n         *     token if side is \"after\".\n         * @returns {void}\n         */\n        function checkSpacing(side, leftToken, rightToken) {\n            if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) {\n                const after = leftToken.value === \"*\";\n                const spaceRequired = mode[side];\n                const node = after ? leftToken : rightToken;\n                let messageId = \"\";\n\n                if (spaceRequired) {\n                    messageId = side === \"before\" ? \"missingBefore\" : \"missingAfter\";\n                } else {\n                    messageId = side === \"before\" ? \"unexpectedBefore\" : \"unexpectedAfter\";\n                }\n\n                context.report({\n                    node,\n                    messageId,\n                    fix(fixer) {\n                        if (spaceRequired) {\n                            if (after) {\n                                return fixer.insertTextAfter(node, \" \");\n                            }\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Enforces the spacing around the star if node is a yield* expression.\n         * @param {ASTNode} node A yield expression node.\n         * @returns {void}\n         */\n        function checkExpression(node) {\n            if (!node.delegate) {\n                return;\n            }\n\n            const tokens = sourceCode.getFirstTokens(node, 3);\n            const yieldToken = tokens[0];\n            const starToken = tokens[1];\n            const nextToken = tokens[2];\n\n            checkSpacing(\"before\", yieldToken, starToken);\n            checkSpacing(\"after\", starToken, nextToken);\n        }\n\n        return {\n            YieldExpression: checkExpression\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}