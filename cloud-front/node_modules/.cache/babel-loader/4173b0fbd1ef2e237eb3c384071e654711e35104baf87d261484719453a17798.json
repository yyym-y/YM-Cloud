{"ast":null,"code":"/**\n * @fileoverview Rule to flag non-matching identifiers\n * @author Matthieu Larcher\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require identifiers to match a specified regular expression\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/id-match\"\n    },\n    schema: [{\n      type: \"string\"\n    }, {\n      type: \"object\",\n      properties: {\n        properties: {\n          type: \"boolean\",\n          default: false\n        },\n        onlyDeclarations: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoreDestructuring: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      notMatch: \"Identifier '{{name}}' does not match the pattern '{{pattern}}'.\"\n    }\n  },\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Options\n    //--------------------------------------------------------------------------\n    const pattern = context.options[0] || \"^.+$\",\n      regexp = new RegExp(pattern, \"u\");\n    const options = context.options[1] || {},\n      properties = !!options.properties,\n      onlyDeclarations = !!options.onlyDeclarations,\n      ignoreDestructuring = !!options.ignoreDestructuring;\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    // contains reported nodes to avoid reporting twice on destructuring with shorthand notation\n    const reported = new Map();\n    const ALLOWED_PARENT_TYPES = new Set([\"CallExpression\", \"NewExpression\"]);\n    const DECLARATION_TYPES = new Set([\"FunctionDeclaration\", \"VariableDeclarator\"]);\n    const IMPORT_TYPES = new Set([\"ImportSpecifier\", \"ImportNamespaceSpecifier\", \"ImportDefaultSpecifier\"]);\n\n    /**\n     * Checks if a string matches the provided pattern\n     * @param {string} name The string to check.\n     * @returns {boolean} if the string is a match\n     * @private\n     */\n    function isInvalid(name) {\n      return !regexp.test(name);\n    }\n\n    /**\n     * Checks if a parent of a node is an ObjectPattern.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} if the node is inside an ObjectPattern\n     * @private\n     */\n    function isInsideObjectPattern(node) {\n      let {\n        parent\n      } = node;\n      while (parent) {\n        if (parent.type === \"ObjectPattern\") {\n          return true;\n        }\n        parent = parent.parent;\n      }\n      return false;\n    }\n\n    /**\n     * Verifies if we should report an error or not based on the effective\n     * parent node and the identifier name.\n     * @param {ASTNode} effectiveParent The effective parent node of the node to be reported\n     * @param {string} name The identifier name of the identifier node\n     * @returns {boolean} whether an error should be reported or not\n     */\n    function shouldReport(effectiveParent, name) {\n      return (!onlyDeclarations || DECLARATION_TYPES.has(effectiveParent.type)) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && isInvalid(name);\n    }\n\n    /**\n     * Reports an AST node as a rule violation.\n     * @param {ASTNode} node The node to report.\n     * @returns {void}\n     * @private\n     */\n    function report(node) {\n      if (!reported.has(node)) {\n        context.report({\n          node,\n          messageId: \"notMatch\",\n          data: {\n            name: node.name,\n            pattern\n          }\n        });\n        reported.set(node, true);\n      }\n    }\n    return {\n      Identifier(node) {\n        const name = node.name,\n          parent = node.parent,\n          effectiveParent = parent.type === \"MemberExpression\" ? parent.parent : parent;\n        if (parent.type === \"MemberExpression\") {\n          if (!properties) {\n            return;\n          }\n\n          // Always check object names\n          if (parent.object.type === \"Identifier\" && parent.object.name === name) {\n            if (isInvalid(name)) {\n              report(node);\n            }\n\n            // Report AssignmentExpressions left side's assigned variable id\n          } else if (effectiveParent.type === \"AssignmentExpression\" && effectiveParent.left.type === \"MemberExpression\" && effectiveParent.left.property.name === node.name) {\n            if (isInvalid(name)) {\n              report(node);\n            }\n\n            // Report AssignmentExpressions only if they are the left side of the assignment\n          } else if (effectiveParent.type === \"AssignmentExpression\" && effectiveParent.right.type !== \"MemberExpression\") {\n            if (isInvalid(name)) {\n              report(node);\n            }\n          }\n\n          /*\n           * Properties have their own rules, and\n           * AssignmentPattern nodes can be treated like Properties:\n           * e.g.: const { no_camelcased = false } = bar;\n           */\n        } else if (parent.type === \"Property\" || parent.type === \"AssignmentPattern\") {\n          if (parent.parent && parent.parent.type === \"ObjectPattern\") {\n            if (parent.shorthand && parent.value.left && isInvalid(name)) {\n              report(node);\n            }\n            const assignmentKeyEqualsValue = parent.key.name === parent.value.name;\n\n            // prevent checking righthand side of destructured object\n            if (!assignmentKeyEqualsValue && parent.key === node) {\n              return;\n            }\n            const valueIsInvalid = parent.value.name && isInvalid(name);\n\n            // ignore destructuring if the option is set, unless a new identifier is created\n            if (valueIsInvalid && !(assignmentKeyEqualsValue && ignoreDestructuring)) {\n              report(node);\n            }\n          }\n\n          // never check properties or always ignore destructuring\n          if (!properties || ignoreDestructuring && isInsideObjectPattern(node)) {\n            return;\n          }\n\n          // don't check right hand side of AssignmentExpression to prevent duplicate warnings\n          if (parent.right !== node && shouldReport(effectiveParent, name)) {\n            report(node);\n          }\n\n          // Check if it's an import specifier\n        } else if (IMPORT_TYPES.has(parent.type)) {\n          // Report only if the local imported identifier is invalid\n          if (parent.local && parent.local.name === node.name && isInvalid(name)) {\n            report(node);\n          }\n\n          // Report anything that is invalid that isn't a CallExpression\n        } else if (shouldReport(effectiveParent, name)) {\n          report(node);\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","default","onlyDeclarations","ignoreDestructuring","additionalProperties","messages","notMatch","create","context","pattern","options","regexp","RegExp","reported","Map","ALLOWED_PARENT_TYPES","Set","DECLARATION_TYPES","IMPORT_TYPES","isInvalid","name","test","isInsideObjectPattern","node","parent","shouldReport","effectiveParent","has","report","messageId","data","set","Identifier","object","left","property","right","shorthand","value","assignmentKeyEqualsValue","key","valueIsInvalid","local"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/id-match.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag non-matching identifiers\n * @author Matthieu Larcher\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require identifiers to match a specified regular expression\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/id-match\"\n        },\n\n        schema: [\n            {\n                type: \"string\"\n            },\n            {\n                type: \"object\",\n                properties: {\n                    properties: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    onlyDeclarations: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    ignoreDestructuring: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            notMatch: \"Identifier '{{name}}' does not match the pattern '{{pattern}}'.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Options\n        //--------------------------------------------------------------------------\n        const pattern = context.options[0] || \"^.+$\",\n            regexp = new RegExp(pattern, \"u\");\n\n        const options = context.options[1] || {},\n            properties = !!options.properties,\n            onlyDeclarations = !!options.onlyDeclarations,\n            ignoreDestructuring = !!options.ignoreDestructuring;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // contains reported nodes to avoid reporting twice on destructuring with shorthand notation\n        const reported = new Map();\n        const ALLOWED_PARENT_TYPES = new Set([\"CallExpression\", \"NewExpression\"]);\n        const DECLARATION_TYPES = new Set([\"FunctionDeclaration\", \"VariableDeclarator\"]);\n        const IMPORT_TYPES = new Set([\"ImportSpecifier\", \"ImportNamespaceSpecifier\", \"ImportDefaultSpecifier\"]);\n\n        /**\n         * Checks if a string matches the provided pattern\n         * @param {string} name The string to check.\n         * @returns {boolean} if the string is a match\n         * @private\n         */\n        function isInvalid(name) {\n            return !regexp.test(name);\n        }\n\n        /**\n         * Checks if a parent of a node is an ObjectPattern.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} if the node is inside an ObjectPattern\n         * @private\n         */\n        function isInsideObjectPattern(node) {\n            let { parent } = node;\n\n            while (parent) {\n                if (parent.type === \"ObjectPattern\") {\n                    return true;\n                }\n\n                parent = parent.parent;\n            }\n\n            return false;\n        }\n\n        /**\n         * Verifies if we should report an error or not based on the effective\n         * parent node and the identifier name.\n         * @param {ASTNode} effectiveParent The effective parent node of the node to be reported\n         * @param {string} name The identifier name of the identifier node\n         * @returns {boolean} whether an error should be reported or not\n         */\n        function shouldReport(effectiveParent, name) {\n            return (!onlyDeclarations || DECLARATION_TYPES.has(effectiveParent.type)) &&\n                !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && isInvalid(name);\n        }\n\n        /**\n         * Reports an AST node as a rule violation.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         * @private\n         */\n        function report(node) {\n            if (!reported.has(node)) {\n                context.report({\n                    node,\n                    messageId: \"notMatch\",\n                    data: {\n                        name: node.name,\n                        pattern\n                    }\n                });\n                reported.set(node, true);\n            }\n        }\n\n        return {\n\n            Identifier(node) {\n                const name = node.name,\n                    parent = node.parent,\n                    effectiveParent = (parent.type === \"MemberExpression\") ? parent.parent : parent;\n\n                if (parent.type === \"MemberExpression\") {\n\n                    if (!properties) {\n                        return;\n                    }\n\n                    // Always check object names\n                    if (parent.object.type === \"Identifier\" &&\n                        parent.object.name === name) {\n                        if (isInvalid(name)) {\n                            report(node);\n                        }\n\n                    // Report AssignmentExpressions left side's assigned variable id\n                    } else if (effectiveParent.type === \"AssignmentExpression\" &&\n                        effectiveParent.left.type === \"MemberExpression\" &&\n                        effectiveParent.left.property.name === node.name) {\n                        if (isInvalid(name)) {\n                            report(node);\n                        }\n\n                    // Report AssignmentExpressions only if they are the left side of the assignment\n                    } else if (effectiveParent.type === \"AssignmentExpression\" && effectiveParent.right.type !== \"MemberExpression\") {\n                        if (isInvalid(name)) {\n                            report(node);\n                        }\n                    }\n\n                /*\n                 * Properties have their own rules, and\n                 * AssignmentPattern nodes can be treated like Properties:\n                 * e.g.: const { no_camelcased = false } = bar;\n                 */\n                } else if (parent.type === \"Property\" || parent.type === \"AssignmentPattern\") {\n\n                    if (parent.parent && parent.parent.type === \"ObjectPattern\") {\n                        if (parent.shorthand && parent.value.left && isInvalid(name)) {\n\n                            report(node);\n                        }\n\n                        const assignmentKeyEqualsValue = parent.key.name === parent.value.name;\n\n                        // prevent checking righthand side of destructured object\n                        if (!assignmentKeyEqualsValue && parent.key === node) {\n                            return;\n                        }\n\n                        const valueIsInvalid = parent.value.name && isInvalid(name);\n\n                        // ignore destructuring if the option is set, unless a new identifier is created\n                        if (valueIsInvalid && !(assignmentKeyEqualsValue && ignoreDestructuring)) {\n                            report(node);\n                        }\n                    }\n\n                    // never check properties or always ignore destructuring\n                    if (!properties || (ignoreDestructuring && isInsideObjectPattern(node))) {\n                        return;\n                    }\n\n                    // don't check right hand side of AssignmentExpression to prevent duplicate warnings\n                    if (parent.right !== node && shouldReport(effectiveParent, name)) {\n                        report(node);\n                    }\n\n                // Check if it's an import specifier\n                } else if (IMPORT_TYPES.has(parent.type)) {\n\n                    // Report only if the local imported identifier is invalid\n                    if (parent.local && parent.local.name === node.name && isInvalid(name)) {\n                        report(node);\n                    }\n\n                // Report anything that is invalid that isn't a CallExpression\n                } else if (shouldReport(effectiveParent, name)) {\n                    report(node);\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}