{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of comma operator\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_OPTIONS = {\n  allowInParentheses: true\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow comma operators\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-sequences\"\n    },\n    schema: [{\n      properties: {\n        allowInParentheses: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedCommaExpression: \"Unexpected use of comma operator.\"\n    }\n  },\n  create(context) {\n    const options = Object.assign({}, DEFAULT_OPTIONS, context.options[0]);\n    const sourceCode = context.getSourceCode();\n\n    /**\n     * Parts of the grammar that are required to have parens.\n     */\n    const parenthesized = {\n      DoWhileStatement: \"test\",\n      IfStatement: \"test\",\n      SwitchStatement: \"discriminant\",\n      WhileStatement: \"test\",\n      WithStatement: \"object\",\n      ArrowFunctionExpression: \"body\"\n\n      /*\n       * Omitting CallExpression - commas are parsed as argument separators\n       * Omitting NewExpression - commas are parsed as argument separators\n       * Omitting ForInStatement - parts aren't individually parenthesised\n       * Omitting ForStatement - parts aren't individually parenthesised\n       */\n    };\n\n    /**\n     * Determines whether a node is required by the grammar to be wrapped in\n     * parens, e.g. the test of an if statement.\n     * @param {ASTNode} node The AST node\n     * @returns {boolean} True if parens around node belong to parent node.\n     */\n    function requiresExtraParens(node) {\n      return node.parent && parenthesized[node.parent.type] && node === node.parent[parenthesized[node.parent.type]];\n    }\n\n    /**\n     * Check if a node is wrapped in parens.\n     * @param {ASTNode} node The AST node\n     * @returns {boolean} True if the node has a paren on each side.\n     */\n    function isParenthesised(node) {\n      return astUtils.isParenthesised(sourceCode, node);\n    }\n\n    /**\n     * Check if a node is wrapped in two levels of parens.\n     * @param {ASTNode} node The AST node\n     * @returns {boolean} True if two parens surround the node on each side.\n     */\n    function isParenthesisedTwice(node) {\n      const previousToken = sourceCode.getTokenBefore(node, 1),\n        nextToken = sourceCode.getTokenAfter(node, 1);\n      return isParenthesised(node) && previousToken && nextToken && astUtils.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] && astUtils.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];\n    }\n    return {\n      SequenceExpression(node) {\n        // Always allow sequences in for statement update\n        if (node.parent.type === \"ForStatement\" && (node === node.parent.init || node === node.parent.update)) {\n          return;\n        }\n\n        // Wrapping a sequence in extra parens indicates intent\n        if (options.allowInParentheses) {\n          if (requiresExtraParens(node)) {\n            if (isParenthesisedTwice(node)) {\n              return;\n            }\n          } else {\n            if (isParenthesised(node)) {\n              return;\n            }\n          }\n        }\n        const firstCommaToken = sourceCode.getTokenAfter(node.expressions[0], astUtils.isCommaToken);\n        context.report({\n          node,\n          loc: firstCommaToken.loc,\n          messageId: \"unexpectedCommaExpression\"\n        });\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","DEFAULT_OPTIONS","allowInParentheses","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","default","additionalProperties","messages","unexpectedCommaExpression","create","context","options","Object","assign","sourceCode","getSourceCode","parenthesized","DoWhileStatement","IfStatement","SwitchStatement","WhileStatement","WithStatement","ArrowFunctionExpression","requiresExtraParens","node","parent","isParenthesised","isParenthesisedTwice","previousToken","getTokenBefore","nextToken","getTokenAfter","isOpeningParenToken","range","isClosingParenToken","SequenceExpression","init","update","firstCommaToken","expressions","isCommaToken","report","loc","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-sequences.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of comma operator\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_OPTIONS = {\n    allowInParentheses: true\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow comma operators\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-sequences\"\n        },\n\n        schema: [{\n            properties: {\n                allowInParentheses: {\n                    type: \"boolean\",\n                    default: true\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            unexpectedCommaExpression: \"Unexpected use of comma operator.\"\n        }\n    },\n\n    create(context) {\n        const options = Object.assign({}, DEFAULT_OPTIONS, context.options[0]);\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Parts of the grammar that are required to have parens.\n         */\n        const parenthesized = {\n            DoWhileStatement: \"test\",\n            IfStatement: \"test\",\n            SwitchStatement: \"discriminant\",\n            WhileStatement: \"test\",\n            WithStatement: \"object\",\n            ArrowFunctionExpression: \"body\"\n\n            /*\n             * Omitting CallExpression - commas are parsed as argument separators\n             * Omitting NewExpression - commas are parsed as argument separators\n             * Omitting ForInStatement - parts aren't individually parenthesised\n             * Omitting ForStatement - parts aren't individually parenthesised\n             */\n        };\n\n        /**\n         * Determines whether a node is required by the grammar to be wrapped in\n         * parens, e.g. the test of an if statement.\n         * @param {ASTNode} node The AST node\n         * @returns {boolean} True if parens around node belong to parent node.\n         */\n        function requiresExtraParens(node) {\n            return node.parent && parenthesized[node.parent.type] &&\n                    node === node.parent[parenthesized[node.parent.type]];\n        }\n\n        /**\n         * Check if a node is wrapped in parens.\n         * @param {ASTNode} node The AST node\n         * @returns {boolean} True if the node has a paren on each side.\n         */\n        function isParenthesised(node) {\n            return astUtils.isParenthesised(sourceCode, node);\n        }\n\n        /**\n         * Check if a node is wrapped in two levels of parens.\n         * @param {ASTNode} node The AST node\n         * @returns {boolean} True if two parens surround the node on each side.\n         */\n        function isParenthesisedTwice(node) {\n            const previousToken = sourceCode.getTokenBefore(node, 1),\n                nextToken = sourceCode.getTokenAfter(node, 1);\n\n            return isParenthesised(node) && previousToken && nextToken &&\n                astUtils.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] &&\n                astUtils.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];\n        }\n\n        return {\n            SequenceExpression(node) {\n\n                // Always allow sequences in for statement update\n                if (node.parent.type === \"ForStatement\" &&\n                        (node === node.parent.init || node === node.parent.update)) {\n                    return;\n                }\n\n                // Wrapping a sequence in extra parens indicates intent\n                if (options.allowInParentheses) {\n                    if (requiresExtraParens(node)) {\n                        if (isParenthesisedTwice(node)) {\n                            return;\n                        }\n                    } else {\n                        if (isParenthesised(node)) {\n                            return;\n                        }\n                    }\n                }\n\n                const firstCommaToken = sourceCode.getTokenAfter(node.expressions[0], astUtils.isCommaToken);\n\n                context.report({ node, loc: firstCommaToken.loc, messageId: \"unexpectedCommaExpression\" });\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}