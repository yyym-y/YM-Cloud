{"ast":null,"code":"/**\n * @fileoverview Validates newlines before and after dots\n * @author Greg Cochard\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent newlines before and after dots\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/dot-location\"\n    },\n    schema: [{\n      enum: [\"object\", \"property\"]\n    }],\n    fixable: \"code\",\n    messages: {\n      expectedDotAfterObject: \"Expected dot to be on same line as object.\",\n      expectedDotBeforeProperty: \"Expected dot to be on same line as property.\"\n    }\n  },\n  create(context) {\n    const config = context.options[0];\n\n    // default to onObject if no preference is passed\n    const onObject = config === \"object\" || !config;\n    const sourceCode = context.getSourceCode();\n\n    /**\n     * Reports if the dot between object and property is on the correct location.\n     * @param {ASTNode} node The `MemberExpression` node.\n     * @returns {void}\n     */\n    function checkDotLocation(node) {\n      const property = node.property;\n      const dotToken = sourceCode.getTokenBefore(property);\n      if (onObject) {\n        // `obj` expression can be parenthesized, but those paren tokens are not a part of the `obj` node.\n        const tokenBeforeDot = sourceCode.getTokenBefore(dotToken);\n        if (!astUtils.isTokenOnSameLine(tokenBeforeDot, dotToken)) {\n          context.report({\n            node,\n            loc: dotToken.loc,\n            messageId: \"expectedDotAfterObject\",\n            *fix(fixer) {\n              if (dotToken.value.startsWith(\".\") && astUtils.isDecimalIntegerNumericToken(tokenBeforeDot)) {\n                yield fixer.insertTextAfter(tokenBeforeDot, ` ${dotToken.value}`);\n              } else {\n                yield fixer.insertTextAfter(tokenBeforeDot, dotToken.value);\n              }\n              yield fixer.remove(dotToken);\n            }\n          });\n        }\n      } else if (!astUtils.isTokenOnSameLine(dotToken, property)) {\n        context.report({\n          node,\n          loc: dotToken.loc,\n          messageId: \"expectedDotBeforeProperty\",\n          *fix(fixer) {\n            yield fixer.remove(dotToken);\n            yield fixer.insertTextBefore(property, dotToken.value);\n          }\n        });\n      }\n    }\n\n    /**\n     * Checks the spacing of the dot within a member expression.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n    function checkNode(node) {\n      if (!node.computed) {\n        checkDotLocation(node);\n      }\n    }\n    return {\n      MemberExpression: checkNode\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","fixable","messages","expectedDotAfterObject","expectedDotBeforeProperty","create","context","config","options","onObject","sourceCode","getSourceCode","checkDotLocation","node","property","dotToken","getTokenBefore","tokenBeforeDot","isTokenOnSameLine","report","loc","messageId","fix","fixer","value","startsWith","isDecimalIntegerNumericToken","insertTextAfter","remove","insertTextBefore","checkNode","computed","MemberExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/dot-location.js"],"sourcesContent":["/**\n * @fileoverview Validates newlines before and after dots\n * @author Greg Cochard\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent newlines before and after dots\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/dot-location\"\n        },\n\n        schema: [\n            {\n                enum: [\"object\", \"property\"]\n            }\n        ],\n\n        fixable: \"code\",\n\n        messages: {\n            expectedDotAfterObject: \"Expected dot to be on same line as object.\",\n            expectedDotBeforeProperty: \"Expected dot to be on same line as property.\"\n        }\n    },\n\n    create(context) {\n\n        const config = context.options[0];\n\n        // default to onObject if no preference is passed\n        const onObject = config === \"object\" || !config;\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Reports if the dot between object and property is on the correct location.\n         * @param {ASTNode} node The `MemberExpression` node.\n         * @returns {void}\n         */\n        function checkDotLocation(node) {\n            const property = node.property;\n            const dotToken = sourceCode.getTokenBefore(property);\n\n            if (onObject) {\n\n                // `obj` expression can be parenthesized, but those paren tokens are not a part of the `obj` node.\n                const tokenBeforeDot = sourceCode.getTokenBefore(dotToken);\n\n                if (!astUtils.isTokenOnSameLine(tokenBeforeDot, dotToken)) {\n                    context.report({\n                        node,\n                        loc: dotToken.loc,\n                        messageId: \"expectedDotAfterObject\",\n                        *fix(fixer) {\n                            if (dotToken.value.startsWith(\".\") && astUtils.isDecimalIntegerNumericToken(tokenBeforeDot)) {\n                                yield fixer.insertTextAfter(tokenBeforeDot, ` ${dotToken.value}`);\n                            } else {\n                                yield fixer.insertTextAfter(tokenBeforeDot, dotToken.value);\n                            }\n                            yield fixer.remove(dotToken);\n                        }\n                    });\n                }\n            } else if (!astUtils.isTokenOnSameLine(dotToken, property)) {\n                context.report({\n                    node,\n                    loc: dotToken.loc,\n                    messageId: \"expectedDotBeforeProperty\",\n                    *fix(fixer) {\n                        yield fixer.remove(dotToken);\n                        yield fixer.insertTextBefore(property, dotToken.value);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Checks the spacing of the dot within a member expression.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkNode(node) {\n            if (!node.computed) {\n                checkDotLocation(node);\n            }\n        }\n\n        return {\n            MemberExpression: checkNode\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,mDAAmD;MAChEC,QAAQ,EAAE,gBAAgB;MAC1BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,QAAQ,EAAE,UAAU;IAC/B,CAAC,CACJ;IAEDC,OAAO,EAAE,MAAM;IAEfC,QAAQ,EAAE;MACNC,sBAAsB,EAAE,4CAA4C;MACpEC,yBAAyB,EAAE;IAC/B;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC;;IAEjC;IACA,MAAMC,QAAQ,GAAGF,MAAM,KAAK,QAAQ,IAAI,CAACA,MAAM;IAE/C,MAAMG,UAAU,GAAGJ,OAAO,CAACK,aAAa,CAAC,CAAC;;IAE1C;AACR;AACA;AACA;AACA;IACQ,SAASC,gBAAgBA,CAACC,IAAI,EAAE;MAC5B,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;MAC9B,MAAMC,QAAQ,GAAGL,UAAU,CAACM,cAAc,CAACF,QAAQ,CAAC;MAEpD,IAAIL,QAAQ,EAAE;QAEV;QACA,MAAMQ,cAAc,GAAGP,UAAU,CAACM,cAAc,CAACD,QAAQ,CAAC;QAE1D,IAAI,CAAC3B,QAAQ,CAAC8B,iBAAiB,CAACD,cAAc,EAAEF,QAAQ,CAAC,EAAE;UACvDT,OAAO,CAACa,MAAM,CAAC;YACXN,IAAI;YACJO,GAAG,EAAEL,QAAQ,CAACK,GAAG;YACjBC,SAAS,EAAE,wBAAwB;YACnC,CAACC,GAAGA,CAACC,KAAK,EAAE;cACR,IAAIR,QAAQ,CAACS,KAAK,CAACC,UAAU,CAAC,GAAG,CAAC,IAAIrC,QAAQ,CAACsC,4BAA4B,CAACT,cAAc,CAAC,EAAE;gBACzF,MAAMM,KAAK,CAACI,eAAe,CAACV,cAAc,EAAG,IAAGF,QAAQ,CAACS,KAAM,EAAC,CAAC;cACrE,CAAC,MAAM;gBACH,MAAMD,KAAK,CAACI,eAAe,CAACV,cAAc,EAAEF,QAAQ,CAACS,KAAK,CAAC;cAC/D;cACA,MAAMD,KAAK,CAACK,MAAM,CAACb,QAAQ,CAAC;YAChC;UACJ,CAAC,CAAC;QACN;MACJ,CAAC,MAAM,IAAI,CAAC3B,QAAQ,CAAC8B,iBAAiB,CAACH,QAAQ,EAAED,QAAQ,CAAC,EAAE;QACxDR,OAAO,CAACa,MAAM,CAAC;UACXN,IAAI;UACJO,GAAG,EAAEL,QAAQ,CAACK,GAAG;UACjBC,SAAS,EAAE,2BAA2B;UACtC,CAACC,GAAGA,CAACC,KAAK,EAAE;YACR,MAAMA,KAAK,CAACK,MAAM,CAACb,QAAQ,CAAC;YAC5B,MAAMQ,KAAK,CAACM,gBAAgB,CAACf,QAAQ,EAAEC,QAAQ,CAACS,KAAK,CAAC;UAC1D;QACJ,CAAC,CAAC;MACN;IACJ;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASM,SAASA,CAACjB,IAAI,EAAE;MACrB,IAAI,CAACA,IAAI,CAACkB,QAAQ,EAAE;QAChBnB,gBAAgB,CAACC,IAAI,CAAC;MAC1B;IACJ;IAEA,OAAO;MACHmB,gBAAgB,EAAEF;IACtB,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}