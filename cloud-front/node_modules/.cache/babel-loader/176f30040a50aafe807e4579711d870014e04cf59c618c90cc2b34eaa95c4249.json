{"ast":null,"code":"/**\n * @fileoverview Rule to\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the variable object of `arguments` which is defined implicitly.\n * @param {eslint-scope.Scope} scope A scope to get.\n * @returns {eslint-scope.Variable} The found variable object.\n */\nfunction getVariableOfArguments(scope) {\n  const variables = scope.variables;\n  for (let i = 0; i < variables.length; ++i) {\n    const variable = variables[i];\n    if (variable.name === \"arguments\") {\n      /*\n       * If there was a parameter which is named \"arguments\", the implicit \"arguments\" is not defined.\n       * So does fast return with null.\n       */\n      return variable.identifiers.length === 0 ? variable : null;\n    }\n  }\n\n  /* istanbul ignore next : unreachable */\n  return null;\n}\n\n/**\n * Checks if the given reference is not normal member access.\n *\n * - arguments         .... true    // not member access\n * - arguments[i]      .... true    // computed member access\n * - arguments[0]      .... true    // computed member access\n * - arguments.length  .... false   // normal member access\n * @param {eslint-scope.Reference} reference The reference to check.\n * @returns {boolean} `true` if the reference is not normal member access.\n */\nfunction isNotNormalMemberAccess(reference) {\n  const id = reference.identifier;\n  const parent = id.parent;\n  return !(parent.type === \"MemberExpression\" && parent.object === id && !parent.computed);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require rest parameters instead of `arguments`\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-rest-params\"\n    },\n    schema: [],\n    messages: {\n      preferRestParams: \"Use the rest parameters instead of 'arguments'.\"\n    }\n  },\n  create(context) {\n    /**\n     * Reports a given reference.\n     * @param {eslint-scope.Reference} reference A reference to report.\n     * @returns {void}\n     */\n    function report(reference) {\n      context.report({\n        node: reference.identifier,\n        loc: reference.identifier.loc,\n        messageId: \"preferRestParams\"\n      });\n    }\n\n    /**\n     * Reports references of the implicit `arguments` variable if exist.\n     * @returns {void}\n     */\n    function checkForArguments() {\n      const argumentsVar = getVariableOfArguments(context.getScope());\n      if (argumentsVar) {\n        argumentsVar.references.filter(isNotNormalMemberAccess).forEach(report);\n      }\n    }\n    return {\n      \"FunctionDeclaration:exit\": checkForArguments,\n      \"FunctionExpression:exit\": checkForArguments\n    };\n  }\n};","map":{"version":3,"names":["getVariableOfArguments","scope","variables","i","length","variable","name","identifiers","isNotNormalMemberAccess","reference","id","identifier","parent","type","object","computed","module","exports","meta","docs","description","category","recommended","url","schema","messages","preferRestParams","create","context","report","node","loc","messageId","checkForArguments","argumentsVar","getScope","references","filter","forEach"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/prefer-rest-params.js"],"sourcesContent":["/**\n * @fileoverview Rule to\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the variable object of `arguments` which is defined implicitly.\n * @param {eslint-scope.Scope} scope A scope to get.\n * @returns {eslint-scope.Variable} The found variable object.\n */\nfunction getVariableOfArguments(scope) {\n    const variables = scope.variables;\n\n    for (let i = 0; i < variables.length; ++i) {\n        const variable = variables[i];\n\n        if (variable.name === \"arguments\") {\n\n            /*\n             * If there was a parameter which is named \"arguments\", the implicit \"arguments\" is not defined.\n             * So does fast return with null.\n             */\n            return (variable.identifiers.length === 0) ? variable : null;\n        }\n    }\n\n    /* istanbul ignore next : unreachable */\n    return null;\n}\n\n/**\n * Checks if the given reference is not normal member access.\n *\n * - arguments         .... true    // not member access\n * - arguments[i]      .... true    // computed member access\n * - arguments[0]      .... true    // computed member access\n * - arguments.length  .... false   // normal member access\n * @param {eslint-scope.Reference} reference The reference to check.\n * @returns {boolean} `true` if the reference is not normal member access.\n */\nfunction isNotNormalMemberAccess(reference) {\n    const id = reference.identifier;\n    const parent = id.parent;\n\n    return !(\n        parent.type === \"MemberExpression\" &&\n        parent.object === id &&\n        !parent.computed\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require rest parameters instead of `arguments`\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-rest-params\"\n        },\n\n        schema: [],\n\n        messages: {\n            preferRestParams: \"Use the rest parameters instead of 'arguments'.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Reports a given reference.\n         * @param {eslint-scope.Reference} reference A reference to report.\n         * @returns {void}\n         */\n        function report(reference) {\n            context.report({\n                node: reference.identifier,\n                loc: reference.identifier.loc,\n                messageId: \"preferRestParams\"\n            });\n        }\n\n        /**\n         * Reports references of the implicit `arguments` variable if exist.\n         * @returns {void}\n         */\n        function checkForArguments() {\n            const argumentsVar = getVariableOfArguments(context.getScope());\n\n            if (argumentsVar) {\n                argumentsVar\n                    .references\n                    .filter(isNotNormalMemberAccess)\n                    .forEach(report);\n            }\n        }\n\n        return {\n            \"FunctionDeclaration:exit\": checkForArguments,\n            \"FunctionExpression:exit\": checkForArguments\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,sBAAsBA,CAACC,KAAK,EAAE;EACnC,MAAMC,SAAS,GAAGD,KAAK,CAACC,SAAS;EAEjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACE,MAAM,EAAE,EAAED,CAAC,EAAE;IACvC,MAAME,QAAQ,GAAGH,SAAS,CAACC,CAAC,CAAC;IAE7B,IAAIE,QAAQ,CAACC,IAAI,KAAK,WAAW,EAAE;MAE/B;AACZ;AACA;AACA;MACY,OAAQD,QAAQ,CAACE,WAAW,CAACH,MAAM,KAAK,CAAC,GAAIC,QAAQ,GAAG,IAAI;IAChE;EACJ;;EAEA;EACA,OAAO,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,uBAAuBA,CAACC,SAAS,EAAE;EACxC,MAAMC,EAAE,GAAGD,SAAS,CAACE,UAAU;EAC/B,MAAMC,MAAM,GAAGF,EAAE,CAACE,MAAM;EAExB,OAAO,EACHA,MAAM,CAACC,IAAI,KAAK,kBAAkB,IAClCD,MAAM,CAACE,MAAM,KAAKJ,EAAE,IACpB,CAACE,MAAM,CAACG,QAAQ,CACnB;AACL;;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFL,IAAI,EAAE,YAAY;IAElBM,IAAI,EAAE;MACFC,WAAW,EAAE,gDAAgD;MAC7DC,QAAQ,EAAE,cAAc;MACxBC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,gBAAgB,EAAE;IACtB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,MAAMA,CAACpB,SAAS,EAAE;MACvBmB,OAAO,CAACC,MAAM,CAAC;QACXC,IAAI,EAAErB,SAAS,CAACE,UAAU;QAC1BoB,GAAG,EAAEtB,SAAS,CAACE,UAAU,CAACoB,GAAG;QAC7BC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;IACQ,SAASC,iBAAiBA,CAAA,EAAG;MACzB,MAAMC,YAAY,GAAGlC,sBAAsB,CAAC4B,OAAO,CAACO,QAAQ,CAAC,CAAC,CAAC;MAE/D,IAAID,YAAY,EAAE;QACdA,YAAY,CACPE,UAAU,CACVC,MAAM,CAAC7B,uBAAuB,CAAC,CAC/B8B,OAAO,CAACT,MAAM,CAAC;MACxB;IACJ;IAEA,OAAO;MACH,0BAA0B,EAAEI,iBAAiB;MAC7C,yBAAyB,EAAEA;IAC/B,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}