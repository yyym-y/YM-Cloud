{"ast":null,"code":"/**\n * @fileoverview Ensure handling of errors when we know they exist.\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"require error handling in callbacks\",\n      category: \"Node.js and CommonJS\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/handle-callback-err\"\n    },\n    schema: [{\n      type: \"string\"\n    }],\n    messages: {\n      expected: \"Expected error to be handled.\"\n    }\n  },\n  create(context) {\n    const errorArgument = context.options[0] || \"err\";\n\n    /**\n     * Checks if the given argument should be interpreted as a regexp pattern.\n     * @param {string} stringToCheck The string which should be checked.\n     * @returns {boolean} Whether or not the string should be interpreted as a pattern.\n     */\n    function isPattern(stringToCheck) {\n      const firstChar = stringToCheck[0];\n      return firstChar === \"^\";\n    }\n\n    /**\n     * Checks if the given name matches the configured error argument.\n     * @param {string} name The name which should be compared.\n     * @returns {boolean} Whether or not the given name matches the configured error variable name.\n     */\n    function matchesConfiguredErrorName(name) {\n      if (isPattern(errorArgument)) {\n        const regexp = new RegExp(errorArgument, \"u\");\n        return regexp.test(name);\n      }\n      return name === errorArgument;\n    }\n\n    /**\n     * Get the parameters of a given function scope.\n     * @param {Object} scope The function scope.\n     * @returns {Array} All parameters of the given scope.\n     */\n    function getParameters(scope) {\n      return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === \"Parameter\");\n    }\n\n    /**\n     * Check to see if we're handling the error object properly.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     */\n    function checkForError(node) {\n      const scope = context.getScope(),\n        parameters = getParameters(scope),\n        firstParameter = parameters[0];\n      if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {\n        if (firstParameter.references.length === 0) {\n          context.report({\n            node,\n            messageId: \"expected\"\n          });\n        }\n      }\n    }\n    return {\n      FunctionDeclaration: checkForError,\n      FunctionExpression: checkForError,\n      ArrowFunctionExpression: checkForError\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","deprecated","replacedBy","type","docs","description","category","recommended","url","schema","messages","expected","create","context","errorArgument","options","isPattern","stringToCheck","firstChar","matchesConfiguredErrorName","name","regexp","RegExp","test","getParameters","scope","variables","filter","variable","defs","checkForError","node","getScope","parameters","firstParameter","references","length","report","messageId","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/handle-callback-err.js"],"sourcesContent":["/**\n * @fileoverview Ensure handling of errors when we know they exist.\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        deprecated: true,\n\n        replacedBy: [],\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require error handling in callbacks\",\n            category: \"Node.js and CommonJS\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/handle-callback-err\"\n        },\n\n        schema: [\n            {\n                type: \"string\"\n            }\n        ],\n        messages: {\n            expected: \"Expected error to be handled.\"\n        }\n    },\n\n    create(context) {\n\n        const errorArgument = context.options[0] || \"err\";\n\n        /**\n         * Checks if the given argument should be interpreted as a regexp pattern.\n         * @param {string} stringToCheck The string which should be checked.\n         * @returns {boolean} Whether or not the string should be interpreted as a pattern.\n         */\n        function isPattern(stringToCheck) {\n            const firstChar = stringToCheck[0];\n\n            return firstChar === \"^\";\n        }\n\n        /**\n         * Checks if the given name matches the configured error argument.\n         * @param {string} name The name which should be compared.\n         * @returns {boolean} Whether or not the given name matches the configured error variable name.\n         */\n        function matchesConfiguredErrorName(name) {\n            if (isPattern(errorArgument)) {\n                const regexp = new RegExp(errorArgument, \"u\");\n\n                return regexp.test(name);\n            }\n            return name === errorArgument;\n        }\n\n        /**\n         * Get the parameters of a given function scope.\n         * @param {Object} scope The function scope.\n         * @returns {Array} All parameters of the given scope.\n         */\n        function getParameters(scope) {\n            return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === \"Parameter\");\n        }\n\n        /**\n         * Check to see if we're handling the error object properly.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         */\n        function checkForError(node) {\n            const scope = context.getScope(),\n                parameters = getParameters(scope),\n                firstParameter = parameters[0];\n\n            if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {\n                if (firstParameter.references.length === 0) {\n                    context.report({ node, messageId: \"expected\" });\n                }\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkForError,\n            FunctionExpression: checkForError,\n            ArrowFunctionExpression: checkForError\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,UAAU,EAAE,IAAI;IAEhBC,UAAU,EAAE,EAAE;IAEdC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,qCAAqC;MAClDC,QAAQ,EAAE,sBAAsB;MAChCC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIN,IAAI,EAAE;IACV,CAAC,CACJ;IACDO,QAAQ,EAAE;MACNC,QAAQ,EAAE;IACd;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ,MAAMC,aAAa,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK;;IAEjD;AACR;AACA;AACA;AACA;IACQ,SAASC,SAASA,CAACC,aAAa,EAAE;MAC9B,MAAMC,SAAS,GAAGD,aAAa,CAAC,CAAC,CAAC;MAElC,OAAOC,SAAS,KAAK,GAAG;IAC5B;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,0BAA0BA,CAACC,IAAI,EAAE;MACtC,IAAIJ,SAAS,CAACF,aAAa,CAAC,EAAE;QAC1B,MAAMO,MAAM,GAAG,IAAIC,MAAM,CAACR,aAAa,EAAE,GAAG,CAAC;QAE7C,OAAOO,MAAM,CAACE,IAAI,CAACH,IAAI,CAAC;MAC5B;MACA,OAAOA,IAAI,KAAKN,aAAa;IACjC;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASU,aAAaA,CAACC,KAAK,EAAE;MAC1B,OAAOA,KAAK,CAACC,SAAS,CAACC,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,IAAID,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC1B,IAAI,KAAK,WAAW,CAAC;IACxG;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAAS2B,aAAaA,CAACC,IAAI,EAAE;MACzB,MAAMN,KAAK,GAAGZ,OAAO,CAACmB,QAAQ,CAAC,CAAC;QAC5BC,UAAU,GAAGT,aAAa,CAACC,KAAK,CAAC;QACjCS,cAAc,GAAGD,UAAU,CAAC,CAAC,CAAC;MAElC,IAAIC,cAAc,IAAIf,0BAA0B,CAACe,cAAc,CAACd,IAAI,CAAC,EAAE;QACnE,IAAIc,cAAc,CAACC,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;UACxCvB,OAAO,CAACwB,MAAM,CAAC;YAAEN,IAAI;YAAEO,SAAS,EAAE;UAAW,CAAC,CAAC;QACnD;MACJ;IACJ;IAEA,OAAO;MACHC,mBAAmB,EAAET,aAAa;MAClCU,kBAAkB,EAAEV,aAAa;MACjCW,uBAAuB,EAAEX;IAC7B,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}