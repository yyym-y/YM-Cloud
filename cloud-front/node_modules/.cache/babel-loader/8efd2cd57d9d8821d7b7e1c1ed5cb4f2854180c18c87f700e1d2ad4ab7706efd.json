{"ast":null,"code":"/**\n * @fileoverview Rule to flag bitwise identifiers\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n/*\n *\n * Set of bitwise operators.\n *\n */\nconst BITWISE_OPERATORS = [\"^\", \"|\", \"&\", \"<<\", \">>\", \">>>\", \"^=\", \"|=\", \"&=\", \"<<=\", \">>=\", \">>>=\", \"~\"];\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow bitwise operators\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-bitwise\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allow: {\n          type: \"array\",\n          items: {\n            enum: BITWISE_OPERATORS\n          },\n          uniqueItems: true\n        },\n        int32Hint: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpected: \"Unexpected use of '{{operator}}'.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {};\n    const allowed = options.allow || [];\n    const int32Hint = options.int32Hint === true;\n\n    /**\n     * Reports an unexpected use of a bitwise operator.\n     * @param   {ASTNode} node Node which contains the bitwise operator.\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"unexpected\",\n        data: {\n          operator: node.operator\n        }\n      });\n    }\n\n    /**\n     * Checks if the given node has a bitwise operator.\n     * @param   {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node has a bitwise operator.\n     */\n    function hasBitwiseOperator(node) {\n      return BITWISE_OPERATORS.indexOf(node.operator) !== -1;\n    }\n\n    /**\n     * Checks if exceptions were provided, e.g. `{ allow: ['~', '|'] }`.\n     * @param   {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node has a bitwise operator.\n     */\n    function allowedOperator(node) {\n      return allowed.indexOf(node.operator) !== -1;\n    }\n\n    /**\n     * Checks if the given bitwise operator is used for integer typecasting, i.e. \"|0\"\n     * @param   {ASTNode} node The node to check.\n     * @returns {boolean} whether the node is used in integer typecasting.\n     */\n    function isInt32Hint(node) {\n      return int32Hint && node.operator === \"|\" && node.right && node.right.type === \"Literal\" && node.right.value === 0;\n    }\n\n    /**\n     * Report if the given node contains a bitwise operator.\n     * @param   {ASTNode} node The node to check.\n     * @returns {void}\n     */\n    function checkNodeForBitwiseOperator(node) {\n      if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) {\n        report(node);\n      }\n    }\n    return {\n      AssignmentExpression: checkNodeForBitwiseOperator,\n      BinaryExpression: checkNodeForBitwiseOperator,\n      UnaryExpression: checkNodeForBitwiseOperator\n    };\n  }\n};","map":{"version":3,"names":["BITWISE_OPERATORS","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allow","items","enum","uniqueItems","int32Hint","default","additionalProperties","messages","unexpected","create","context","options","allowed","report","node","messageId","data","operator","hasBitwiseOperator","indexOf","allowedOperator","isInt32Hint","right","value","checkNodeForBitwiseOperator","AssignmentExpression","BinaryExpression","UnaryExpression"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-bitwise.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag bitwise identifiers\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n/*\n *\n * Set of bitwise operators.\n *\n */\nconst BITWISE_OPERATORS = [\n    \"^\", \"|\", \"&\", \"<<\", \">>\", \">>>\",\n    \"^=\", \"|=\", \"&=\", \"<<=\", \">>=\", \">>>=\",\n    \"~\"\n];\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow bitwise operators\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-bitwise\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            enum: BITWISE_OPERATORS\n                        },\n                        uniqueItems: true\n                    },\n                    int32Hint: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Unexpected use of '{{operator}}'.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const allowed = options.allow || [];\n        const int32Hint = options.int32Hint === true;\n\n        /**\n         * Reports an unexpected use of a bitwise operator.\n         * @param   {ASTNode} node Node which contains the bitwise operator.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"unexpected\", data: { operator: node.operator } });\n        }\n\n        /**\n         * Checks if the given node has a bitwise operator.\n         * @param   {ASTNode} node The node to check.\n         * @returns {boolean} Whether or not the node has a bitwise operator.\n         */\n        function hasBitwiseOperator(node) {\n            return BITWISE_OPERATORS.indexOf(node.operator) !== -1;\n        }\n\n        /**\n         * Checks if exceptions were provided, e.g. `{ allow: ['~', '|'] }`.\n         * @param   {ASTNode} node The node to check.\n         * @returns {boolean} Whether or not the node has a bitwise operator.\n         */\n        function allowedOperator(node) {\n            return allowed.indexOf(node.operator) !== -1;\n        }\n\n        /**\n         * Checks if the given bitwise operator is used for integer typecasting, i.e. \"|0\"\n         * @param   {ASTNode} node The node to check.\n         * @returns {boolean} whether the node is used in integer typecasting.\n         */\n        function isInt32Hint(node) {\n            return int32Hint && node.operator === \"|\" && node.right &&\n              node.right.type === \"Literal\" && node.right.value === 0;\n        }\n\n        /**\n         * Report if the given node contains a bitwise operator.\n         * @param   {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkNodeForBitwiseOperator(node) {\n            if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) {\n                report(node);\n            }\n        }\n\n        return {\n            AssignmentExpression: checkNodeForBitwiseOperator,\n            BinaryExpression: checkNodeForBitwiseOperator,\n            UnaryExpression: checkNodeForBitwiseOperator\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAG,CACtB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAChC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EACtC,GAAG,CACN;;AAED;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,4BAA4B;MACzCC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,CACJ;MACIN,IAAI,EAAE,QAAQ;MACdO,UAAU,EAAE;QACRC,KAAK,EAAE;UACHR,IAAI,EAAE,OAAO;UACbS,KAAK,EAAE;YACHC,IAAI,EAAEd;UACV,CAAC;UACDe,WAAW,EAAE;QACjB,CAAC;QACDC,SAAS,EAAE;UACPZ,IAAI,EAAE,SAAS;UACfa,OAAO,EAAE;QACb;MACJ,CAAC;MACDC,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACxC,MAAMC,OAAO,GAAGD,OAAO,CAACX,KAAK,IAAI,EAAE;IACnC,MAAMI,SAAS,GAAGO,OAAO,CAACP,SAAS,KAAK,IAAI;;IAE5C;AACR;AACA;AACA;AACA;IACQ,SAASS,MAAMA,CAACC,IAAI,EAAE;MAClBJ,OAAO,CAACG,MAAM,CAAC;QAAEC,IAAI;QAAEC,SAAS,EAAE,YAAY;QAAEC,IAAI,EAAE;UAAEC,QAAQ,EAAEH,IAAI,CAACG;QAAS;MAAE,CAAC,CAAC;IACxF;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,kBAAkBA,CAACJ,IAAI,EAAE;MAC9B,OAAO1B,iBAAiB,CAAC+B,OAAO,CAACL,IAAI,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC1D;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASG,eAAeA,CAACN,IAAI,EAAE;MAC3B,OAAOF,OAAO,CAACO,OAAO,CAACL,IAAI,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAChD;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASI,WAAWA,CAACP,IAAI,EAAE;MACvB,OAAOV,SAAS,IAAIU,IAAI,CAACG,QAAQ,KAAK,GAAG,IAAIH,IAAI,CAACQ,KAAK,IACrDR,IAAI,CAACQ,KAAK,CAAC9B,IAAI,KAAK,SAAS,IAAIsB,IAAI,CAACQ,KAAK,CAACC,KAAK,KAAK,CAAC;IAC7D;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,2BAA2BA,CAACV,IAAI,EAAE;MACvC,IAAII,kBAAkB,CAACJ,IAAI,CAAC,IAAI,CAACM,eAAe,CAACN,IAAI,CAAC,IAAI,CAACO,WAAW,CAACP,IAAI,CAAC,EAAE;QAC1ED,MAAM,CAACC,IAAI,CAAC;MAChB;IACJ;IAEA,OAAO;MACHW,oBAAoB,EAAED,2BAA2B;MACjDE,gBAAgB,EAAEF,2BAA2B;MAC7CG,eAAe,EAAEH;IACrB,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}