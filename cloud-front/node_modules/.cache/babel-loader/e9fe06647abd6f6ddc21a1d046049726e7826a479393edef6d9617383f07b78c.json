{"ast":null,"code":"/**\n * @fileoverview Rule to disallow a duplicate case label.\n * @author Dieter Oberkofler\n * @author Burak Yigit Kaya\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate case labels\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-duplicate-case\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate case label.\"\n    }\n  },\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    /**\n     * Determines whether the two given nodes are considered to be equal.\n     * @param {ASTNode} a First node.\n     * @param {ASTNode} b Second node.\n     * @returns {boolean} `true` if the nodes are considered to be equal.\n     */\n    function equal(a, b) {\n      if (a.type !== b.type) {\n        return false;\n      }\n      return astUtils.equalTokens(a, b, sourceCode);\n    }\n    return {\n      SwitchStatement(node) {\n        const previousTests = [];\n        for (const switchCase of node.cases) {\n          if (switchCase.test) {\n            const test = switchCase.test;\n            if (previousTests.some(previousTest => equal(previousTest, test))) {\n              context.report({\n                node: switchCase,\n                messageId: \"unexpected\"\n              });\n            } else {\n              previousTests.push(test);\n            }\n          }\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","sourceCode","getSourceCode","equal","a","b","equalTokens","SwitchStatement","node","previousTests","switchCase","cases","test","some","previousTest","report","messageId","push"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-duplicate-case.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow a duplicate case label.\n * @author Dieter Oberkofler\n * @author Burak Yigit Kaya\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate case labels\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-duplicate-case\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate case label.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether the two given nodes are considered to be equal.\n         * @param {ASTNode} a First node.\n         * @param {ASTNode} b Second node.\n         * @returns {boolean} `true` if the nodes are considered to be equal.\n         */\n        function equal(a, b) {\n            if (a.type !== b.type) {\n                return false;\n            }\n\n            return astUtils.equalTokens(a, b, sourceCode);\n        }\n        return {\n            SwitchStatement(node) {\n                const previousTests = [];\n\n                for (const switchCase of node.cases) {\n                    if (switchCase.test) {\n                        const test = switchCase.test;\n\n                        if (previousTests.some(previousTest => equal(previousTest, test))) {\n                            context.report({ node: switchCase, messageId: \"unexpected\" });\n                        } else {\n                            previousTests.push(test);\n                        }\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAAAA,OAAA;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SAAS;IAEfC,IAAI,EAAE;MACFC,WAAW,EAAE,gCAAgC;MAC7CC,QAAQ,EAAE,iBAAiB;MAC3BC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE;IACT,CAAC;IAEDC,MAAM,EAAE,EAAE;IAEVC,QAAQ,EAAE;MACNC,UAAU,EAAE;IAChB;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAa,CAAC,CAAC;;IAE1C;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,KAAKA,CAACC,CAAC,EAAEC,CAAC,EAAE;MACjB,IAAID,CAAC,CAACd,IAAI,KAAKe,CAAC,CAACf,IAAI,EAAE;QACnB,OAAO,KAAK;MAChB;MAEA,OAAOJ,QAAQ,CAACoB,WAAW,CAACF,CAAC,EAAEC,CAAC,EAAEJ,UAAU,CAAC;IACjD;IACA,OAAO;MACHM,eAAeA,CAACC,IAAI,EAAE;QAClB,MAAMC,aAAa,GAAG,EAAE;QAExB,KAAK,MAAMC,UAAU,IAAIF,IAAI,CAACG,KAAK,EAAE;UACjC,IAAID,UAAU,CAACE,IAAI,EAAE;YACjB,MAAMA,IAAI,GAAGF,UAAU,CAACE,IAAI;YAE5B,IAAIH,aAAa,CAACI,IAAI,CAACC,YAAY,IAAIX,KAAK,CAACW,YAAY,EAAEF,IAAI,CAAC,CAAC,EAAE;cAC/DZ,OAAO,CAACe,MAAM,CAAC;gBAAEP,IAAI,EAAEE,UAAU;gBAAEM,SAAS,EAAE;cAAa,CAAC,CAAC;YACjE,CAAC,MAAM;cACHP,aAAa,CAACQ,IAAI,CAACL,IAAI,CAAC;YAC5B;UACJ;QACJ;MACJ;IACJ,CAAC;EACL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}