{"ast":null,"code":"/**\n * @fileoverview A rule to disallow `this` keywords outside of classes or class-like objects.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `this` keywords outside of classes or class-like objects\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-invalid-this\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        capIsConstructor: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedThis: \"Unexpected 'this'.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0] || {};\n    const capIsConstructor = options.capIsConstructor !== false;\n    const stack = [],\n      sourceCode = context.getSourceCode();\n\n    /**\n     * Gets the current checking context.\n     *\n     * The return value has a flag that whether or not `this` keyword is valid.\n     * The flag is initialized when got at the first time.\n     * @returns {{valid: boolean}}\n     *   an object which has a flag that whether or not `this` keyword is valid.\n     */\n    stack.getCurrent = function () {\n      const current = this[this.length - 1];\n      if (!current.init) {\n        current.init = true;\n        current.valid = !astUtils.isDefaultThisBinding(current.node, sourceCode, {\n          capIsConstructor\n        });\n      }\n      return current;\n    };\n\n    /**\n     * Pushs new checking context into the stack.\n     *\n     * The checking context is not initialized yet.\n     * Because most functions don't have `this` keyword.\n     * When `this` keyword was found, the checking context is initialized.\n     * @param {ASTNode} node A function node that was entered.\n     * @returns {void}\n     */\n    function enterFunction(node) {\n      // `this` can be invalid only under strict mode.\n      stack.push({\n        init: !context.getScope().isStrict,\n        node,\n        valid: true\n      });\n    }\n\n    /**\n     * Pops the current checking context from the stack.\n     * @returns {void}\n     */\n    function exitFunction() {\n      stack.pop();\n    }\n    return {\n      /*\n       * `this` is invalid only under strict mode.\n       * Modules is always strict mode.\n       */\n      Program(node) {\n        const scope = context.getScope(),\n          features = context.parserOptions.ecmaFeatures || {};\n        stack.push({\n          init: true,\n          node,\n          valid: !(scope.isStrict || node.sourceType === \"module\" || features.globalReturn && scope.childScopes[0].isStrict)\n        });\n      },\n      \"Program:exit\"() {\n        stack.pop();\n      },\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      // Reports if `this` of the current context is invalid.\n      ThisExpression(node) {\n        const current = stack.getCurrent();\n        if (current && !current.valid) {\n          context.report({\n            node,\n            messageId: \"unexpectedThis\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","capIsConstructor","default","additionalProperties","messages","unexpectedThis","create","context","options","stack","sourceCode","getSourceCode","getCurrent","current","length","init","valid","isDefaultThisBinding","node","enterFunction","push","getScope","isStrict","exitFunction","pop","Program","scope","features","parserOptions","ecmaFeatures","sourceType","globalReturn","childScopes","Program:exit","FunctionDeclaration","FunctionExpression","ThisExpression","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-invalid-this.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow `this` keywords outside of classes or class-like objects.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `this` keywords outside of classes or class-like objects\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-invalid-this\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    capIsConstructor: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedThis: \"Unexpected 'this'.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const capIsConstructor = options.capIsConstructor !== false;\n        const stack = [],\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Gets the current checking context.\n         *\n         * The return value has a flag that whether or not `this` keyword is valid.\n         * The flag is initialized when got at the first time.\n         * @returns {{valid: boolean}}\n         *   an object which has a flag that whether or not `this` keyword is valid.\n         */\n        stack.getCurrent = function() {\n            const current = this[this.length - 1];\n\n            if (!current.init) {\n                current.init = true;\n                current.valid = !astUtils.isDefaultThisBinding(\n                    current.node,\n                    sourceCode,\n                    { capIsConstructor }\n                );\n            }\n            return current;\n        };\n\n        /**\n         * Pushs new checking context into the stack.\n         *\n         * The checking context is not initialized yet.\n         * Because most functions don't have `this` keyword.\n         * When `this` keyword was found, the checking context is initialized.\n         * @param {ASTNode} node A function node that was entered.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n\n            // `this` can be invalid only under strict mode.\n            stack.push({\n                init: !context.getScope().isStrict,\n                node,\n                valid: true\n            });\n        }\n\n        /**\n         * Pops the current checking context from the stack.\n         * @returns {void}\n         */\n        function exitFunction() {\n            stack.pop();\n        }\n\n        return {\n\n            /*\n             * `this` is invalid only under strict mode.\n             * Modules is always strict mode.\n             */\n            Program(node) {\n                const scope = context.getScope(),\n                    features = context.parserOptions.ecmaFeatures || {};\n\n                stack.push({\n                    init: true,\n                    node,\n                    valid: !(\n                        scope.isStrict ||\n                        node.sourceType === \"module\" ||\n                        (features.globalReturn && scope.childScopes[0].isStrict)\n                    )\n                });\n            },\n\n            \"Program:exit\"() {\n                stack.pop();\n            },\n\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n\n            // Reports if `this` of the current context is invalid.\n            ThisExpression(node) {\n                const current = stack.getCurrent();\n\n                if (current && !current.valid) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedThis\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}