{"ast":null,"code":"/**\n * @fileoverview Rule to enforce grouped require statements for Node.JS\n * @author Raphael Pigulla\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `require` calls to be mixed with regular variable declarations\",\n      category: \"Node.js and CommonJS\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-mixed-requires\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"boolean\"\n      }, {\n        type: \"object\",\n        properties: {\n          grouping: {\n            type: \"boolean\"\n          },\n          allowCall: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      noMixRequire: \"Do not mix 'require' and other declarations.\",\n      noMixCoreModuleFileComputed: \"Do not mix core, module, file and computed requires.\"\n    }\n  },\n  create(context) {\n    const options = context.options[0];\n    let grouping = false,\n      allowCall = false;\n    if (typeof options === \"object\") {\n      grouping = options.grouping;\n      allowCall = options.allowCall;\n    } else {\n      grouping = !!options;\n    }\n\n    /**\n     * Returns the list of built-in modules.\n     * @returns {string[]} An array of built-in Node.js modules.\n     */\n    function getBuiltinModules() {\n      /*\n       * This list is generated using:\n       * `require(\"repl\")._builtinLibs.concat('repl').sort()`\n       * This particular list is as per nodejs v0.12.2 and iojs v0.7.1\n       */\n      return [\"assert\", \"buffer\", \"child_process\", \"cluster\", \"crypto\", \"dgram\", \"dns\", \"domain\", \"events\", \"fs\", \"http\", \"https\", \"net\", \"os\", \"path\", \"punycode\", \"querystring\", \"readline\", \"repl\", \"smalloc\", \"stream\", \"string_decoder\", \"tls\", \"tty\", \"url\", \"util\", \"v8\", \"vm\", \"zlib\"];\n    }\n    const BUILTIN_MODULES = getBuiltinModules();\n    const DECL_REQUIRE = \"require\",\n      DECL_UNINITIALIZED = \"uninitialized\",\n      DECL_OTHER = \"other\";\n    const REQ_CORE = \"core\",\n      REQ_FILE = \"file\",\n      REQ_MODULE = \"module\",\n      REQ_COMPUTED = \"computed\";\n\n    /**\n     * Determines the type of a declaration statement.\n     * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n     * @returns {string} The type of declaration represented by the expression.\n     */\n    function getDeclarationType(initExpression) {\n      if (!initExpression) {\n        // \"var x;\"\n        return DECL_UNINITIALIZED;\n      }\n      if (initExpression.type === \"CallExpression\" && initExpression.callee.type === \"Identifier\" && initExpression.callee.name === \"require\") {\n        // \"var x = require('util');\"\n        return DECL_REQUIRE;\n      }\n      if (allowCall && initExpression.type === \"CallExpression\" && initExpression.callee.type === \"CallExpression\") {\n        // \"var x = require('diagnose')('sub-module');\"\n        return getDeclarationType(initExpression.callee);\n      }\n      if (initExpression.type === \"MemberExpression\") {\n        // \"var x = require('glob').Glob;\"\n        return getDeclarationType(initExpression.object);\n      }\n\n      // \"var x = 42;\"\n      return DECL_OTHER;\n    }\n\n    /**\n     * Determines the type of module that is loaded via require.\n     * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n     * @returns {string} The module type.\n     */\n    function inferModuleType(initExpression) {\n      if (initExpression.type === \"MemberExpression\") {\n        // \"var x = require('glob').Glob;\"\n        return inferModuleType(initExpression.object);\n      }\n      if (initExpression.arguments.length === 0) {\n        // \"var x = require();\"\n        return REQ_COMPUTED;\n      }\n      const arg = initExpression.arguments[0];\n      if (arg.type !== \"Literal\" || typeof arg.value !== \"string\") {\n        // \"var x = require(42);\"\n        return REQ_COMPUTED;\n      }\n      if (BUILTIN_MODULES.indexOf(arg.value) !== -1) {\n        // \"var fs = require('fs');\"\n        return REQ_CORE;\n      }\n      if (/^\\.{0,2}\\//u.test(arg.value)) {\n        // \"var utils = require('./utils');\"\n        return REQ_FILE;\n      }\n\n      // \"var async = require('async');\"\n      return REQ_MODULE;\n    }\n\n    /**\n     * Check if the list of variable declarations is mixed, i.e. whether it\n     * contains both require and other declarations.\n     * @param {ASTNode} declarations The list of VariableDeclarators.\n     * @returns {boolean} True if the declarations are mixed, false if not.\n     */\n    function isMixed(declarations) {\n      const contains = {};\n      declarations.forEach(declaration => {\n        const type = getDeclarationType(declaration.init);\n        contains[type] = true;\n      });\n      return !!(contains[DECL_REQUIRE] && (contains[DECL_UNINITIALIZED] || contains[DECL_OTHER]));\n    }\n\n    /**\n     * Check if all require declarations in the given list are of the same\n     * type.\n     * @param {ASTNode} declarations The list of VariableDeclarators.\n     * @returns {boolean} True if the declarations are grouped, false if not.\n     */\n    function isGrouped(declarations) {\n      const found = {};\n      declarations.forEach(declaration => {\n        if (getDeclarationType(declaration.init) === DECL_REQUIRE) {\n          found[inferModuleType(declaration.init)] = true;\n        }\n      });\n      return Object.keys(found).length <= 1;\n    }\n    return {\n      VariableDeclaration(node) {\n        if (isMixed(node.declarations)) {\n          context.report({\n            node,\n            messageId: \"noMixRequire\"\n          });\n        } else if (grouping && !isGrouped(node.declarations)) {\n          context.report({\n            node,\n            messageId: \"noMixCoreModuleFileComputed\"\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["module","exports","meta","deprecated","replacedBy","type","docs","description","category","recommended","url","schema","oneOf","properties","grouping","allowCall","additionalProperties","messages","noMixRequire","noMixCoreModuleFileComputed","create","context","options","getBuiltinModules","BUILTIN_MODULES","DECL_REQUIRE","DECL_UNINITIALIZED","DECL_OTHER","REQ_CORE","REQ_FILE","REQ_MODULE","REQ_COMPUTED","getDeclarationType","initExpression","callee","name","object","inferModuleType","arguments","length","arg","value","indexOf","test","isMixed","declarations","contains","forEach","declaration","init","isGrouped","found","Object","keys","VariableDeclaration","node","report","messageId"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-mixed-requires.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce grouped require statements for Node.JS\n * @author Raphael Pigulla\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        deprecated: true,\n\n        replacedBy: [],\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `require` calls to be mixed with regular variable declarations\",\n            category: \"Node.js and CommonJS\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-mixed-requires\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"boolean\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            grouping: {\n                                type: \"boolean\"\n                            },\n                            allowCall: {\n                                type: \"boolean\"\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            noMixRequire: \"Do not mix 'require' and other declarations.\",\n            noMixCoreModuleFileComputed: \"Do not mix core, module, file and computed requires.\"\n        }\n    },\n\n    create(context) {\n\n        const options = context.options[0];\n        let grouping = false,\n            allowCall = false;\n\n        if (typeof options === \"object\") {\n            grouping = options.grouping;\n            allowCall = options.allowCall;\n        } else {\n            grouping = !!options;\n        }\n\n        /**\n         * Returns the list of built-in modules.\n         * @returns {string[]} An array of built-in Node.js modules.\n         */\n        function getBuiltinModules() {\n\n            /*\n             * This list is generated using:\n             * `require(\"repl\")._builtinLibs.concat('repl').sort()`\n             * This particular list is as per nodejs v0.12.2 and iojs v0.7.1\n             */\n            return [\n                \"assert\", \"buffer\", \"child_process\", \"cluster\", \"crypto\",\n                \"dgram\", \"dns\", \"domain\", \"events\", \"fs\", \"http\", \"https\",\n                \"net\", \"os\", \"path\", \"punycode\", \"querystring\", \"readline\",\n                \"repl\", \"smalloc\", \"stream\", \"string_decoder\", \"tls\", \"tty\",\n                \"url\", \"util\", \"v8\", \"vm\", \"zlib\"\n            ];\n        }\n\n        const BUILTIN_MODULES = getBuiltinModules();\n\n        const DECL_REQUIRE = \"require\",\n            DECL_UNINITIALIZED = \"uninitialized\",\n            DECL_OTHER = \"other\";\n\n        const REQ_CORE = \"core\",\n            REQ_FILE = \"file\",\n            REQ_MODULE = \"module\",\n            REQ_COMPUTED = \"computed\";\n\n        /**\n         * Determines the type of a declaration statement.\n         * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n         * @returns {string} The type of declaration represented by the expression.\n         */\n        function getDeclarationType(initExpression) {\n            if (!initExpression) {\n\n                // \"var x;\"\n                return DECL_UNINITIALIZED;\n            }\n\n            if (initExpression.type === \"CallExpression\" &&\n                initExpression.callee.type === \"Identifier\" &&\n                initExpression.callee.name === \"require\"\n            ) {\n\n                // \"var x = require('util');\"\n                return DECL_REQUIRE;\n            }\n            if (allowCall &&\n                initExpression.type === \"CallExpression\" &&\n                initExpression.callee.type === \"CallExpression\"\n            ) {\n\n                // \"var x = require('diagnose')('sub-module');\"\n                return getDeclarationType(initExpression.callee);\n            }\n            if (initExpression.type === \"MemberExpression\") {\n\n                // \"var x = require('glob').Glob;\"\n                return getDeclarationType(initExpression.object);\n            }\n\n            // \"var x = 42;\"\n            return DECL_OTHER;\n        }\n\n        /**\n         * Determines the type of module that is loaded via require.\n         * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n         * @returns {string} The module type.\n         */\n        function inferModuleType(initExpression) {\n            if (initExpression.type === \"MemberExpression\") {\n\n                // \"var x = require('glob').Glob;\"\n                return inferModuleType(initExpression.object);\n            }\n            if (initExpression.arguments.length === 0) {\n\n                // \"var x = require();\"\n                return REQ_COMPUTED;\n            }\n\n            const arg = initExpression.arguments[0];\n\n            if (arg.type !== \"Literal\" || typeof arg.value !== \"string\") {\n\n                // \"var x = require(42);\"\n                return REQ_COMPUTED;\n            }\n\n            if (BUILTIN_MODULES.indexOf(arg.value) !== -1) {\n\n                // \"var fs = require('fs');\"\n                return REQ_CORE;\n            }\n            if (/^\\.{0,2}\\//u.test(arg.value)) {\n\n                // \"var utils = require('./utils');\"\n                return REQ_FILE;\n            }\n\n            // \"var async = require('async');\"\n            return REQ_MODULE;\n\n        }\n\n        /**\n         * Check if the list of variable declarations is mixed, i.e. whether it\n         * contains both require and other declarations.\n         * @param {ASTNode} declarations The list of VariableDeclarators.\n         * @returns {boolean} True if the declarations are mixed, false if not.\n         */\n        function isMixed(declarations) {\n            const contains = {};\n\n            declarations.forEach(declaration => {\n                const type = getDeclarationType(declaration.init);\n\n                contains[type] = true;\n            });\n\n            return !!(\n                contains[DECL_REQUIRE] &&\n                (contains[DECL_UNINITIALIZED] || contains[DECL_OTHER])\n            );\n        }\n\n        /**\n         * Check if all require declarations in the given list are of the same\n         * type.\n         * @param {ASTNode} declarations The list of VariableDeclarators.\n         * @returns {boolean} True if the declarations are grouped, false if not.\n         */\n        function isGrouped(declarations) {\n            const found = {};\n\n            declarations.forEach(declaration => {\n                if (getDeclarationType(declaration.init) === DECL_REQUIRE) {\n                    found[inferModuleType(declaration.init)] = true;\n                }\n            });\n\n            return Object.keys(found).length <= 1;\n        }\n\n\n        return {\n\n            VariableDeclaration(node) {\n\n                if (isMixed(node.declarations)) {\n                    context.report({\n                        node,\n                        messageId: \"noMixRequire\"\n                    });\n                } else if (grouping && !isGrouped(node.declarations)) {\n                    context.report({\n                        node,\n                        messageId: \"noMixCoreModuleFileComputed\"\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}