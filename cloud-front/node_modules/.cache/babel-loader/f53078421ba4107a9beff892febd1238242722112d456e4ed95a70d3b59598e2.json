{"ast":null,"code":"/**\n * @fileoverview A rule to disallow duplicate name in class members.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate class members\",\n      category: \"ECMAScript 6\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-class-members\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate name '{{name}}'.\"\n    }\n  },\n  create(context) {\n    let stack = [];\n\n    /**\n     * Gets state of a given member name.\n     * @param {string} name A name of a member.\n     * @param {boolean} isStatic A flag which specifies that is a static member.\n     * @returns {Object} A state of a given member name.\n     *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n     *   - retv.get {boolean} A flag which shows the name is declared as getter.\n     *   - retv.set {boolean} A flag which shows the name is declared as setter.\n     */\n    function getState(name, isStatic) {\n      const stateMap = stack[stack.length - 1];\n      const key = `$${name}`; // to avoid \"__proto__\".\n\n      if (!stateMap[key]) {\n        stateMap[key] = {\n          nonStatic: {\n            init: false,\n            get: false,\n            set: false\n          },\n          static: {\n            init: false,\n            get: false,\n            set: false\n          }\n        };\n      }\n      return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n    }\n    return {\n      // Initializes the stack of state of member declarations.\n      Program() {\n        stack = [];\n      },\n      // Initializes state of member declarations for the class.\n      ClassBody() {\n        stack.push(Object.create(null));\n      },\n      // Disposes the state for the class.\n      \"ClassBody:exit\"() {\n        stack.pop();\n      },\n      // Reports the node if its name has been declared already.\n      MethodDefinition(node) {\n        const name = astUtils.getStaticPropertyName(node);\n        if (name === null || node.kind === \"constructor\") {\n          return;\n        }\n        const state = getState(name, node.static);\n        let isDuplicate = false;\n        if (node.kind === \"get\") {\n          isDuplicate = state.init || state.get;\n          state.get = true;\n        } else if (node.kind === \"set\") {\n          isDuplicate = state.init || state.set;\n          state.set = true;\n        } else {\n          isDuplicate = state.init || state.get || state.set;\n          state.init = true;\n        }\n        if (isDuplicate) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              name\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","stack","getState","name","isStatic","stateMap","length","key","nonStatic","init","get","set","static","Program","ClassBody","push","Object","ClassBody:exit","pop","MethodDefinition","node","getStaticPropertyName","kind","state","isDuplicate","report","messageId","data"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/no-dupe-class-members.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow duplicate name in class members.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate class members\",\n            category: \"ECMAScript 6\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-dupe-class-members\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate name '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n        let stack = [];\n\n        /**\n         * Gets state of a given member name.\n         * @param {string} name A name of a member.\n         * @param {boolean} isStatic A flag which specifies that is a static member.\n         * @returns {Object} A state of a given member name.\n         *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n         *   - retv.get {boolean} A flag which shows the name is declared as getter.\n         *   - retv.set {boolean} A flag which shows the name is declared as setter.\n         */\n        function getState(name, isStatic) {\n            const stateMap = stack[stack.length - 1];\n            const key = `$${name}`; // to avoid \"__proto__\".\n\n            if (!stateMap[key]) {\n                stateMap[key] = {\n                    nonStatic: { init: false, get: false, set: false },\n                    static: { init: false, get: false, set: false }\n                };\n            }\n\n            return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n        }\n\n        return {\n\n            // Initializes the stack of state of member declarations.\n            Program() {\n                stack = [];\n            },\n\n            // Initializes state of member declarations for the class.\n            ClassBody() {\n                stack.push(Object.create(null));\n            },\n\n            // Disposes the state for the class.\n            \"ClassBody:exit\"() {\n                stack.pop();\n            },\n\n            // Reports the node if its name has been declared already.\n            MethodDefinition(node) {\n                const name = astUtils.getStaticPropertyName(node);\n\n                if (name === null || node.kind === \"constructor\") {\n                    return;\n                }\n\n                const state = getState(name, node.static);\n                let isDuplicate = false;\n\n                if (node.kind === \"get\") {\n                    isDuplicate = (state.init || state.get);\n                    state.get = true;\n                } else if (node.kind === \"set\") {\n                    isDuplicate = (state.init || state.set);\n                    state.set = true;\n                } else {\n                    isDuplicate = (state.init || state.get || state.set);\n                    state.init = true;\n                }\n\n                if (isDuplicate) {\n                    context.report({ node, messageId: \"unexpected\", data: { name } });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}