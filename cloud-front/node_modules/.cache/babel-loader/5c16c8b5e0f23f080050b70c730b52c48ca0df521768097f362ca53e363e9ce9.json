{"ast":null,"code":"/**\n * @fileoverview Rule to enforce description with the `Symbol` object\n * @author Jarek Rencz\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require symbol descriptions\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/symbol-description\"\n    },\n    fixable: null,\n    schema: [],\n    messages: {\n      expected: \"Expected Symbol to have a description.\"\n    }\n  },\n  create(context) {\n    /**\n     * Reports if node does not conform the rule in case rule is set to\n     * report missing description\n     * @param {ASTNode} node A CallExpression node to check.\n     * @returns {void}\n     */\n    function checkArgument(node) {\n      if (node.arguments.length === 0) {\n        context.report({\n          node,\n          messageId: \"expected\"\n        });\n      }\n    }\n    return {\n      \"Program:exit\"() {\n        const scope = context.getScope();\n        const variable = astUtils.getVariableByName(scope, \"Symbol\");\n        if (variable && variable.defs.length === 0) {\n          variable.references.forEach(reference => {\n            const node = reference.identifier;\n            if (astUtils.isCallee(node)) {\n              checkArgument(node.parent);\n            }\n          });\n        }\n      }\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","expected","create","context","checkArgument","node","arguments","length","report","messageId","Program:exit","scope","getScope","variable","getVariableByName","defs","references","forEach","reference","identifier","isCallee","parent"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/symbol-description.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce description with the `Symbol` object\n * @author Jarek Rencz\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require symbol descriptions\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/symbol-description\"\n        },\n        fixable: null,\n        schema: [],\n        messages: {\n            expected: \"Expected Symbol to have a description.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Reports if node does not conform the rule in case rule is set to\n         * report missing description\n         * @param {ASTNode} node A CallExpression node to check.\n         * @returns {void}\n         */\n        function checkArgument(node) {\n            if (node.arguments.length === 0) {\n                context.report({\n                    node,\n                    messageId: \"expected\"\n                });\n            }\n        }\n\n        return {\n            \"Program:exit\"() {\n                const scope = context.getScope();\n                const variable = astUtils.getVariableByName(scope, \"Symbol\");\n\n                if (variable && variable.defs.length === 0) {\n                    variable.references.forEach(reference => {\n                        const node = reference.identifier;\n\n                        if (astUtils.isCallee(node)) {\n                            checkArgument(node.parent);\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAGAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YAAY;IAElBC,IAAI,EAAE;MACFC,WAAW,EAAE,6BAA6B;MAC1CC,QAAQ,EAAE,cAAc;MACxBC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IACDC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE;MACNC,QAAQ,EAAE;IACd;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IAEZ;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,aAAaA,CAACC,IAAI,EAAE;MACzB,IAAIA,IAAI,CAACC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QAC7BJ,OAAO,CAACK,MAAM,CAAC;UACXH,IAAI;UACJI,SAAS,EAAE;QACf,CAAC,CAAC;MACN;IACJ;IAEA,OAAO;MACH,cAAcC,CAAA,EAAG;QACb,MAAMC,KAAK,GAAGR,OAAO,CAACS,QAAQ,CAAC,CAAC;QAChC,MAAMC,QAAQ,GAAG1B,QAAQ,CAAC2B,iBAAiB,CAACH,KAAK,EAAE,QAAQ,CAAC;QAE5D,IAAIE,QAAQ,IAAIA,QAAQ,CAACE,IAAI,CAACR,MAAM,KAAK,CAAC,EAAE;UACxCM,QAAQ,CAACG,UAAU,CAACC,OAAO,CAACC,SAAS,IAAI;YACrC,MAAMb,IAAI,GAAGa,SAAS,CAACC,UAAU;YAEjC,IAAIhC,QAAQ,CAACiC,QAAQ,CAACf,IAAI,CAAC,EAAE;cACzBD,aAAa,CAACC,IAAI,CAACgB,MAAM,CAAC;YAC9B;UACJ,CAAC,CAAC;QACN;MACJ;IACJ,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}