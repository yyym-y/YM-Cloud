{"ast":null,"code":"/**\n * @fileoverview Disallows or enforces spaces inside of object literals.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing inside braces\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/object-curly-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        arraysInObjects: {\n          type: \"boolean\"\n        },\n        objectsInObjects: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      requireSpaceBefore: \"A space is required before '{{token}}'.\",\n      requireSpaceAfter: \"A space is required after '{{token}}'.\",\n      unexpectedSpaceBefore: \"There should be no space before '{{token}}'.\",\n      unexpectedSpaceAfter: \"There should be no space after '{{token}}'.\"\n    }\n  },\n  create(context) {\n    const spaced = context.options[0] === \"always\",\n      sourceCode = context.getSourceCode();\n\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param {Object} option The option to exclude.\n     * @returns {boolean} Whether or not the property is excluded.\n     */\n    function isOptionSet(option) {\n      return context.options[1] ? context.options[1][option] === !spaced : false;\n    }\n    const options = {\n      spaced,\n      arraysInObjectsException: isOptionSet(\"arraysInObjects\"),\n      objectsInObjectsException: isOptionSet(\"objectsInObjects\")\n    };\n\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoBeginningSpace(node, token) {\n      const nextToken = context.getSourceCode().getTokenAfter(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: nextToken.loc.start\n        },\n        messageId: \"unexpectedSpaceAfter\",\n        data: {\n          token: token.value\n        },\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], nextToken.range[0]]);\n        }\n      });\n    }\n\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportNoEndingSpace(node, token) {\n      const previousToken = context.getSourceCode().getTokenBefore(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: previousToken.loc.end,\n          end: token.loc.start\n        },\n        messageId: \"unexpectedSpaceBefore\",\n        data: {\n          token: token.value\n        },\n        fix(fixer) {\n          return fixer.removeRange([previousToken.range[1], token.range[0]]);\n        }\n      });\n    }\n\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"requireSpaceAfter\",\n        data: {\n          token: token.value\n        },\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n      });\n    }\n\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"requireSpaceBefore\",\n        data: {\n          token: token.value\n        },\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n      });\n    }\n\n    /**\n     * Determines if spacing in curly braces is valid.\n     * @param {ASTNode} node The AST node to check.\n     * @param {Token} first The first token to check (should be the opening brace)\n     * @param {Token} second The second token to check (should be first after the opening brace)\n     * @param {Token} penultimate The penultimate token to check (should be last before closing brace)\n     * @param {Token} last The last token to check (should be closing brace)\n     * @returns {void}\n     */\n    function validateBraceSpacing(node, first, second, penultimate, last) {\n      if (astUtils.isTokenOnSameLine(first, second)) {\n        const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);\n        if (options.spaced && !firstSpaced) {\n          reportRequiredBeginningSpace(node, first);\n        }\n        if (!options.spaced && firstSpaced && second.type !== \"Line\") {\n          reportNoBeginningSpace(node, first);\n        }\n      }\n      if (astUtils.isTokenOnSameLine(penultimate, last)) {\n        const shouldCheckPenultimate = options.arraysInObjectsException && astUtils.isClosingBracketToken(penultimate) || options.objectsInObjectsException && astUtils.isClosingBraceToken(penultimate);\n        const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.range[0]).type;\n        const closingCurlyBraceMustBeSpaced = options.arraysInObjectsException && penultimateType === \"ArrayExpression\" || options.objectsInObjectsException && (penultimateType === \"ObjectExpression\" || penultimateType === \"ObjectPattern\") ? !options.spaced : options.spaced;\n        const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);\n        if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n          reportRequiredEndingSpace(node, last);\n        }\n        if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n          reportNoEndingSpace(node, last);\n        }\n      }\n    }\n\n    /**\n     * Gets '}' token of an object node.\n     *\n     * Because the last token of object patterns might be a type annotation,\n     * this traverses tokens preceded by the last property, then returns the\n     * first '}' token.\n     * @param {ASTNode} node The node to get. This node is an\n     *      ObjectExpression or an ObjectPattern. And this node has one or\n     *      more properties.\n     * @returns {Token} '}' token.\n     */\n    function getClosingBraceOfObject(node) {\n      const lastProperty = node.properties[node.properties.length - 1];\n      return sourceCode.getTokenAfter(lastProperty, astUtils.isClosingBraceToken);\n    }\n\n    /**\n     * Reports a given object node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ObjectExpression or ObjectPattern node to check.\n     * @returns {void}\n     */\n    function checkForObject(node) {\n      if (node.properties.length === 0) {\n        return;\n      }\n      const first = sourceCode.getFirstToken(node),\n        last = getClosingBraceOfObject(node),\n        second = sourceCode.getTokenAfter(first, {\n          includeComments: true\n        }),\n        penultimate = sourceCode.getTokenBefore(last, {\n          includeComments: true\n        });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    }\n\n    /**\n     * Reports a given import node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ImportDeclaration node to check.\n     * @returns {void}\n     */\n    function checkForImport(node) {\n      if (node.specifiers.length === 0) {\n        return;\n      }\n      let firstSpecifier = node.specifiers[0];\n      const lastSpecifier = node.specifiers[node.specifiers.length - 1];\n      if (lastSpecifier.type !== \"ImportSpecifier\") {\n        return;\n      }\n      if (firstSpecifier.type !== \"ImportSpecifier\") {\n        firstSpecifier = node.specifiers[1];\n      }\n      const first = sourceCode.getTokenBefore(firstSpecifier),\n        last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n        second = sourceCode.getTokenAfter(first, {\n          includeComments: true\n        }),\n        penultimate = sourceCode.getTokenBefore(last, {\n          includeComments: true\n        });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    }\n\n    /**\n     * Reports a given export node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ExportNamedDeclaration node to check.\n     * @returns {void}\n     */\n    function checkForExport(node) {\n      if (node.specifiers.length === 0) {\n        return;\n      }\n      const firstSpecifier = node.specifiers[0],\n        lastSpecifier = node.specifiers[node.specifiers.length - 1],\n        first = sourceCode.getTokenBefore(firstSpecifier),\n        last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n        second = sourceCode.getTokenAfter(first, {\n          includeComments: true\n        }),\n        penultimate = sourceCode.getTokenBefore(last, {\n          includeComments: true\n        });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    }\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      // var {x} = y;\n      ObjectPattern: checkForObject,\n      // var y = {x: 'y'}\n      ObjectExpression: checkForObject,\n      // import {y} from 'x';\n      ImportDeclaration: checkForImport,\n      // export {name} from 'yo';\n      ExportNamedDeclaration: checkForExport\n    };\n  }\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","properties","arraysInObjects","objectsInObjects","additionalProperties","messages","requireSpaceBefore","requireSpaceAfter","unexpectedSpaceBefore","unexpectedSpaceAfter","create","context","spaced","options","sourceCode","getSourceCode","isOptionSet","option","arraysInObjectsException","objectsInObjectsException","reportNoBeginningSpace","node","token","nextToken","getTokenAfter","includeComments","report","loc","start","end","messageId","data","value","fix","fixer","removeRange","range","reportNoEndingSpace","previousToken","getTokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","validateBraceSpacing","first","second","penultimate","last","isTokenOnSameLine","firstSpaced","isSpaceBetweenTokens","shouldCheckPenultimate","isClosingBracketToken","isClosingBraceToken","penultimateType","getNodeByRangeIndex","closingCurlyBraceMustBeSpaced","lastSpaced","getClosingBraceOfObject","lastProperty","length","checkForObject","getFirstToken","checkForImport","specifiers","firstSpecifier","lastSpecifier","isNotCommaToken","checkForExport","ObjectPattern","ObjectExpression","ImportDeclaration","ExportNamedDeclaration"],"sources":["D:/Project/YM~Cloud/cloud-front/node_modules/eslint/lib/rules/object-curly-spacing.js"],"sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of object literals.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing inside braces\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/object-curly-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    arraysInObjects: {\n                        type: \"boolean\"\n                    },\n                    objectsInObjects: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            requireSpaceBefore: \"A space is required before '{{token}}'.\",\n            requireSpaceAfter: \"A space is required after '{{token}}'.\",\n            unexpectedSpaceBefore: \"There should be no space before '{{token}}'.\",\n            unexpectedSpaceAfter: \"There should be no space after '{{token}}'.\"\n        }\n    },\n\n    create(context) {\n        const spaced = context.options[0] === \"always\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether an option is set, relative to the spacing option.\n         * If spaced is \"always\", then check whether option is set to false.\n         * If spaced is \"never\", then check whether option is set to true.\n         * @param {Object} option The option to exclude.\n         * @returns {boolean} Whether or not the property is excluded.\n         */\n        function isOptionSet(option) {\n            return context.options[1] ? context.options[1][option] === !spaced : false;\n        }\n\n        const options = {\n            spaced,\n            arraysInObjectsException: isOptionSet(\"arraysInObjects\"),\n            objectsInObjectsException: isOptionSet(\"objectsInObjects\")\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports that there shouldn't be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoBeginningSpace(node, token) {\n            const nextToken = context.getSourceCode().getTokenAfter(token, { includeComments: true });\n\n            context.report({\n                node,\n                loc: { start: token.loc.end, end: nextToken.loc.start },\n                messageId: \"unexpectedSpaceAfter\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there shouldn't be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoEndingSpace(node, token) {\n            const previousToken = context.getSourceCode().getTokenBefore(token, { includeComments: true });\n\n            context.report({\n                node,\n                loc: { start: previousToken.loc.end, end: token.loc.start },\n                messageId: \"unexpectedSpaceBefore\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([previousToken.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"requireSpaceAfter\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"requireSpaceBefore\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Determines if spacing in curly braces is valid.\n         * @param {ASTNode} node The AST node to check.\n         * @param {Token} first The first token to check (should be the opening brace)\n         * @param {Token} second The second token to check (should be first after the opening brace)\n         * @param {Token} penultimate The penultimate token to check (should be last before closing brace)\n         * @param {Token} last The last token to check (should be closing brace)\n         * @returns {void}\n         */\n        function validateBraceSpacing(node, first, second, penultimate, last) {\n            if (astUtils.isTokenOnSameLine(first, second)) {\n                const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);\n\n                if (options.spaced && !firstSpaced) {\n                    reportRequiredBeginningSpace(node, first);\n                }\n                if (!options.spaced && firstSpaced && second.type !== \"Line\") {\n                    reportNoBeginningSpace(node, first);\n                }\n            }\n\n            if (astUtils.isTokenOnSameLine(penultimate, last)) {\n                const shouldCheckPenultimate = (\n                    options.arraysInObjectsException && astUtils.isClosingBracketToken(penultimate) ||\n                    options.objectsInObjectsException && astUtils.isClosingBraceToken(penultimate)\n                );\n                const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.range[0]).type;\n\n                const closingCurlyBraceMustBeSpaced = (\n                    options.arraysInObjectsException && penultimateType === \"ArrayExpression\" ||\n                    options.objectsInObjectsException && (penultimateType === \"ObjectExpression\" || penultimateType === \"ObjectPattern\")\n                ) ? !options.spaced : options.spaced;\n\n                const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);\n\n                if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n                    reportRequiredEndingSpace(node, last);\n                }\n                if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n                    reportNoEndingSpace(node, last);\n                }\n            }\n        }\n\n        /**\n         * Gets '}' token of an object node.\n         *\n         * Because the last token of object patterns might be a type annotation,\n         * this traverses tokens preceded by the last property, then returns the\n         * first '}' token.\n         * @param {ASTNode} node The node to get. This node is an\n         *      ObjectExpression or an ObjectPattern. And this node has one or\n         *      more properties.\n         * @returns {Token} '}' token.\n         */\n        function getClosingBraceOfObject(node) {\n            const lastProperty = node.properties[node.properties.length - 1];\n\n            return sourceCode.getTokenAfter(lastProperty, astUtils.isClosingBraceToken);\n        }\n\n        /**\n         * Reports a given object node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ObjectExpression or ObjectPattern node to check.\n         * @returns {void}\n         */\n        function checkForObject(node) {\n            if (node.properties.length === 0) {\n                return;\n            }\n\n            const first = sourceCode.getFirstToken(node),\n                last = getClosingBraceOfObject(node),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        /**\n         * Reports a given import node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ImportDeclaration node to check.\n         * @returns {void}\n         */\n        function checkForImport(node) {\n            if (node.specifiers.length === 0) {\n                return;\n            }\n\n            let firstSpecifier = node.specifiers[0];\n            const lastSpecifier = node.specifiers[node.specifiers.length - 1];\n\n            if (lastSpecifier.type !== \"ImportSpecifier\") {\n                return;\n            }\n            if (firstSpecifier.type !== \"ImportSpecifier\") {\n                firstSpecifier = node.specifiers[1];\n            }\n\n            const first = sourceCode.getTokenBefore(firstSpecifier),\n                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        /**\n         * Reports a given export node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ExportNamedDeclaration node to check.\n         * @returns {void}\n         */\n        function checkForExport(node) {\n            if (node.specifiers.length === 0) {\n                return;\n            }\n\n            const firstSpecifier = node.specifiers[0],\n                lastSpecifier = node.specifiers[node.specifiers.length - 1],\n                first = sourceCode.getTokenBefore(firstSpecifier),\n                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            // var {x} = y;\n            ObjectPattern: checkForObject,\n\n            // var y = {x: 'y'}\n            ObjectExpression: checkForObject,\n\n            // import {y} from 'x';\n            ImportDeclaration: checkForImport,\n\n            // export {name} from 'yo';\n            ExportNamedDeclaration: checkForExport\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;;AAE7C;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QAAQ;IAEdC,IAAI,EAAE;MACFC,WAAW,EAAE,0CAA0C;MACvDC,QAAQ,EAAE,kBAAkB;MAC5BC,WAAW,EAAE,KAAK;MAClBC,GAAG,EAAE;IACT,CAAC;IAEDC,OAAO,EAAE,YAAY;IAErBC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,QAAQ,EAAE,OAAO;IAC5B,CAAC,EACD;MACIR,IAAI,EAAE,QAAQ;MACdS,UAAU,EAAE;QACRC,eAAe,EAAE;UACbV,IAAI,EAAE;QACV,CAAC;QACDW,gBAAgB,EAAE;UACdX,IAAI,EAAE;QACV;MACJ,CAAC;MACDY,oBAAoB,EAAE;IAC1B,CAAC,CACJ;IAEDC,QAAQ,EAAE;MACNC,kBAAkB,EAAE,yCAAyC;MAC7DC,iBAAiB,EAAE,wCAAwC;MAC3DC,qBAAqB,EAAE,8CAA8C;MACrEC,oBAAoB,EAAE;IAC1B;EACJ,CAAC;EAEDC,MAAMA,CAACC,OAAO,EAAE;IACZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ;MAC1CC,UAAU,GAAGH,OAAO,CAACI,aAAa,CAAC,CAAC;;IAExC;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,SAASC,WAAWA,CAACC,MAAM,EAAE;MACzB,OAAON,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,GAAGF,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,CAACI,MAAM,CAAC,KAAK,CAACL,MAAM,GAAG,KAAK;IAC9E;IAEA,MAAMC,OAAO,GAAG;MACZD,MAAM;MACNM,wBAAwB,EAAEF,WAAW,CAAC,iBAAiB,CAAC;MACxDG,yBAAyB,EAAEH,WAAW,CAAC,kBAAkB;IAC7D,CAAC;;IAED;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASI,sBAAsBA,CAACC,IAAI,EAAEC,KAAK,EAAE;MACzC,MAAMC,SAAS,GAAGZ,OAAO,CAACI,aAAa,CAAC,CAAC,CAACS,aAAa,CAACF,KAAK,EAAE;QAAEG,eAAe,EAAE;MAAK,CAAC,CAAC;MAEzFd,OAAO,CAACe,MAAM,CAAC;QACXL,IAAI;QACJM,GAAG,EAAE;UAAEC,KAAK,EAAEN,KAAK,CAACK,GAAG,CAACE,GAAG;UAAEA,GAAG,EAAEN,SAAS,CAACI,GAAG,CAACC;QAAM,CAAC;QACvDE,SAAS,EAAE,sBAAsB;QACjCC,IAAI,EAAE;UACFT,KAAK,EAAEA,KAAK,CAACU;QACjB,CAAC;QACDC,GAAGA,CAACC,KAAK,EAAE;UACP,OAAOA,KAAK,CAACC,WAAW,CAAC,CAACb,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC,EAAEb,SAAS,CAACa,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAClE;MACJ,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,mBAAmBA,CAAChB,IAAI,EAAEC,KAAK,EAAE;MACtC,MAAMgB,aAAa,GAAG3B,OAAO,CAACI,aAAa,CAAC,CAAC,CAACwB,cAAc,CAACjB,KAAK,EAAE;QAAEG,eAAe,EAAE;MAAK,CAAC,CAAC;MAE9Fd,OAAO,CAACe,MAAM,CAAC;QACXL,IAAI;QACJM,GAAG,EAAE;UAAEC,KAAK,EAAEU,aAAa,CAACX,GAAG,CAACE,GAAG;UAAEA,GAAG,EAAEP,KAAK,CAACK,GAAG,CAACC;QAAM,CAAC;QAC3DE,SAAS,EAAE,uBAAuB;QAClCC,IAAI,EAAE;UACFT,KAAK,EAAEA,KAAK,CAACU;QACjB,CAAC;QACDC,GAAGA,CAACC,KAAK,EAAE;UACP,OAAOA,KAAK,CAACC,WAAW,CAAC,CAACG,aAAa,CAACF,KAAK,CAAC,CAAC,CAAC,EAAEd,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE;MACJ,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASI,4BAA4BA,CAACnB,IAAI,EAAEC,KAAK,EAAE;MAC/CX,OAAO,CAACe,MAAM,CAAC;QACXL,IAAI;QACJM,GAAG,EAAEL,KAAK,CAACK,GAAG;QACdG,SAAS,EAAE,mBAAmB;QAC9BC,IAAI,EAAE;UACFT,KAAK,EAAEA,KAAK,CAACU;QACjB,CAAC;QACDC,GAAGA,CAACC,KAAK,EAAE;UACP,OAAOA,KAAK,CAACO,eAAe,CAACnB,KAAK,EAAE,GAAG,CAAC;QAC5C;MACJ,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;AACA;IACQ,SAASoB,yBAAyBA,CAACrB,IAAI,EAAEC,KAAK,EAAE;MAC5CX,OAAO,CAACe,MAAM,CAAC;QACXL,IAAI;QACJM,GAAG,EAAEL,KAAK,CAACK,GAAG;QACdG,SAAS,EAAE,oBAAoB;QAC/BC,IAAI,EAAE;UACFT,KAAK,EAAEA,KAAK,CAACU;QACjB,CAAC;QACDC,GAAGA,CAACC,KAAK,EAAE;UACP,OAAOA,KAAK,CAACS,gBAAgB,CAACrB,KAAK,EAAE,GAAG,CAAC;QAC7C;MACJ,CAAC,CAAC;IACN;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASsB,oBAAoBA,CAACvB,IAAI,EAAEwB,KAAK,EAAEC,MAAM,EAAEC,WAAW,EAAEC,IAAI,EAAE;MAClE,IAAI7D,QAAQ,CAAC8D,iBAAiB,CAACJ,KAAK,EAAEC,MAAM,CAAC,EAAE;QAC3C,MAAMI,WAAW,GAAGpC,UAAU,CAACqC,oBAAoB,CAACN,KAAK,EAAEC,MAAM,CAAC;QAElE,IAAIjC,OAAO,CAACD,MAAM,IAAI,CAACsC,WAAW,EAAE;UAChCV,4BAA4B,CAACnB,IAAI,EAAEwB,KAAK,CAAC;QAC7C;QACA,IAAI,CAAChC,OAAO,CAACD,MAAM,IAAIsC,WAAW,IAAIJ,MAAM,CAACtD,IAAI,KAAK,MAAM,EAAE;UAC1D4B,sBAAsB,CAACC,IAAI,EAAEwB,KAAK,CAAC;QACvC;MACJ;MAEA,IAAI1D,QAAQ,CAAC8D,iBAAiB,CAACF,WAAW,EAAEC,IAAI,CAAC,EAAE;QAC/C,MAAMI,sBAAsB,GACxBvC,OAAO,CAACK,wBAAwB,IAAI/B,QAAQ,CAACkE,qBAAqB,CAACN,WAAW,CAAC,IAC/ElC,OAAO,CAACM,yBAAyB,IAAIhC,QAAQ,CAACmE,mBAAmB,CAACP,WAAW,CAChF;QACD,MAAMQ,eAAe,GAAGH,sBAAsB,IAAItC,UAAU,CAAC0C,mBAAmB,CAACT,WAAW,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC5C,IAAI;QAE3G,MAAMiE,6BAA6B,GAC/B5C,OAAO,CAACK,wBAAwB,IAAIqC,eAAe,KAAK,iBAAiB,IACzE1C,OAAO,CAACM,yBAAyB,KAAKoC,eAAe,KAAK,kBAAkB,IAAIA,eAAe,KAAK,eAAe,CAAC,GACpH,CAAC1C,OAAO,CAACD,MAAM,GAAGC,OAAO,CAACD,MAAM;QAEpC,MAAM8C,UAAU,GAAG5C,UAAU,CAACqC,oBAAoB,CAACJ,WAAW,EAAEC,IAAI,CAAC;QAErE,IAAIS,6BAA6B,IAAI,CAACC,UAAU,EAAE;UAC9ChB,yBAAyB,CAACrB,IAAI,EAAE2B,IAAI,CAAC;QACzC;QACA,IAAI,CAACS,6BAA6B,IAAIC,UAAU,EAAE;UAC9CrB,mBAAmB,CAAChB,IAAI,EAAE2B,IAAI,CAAC;QACnC;MACJ;IACJ;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,SAASW,uBAAuBA,CAACtC,IAAI,EAAE;MACnC,MAAMuC,YAAY,GAAGvC,IAAI,CAACpB,UAAU,CAACoB,IAAI,CAACpB,UAAU,CAAC4D,MAAM,GAAG,CAAC,CAAC;MAEhE,OAAO/C,UAAU,CAACU,aAAa,CAACoC,YAAY,EAAEzE,QAAQ,CAACmE,mBAAmB,CAAC;IAC/E;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASQ,cAAcA,CAACzC,IAAI,EAAE;MAC1B,IAAIA,IAAI,CAACpB,UAAU,CAAC4D,MAAM,KAAK,CAAC,EAAE;QAC9B;MACJ;MAEA,MAAMhB,KAAK,GAAG/B,UAAU,CAACiD,aAAa,CAAC1C,IAAI,CAAC;QACxC2B,IAAI,GAAGW,uBAAuB,CAACtC,IAAI,CAAC;QACpCyB,MAAM,GAAGhC,UAAU,CAACU,aAAa,CAACqB,KAAK,EAAE;UAAEpB,eAAe,EAAE;QAAK,CAAC,CAAC;QACnEsB,WAAW,GAAGjC,UAAU,CAACyB,cAAc,CAACS,IAAI,EAAE;UAAEvB,eAAe,EAAE;QAAK,CAAC,CAAC;MAE5EmB,oBAAoB,CAACvB,IAAI,EAAEwB,KAAK,EAAEC,MAAM,EAAEC,WAAW,EAAEC,IAAI,CAAC;IAChE;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASgB,cAAcA,CAAC3C,IAAI,EAAE;MAC1B,IAAIA,IAAI,CAAC4C,UAAU,CAACJ,MAAM,KAAK,CAAC,EAAE;QAC9B;MACJ;MAEA,IAAIK,cAAc,GAAG7C,IAAI,CAAC4C,UAAU,CAAC,CAAC,CAAC;MACvC,MAAME,aAAa,GAAG9C,IAAI,CAAC4C,UAAU,CAAC5C,IAAI,CAAC4C,UAAU,CAACJ,MAAM,GAAG,CAAC,CAAC;MAEjE,IAAIM,aAAa,CAAC3E,IAAI,KAAK,iBAAiB,EAAE;QAC1C;MACJ;MACA,IAAI0E,cAAc,CAAC1E,IAAI,KAAK,iBAAiB,EAAE;QAC3C0E,cAAc,GAAG7C,IAAI,CAAC4C,UAAU,CAAC,CAAC,CAAC;MACvC;MAEA,MAAMpB,KAAK,GAAG/B,UAAU,CAACyB,cAAc,CAAC2B,cAAc,CAAC;QACnDlB,IAAI,GAAGlC,UAAU,CAACU,aAAa,CAAC2C,aAAa,EAAEhF,QAAQ,CAACiF,eAAe,CAAC;QACxEtB,MAAM,GAAGhC,UAAU,CAACU,aAAa,CAACqB,KAAK,EAAE;UAAEpB,eAAe,EAAE;QAAK,CAAC,CAAC;QACnEsB,WAAW,GAAGjC,UAAU,CAACyB,cAAc,CAACS,IAAI,EAAE;UAAEvB,eAAe,EAAE;QAAK,CAAC,CAAC;MAE5EmB,oBAAoB,CAACvB,IAAI,EAAEwB,KAAK,EAAEC,MAAM,EAAEC,WAAW,EAAEC,IAAI,CAAC;IAChE;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASqB,cAAcA,CAAChD,IAAI,EAAE;MAC1B,IAAIA,IAAI,CAAC4C,UAAU,CAACJ,MAAM,KAAK,CAAC,EAAE;QAC9B;MACJ;MAEA,MAAMK,cAAc,GAAG7C,IAAI,CAAC4C,UAAU,CAAC,CAAC,CAAC;QACrCE,aAAa,GAAG9C,IAAI,CAAC4C,UAAU,CAAC5C,IAAI,CAAC4C,UAAU,CAACJ,MAAM,GAAG,CAAC,CAAC;QAC3DhB,KAAK,GAAG/B,UAAU,CAACyB,cAAc,CAAC2B,cAAc,CAAC;QACjDlB,IAAI,GAAGlC,UAAU,CAACU,aAAa,CAAC2C,aAAa,EAAEhF,QAAQ,CAACiF,eAAe,CAAC;QACxEtB,MAAM,GAAGhC,UAAU,CAACU,aAAa,CAACqB,KAAK,EAAE;UAAEpB,eAAe,EAAE;QAAK,CAAC,CAAC;QACnEsB,WAAW,GAAGjC,UAAU,CAACyB,cAAc,CAACS,IAAI,EAAE;UAAEvB,eAAe,EAAE;QAAK,CAAC,CAAC;MAE5EmB,oBAAoB,CAACvB,IAAI,EAAEwB,KAAK,EAAEC,MAAM,EAAEC,WAAW,EAAEC,IAAI,CAAC;IAChE;;IAEA;IACA;IACA;;IAEA,OAAO;MAEH;MACAsB,aAAa,EAAER,cAAc;MAE7B;MACAS,gBAAgB,EAAET,cAAc;MAEhC;MACAU,iBAAiB,EAAER,cAAc;MAEjC;MACAS,sBAAsB,EAAEJ;IAC5B,CAAC;EAEL;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}